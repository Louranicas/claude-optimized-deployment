version: "1.0.0"
environment: production
dry_run: false

# Infrastructure configuration
infrastructure:
  container_runtime: Docker
  orchestrator: DockerCompose
  network:
    mode: Bridge
    cidr: "172.20.0.0/16"
    dns_servers:
      - "8.8.8.8"
      - "1.1.1.1"
    port_range:
      start: 30000
      end: 40000
  storage:
    data_dir: "/var/lib/deploy-code"
    log_dir: "/var/log/deploy-code"
    temp_dir: "/tmp/deploy-code"
    backup_dir: "/var/backups/deploy-code"

# Security configuration
security:
  tls_enabled: true
  cert_path: "/etc/deploy-code/certs/server.crt"
  key_path: "/etc/deploy-code/certs/server.key"
  auth:
    enabled: true
    method: JWT
    token_expiry_seconds: 3600
  rbac:
    enabled: true
    roles:
      - name: admin
        permissions: ["*"]
      - name: operator
        permissions: ["deploy", "status", "restart"]
      - name: viewer
        permissions: ["status", "health"]

# Deployment settings
deployment:
  strategy: Sequential  # Sequential for dependencies, then Parallel
  max_parallel: 10
  health_check_interval: 30
  timeout_seconds: 300
  rollback_on_failure: true

# Monitoring configuration
monitoring:
  enabled: true
  prometheus:
    endpoint: "http://localhost:9090"
    scrape_interval: 15
    retention_days: 30
  grafana:
    endpoint: "http://localhost:3000"
    dashboards:
      - "code-platform-overview"
      - "service-health"
      - "resource-usage"
  alerting:
    enabled: true
    webhook_url: "http://localhost:9093/api/v1/alerts"
    rules:
      - name: service_down
        condition: "up == 0"
        severity: Critical
      - name: high_cpu
        condition: "cpu_usage > 90"
        severity: Warning
      - name: high_memory
        condition: "memory_usage > 85"
        severity: Warning

# Service definitions
services:
  # Phase 1: Core Infrastructure
  postgresql:
    enabled: true
    replicas: 1
    command: "docker"
    args: ["run", "--name", "code-postgres", "-d", 
           "-p", "5432:5432",
           "-e", "POSTGRES_PASSWORD=codeplatform",
           "-e", "POSTGRES_DB=code_platform",
           "-v", "postgres_data:/var/lib/postgresql/data",
           "postgres:16-alpine"]
    dependencies: []
    resources:
      cpu_cores: 2.0
      memory_mb: 4096
      storage_gb: 50
      gpu_count: 0
    health_check:
      command: ["pg_isready", "-U", "postgres"]
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 60
    ports:
      - container_port: 5432
        host_port: 5432
        protocol: "tcp"

  redis:
    enabled: true
    replicas: 1
    command: "docker"
    args: ["run", "--name", "code-redis", "-d",
           "-p", "6379:6379",
           "redis:7-alpine", "redis-server",
           "--appendonly", "yes",
           "--maxmemory", "2gb",
           "--maxmemory-policy", "allkeys-lru"]
    dependencies: []
    resources:
      cpu_cores: 1.0
      memory_mb: 2048
      storage_gb: 10
      gpu_count: 0
    health_check:
      command: ["redis-cli", "ping"]
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 30
    ports:
      - container_port: 6379
        host_port: 6379
        protocol: "tcp"

  # Phase 2: Authentication & Security
  auth_service:
    enabled: true
    replicas: 2
    command: "python"
    args: ["-m", "uvicorn", "auth_service:app",
           "--host", "0.0.0.0", "--port", "8000"]
    working_dir: "/app/services/auth"
    dependencies: ["postgresql", "redis"]
    env:
      DATABASE_URL: "postgresql://postgres:codeplatform@localhost/code_platform"
      REDIS_URL: "redis://localhost:6379"
      JWT_SECRET: "${JWT_SECRET}"
      ENVIRONMENT: "production"
    resources:
      cpu_cores: 1.0
      memory_mb: 1024
      storage_gb: 1
      gpu_count: 0
    health_check:
      endpoint: "http://localhost:8000/health"
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 45
    ports:
      - container_port: 8000
        host_port: 8000
        protocol: "tcp"

  # Phase 3: MCP Servers
  mcp_filesystem:
    enabled: true
    replicas: 2
    command: "npx"
    args: ["@modelcontextprotocol/server-filesystem",
           "--port", "3001"]
    dependencies: ["auth_service"]
    env:
      MCP_AUTH_TOKEN: "${MCP_AUTH_TOKEN}"
    resources:
      cpu_cores: 0.5
      memory_mb: 512
      storage_gb: 10
      gpu_count: 0
    health_check:
      endpoint: "http://localhost:3001/health"
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 30
    ports:
      - container_port: 3001
        host_port: 3001
        protocol: "tcp"

  mcp_github:
    enabled: true
    replicas: 1
    command: "npx"
    args: ["@modelcontextprotocol/server-github",
           "--port", "3002"]
    dependencies: ["auth_service"]
    env:
      GITHUB_TOKEN: "${GITHUB_TOKEN}"
      MCP_AUTH_TOKEN: "${MCP_AUTH_TOKEN}"
    resources:
      cpu_cores: 0.5
      memory_mb: 512
      storage_gb: 1
      gpu_count: 0
    health_check:
      endpoint: "http://localhost:3002/health"
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 30
    ports:
      - container_port: 3002
        host_port: 3002
        protocol: "tcp"

  mcp_memory:
    enabled: true
    replicas: 2
    command: "npx"
    args: ["@modelcontextprotocol/server-memory",
           "--port", "3003"]
    dependencies: ["auth_service", "redis"]
    env:
      REDIS_URL: "redis://localhost:6379"
      MCP_AUTH_TOKEN: "${MCP_AUTH_TOKEN}"
    resources:
      cpu_cores: 1.0
      memory_mb: 2048
      storage_gb: 5
      gpu_count: 0
    health_check:
      endpoint: "http://localhost:3003/health"
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 30
    ports:
      - container_port: 3003
        host_port: 3003
        protocol: "tcp"

  mcp_bash_god:
    enabled: true
    replicas: 1
    command: "python"
    args: ["-m", "mcp_servers.bash_god",
           "--port", "3010"]
    working_dir: "/app/mcp_servers"
    dependencies: ["auth_service", "mcp_memory"]
    env:
      MCP_AUTH_TOKEN: "${MCP_AUTH_TOKEN}"
      BASH_GOD_MODE: "restricted"
      MAX_CONCURRENT_COMMANDS: "10"
    resources:
      cpu_cores: 2.0
      memory_mb: 2048
      storage_gb: 10
      gpu_count: 0
    health_check:
      endpoint: "http://localhost:3010/health"
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 45
    ports:
      - container_port: 3010
        host_port: 3010
        protocol: "tcp"

  # Phase 4: AI Services
  circle_of_experts:
    enabled: true
    replicas: 3
    command: "python"
    args: ["-m", "uvicorn", "circle_of_experts:app",
           "--host", "0.0.0.0", "--port", "8080"]
    working_dir: "/app/services/ai"
    dependencies: ["auth_service", "redis", "mcp_memory"]
    env:
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
      GOOGLE_API_KEY: "${GOOGLE_API_KEY}"
      REDIS_URL: "redis://localhost:6379"
      DATABASE_URL: "postgresql://postgres:codeplatform@localhost/code_platform"
    resources:
      cpu_cores: 4.0
      memory_mb: 8192
      storage_gb: 20
      gpu_count: 1
    health_check:
      endpoint: "http://localhost:8080/health"
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 60
    ports:
      - container_port: 8080
        host_port: 8080
        protocol: "tcp"

  # Phase 5: Code Base Crawler
  code_base_crawler:
    enabled: true
    replicas: 2
    command: "/app/target/release/cbc_server"
    args: ["--port", "8090", "--htm-storage", "/data/htm"]
    working_dir: "/app/cbc"
    dependencies: ["postgresql", "mcp_filesystem"]
    env:
      DATABASE_URL: "postgresql://postgres:codeplatform@localhost/code_platform"
      HTM_STORAGE_PATH: "/data/htm"
      RUST_LOG: "info"
    resources:
      cpu_cores: 3.0
      memory_mb: 4096
      storage_gb: 50
      gpu_count: 0
    health_check:
      endpoint: "http://localhost:8090/health"
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 45
    ports:
      - container_port: 8090
        host_port: 8090
        protocol: "tcp"
    volumes:
      - name: htm_storage
        mount_path: "/data/htm"
        read_only: false

  # Phase 6: API Gateway
  api_gateway:
    enabled: true
    replicas: 2
    command: "nginx"
    args: ["-g", "daemon off;"]
    dependencies: ["auth_service", "circle_of_experts", "code_base_crawler"]
    resources:
      cpu_cores: 1.0
      memory_mb: 512
      storage_gb: 1
      gpu_count: 0
    health_check:
      endpoint: "http://localhost:80/health"
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 30
    ports:
      - container_port: 80
        host_port: 80
        protocol: "tcp"
      - container_port: 443
        host_port: 443
        protocol: "tcp"

  # Phase 7: Monitoring Stack
  prometheus:
    enabled: true
    replicas: 1
    command: "docker"
    args: ["run", "--name", "code-prometheus", "-d",
           "-p", "9090:9090",
           "-v", "prometheus_data:/prometheus",
           "-v", "/app/configs/prometheus.yml:/etc/prometheus/prometheus.yml",
           "prom/prometheus:latest"]
    dependencies: []
    resources:
      cpu_cores: 1.0
      memory_mb: 2048
      storage_gb: 20
      gpu_count: 0
    health_check:
      endpoint: "http://localhost:9090/-/healthy"
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 45
    ports:
      - container_port: 9090
        host_port: 9090
        protocol: "tcp"

  grafana:
    enabled: true
    replicas: 1
    command: "docker"
    args: ["run", "--name", "code-grafana", "-d",
           "-p", "3000:3000",
           "-e", "GF_SECURITY_ADMIN_PASSWORD=codeplatform",
           "-v", "grafana_data:/var/lib/grafana",
           "grafana/grafana:latest"]
    dependencies: ["prometheus"]
    resources:
      cpu_cores: 0.5
      memory_mb: 512
      storage_gb: 5
      gpu_count: 0
    health_check:
      endpoint: "http://localhost:3000/api/health"
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 60
    ports:
      - container_port: 3000
        host_port: 3000
        protocol: "tcp"

  jaeger:
    enabled: true
    replicas: 1
    command: "docker"
    args: ["run", "--name", "code-jaeger", "-d",
           "-e", "COLLECTOR_ZIPKIN_HOST_PORT=:9411",
           "-p", "16686:16686",
           "-p", "14268:14268",
           "jaegertracing/all-in-one:latest"]
    dependencies: []
    resources:
      cpu_cores: 1.0
      memory_mb: 1024
      storage_gb: 10
      gpu_count: 0
    health_check:
      endpoint: "http://localhost:16686/"
      interval_seconds: 30
      timeout_seconds: 10
      retries: 3
      start_period_seconds: 45
    ports:
      - container_port: 16686
        host_port: 16686
        protocol: "tcp"
      - container_port: 14268
        host_port: 14268
        protocol: "tcp"