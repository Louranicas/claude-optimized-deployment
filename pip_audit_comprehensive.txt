Found 4 known vulnerabilities in 3 packages and fixed 4 vulnerabilities in 3 packages
Name         Version ID                  Fix Versions Applied Fix                                           Description
------------ ------- ------------------- ------------ ----------------------------------------------------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
aiohttp      3.10.10 GHSA-8495-4g3g-x7pr 3.10.11      Successfully upgraded aiohttp (3.10.10 => 3.10.11)    ### Summary The Python parser parses newlines in chunk extensions incorrectly which can lead to request smuggling vulnerabilities under certain conditions.  ### Impact If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or `AIOHTTP_NO_EXTENSIONS` is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections.  -----  Patch: https://github.com/aio-libs/aiohttp/commit/259edc369075de63e6f3a4eaade058c62af0df71
aiohttp      3.10.10 GHSA-27mf-ghqm-j3j8 3.10.11      Successfully upgraded aiohttp (3.10.10 => 3.10.11)    ### Summary  A memory leak can occur when a request produces a `MatchInfoError`. This was caused by adding an entry to a cache on each request, due to the building of each `MatchInfoError` producing a unique cache entry.  ### Impact  If the user is making use of any middlewares with `aiohttp.web` then it is advisable to upgrade immediately.  An attacker may be able to exhaust the memory resources of a server by sending a substantial number (100,000s to millions) of such requests.  -----  Patch: https://github.com/aio-libs/aiohttp/commit/bc15db61615079d1b6327ba42c682f758fa96936
cryptography 44.0.0  GHSA-79v4-65xg-pq4g 44.0.1       Successfully upgraded cryptography (44.0.0 => 44.0.1) pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 42.0.0-44.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20250211.txt.  If you are building cryptography source ("sdist") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.
pyjwt        2.10.0  GHSA-75c5-xw7c-p5pm 2.10.1       Successfully upgraded pyjwt (2.10.0 => 2.10.1)        ### Summary The wrong string if check is run for `iss` checking, resulting in `"acb"` being accepted for `"_abc_"`.  ### Details This is a bug introduced in version [2.10.0](https://github.com/jpadilla/pyjwt/commit/1570e708672aa9036bc772476beae8bfa48f4131#diff-6893ad4a1c5a36b8af3028db8c8bc3b62418149843fc382faf901eaab008e380R366): checking the "iss" claim changed from `isinstance(issuer, list)` to `isinstance(issuer, Sequence)`.  ```diff -        if isinstance(issuer, list): +        if isinstance(issuer, Sequence):             if payload["iss"] not in issuer:                 raise InvalidIssuerError("Invalid issuer")         else: ```  Since str is a Sequnce, but not a list, `in` is also used for string comparison. This results in `if "abc" not in "__abcd__":` being checked instead of `if "abc" != "__abc__":`. ### PoC Check out the unit tests added here: https://github.com/jpadilla/pyjwt-ghsa-75c5-xw7c-p5pm ```python         issuer = "urn:expected"          payload = {"iss": "urn:"}          token = jwt.encode(payload, "secret")          # decode() succeeds, even though `"urn:" != "urn:expected". No exception is raised.         with pytest.raises(InvalidIssuerError):             jwt.decode(token, "secret", issuer=issuer, algorithms=["HS256"]) ```   ### Impact  I would say the real world impact is not that high, seeing as the signature still has to match. We should still fix it.
Name  Skip Reason
----- ------------------------------------------------------------------------
torch Dependency not found on PyPI and could not be audited: torch (2.7.1+cpu)
