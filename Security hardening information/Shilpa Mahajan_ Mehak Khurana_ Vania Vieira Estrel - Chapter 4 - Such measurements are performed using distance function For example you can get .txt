# Security Chapter Extract
Book: Shilpa Mahajan_ Mehak Khurana_ Vania Vieira Estrela - Applying Artificial Intelligence in Cybersecurity Analytics and Cyber Threat Detection (2024, WILEY) - libgen.li
Chapter: 4 - Such measurements are performed using distance function. For example, you can get the information of a person through his friends and colleagues. However, this algorithm is very expensive to implement.
Random forest: RF belongs to the category of supervised learning algorithm which is built upon DT algorithms. It is used for solving both classification and regression real‐life problems. This algorithm contains a forest of DTs, as shown in Figure 2.5. The forest which is produced by it is making use of bagging or bootstrapping techniques to improve the accuracy of ML algorithms. RF algorithm improves the problem of overfitting of datasets and helps to improve the precision value [21].
Security Relevance Score: 4
Word Count: 729
Extracted: 2025-06-13 23:40:31

---

Such measurements are performed using distance function. For example, you can get the information of a person through his friends and colleagues. However, this algorithm is very expensive to implement.
Random forest: RF belongs to the category of supervised learning algorithm which is built upon DT algorithms. It is used for solving both classification and regression real‐life problems. This algorithm contains a forest of DTs, as shown in Figure 2.5. The forest which is produced by it is making use of bagging or bootstrapping techniques to improve the accuracy of ML algorithms. RF algorithm improves the problem of overfitting of datasets and helps to improve the precision value [21].



Figure 2.5 Random forest learning algorithm.





2.5 Experimental Setup
The experiments were performed on HP Laptop with Windows 10 Operating System. Jupyter notebook for python with libraries like Scikit learn, NumPy, Pandas, Matplotlib, and other python libraries were used for performing experiments. Five different classifiers, namely LR, NB, KNN, DT, and RF, were executed. The data was imbalanced, so before executing these ML classifiers, the data was prepared to be balanced using z‐score standardization. Each ML algorithm was trained on using 75% of the dataset; however, to assess the effectiveness of each algorithm, 25% of the data was used for performing testing of the model. The function code for each classifier is given below:
def DT_model():
     dt_class = DecisionTreeClassifier()
     return dt_class.fit(x_train, np.ravel(y_train))
def KNN_model():
     knn_class = KNeighborsClassifier(n_neighbors=5)
     return knn_class.fit(x_train, np.ravel(y_train))
def LR_model():
     lr_class = LogisticRegression(solver='lbfgs', max_iter=1000)
     return lr_class.fit(x_train, np.ravel(y_train))
def RF_model():
     rf_class = RandomForestClassifier()
     return rf_class.fit(x_train, np.ravel(y_train))
def NB_model():
     nb_class = GaussianNB()
     return nb_class.fit(X_train, np.ravel(y_train))


2.5.1 Evaluation Metrics
Each algorithm is evaluated based on four evaluation metrics namely Accuracy, Precision, Recall, and F1‐score. All these metrics are computed using confusion matrix (Table 2.1).
The definition of each metrics is given below:

Accuracy: It represents the proportion of correct predictions to the entire data. Accuracy can be computed as given in Eq. (2.1).
(2.1)  


Recall: It represents the proportion of all positive cases which are correctly categorized as positive by model to the total number of positive cases. Recall can be computed as given in Eq. (2.2).
(2.2)  


Precision: It represents the proportion of correctly categorized as positive to the total number of categorized positive cases.
F1‐score: This is the relationship between precision and recall. Higher value of F1‐score shows the model is more accurate and robust.



Table 2.1 Confusion matrix.





Forecasted results 

+ve
−ve  


True
+ve
TP
FN 

−ve
FP
TN   




2.6 Results and Discussions
This section discusses the results in detail for one of the IoT devices (Philips B120N10 Baby Monitor). Figure 2.6 illustrates the classification matrix generated by each classifier.
From Figure 2.7, it can be observed that RF classifier performed best among all classifiers. After RF, DT gives performance at second position for IoT device Philips B120N10 Baby Monitor followed by KNN. There is a slight difference in the performance of KNN and LR as compared to the performance of RF and DT. However, among all five classifiers, NB classifier performed least accurately. From Figure 2.7, it can also be noted that the implemented model provides a significantly high attack detection rate, around 99% in most scenarios. Moreover, in many cases, it gives 100% detection rate with RF classifier. All these classifiers except NB provide a very high precision as well as F1‐score.


Figure 2.6 Confusion matrix (a) logistic regression, (b) KNN, (c) decision tree, (d) random forest, and (e) Naïve Bayes.




Figure 2.7 Performance comparison among different classifiers.




2.7 Conclusion and Future Work
The IoT has the capacity for universal transformation as it has made it possible to share and store the information from anywhere on the network. It makes human lives comfortable and fast with the usage of intelligent devices. However, these facilities raise the security concerns as well. This study discussed the botnet attacks, their architecture, and the literature review presented on botnet attacks in detail. This work focused on the use of ML algorithms for analysis and detection of botnet attacks. Five ML algorithms were implemented for detection of IoT botnet attacks. Results have proven that RF performed better among all five classifiers. In the future, the study will be extended with deep learning techniques.


References

1 Raheja, S. and Kasturia, S. (2022). Analysis of machine learning techniques for spam detection. In: Applications of Machine Learning in Big‐Data Analytics and Cloud Computing, 43–
