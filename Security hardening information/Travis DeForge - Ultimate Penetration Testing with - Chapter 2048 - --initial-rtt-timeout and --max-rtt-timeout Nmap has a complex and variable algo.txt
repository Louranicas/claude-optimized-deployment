# Security Chapter Extract
Book: Travis DeForge - Ultimate Penetration Testing with Nmap_ Master Cybersecurity Assessments for Network Security, Monitoring, and Scanning Using N (2024, Orange Education Pvt Ltd, AVA™) - libgen.li
Chapter: 2048 - --initial-rtt-timeout and --max-rtt-timeout: Nmap has a complex and variable algorithm for determining the time in which it will await a probe response. The variance is based on several factors, including network latency and in particularly slow networks, this can naturally increase significantly. Specifying a low initial and maximum rtt timeout can cut scan times by a substantial margin. However, there are drawbacks; if you specify settings that are too low, the increase in probes timing out will increase the scan time.
The time specified is measured in milliseconds, so the full flags would look like --initial-rtt-timeout 300ms and –-max-rtt-timeout 1000ms. As a general rule of thumb, keep your rtt-timeout range between 250 and 1000 ms for the best results.
 Specifying a moderately aggressive rtt-timeout value works phenomenally well for large scale ping sweeps as long as the timeout isn’t so low that the network latency is causing the packets to timeout.
 --max-retries: The default behavior of Nmap is to retry a port scan 10 times if it does not receive a response on that port’s status from the host. This is because a lack of response could indicate that the port is being filtered, or simply that the response was lost; so, in an effort of accuracy, Nmap tries 10 times. In most cases, Nmap will not need 10 tries to get the status of a port. In fact, most responses are returned in just one or two tries. However, on networks with a lot of latency or hosts that are configured with rate limiting, it can be beneficial to reduce the maximum number of retries down to 5 or 3. While there is an inherent risk of losing some information, it is preferable to allow the host timeout to expire and lose all information.
This is a really useful flag that can be used for both increasing the speed of scans and also adding a degree of obfuscation. While, in this context, we are discussing its capacity to increase the scan speed; in Chapter 7: Advanced Obfuscation and Firewall Evasion Techniques, we will explore the same --max-retries flag from a completely different perspective.
 --host-timeout: Sometimes individual hosts take an extraordinarily long time to scan. This can be caused by a number of factors such as rate limiting or firewalls, and in extreme cases, 1% of the hosts on your target list can take more than 20% of the time of the entire scan. To mitigate this issue, you can specify a host timeout value in minutes, which is the maximum amount of time Nmap will attempt to gather all information before moving on to another host. If Nmap hits the host timeout limit and moves on, you will lose all information on that host. For this reason, do not set an unreasonably low –-host-timeout, as you will likely miss out on a significant amount of important information. This command is most effective when you are running a scan that will take a very long time (perhaps overnight) and you want to make sure that what should take 8 hours to run doesn’t get delayed to 12 hours because of a handful of hosts.
 --defeat-rst-ratelimit: Many hosts will reduce the number of ICMP error messages (RST packets) that are sent back when unreachable ports are queried. The implemented rate limits on sending the packets back to Nmap will impact the adaptive timing nature of Nmap and can significantly slow down the scan as a result. Specifying the --defeat-rst-ratelimit will trade accuracy for speed by ignoring the rate limits entirely, which can result in Nmap not waiting long enough for the results to be returned.
 --defeat-icmp-ratelimit: Very similar to --defeat-rst-ratelimit, the –-defeat-icmp-ratelimit flag is used to increase the speed of UDP scans specifically. Keep in mind that the same drawbacks to accuracy apply.
Security Relevance Score: 4
Word Count: 684
Extracted: 2025-06-13 23:40:38

---

--initial-rtt-timeout and --max-rtt-timeout: Nmap has a complex and variable algorithm for determining the time in which it will await a probe response. The variance is based on several factors, including network latency and in particularly slow networks, this can naturally increase significantly. Specifying a low initial and maximum rtt timeout can cut scan times by a substantial margin. However, there are drawbacks; if you specify settings that are too low, the increase in probes timing out will increase the scan time.
The time specified is measured in milliseconds, so the full flags would look like --initial-rtt-timeout 300ms and –-max-rtt-timeout 1000ms. As a general rule of thumb, keep your rtt-timeout range between 250 and 1000 ms for the best results.
 Specifying a moderately aggressive rtt-timeout value works phenomenally well for large scale ping sweeps as long as the timeout isn’t so low that the network latency is causing the packets to timeout.
 --max-retries: The default behavior of Nmap is to retry a port scan 10 times if it does not receive a response on that port’s status from the host. This is because a lack of response could indicate that the port is being filtered, or simply that the response was lost; so, in an effort of accuracy, Nmap tries 10 times. In most cases, Nmap will not need 10 tries to get the status of a port. In fact, most responses are returned in just one or two tries. However, on networks with a lot of latency or hosts that are configured with rate limiting, it can be beneficial to reduce the maximum number of retries down to 5 or 3. While there is an inherent risk of losing some information, it is preferable to allow the host timeout to expire and lose all information.
This is a really useful flag that can be used for both increasing the speed of scans and also adding a degree of obfuscation. While, in this context, we are discussing its capacity to increase the scan speed; in Chapter 7: Advanced Obfuscation and Firewall Evasion Techniques, we will explore the same --max-retries flag from a completely different perspective.
 --host-timeout: Sometimes individual hosts take an extraordinarily long time to scan. This can be caused by a number of factors such as rate limiting or firewalls, and in extreme cases, 1% of the hosts on your target list can take more than 20% of the time of the entire scan. To mitigate this issue, you can specify a host timeout value in minutes, which is the maximum amount of time Nmap will attempt to gather all information before moving on to another host. If Nmap hits the host timeout limit and moves on, you will lose all information on that host. For this reason, do not set an unreasonably low –-host-timeout, as you will likely miss out on a significant amount of important information. This command is most effective when you are running a scan that will take a very long time (perhaps overnight) and you want to make sure that what should take 8 hours to run doesn’t get delayed to 12 hours because of a handful of hosts.
 --defeat-rst-ratelimit: Many hosts will reduce the number of ICMP error messages (RST packets) that are sent back when unreachable ports are queried. The implemented rate limits on sending the packets back to Nmap will impact the adaptive timing nature of Nmap and can significantly slow down the scan as a result. Specifying the --defeat-rst-ratelimit will trade accuracy for speed by ignoring the rate limits entirely, which can result in Nmap not waiting long enough for the results to be returned.
 --defeat-icmp-ratelimit: Very similar to --defeat-rst-ratelimit, the –-defeat-icmp-ratelimit flag is used to increase the speed of UDP scans specifically. Keep in mind that the same drawbacks to accuracy apply.

We have previously discussed the use of the timing flag (-T1, T2, T3, T4, T5) and established that T3 is Nmap’s default and T5 is the maximum speed. Now that you understand the performance flags and their function, it is important to dive deeper into the exact difference between T4 and T
