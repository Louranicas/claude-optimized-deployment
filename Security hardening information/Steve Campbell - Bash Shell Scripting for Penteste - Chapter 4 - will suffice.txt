# Security Chapter Extract
Book: Steve Campbell - Bash Shell Scripting for Pentesters (2024, Packt Publishing Pvt Ltd) - libgen.li
Chapter: 4 - will suffice.
Security Relevance Score: 5
Word Count: 470
Extracted: 2025-06-13 23:41:12

---

will suffice.
    

     The rest of this section will include strategies for parsing the other
    


      data formats.
     




     Let’s begin with CSV data.
    

     The best tool in the Bash toolbox for parsing tabular data is undoubtedly
    


      awk
     


     .
    

     The
    



     basic syntax for
    


      awk
     


     is
    


      a
     





      s follows:
     



awk 'pattern {action}' input_file


     Here, please
    



     note
    


      the
     







      following:
     






       pattern
      


      is an optional condition
     


       to match.
      





       action
      


      is what to do when the
     


       pattern matches.
      





       input_file
      


      is the file
     


       to process.
      





     Of course, you can remove the
    


      input_file
     


     variable if you are piping (
    


      |
     


     ) data because awk can accept input from
    


      stdin
     


     or
    


      input files.
     




     Let’s say we have a CSV file with the following content named
    


      scan_results.csv
     


     .
    

     You can find this file in this chapter’s
    


      GitHub
     









      repository:
     



IP,Hostname,Port,Service,Version
192.168.1.1,gateway,80,http,Apache 2.4.41
192.168.1.10,webserver,443,https,nginx 1.18.0
192.168.1.20,database,3306,mysql,MySQL 5.7.32
192.168.1.30,fileserver,22,ssh,OpenSSH 8.2p1


     Here’s how to extract only the IP and
    


      P
     





      ort columns:
     



awk -F',' '{print $1 "," $3}' nmap_results.csv


     This is
    


      the output:
     



IP,Port
192.168.1.1,80
192.168.1.10,443
192.168.1.20,3306
192.168.1.30,22


     The explanation is
    


      as follows:
     






       -F','
      


      sets the field separator to
     


       a comma.
      





       $1
      


      and
     


       $3
      


      refer to the first and third
     


       fields, respectively.
      





       ","
      


      prints a comma between the
     


       $1
      


      and
     


       $
      




        3
       




       fields.
      





     Here’s how to show only entries with open web ports
    





     (
    


      80
     



      or
     




       443
      




      ):
     



awk -F',' '$3 == 80 || $3 == 443 {print $1 "," $2 "," $3}' nmap_results.csv


     The output is
    


      as follows:
     



192.168.1.1,gateway,80
192.168.1.10,webserver,443


     To add a header and a footer to our output, do
    


      th
     









      e following:
     



awk -F',' 'BEGIN {print "Open Web Servers:"} $3 == 80 || $3 == 443 {print $1 "," $2 "," $3} END {print "End of list"}' nmap_results.csv


     This is the
    


      resultant output:
     



Open Web Servers:
192.168.1.1,gateway,80
192.168.1.10,webserver,443
End of list


     Since we’re
    



     adding something
    



     new here, let’s review
    


      an explanation:
     





      The awk pattern is
     


       awk 'pattern {
      




        action}' input_file
       




       .
      




      The pattern is
     


       $3 == 80 || $3 ==
      




        443
       




       .
      




      The action is
     


       {print $1 "," $2 "," $
      




        3}
       




       .
      




      The
     


       BEGIN
      


      code prints
     


       Open Web Servers:
      


      and goes before
     


       the pattern.
      




      The
     


       END
      


      code prints
     


       End of list
      


      and goes after
     


       the action.
      





     Let’s examine an example showing how to calculate statistics.
    

     Let’s say we have a
    


      vulnerability_scan.csv
     


     file with
    


      se
     







      verity levels:
     



IP,Vulnerability,Severity
192.168.1.1,SQL Injection,High
192.168.1.1,XSS,Medium
192.168.1.10,Outdated SSL,Low
192.168.1.20,Weak Password,High
192.168.1.30,Information Disclosure,Medium


     Here’s how to count vulnerabilities
    


      by severity:
     



awk -F',' 'NR>1 {gsub(/\r/,""); if($3!="") count[$3]++} END {for (severity in count) print severity ": " count[severity]}' vulnerability_scan.csv


     This
    



     is
    


      the
     







      output:
     



Low: 1
Medium: 2
High: 2


     Here’s
    


      the explanation:
     






       -F','
      


      : This option sets the field separator to a comma.
     

      The option tells awk to split each line into fields using commas
     


       as delimiters.
      





       '...'
      


      : The single quotes contain the awk
     


       program itself.
      





       NR>1
      


      : This condition checks whether the current record (line) number is greater than
