# Security Chapter Extract
Book: Michael Kofler - Scripting_ Automation with Bash, PowerShell, and Python (2024, Rheinwerk Publishing) - libgen.li
Chapter: 1991 - Thus, Python is  almost as old as Bash, the
first version of which appeared in 1989. Bu t unlike Bash, Python hardly shows its age:
Python is characterized by an  elegant, well-designed syntax  that still sets standards
today.
Python is a scripting language in that its co de was originally execut ed by an interpreter.
In current versions, however, th e code is first compiled into  an intermediate binary for-
mat (called byte  code ) for performance reasons. You wo n’t notice any of this effort
when using Python. In other words, Python behaves like an interpreted language, but it
very much uses a compil er behind the scenes.
Python was not primarily designed to automa te administrative op erations but instead
is rather extremely general purpose. You can equally learn to program or solve AI prob-
lems with Python!
A basic concept behind Python is that the la nguage core is very compact. For this pur-
pose, the language can be easily extended by modules, and these modules are exactly
why Python is so popular today (also) as a sc ripting language in the sense of this book.
Security Relevance Score: 2
Word Count: 1207
Extracted: 2025-06-13 23:40:21

---

Thus, Python is  almost as old as Bash, the
first version of which appeared in 1989. Bu t unlike Bash, Python hardly shows its age:
Python is characterized by an  elegant, well-designed syntax  that still sets standards
today.
Python is a scripting language in that its co de was originally execut ed by an interpreter.
In current versions, however, th e code is first compiled into  an intermediate binary for-
mat (called byte  code ) for performance reasons. You wo n’t notice any of this effort
when using Python. In other words, Python behaves like an interpreted language, but it
very much uses a compil er behind the scenes.
Python was not primarily designed to automa te administrative op erations but instead
is rather extremely general purpose. You can equally learn to program or solve AI prob-
lems with Python!
A basic concept behind Python is that the la nguage core is very compact. For this pur-
pose, the language can be easily extended by modules, and these modules are exactly
why Python is so popular today (also) as a sc ripting language in the sense of this book.
351.3 The Agony of Choice
Over time, more and more extension modu les have emerged to use cloud services,
apply network functions, access databases, and more. For almost any admin task imag-
inable, a suitable Python module  can be installed in no time!
However, Python is only moderately suitab le for calling existi ng commands. In this
respect, the modules are both  a curse and a blessing. Whil e you may already be familiar
with the commands required for a Bash script, you’ll need  to learn about an adequate
Python module with similar functions. Seve ral modules might be eligible, and you may
not clearly see which module is more suitable or which one will be maintained in the
future. In this respect, the us e of Python is worthwhile espe cially when the task is rea-
sonably complex, when the advantages of Python compensate fo r the disadvantage of
a longer familiarizat ion with a particular  additional module.
1.2.4    Many Similarities, Even More Differences
Describing three  scripting languages in one book is admittedly an intellectual chal-
lenge—for the author as well as  for you, the reader! Of course, all three languages are
characterized by many simila rities, especially true Bash and PowerShell. At the same
time, however, countless syntactic variatio ns can make rapid switching between lan-
guages tedious. Thus, one tip: You should use an editor that su pports the respective
scripting language well because then the edit or will detect most errors or syntax mix-
ups before your first test runs.
1.3    The Agony of Choice
If you’re just entering the world of scripting, you’d probably prefer it if I would tell younow, “Learn language Xxx, it’s good for ever ything.” Unfortunately, the IT world is not
that simple. Which scripting language is the most suitable or the ideal solution for you
depends greatly on the task and the operatin g system on which your script is supposed
to run, for instance:
/L50189For scripts to administer Windows computer s and networks, PowerShell is definitely
the best choice. Many Windows-specific functions are best controlled by Power-
Shell’s own commands and modules.
/L50189Similarly, Bash (or, almost equivalently, Zsh)  is the ideal language if you want to run
administrative scripts on Linux ma chines or servers and on macOS.
/L50189For tasks that are platform-independent and do not depend on operating system-
specific libraries, PowerShell, Bash, and Py thon are equally suitable. In that case, I
pragmatically recommend the language you know best or whose environment
(commands, extension modules) you know best.
/L50189The greater the complexity of the task; th e more elaborate the control of the code
(loops, branches, functions, etc.); and th e more extensive the expected amount of
1 Scripting: Doing One Thing
36code and the greater the number of variable s and data structures required, the stron-
ger my tendency is towards Python.
/L50189If your script runs the risk of turning into a “real” program, with several hundred
lines of code, the advantages of Python (w ith its clearer syntax and better develop-
ment tools) outweigh its disadvantages.  However, we’re then moving well beyond
the scope of this book.
You must start somewhere: If you’re at home in the Windows environment and want
to run your scripts there, I would start usin g PowerShell. Similarly, I advise Linux and
macOS fans to first learn the basics of Ba sh and Zsh, respective ly. (This recommenda-
tion also applies if you use Windows as yo ur working environment, but you want your
scripts to run on Linux server s. While this juggling sounds contradictory, in real life,
this scenario is absolute ly common. Microsoft’s own Azure  cloud runs more Linux
instances than Windows ones. Nothing wron g with combining the benefits of Win-
dows on the desktop with th ose of Linux on the server.)
Once you’re somewhat familiar with Bash  or PowerShell, you should get acquainted
with Python. Python scores major points wi th its impressively elegant syntax and is
miles superior to Bash as well as PowerShell in this respect. Howe ver, these advantages
are more effective for complex,  platform-independent tasks. In this respect, Python is
not quite a “classic” scripting language but ha s a much more universal objective. If your
script is primarily intended to call elementary Linux tools (such as find , grep , adduser ,
and gzip ) or to perform basic Windows admin tasks, Bash or PowerShell are better
suited for this purpose th an Python, despite all th eir syntax peculiarities.
Ultimately, the key is simply to start programm ing. In this context, don’t let yourself be
influenced by the order in which the chapters  appear in this book but instead start with
whatever chapter seems most logical to you.  When writing, I tried extremely hard to
conceive all the chapters as  independently as possible. The PowerShell chapter does
not assume any knowledge of Bash, or vice versa!
To conclude these first reflections, I have made a very personal, thoroughly subjective
evaluation of the languages presen ted in this book in Table 1.1 . You’ll notice that
Python performs very well in this regard. Th is high score doesn’t change the fact that,
for simple tasks, depending on the operatin g system, Bash or PowerShell are the tools
that will accomplish your go als the fastest and are theref ore probably the ones you’ll
use most often. (At least, that’s how I feel.)
Criterion Bash/Zsh PowerShell Python
Suitable for Windows 4 10 10
Suitable for macOS 10 3 10
Suitable for Linux 10 3 10
Table 1.1  Personal Rating of Selected Script Languages (0 = Miserable; 10 = Great)
371.3 The Agony of Choice
Operating system-specific administrative tasks 10 10 5
Platform-independent tasks 7 5 10
Consistent syntax 3 6 10
Simple call of external commands 10 9 5
Toolbox size (commands, modules, etc.) 9 5 10
Development tools/debugging 2 5 8
Help system/documentation 2 6 8
Simple, “classic” scripts 8 8 3
Complex code 2 4 10Criterion Bash/Zsh PowerShell Python
Table 1.1  Personal Rating of Selected Script Langua ges (0 = Miserable; 10 = Great) (Cont.)

39
