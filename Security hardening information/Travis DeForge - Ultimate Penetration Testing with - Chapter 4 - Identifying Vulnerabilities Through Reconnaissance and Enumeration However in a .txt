# Security Chapter Extract
Book: Travis DeForge - Ultimate Penetration Testing with Nmap_ Master Cybersecurity Assessments for Network Security, Monitoring, and Scanning Using N (2024, Orange Education Pvt Ltd, AVA™) - libgen.li
Chapter: 4 - Identifying Vulnerabilities Through Reconnaissance and Enumeration. However, in a large enterprise, this is likely to still be several thousand endpoints. Several thousand is much better than 16 million (assuming it was a /8 to begin with), but still requires additional filtering to be feasible during a typical engagement.
The next step often involves scanning for individual ports one or two at a time to identify systems that may present quick wins with exploitable protocols. Then, progressively transition into scanning for common ports, which will help you identify the purpose of the specific /24s.
Start by scanning for easily exploitable systems for some quick wins, such as Cisco Smart Install, Java RMI, and IPMIv2. Picking up an instance of Cisco Smart Install early in a penetration test can be an absolute game-changer, as the context within the network contained in the device's configuration file is invaluable:
Nmap -pn -T4 -iL targets.txt -p 4786 --open -oX smart_install.xml
Nmap -pn -T4 -iL targets.txt -p 1099 --open -oX JavaRMI.xml
Nmap -pn -sU -T4 -iL targets.txt -p 623 --open -oX IPMI.xml
There are a couple of things to point out in the preceding commands, specifically the use of the -pn and -T4 flags. We are disabling host discovery (-pn) because we have already established that the hosts in targets.txt are alive; thus, sending them additional probes to determine that is a waste of time. The -T4 flag specifies a fast speed of the scan itself. Combined, these two flags will cut down significantly on the time it takes for results to come back, which is still a very important consideration even after reducing the scope from where it started.
 NOTE: It’s very important not to forget the --open flag when doing individual port scans, especially for something very specific as shown above. Forgetting this option will result in thousands of results indicating that the port is closed, which will take ages to scroll through.
While there are several other vulnerable ports you could search for at this stage, such as MQTT, those are typically better served for later in the engagement, as the impact and potential for a cascading compromise are less likely than with things like Cisco Smart Install.
Continuing with the process, the next step would be to identify which subnets are utilized primarily for workstation and server infrastructure. Considering the vast majority of organizations utilize Windows devices and servers to some degree, searching for common SMB ports at this stage tends to work well:
Nmap -pn -T4 -iL targets.txt -p 139,445 --open -oX SMB_results.xml
Finally, searching for things like web servers and aggregating a list of these devices, which can be automatically enumerated with a screenshot tool such as Eyewitness, is very helpful. This step will take much longer than the previous ones simply because it is scanning four different ports instead of only 1 or 2, which is why collecting the other results first is recommended. You can parse through and analyze the previously collected results while waiting for this scan to finish:
Nmap -pn -T4 -iL targets.txt -p 80,443,8080,8443 --open -oX Web_servers.xml
With all this data, you will be able to start piecing together what subnets are used for what types of systems and create your own system for organizing those subnets. Once you have the network generally mapped and understood, then your process of mapping the internal attack surface can begin in earnest.
Optimizing Scans for Speed
Even with the scope reduced as much as reasonably possible, in large enterprise networks, there is still the need to optimize scans for speed to get the results quickly enough to comprehensively analyze the endpoints. In Chapter 7: Advanced Obfuscation and Firewall Evasion Techniques, we will look at how to make scans as slow and subtle as possible; here, we need to do the opposite. For this, six additional flags need to be deeply understood:
Security Relevance Score: 9
Word Count: 737
Extracted: 2025-06-13 23:40:38

---

Identifying Vulnerabilities Through Reconnaissance and Enumeration. However, in a large enterprise, this is likely to still be several thousand endpoints. Several thousand is much better than 16 million (assuming it was a /8 to begin with), but still requires additional filtering to be feasible during a typical engagement.
The next step often involves scanning for individual ports one or two at a time to identify systems that may present quick wins with exploitable protocols. Then, progressively transition into scanning for common ports, which will help you identify the purpose of the specific /24s.
Start by scanning for easily exploitable systems for some quick wins, such as Cisco Smart Install, Java RMI, and IPMIv2. Picking up an instance of Cisco Smart Install early in a penetration test can be an absolute game-changer, as the context within the network contained in the device's configuration file is invaluable:
Nmap -pn -T4 -iL targets.txt -p 4786 --open -oX smart_install.xml
Nmap -pn -T4 -iL targets.txt -p 1099 --open -oX JavaRMI.xml
Nmap -pn -sU -T4 -iL targets.txt -p 623 --open -oX IPMI.xml
There are a couple of things to point out in the preceding commands, specifically the use of the -pn and -T4 flags. We are disabling host discovery (-pn) because we have already established that the hosts in targets.txt are alive; thus, sending them additional probes to determine that is a waste of time. The -T4 flag specifies a fast speed of the scan itself. Combined, these two flags will cut down significantly on the time it takes for results to come back, which is still a very important consideration even after reducing the scope from where it started.
 NOTE: It’s very important not to forget the --open flag when doing individual port scans, especially for something very specific as shown above. Forgetting this option will result in thousands of results indicating that the port is closed, which will take ages to scroll through.
While there are several other vulnerable ports you could search for at this stage, such as MQTT, those are typically better served for later in the engagement, as the impact and potential for a cascading compromise are less likely than with things like Cisco Smart Install.
Continuing with the process, the next step would be to identify which subnets are utilized primarily for workstation and server infrastructure. Considering the vast majority of organizations utilize Windows devices and servers to some degree, searching for common SMB ports at this stage tends to work well:
Nmap -pn -T4 -iL targets.txt -p 139,445 --open -oX SMB_results.xml
Finally, searching for things like web servers and aggregating a list of these devices, which can be automatically enumerated with a screenshot tool such as Eyewitness, is very helpful. This step will take much longer than the previous ones simply because it is scanning four different ports instead of only 1 or 2, which is why collecting the other results first is recommended. You can parse through and analyze the previously collected results while waiting for this scan to finish:
Nmap -pn -T4 -iL targets.txt -p 80,443,8080,8443 --open -oX Web_servers.xml
With all this data, you will be able to start piecing together what subnets are used for what types of systems and create your own system for organizing those subnets. Once you have the network generally mapped and understood, then your process of mapping the internal attack surface can begin in earnest.
Optimizing Scans for Speed
Even with the scope reduced as much as reasonably possible, in large enterprise networks, there is still the need to optimize scans for speed to get the results quickly enough to comprehensively analyze the endpoints. In Chapter 7: Advanced Obfuscation and Firewall Evasion Techniques, we will look at how to make scans as slow and subtle as possible; here, we need to do the opposite. For this, six additional flags need to be deeply understood:

 –-min-hostgroup: Nmap scans numerous hosts simultaneously by grouping targets together; with few exceptions, a larger grouping leads to faster overall scans. The drawback here is that no results will be returned until the entirety of the host group has been completed. In most cases, this is not a concern unless you are trying to analyze endpoints that come back in real-time while the scan continues to run. The most common settings here are either --min-hostgroup 256, which dictates that networks are scanned in /24 sized groups, or dramatically increasing the size up to --min-hostgroup
