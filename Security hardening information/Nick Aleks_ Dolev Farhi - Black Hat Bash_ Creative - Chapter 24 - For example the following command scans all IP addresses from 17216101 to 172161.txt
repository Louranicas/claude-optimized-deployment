# Security Chapter Extract
Book: Nick Aleks_ Dolev Farhi - Black Hat Bash_ Creative Scripting for Hackers and Pentesters (2024, NO STARCH PRESS, INC) - libgen.li (1)
Chapter: 24 - For example, the following command scans all IP addresses from 172.16.10.1 to 172.16.10.254:
$ sudo arp-scan 172.16.10.0/24 -I br_public
Finally, you can use the hosts file you created in “Consecutive IP Addresses” on page 70 as input to arp-scan:
$ sudo arp-scan -f 172-16-10-hosts.txt -I br_public
The output generated by arp-scan should look like the following:
Security Relevance Score: 7
Word Count: 1063
Extracted: 2025-06-13 23:40:57

---

For example, the following command scans all IP addresses from 172.16.10.1 to 172.16.10.254:
$ sudo arp-scan 172.16.10.0/24 -I br_public
Finally, you can use the hosts file you created in “Consecutive IP Addresses” on page 70 as input to arp-scan:
$ sudo arp-scan -f 172-16-10-hosts.txt -I br_public
The output generated by arp-scan should look like the following:
172.16.10.10  02:42:ac:10:0a:0a     (Unknown: locally administered)
172.16.10.11  02:42:ac:10:0a:0b     (Unknown: locally administered)
172.16.10.12  02:42:ac:10:0a:0c     (Unknown: locally administered)
172.16.10.13  02:42:ac:10:0a:0d     (Unknown: locally administered)

This output consists of three fields: the IP address, the MAC address, and vendor details, identified by the first three octets of the MAC address. In this scan, the tool identified four hosts on the network that responded to ARP packets.
Exercise 3: Receiving Alerts About New Hosts
Imagine that you want to be notified whenever a new host appears on the network. For example, maybe you want to know when new laptops or IT assets have connected. This could be useful if you’re testing a target in a different time zone, where device users might not be online when you are.
You can use bash to send yourself an email whenever your script discovers new assets. Listing 4-9 runs a continuous scan to identify new online hosts, adds these to the 172-16-10-hosts.txt file created in “Consecutive IP Addresses” on page 70, and notifies you of the discovery.
Because this script is more involved than the previous ones, we’ll walk through an example solution (Listing 4-8), then discuss ways to improve it on your own.

host_monitor _notification.sh
#!/bin/bash

# Sends a notification upon new host discovery
KNOWN_HOSTS="172-16-10-hosts.txt"
NETWORK="172.16.10.0/24"
INTERFACE="br_public"
FROM_ADDR="kali@blackhatbash.com"
TO_ADDR="security@blackhatbash.com"

❶ while true; do
  echo "Performing an ARP scan against ${NETWORK}..."

❷ sudo arp-scan -x -I ${INTERFACE} ${NETWORK} | while read -r line; do
  ❸ host=$(echo "${line}" | awk '{print $1}')
  ❹ if ! grep -q "${host}" "${KNOWN_HOSTS}"; then
      echo "Found a new host: ${host}!"
    ❺ echo "${host}" >> "${KNOWN_HOSTS}"
    ❻ sendemail -f "${FROM_ADDR}" \
        -t "${TO_ADDR}" \
        -u "ARP Scan Notification" \
        -m "A new host was found: ${host}"
    fi
  done

  sleep 10
done

Listing 4-8: Using sendemail to receive notifications about new arp-scan discoveries
First, we set a few variables. We assign the file containing the hosts to look for, 172-16-10-hosts.txt, to the KNOWN_HOSTS variable, and the target network 172.16.10.0/24 to the NETWORK variable. We also set the FROM_ADDR and TO_ADDR variables, which we’ll use to send the notification email.
We then use while to run an infinite loop ❶. This loop won’t end unless we intentionally break out of it. Within the loop, we run arp-scan with the options -x to display a plain output (so it’s easier to parse) and -I to define the network interface br_public ❷. In the same line, we use a while read loop to iterate through the output of arp-scan. We use awk to parse each IP address in the output and assign it to the host variable ❸.
At ❹, we use an if condition to check whether the host variable (which represents a host discovered by arp-scan) exists in our hosts file. If it does, we don’t do anything, but if it doesn’t, we write it to the file ❺ and send an email notification ❻ by using the sendemail command. Notice that each line in the sendemail command ends with a backslash (\). When lines are long, bash allows us to separate them in this way while still treating them as a single command. Breaking long code lines makes them easier to read. At the end of this process, we use sleep 10 to wait 10 seconds before running this discovery again.
If you run this script, you should receive an email whenever a new host is discovered. To properly send email messages, you’ll need to configure a mail transfer agent such as Postfix on the system. Refer to the documentation at https://www.postfix.org/documentation.html for more information on doing so.
Note that the continuous network probing the script performs isn’t very stealthy. To probe the network more covertly, try modifying the script in one of the following ways:

Slow the probing so it triggers every few hours or after an arbitrary number of minutes. You can even randomize this interval to make it less predictable.
Instead of sending notifications over the network, try writing the results to memory if you’re running the script from within a compromised network.
Upload the results to an innocent-looking third-party website. The Living Off Trusted Sites (LOTS) Project at https://lots-project.com maintains an inventory of legitimate websites that corporate networks often allow. Attackers commonly use these to carry out activities such as data exfiltration so that their traffic blends with other legitimate traffic, making it harder for analysts to spot.

Now that you know the hosts available on the 172.16.10.0/24 network, we recommend removing any unresponsive IP addresses from the 172-16-10-hosts.txt file to make your future scans faster.
To go even further, we encourage you to experiment with other notification delivery methods, such as Slack, Discord, Microsoft Teams, or any other messaging system you use on a daily basis. Platforms such as Slack, for example, use a webhook, which enables a script to make an HTTP POST request to a special uniform resource locator (URL) to deliver a custom message to a channel of choice.



Port Scanning
Once you’ve discovered hosts on the network, you can run a port scanner to find their open ports and the services they’re running. Let’s explore port scanning by using three tools: Nmap, RustScan, and Netcat.

Nmap
Nmap allows us to perform port scanning against single targets or multiple targets at the same time. In the following example, we use Nmap to perform a port scan of the domain scanme.nmap.org:
$ nmap scanme.nmap.org
Nmap also accepts IP addresses, like so:
$ nmap 172.16.10.1
When we provide Nmap with no special options on the command line, it will use the following default settings:
Perform a SYN scan Nmap will use a synchronization (SYN) scan to discover open ports on a target. Also called a half-open scan, a SYN scan involves sending a SYN packet and waiting for a response. Nmap won’t complete the full TCP handshake (meaning ACK won’t be sent back), which is why we call this scan half open.
Scan the top 1,000 ports Nmap will scan only popular ports known to be frequently in use, such as TCP ports 21, 22, 80, and
