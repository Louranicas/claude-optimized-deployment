# Security Chapter Extract
Book: Shilpa Mahajan_ Mehak Khurana_ Vania Vieira Estrela - Applying Artificial Intelligence in Cybersecurity Analytics and Cyber Threat Detection (2024, WILEY) - libgen.li
Chapter: 2 - 13.3.2 CS Ontology
CS ontologies designate concepts and relationships using a standard, unambiguous, and unique definition, permitting humans and machines to communicate (Figure 13.3). Unified ontologies, similar to STUCCO and “unified CS ontology” (UCO) [9, 26], combine heterogeneous data and schemas from various CS systems with the most commonly employed CS standards for evidence sharing and exchange. For different specific scenarios, other established ontologies exist, for instance, intrusion detection, malware classification and behavior modeling, CTI analysis, CA analysis [27–30], CT and security evaluation, vulnerability analysis, and CT actor analysis [9]. Creating a generic network security ontology in today’s multifaceted cyber environment is demanding, time‐consuming, and heavily hinges on network security experts’ domain and ICT knowledge. So, appliance scenarios should steer the proper security ontology project while simultaneously demanding dynamic and automatic amelioration of the information security ontology [30–32].
Security Relevance Score: 28
Word Count: 5920
Extracted: 2025-06-13 23:40:31

---

13.3.2 CS Ontology
CS ontologies designate concepts and relationships using a standard, unambiguous, and unique definition, permitting humans and machines to communicate (Figure 13.3). Unified ontologies, similar to STUCCO and “unified CS ontology” (UCO) [9, 26], combine heterogeneous data and schemas from various CS systems with the most commonly employed CS standards for evidence sharing and exchange. For different specific scenarios, other established ontologies exist, for instance, intrusion detection, malware classification and behavior modeling, CTI analysis, CA analysis [27–30], CT and security evaluation, vulnerability analysis, and CT actor analysis [9]. Creating a generic network security ontology in today’s multifaceted cyber environment is demanding, time‐consuming, and heavily hinges on network security experts’ domain and ICT knowledge. So, appliance scenarios should steer the proper security ontology project while simultaneously demanding dynamic and automatic amelioration of the information security ontology [30–32].


Figure 13.2 A CSKG construction framework.




13.3.3 CS Entities Extraction
IE has drawn incremental attention with two main tasks: “relation extraction” (RE) and NER. Traditional NER has three broadly built forms: by rule, unsupervised, and feature‐established supervised learning. Rule‐centered approaches, e.g., regular expression, bootstrapping methods, etc., work fine when the exhaustive lexicon cannot reach other domains. Comparatively, traditional statistical‐based extraction methods, embracing “hidden Markov models” (HMMs), decision trees, “maximum entropy model” (MEM), “support vector machines” (SVMs), and “conditional random fields” (CRFs), achieve good results albeit relying heavily on “feature engineering” (FE), which poses some constraints [33]. DL represents learning and endows semantic composition through vector representation and “neural network” (NN) processing. Figure 13.3 contains the three essential components (i.e., distributed models, feature extractors, and decoders) and some DL NER instances.


Figure 13.3 Intelligent cybersecurity ontologies.


A machine can be fed raw data, automatically finding latent representations and processing for categorization or detection. Many methods [34] have been tried, including multi‐task DL, deep transfer learning, deep active learning, deep reinforcement learning, attention mechanism, deep adversarial learning, etc.


13.3.4 Relations Extraction of CS Entities
Fruitful entities’ inter‐relationships are an indispensable KG part of combining independent entities into a KG Unstructured, text‐relationship extraction is a core KG construction task. An end‐to‐end CNN‐based method that could automatically capture relevant lexical and sentence‐level features to overcome traditional practices’ limitations enormously count on the quality of hand‐engineered features [11]. “Recurrent neural network” (RNN) besides “long short‐term memory” (LSTM) schemes have arisen [35], but most supervised relation‐extraction approaches require extensive labeled training information, which is costly to build. “Distant supervision” (DS) allows building datasets automatically [36].
Relation extraction used sentence‐level attention and multi‐instance learning [37] to reduce DS noise. IE tasks are usually solved via extract‐then‐classify or unified labeling. However, these methods have duplicate entity pairs or overlook the essential underlying structure in extracting entities and relations. A joint extraction of entities and associations method outperformed the pipelined approach to address these restrictions [38]. Some ignore label data scarcity and extract CS entity‐relation triples employing a joint extraction technique from unpublished datasets [39].
However, collecting information from unstructured CS language has three key obstacles. First, most IE research has focused on daily life events, e.g., the TAC KB Population [40] or ACE [41]. Domain‐relevant expertise distinguishes extracting life’s understanding from CS knowledge. Insufficient labeled training data plagues the IE task. Another distinction between pulling natural life and CS knowledge is its intricacy. CA events can be CA patterns with several attempted or accomplished actions. These actions can be described as discrete CS events, increasing the number of event references. Thirdly, unstructured data contains implicit information that cannot be stated.
KG quality requires knowledge analysis, verification, and redundancy to resolve contradictions and prevent reasoning errors. KGs can benefit from entity disambiguation and named entity linkage [42]. The KG, developed with IE, largely shows sentence associations. It must leverage implicit knowledge and reasoning to enrich the CSKG [43]. Knowledge reasoning can use association queries, rule‐based reasoning, distributed representation learning‐built reasoning, and NN rationale [44] to complete tasks.



13.4 Datasets
Security analysts use known and emerging vulnerabilities, flaws, CTs, and CA patterns. Research institutes, government agencies, and industry professionals like MITRE and “computer emergency response teams” (CERTs) collect, publish, and arrange such knowledge [45]. The “National Vulnerability Database” (CVE, CWE, CPE, CVSS, etc.) is often utilized [46] in addition to “Common Attack Pattern Enumeration and Classification” (CAPEC) [47]. Significant datasets for constructing CSKGs can use OO, IE in CS, and other datasets to find novel solutions.

Open‐source datasets
Some CSKG datasets are
SEPSES CKB details the CSKG dataset/work in Ref. [48].
CWE‐KG [49, 50] helps discover potential CTs from CWE, CAPEC, and X (former Twitter) data.
Vulnerability KGs [50, 51] only show visualization outcomes on a webpage without describing their structure or experiment performance.
Open‐CyKG [52] presents a CTI‐KG framework constructed on an attention‐based NN. Open IE model to mine valuable “cyber threat” (CT) facts from unstructured APT depictions.
MalKG [53] adds information on malware intelligence.
These open‐source CSKGs address different purposes that need various datasets with apparent drawbacks.
Information Extraction (IE) Datasets
IE is essential for CSKGs. Providing quality‐assurance annotated datasets to train robust IE models is crucial and cannot be bypassed. Data annotation is the labeling process of assigning relevant tags to data from queries, imageries, text, audio, video, etc., to simplify understanding and interpretation. These records can be labeled by data annotators as accurately as possible. Thus, datasets should be divided for NER and RE tasks. However, most datasets are for NER tasks. NER and RE studies can only rely on the malware dataset in Ref. [53]. The entities and relationships are generally specified in an unambiguous security ontology, which curbs the potential for usage outside the designated domain. Although collected and annotated from various data sources, the majority comes from English corpora. Instead, much security knowledge emerges in multiple languages. This often intermingled scenario forces multi‐language dataset creation.
Other CSKG Datasets
Mastering the environment, understanding dangerous actors, mixing external intelligence, and amassing basic information to apply theory. Environmental (assets and weaknesses), behavioral (network warnings, terminal alerts, and logs), in‐house/external CTI, and knowledge‐related (ATT&CK and CAPEC) data classification [54]. Current research targets CTI and knowledge data when building a CSKG and overlooks environmental and behavioral ICT data. These data possess no developed, consistent specification.



13.5 Application Scenarios
Google’s introduction of KG technology has sparked attention. KG research in CS can focus on (i) construction techniques centered on the IE, representation, fusion, and deduction of knowledge in graphs [55], like correctly connecting entities and their interactions to KG after removing them from unstructured writing and inferring new specifics from such KG, and (ii) applications to solve down‐to‐earth glitches in different network environments through CSKGs.
Most literature hinges on KGs to assess the network situation, discover potential CTs, and investigate the ongoing or ending CA, presenting several specific applications to orientate operators and managers with operation, vulnerability management, decision‐making, malware designation, analysis along the physical environment, and other CSKG application possibilities, like SE.

13.5.1 CSA and Security Assessment
Administrators must assess and understand an enterprise network’s security. These issues include multifaceted enterprise network HW and services. Security corporate network administrators must fight multi‐stage and multi‐host attacks. CSA and security assessment can benefit from CSKG. MITRE’s CyGraph [56, 57] CSA system focused on network combat task analyses, visual breakdowns, and knowledge management. CyGraph, a four‐layer KG, analyzes CA paths, predicts critical vulnerabilities, examines intrusion alarm correlation, and provides interactive visual queries by integrating isolated data and events. CyGraph provides query‐driven efficacy cases but no datasets.
A security assessment novel ontology can be constructed for individual networks to standardize security knowledge, e.g., assets, exposures, and CAs [58]. The ontology presents an efficient system for creating attack graphs, identifying vulnerability‐caused attacks, and assessing network security utilizing ontological model inference. Their method produces the CA graph and property set descriptions. Flow diagrams show how hackers hit and dismantle several test network objectives through multiple hosts and stages, allowing enterprise administrators to perform security risk assessments and respond to new CTs. CS ontologies include STUCCO, UCO, and CTI [9, 26, 59]. An ontology will query whether data assets may be wide open in the local model, exploiting organization‐specific asset information with recurrently known, updated opennesses to assess the aftermath of a newly revealed vulnerability. KGs with three dimensions – counting terminal assets, fault‐detection intelligence, and CT alarm – can assess IoT terminal security based on application scenarios and CT characteristics [60]. The approach correlates independent power IoT terminal security monitoring data to build the terminal threat index, which indicates terminal security.


13.5.2 CTs’ Discovery
In advanced surveillance, sophisticated assailants spend a long time in a system before detection [61]. Many factors, ranging from flooding alerts to slow response time, render existing practices ineffective and incapable of lessening these CAs’ impairments. The CSKG could meet this void with knowledge representation and reasoning power. CSKG application research findings can aim at CA prediction, CT hunting, and intrusion detection so that security analysts predict outbreak signs prematurely via CT hunting before cyberattacks. During CAs, security administrators can discover suspicious undertakings with intrusion detection tools.
CA Prediction: A cognitive detection system perceives CS events early by mingling sensors’ measurements, dynamic online sources, and KGs has extended UCO to infer the inputs from numerous network devices resembling Snort, “intrusion detection systems” (IDSs), etc., and the cyber‐kill chain information [62]. “Semantic Web Rule Language” (SWRL) specified rules that orientate entities. The aggregator segment combines alerts with a reasoning model to identify newer CAs by testing and evaluating custom‐built ransomware resembling WannaCry and showing the performed CA timeline and the system’s actions. A prediction method that utilizes cyber defense KG to solve the 0‐day CA vulnerability emerges in Ref. [40]. CTs, assets, and exposures engender the KG, transforming the outbreak prediction task into a KG link prediction. Accordingly, a path ranking algorithm could mine the potential 0‐day attack in the target system and build the 0‐day CA graph. The experiments showed that the KG could improve the proposed method’s accuracy of 0‐day CA prediction. Moreover, the path ranking procedure can also aid in backtracking reasons for appraising results to strengthen the explaining estimation ability.
CT Hunting:  This trait [41, 63, 64] expedites log‐founded CT pursuit by leveraging the vast external OSCTI knowledge [42]. It employs two sub‐systems: a knowledge annexation pipeline for fashioning a CT behavioral KG and a query built upon system auditing to amass logging data crossway hosts. A “threat behavior query language” (TBQL), along with query synthesis mechanisms, automatically gets a TBQL query, with sequential event information, from the CT behavioral part of the CSKG to encounter the matched auditing records. Still, a system’s limitation is not considering attacks not caught by auditing. Likewise, existing methods often exhibit essential restrictions regarding created alerts’ quantity, interpretability, and relevance.
Intrusion Detection: The CSKG could also aid in detecting intrusion [65]. A query‐based case that illustrates how the SEPSES CSKG can receive warnings starting the “network intrusion detection system” (NIDS) to better understand potential CTs and ongoing CAs is in Ref. [48]. A DDoS CA recognition scheme employing KG, mainly for the DDoS CA on TCP traffic, is in Ref. [66]. KGs convey the TCP traffic communication among two CPS hosts. After estimating the one‐way broadcast metrics, thresholds help select the source host that commences a DDoS outbreak. A twofold distributed KB described DDoS outbreaks and malicious behavior detection [66] comprises (i) a traffic database to detect and classify malign DDoS traffic CA s and (ii) the core network security KB part to partakes in a DDoS harmful behavioral KB with graphs for network topologies, malevolent traceability, dangerous features, and traffic acquaintance. The network security KB responds to data structure treating, destructive behavior KG creation, behavior perception, and feedback. ML can make KGs detect unexpected activity in automation systems [67]. The readily available ontology from Ref. [47] builds a KG integrating three primary knowledge sources: automation system evidence, network observations (like connections between hosts), and application‐stage observations (akin to data access events). KG completion methods inspired this framework, adopting a graph‐embedding procedure for the likelihood ranking of observed events’ triple statements. Experimentally, the suggested process yields well‐calibrated, plausible alarms in various contexts, potentially benefiting relational ML modules on KGs for intrusion detection. Though these outcomes occurred on a small‐scale prototype lacking CTI, it synergistically blended KG and industrial control systems.


13.5.3 Attack Probing
CSKGs are becoming key instruments for CA analysis very fast. Recent evolvements in employing KGs to CA investigation will be treated from the following four aspects: path analysis, attribution, consequence prediction, and analysis.
Attack Path Analysis: The CyGraph could query potential outbreak paths by comprehending the network environment. A CyGraph‐type graph‐centered strategy with a CA graph model unifies intricate network data with exposures, topology, firewall stratagems, CA patterns, and invasion alerts via CS data standardized languages [68]. This work’s model predicts outbreak paths utilizing network events (as with intrusion warnings, sensor logs, etc.). Correlating identified CA s with prospective attack paths is best, principally for critical assets’ defense, and improves CSA, e.g., inferring missed CA steps and eradicating false positives. The Neo4j database [48, 69] houses the output attack graph for query and visualization. Despite its efficiency in query and visualization for potential CA paths, this KG still faces several shortcomings: (i) it does not demonstrate how to infer new knowledge using KG, (ii) datasets with input data alert format with unclear firewall rules, and (iii) its designs misrepresent OSCTI (METRE knowledge). A KG to treat CAs has four entity types: SW, HW, vulnerabilities, and CA entity, to extend the CA path information [49, 70]. With these CA entities’ attributions (i.e., success rate, conditions, approaches, and earnings), this design used KG to build an attack path and augment the vulnerability assessment before trusting on the CVSS score [71]. The CA path could renovate local information through multiple sources thanks to KG’s depiction and information management. A graph strategy to obtain the ideal penetration path can increase efficiency further for insider and unknown attacks. A “two‐layer CT penetration graph” (TLTPG) defines the upper layer as a network environment penetration graph, and the lower one is any host’s pair penetration graph linking any host’s pair [29]. The KG describes each host’s CA‐related resources (e.g., SW, defenselessness, ports in usage, and privilege corresponding to a successful CA). This rationale greatly benefits the penetration path relating to hosts and integrating acquired information of 0‐day threats for unknown attack prediction. A KG could also represent and generate 0‐day CA paths with a link prediction and path ranking procedure [40]. KGs can comprehensively consider the CA existence, availability, impacts, knowledge deterioration intents, and asset types.
Attack Attribution: For a cyber warfare advantage, a defense must answer who attacked, where the occurrence point is, and to identify the attack vector. This step is assault attribution. Attack attribution solutions can identify the CA source, intermediate medium, and attack vector, enabling more targeted prevention and active defense. Attack attribution is essential to passive to an active effective defense. An automatic CA attribution framework was built using a six‐dimensional CSKG ontology that mixes a space‐ground with network information having multiple unique qualities and data sources [72]. Security people can probe the CSKG utilizing the host resource dimension to find the host asset in danger and assumed under attack, related vulnerabilities, and attribution tactic in sequence. After isolating CA evidence and locations, the attribution methodology can find the affected host resource. Causation‐based provenance graph creation technology from NSFOCUS’s blog appears in Ref. [73], introducing terminal, Syslog’s perspective, application log correlation, and network/terminal association. The terminal perspective ignored the second dimension’s application log and focused on files, filenames, and processes in one insulated host. The third level scheme prolonged the provenance graph from one host to a multi‐host network that might ameliorate causal analysis for a complete CA process. Still, it disregarded OSCTI and CSKG’s semantic context.
Consequence Prediction: Poor input validations and integer overflows can cause denial‐of‐service (DoS) and unauthorized code execution. Understanding weakness’s effects help assess system risk and respond quickly. A “common weakness enumeration” (CWE) KG [74, 75] includes textual descriptions, predicted repercussions, and SW weakness relationships. Present CWE data do not enable sophisticated reasoning tasks on SW frailties, such as forecasting missing concerns and CWE results. This study embedded KG weaknesses and their linkages in a semantic vector space relying on translation, description, and knowledge representation learning. Extensive studies developed vector embeddings to measure KG performance in CSA acquisition and inference tasks: CWE link prediction, triple classification, and end‐result prediction. Security tools can help stakeholders without CS skills understand a CA’s effects. Researchers can reduce cognitive effort by automatically forecasting CA repercussions for novel attacks.
Attack Analysis: The CSKG core graph shows vulnerabilities’ knowledge, CAs, assets, and interconnections. It is updated from different CA analysis websites. Scene KGs use outbreak‐specific node and network connectivity to extend graphs. All analytical input data comes from data collection and detection systems. Exploiting CSKGs, attack rule KBs, and spatiotemporal restrictions aids in elaborating composite attack chains of numerous CAs. Cyber professionals typically ignore alerts and miss actual CAs due to exhaustion from probing several alarms. Despite exploited vulnerabilities and payloads, CAs may deploy comparable abstract approaches. A causal graph‐based ATLAS system creates an end‐to‐end CA story from off‐the‐shelf audit logs [76]. Besides developing a sequential model, ATLAS utilizes NLP, causality analysis, and ML to identify critical CA patterns and non‐attack actions from a causal network. A causal graph CA symptom node is acknowledged for a CT warning event at inference time. ATLAS then creates a collection of candidate sequences for the symptom node, utilizes the sequence‐based model to find attack‐related nodes, and unifies the CA nodes to craft an attack history. The intelligence of 6G CPSs must support inner and exterior network knowledge. CA technique to generate KGs used CAPEC [47] and CWE in Neo4j [69], a graph database. This study only presented two query‐based application scenarios for identifying and responding to DDoS flood CAs and multi‐stage CAs using Neo4j’s query and display function rather than the KG reasoning function.


13.5.4 Clever Security Operation
Intelligent Operation: OT‐AI security can support security data dynamic queries and aggregation analysis, augmenting the reliability of security data operation studies [54]. KGs have a unified data view, realizing multi‐level technical experiences like risk perception, causal awareness, and robust decision‐making. Intelligent processing challenges emanate from models, data, and semantic perspectives [77]. KG application scenarios in security operation can be threefold as per CA [78]: (i) profiling, (ii) path pursuit and response strategy recommendation, and (iii) challenges of intelligent operation. It sorts out directional content viz. stipulated scenarios, application resolutions, and prospects, albeit not involving technical details.
Security Alert (SA) or Event Correlation Analysis (ECA): The “security operation center” (SOC) security researchers are often overwhelmed by security issues and trying to stay up with the latest CTs in the wild due to the ever‐changing CT landscape. Effectively correlating vast volumes of various alert or event data might prevent CAs by identifying concerns before they become problems. Traditional techniques store security evidence aspects in separate KBs, preventing synergy. A semantic mismatch between a KG using abstract CA knowledge like STIX 2.0 and system network logs containing behavior information hinders CSKG’s use [79]. Complex CAs make it difficult to efficiently incorporate context information for real‐time, correct analysis. Traditional relationship analysis with rules requires specialists’ CA scene construction knowledge without automatic reasoning. By unifying the network setup KG, vulnerability KG, CT‐KG, and intrusion warnings’ KG with the CSKG and describing each dimension’s data source, an integrated security ECA system may overcome the above problem. After normalization and fusion alarms, vulnerability alerts from the host were verified [80].
The CA correlation analysis also utilizes warnings in effect to query associated alerts, CVE objects, and CAPEC items to predict real attackers’ purposes. Rebuilding a series of KG alert scenarios employed the DARPA 2000 dataset for framework performance evaluation by comparing the total of remaining alerts after using KG for correlation analysis [9]. A theory associated multiple steps’ CAs with IDS’s warnings [81]. The consequential association analysis CSKG algorithm handles CS attack events and graphically displays the air‐ground integrated network’s attack scenario. The CSKG holds five‐entry tuples: (attack, event, alarm, relation, and rule). The association study calculated the coincidence degree among collected events’ sequences and those attacked in the KG.
Simulations can prove the algorithm’s practicality by comprehending the space‐ground integration network and experimental limits. Manual log investigation rarely scales, resulting in a lack of understanding and transparency regarding issues. A configurable framework for automated KG building from raw log messages was developed to address this issue [82]. Enabling semantic analysis of log data fills a major gap and provides KG builders with several data sources. In Ref. [67], ML is used for KGs to improve IDS‐generated alarms in current industrial systems, making them more helpful for human operators.


13.5.5 Smart Decision‐Making
Current CS assessments aim at personal experience and poor intelligence. Improving CTI assessment is a critical issue. KG technology makes studying the CS decision model and enhancing CTI assessment beneficial. Introducing KG‐reliant intelligent decision‐making research situations like CA generation strategy and security policy validation is crucial.
Attack Strategy Generation: An invader’s perspective on CA techniques can reveal security issues and provide solutions. A KG recommender CA in Ref. [83] contrasts CyGraph’s query‐based technique. A six‐tuple KG construction schema based on four open databases (CVE, CWE, MSF, and CAPEC) is included. This collaborative filtering characterizes node differences using meta‐path, a recommendation list generator that calculates path correlation scores with node vectors. ML feature extraction and heterogeneous information network meta‐path construction provide a CA entity recommendation algorithm in the second phase. This KG can search and recommend new CTI intelligently. This approach predicts vulnerability weaknesses better than content‐based search recommendations. It uses natural language vulnerability descriptions to forecast and recommend CA patterns. A knowledge‐driven CA strategy generation system [84] may manage several industrial control network vulnerabilities from an attacker’s standpoint. The method includes vulnerability exploitation KG, industrial control network graphics, and knowledge reasoning principles. Security experts recommend using the attack procedure to find device‐level CA routes. Initially, CA techniques can examine several vulnerabilities on device‐level nodes. A full CA graphical algorithm exploits the sequence for all device vulnerabilities and connects device‐level nodes consistent with the firewall and other protective device access restrictions. This KG generated CA pathways from numerous small‐scale control network vulnerabilities. Adding CTIs necessitates additional CA techniques as KG expands, especially the most cost‐effective ones.
Security Policy Validation: Its ontological, heuristic, workflow, and process layers enable logical analysis, CTI analysis, and CPS security policy validation [85]. The architecture is validated, and an event‐driven engine for intelligence graph traversal is prototyped via scenarios describing the most typical CTs in digital banking. However, this framework only supports digital banking apps and does not provide datasets.


13.5.6 Vulnerability Prediction and Supervision
Several use cases elucidate various CSKG analytic traits in vulnerability prediction and supervision. In security operations, managing, categorizing, quantifying, and prioritizing a system’s weaknesses is a vital precondition for CT elimination to successfully protect valuable resources.
KGs allow advanced knowledge about managing massive vulnerability records by organizing them in a structured ontological format. Another SEPSES KG scenario [48] is a query supporting security analysts by relating organizational asset information to a nonstop updated stream of notorious susceptibilities. A “CS vulnerability ontology” (CVO) is a theoretical model that represents formal knowledge vulnerability within the controlling domain [57], utilizing the CVO to propose a “cyber intelligence alert” (CIA) structure to send cyber alarms about forthcoming vulnerabilities and countermeasures. Its components embrace the vulnerability repository, exposure mapper, “social media intelligence extractor‐tagger” (SMIET), CVO, RDF converter, the “cyber intelligence ontology” (CIO), and cyber warnings rules engine. An industrial CSKG was stored in Neo4j [57, 86] grounded on Internet vulnerabilities to investigate, query, and envisage temporal, spatial, and correlation dimensions.
CyGraph correlated incursion alarms to notorious vulnerability paths and suggested the best actions for reacting to attacks. CyGraph forms a query‐centered predictive model of potential attack paths and dangerous vulnerabilities. As formerly said, a CSKG employing CWE [74] could estimate absent relations and typical CWEs’ consequences through a translation‐based, descriptive CT representation for the knowledge‐learning scheme. To discover hidden relationships among vulnerabilities, the intelligent flow of the CWE Chain’s samples [39] requires an automatic analysis query‐based model and demonstrated KG vulnerability (VulKG) employing vulnerability data (NVD, CVE, CPE, and CWE). Yet, the example could partially replace security experts’ analysis and labeling work under specific scenarios with the operator previously identifying the query objective. A malware KG, MalKG [53], is the first OO‐automated KG with CTI for effectively running sparse or erroneous threat information manually curating the MT3K benchmark dataset. It demonstrated the prediction of MalKG’s capabilities utilizing two use cases. One of the usage scenarios forecasts and sorts all potential vulnerabilities or CVEs from impacted SW by comprehensively utilizing facts from the network environment, malware, and KG. An exposure exploitation KG can integrate and extract multi‐dimensional domain knowledge [84]. KG attack strategies enhance widespread vulnerability abuse and flexible response performance by occupying each device’s corresponding node, displaying industrial network feasibility.
Similarly, chain reasoning and confidence appraisal studies [9] supported vulnerability labeling and latent relations’ discovery between CWEs. Similarity matching via source code level graphs judges the resemblances between the target node and the vulnerability database node. This tactic offers new insights into susceptibility mining, expanding relations in KGs aiming at vulnerability to identify alternatives with similar consequences [9].


13.5.7 Malware Acknowledgment and Analysis
KGs can evaluate and recognize malware. A graph‐centered malware rank inference MalRank algorithm appears in Ref. [87] to infer a node malignity score from its correlations to other KG entities, e.g., conjoint name servers or IP ranges through a KG modeling global observed entities’ associations in proxy and IDS logs, boosted by CTI and “OO intelligence” (OSINT). CT detection is formulated in the “security information and event management” (SIEM) milieu as a large‐scale graph inferential problem. Real‐world data experiments from a global enterprise’s SIEM showed that MalRank conserves a high detection rate, outshining its predecessor, i.e., belief propagation, in accuracy and efficiency.
Moreover, this approach effectively identifies previously unknown malicious entities like IP addresses and domain names. Along with the past informed application scenarios, MalKG could also handle the malware attribution scenario [53, 88]. As an illustration, given a newly learned malware, the expert must build a malware’s origination fingerprint by assembling good features, viz. campaign, author, and other things. MalKG automates the malware features’ prediction, e.g., the newly revealed malware may partake in similarities with disclosed malware from a particular APT group. APT hacker teams’ profiling and automatic attribution can be realized by mining key CTI elements and dynamic behavioral reasoning [53, 78]. The key solution establishes a unified language to designate different APT organizations’ behaviors and traits to build a KB about APT organizations without disclosing related research details.


13.5.8 Physical System Connection
The CSKG uses BD analysis and graph mining to intensely scrutinize the information and the physical layers coupling relationship in the industrial control systems and grasp decision‐making, risk prediction, accident analysis, CA identification, and other assisted traits and automated processing.
CS analytic capabilities in MITRE’s CSA method CyGraph from Refs. [56] and [68] comprise a simple network design with underlying connectivities amid routers, switches, firewalls, and hosts. The internal network possesses three defense domains (i.e., mission client terminals, DMZ, and data center). The outer firewall guards the in‐house network from the exterior and watches the crucial data center servers. The KG was built with firewall rules and vulnerability scan results based on the information on the network topology. A typical internal network model with six elements verifies the design’s effectiveness [49, 70], where the firewall insulates the intranet router from the Internet. The FTP server and hosts are connected to the router directly. A network example of generating penetration paths [29] contains an Internet host, a DMZ with a web server, and three subnets. The hacker is an Internet host. Constructing a proper experimental network setting could aid in demonstrating approaches’ effects and reproducing CA and defensive processes [89].
Exploring the control network systems’ security is also essential. An HW prototype comes from the industrial systems’ design, integrating ICT and OT elements. The network displays main traffic flows afterward [67]. A CT assessment for IoT terminals employing KG sensed and measured the CS risks and CTs of massive IoT terminals in real time [60, 90] but lacked a suitable network for evaluation. The domain KG may analyze multiple vulnerabilities in the control network to generate CA strategies [84]. The target network topology possesses the Internet, a router, two firewalls, an enterprise network, plus Ethernet. One firewall shields all local network assets. The other goes between the Ethernet and the enterprise network. The router connects the first firewall with the enterprise network. The second firewall plus the industrial Ethernet go after. The enterprise network assets are an admin host, web server, and printer. Some sensing peripherals (e.g., oximeters, valves, and flow meters) are connected to the Ethernet.
A “demilitarized zone” (DMZ) is an Internet subnet coupled via a router. A firewall isolates each subnet, and the hackers usually start Internet offensive actions so that investigators adapt firewalls to (i) tackle intricate networks by varying or adding devices, (ii) outspreading subnets, or (iii) altering connection mechanisms. The network topology renders the environment, inserting SW and HW into each node, securing protection measures and existing exposures.


13.5.9 Supplementary Reasoning Tasks
SE is a CA type wherein the hacker exploits human weaknesses through SE [91] and poses a severe CT SE threat’s barriers [92], calling for ontological development and assessment criteria as per applications. The ontology affords a formal, explicit knowledge schema to comprehend, analyze, reuse, and assign SE domain information via KG.
Today’s Internet has a significant amount of fake CS intelligence. A system can filter out information to get provenance information and represent it for CTI treatment [90]. This rationale enhances the existing CSKG model to encompass CTI and fused provenance graphs with CSKG reasoning to enforce information preservation and credibility, besides rejecting the rest. Besides, including provenance classes in the CSKG schema can give more evidence about the data source.
A KG embedding predicts within‐ and across‐type dealings for SW security entities appears in Ref. [93]. Finding missing relationships among entities supports analysts in enriching SW security evidence. Albeit, this CSKG is not OO, so one could not read its details. In Ref. [78], several other CSKG application scenarios and two conventional reasoning approaches exist. Despite some limitations in stating satisfactory particulars, the application scenarios, for instance, CT modeling, APT‐CT hunting, intelligent safekeeping, cyberspace valuation/mapping, supply chain safety, and CPS defense, were outlined [78]. Two reasoning technologies are established on CSKG: (a) relational via graph representation learning and (b) multi‐relational schemes through NNs.



13.6 Discussion and Future Trends on CSKG
It has been possible to use KGs in many knowledge‐driven CS tasks:
Additional OO Datasets: This is needed because the current ones do not solve all problems. Creating a CSKB dataset for development tasks can include environmental assets, attributions, existing topologies, and behavioral data (e.g., alarms and logs). Annotated CS datasets are essential for training or testing IE models, including pre‐training or prompt‐based language models. Present datasets could not handle this task productively, having various drawbacks: First, most datasets target only one IE task (entity mining), seldom for two or more; second, owing to different ontologies and research targets, the entities’ and relations’ kinds are different. Third, existing datasets rely on English, which cannot meet the multi‐language requirement; and last, manually interpreting the corpus continues as the primary initial data for the vertical model. New multi‐language CS IE datasets require extensive and reliable data investigation. A statement paper and standard annotation should accompany these anticipated datasets. Semi‐supervised or unsupervised extraction and prompt‐based generating methods can reduce the need for an annotated vertical corpus in the annotated process.
Dynamic Construction: Established KG frameworks for top‐down [94] and bottom‐up [95] approaches can build huge KBs. The first prevails in CS (creating an ontology schema first, then extracting corpus knowledge from it), primarily regarding expert knowledge. Ontology learning, or automated ontology construction technology, is still needed to capture new knowledge throughout ontology updates. Traditional KGs focus on deterministic, static entities, relations, attributions, etc. The KG investigations and prerequisites for field applications will incorporate event and dynamic knowledge akin to conditional relationships, temporal information, causal evidence, and event subordination linkages. Building a CS event temporal KG will require further work to represent CS event knowledge and facilitate relevant logical reasoning.
Application Scenarios [9]: Despite stable CSKG creation methods, no one supports a unified OO KG. KGs are helpful but incomplete, redundant, and ambiguous, resulting in uninformative query responses. Different conditions require constant KG rebuilding. The KG’s automated reasoning ability is underutilized, and its use to tackle CS practical problems like KG completion is unclear. More research and reasoning investigations are needed to gain knowledge. The semantic mismatch between CSKG and logs limits its usage in CA path examination. Filling this semantic gap with necessary knowledge allows the semantic link between CSKG and log. To identify dangers and network CSA, the CSKG must engage more with the network’s internal awareness, notably the CPS, and use its automated reasoning and association analysis skills.
Evaluation Criteria: CSKG applications across most CS functions in defensive and offensive circumstances are still developing. KG evaluation standards are lacking. Researchers often assess IE model correctness, precision, and F1‐score values. “Mean rank” (MR), “mean reciprocal rank” (MRR), plus “Hits@n”, can test the triple prediction model’s logic, disclose the KG’s query, and deliver visualization capabilities in instances entailing queries [9]. These are not thorough examinations of KG’s notions, as no one can deem a KG superior in certain scenarios.
The IoT has enticed interest lately since it helps consumers enhance their lifestyles and professionally keep up with CPS technology breakthroughs. IoT edge devices vary in technology and storage file formats. These devices must authenticate each other before delivering data by exploiting highly secure mutual authentication. Mutual authentication is crucial to peer‐to‐peer communication. These resource‐constrained devices authenticate with locked session keys. Successful authentication authorizes a device to access shared resources. Data privacy breaches can affect confidentiality and integrity. Thus, devices seeking data transmission must be validated. Although blockchain and AI ameliorate security extensively, this work focuses on AI alone. In future works, blockchain can store validated session keys for network devices decentralizedly. Blockchain helps stabilize edge devices during low battery and guarantees cloud and fog computing access [96–99]. Albeit AI learns and adapts to threats better with new key management technologies to improve security, the discussed designs will benefit from blockchain [97–99]. This manuscript analyzes contemporary security trends and traditional essential security procedures, bringing a thorough quality analysis on authentication and session keys, merging SW and HW entities, and AI‐based CS authentication.


13.7 Conclusion
This chapter overviewed various works about “artificial intelligence” (AI) for “cybersecurity knowledge graph” (CSKG) in assorted application scenarios, presenting a succinct CSKG background, underlying concepts, and construction technologies. Then, several openly available datasets for building CSKGs, their IE tasks, and their downsides are exemplified. Next, a comparative revision of different AI designs for CS was carried out, elaborating on recent CSKG scenarios’ progress. Security managers can count on KG to naturally comprehend security intelligence, network situations, and entity relationships. Then, security entities’ attributes were discovered, which could function as a groundwork for understanding CS knowledge, analyzing CS data, and finding attack patterns and abnormal traits related to cyberattacks.


References

1 Kumar, K. and Pande, B.P. (2022). Applications of machine learning techniques in the realm of cybersecurity. Cyber Security and Digital Forensics 2022: 295–
