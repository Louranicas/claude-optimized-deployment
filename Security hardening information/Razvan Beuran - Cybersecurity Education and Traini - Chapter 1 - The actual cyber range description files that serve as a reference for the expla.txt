# Security Chapter Extract
Book: Razvan Beuran - Cybersecurity Education and Training (2025, Springer Nature Singapore) - libgen.li
Chapter: 1 - The actual cyber range description files that serve as a reference for the explanation below are included in the corresponding archive available for download on the CROND web page [9]. One-VM Environment For the first level of the training content set, named Level 1, a single guest VM is required for each participant, which CyTrONE needs to deploy. Therefore, the topology of this environment is very basic, as shown in Fig. 12.4a. Thus, the cyber range contains one VM named desktop, which is connected to the office subnet. The key elements that must be defined in this case in the cyber range description file are those guest setup tasks that are needed to prepare the environment, namely:Create a user account for the desktop VM.Emulate an SSH attack on that user account.Capture network traffic in PCAP format for another SSH attack.Install the packages wireshark, GeoIP and lsof.Emulate a malicious program that leads to an increase in CPU load.
All the above setup actions are required for trainees to be able to solve the questions that are included in the Level 1 training content representation file. For an example of the actual syntax used in the corresponding cyber range description file to specify the first three of these tasks, please refer to lines 13–25 in Fig. 12.3.The image shows two diagrams representing cyber range setups. The first diagram, labeled "office," features one virtual machine (VM) named "desktop," corresponding to Level 1 training content. The second diagram, labeled "external_servers," includes two VMs named "mail" and "web," corresponding to Level 2 training content.Fig. 12.4Simple cyber range examples
Two-VM Environment The second level of the training content set, named Level 2, is slightly more complicated in terms of network topology, since two guest VMs are required to solve the included questions, a mail server and a web server. These two VMs, named mail and web, respectively, are deployed by CyTrONE according to the topology presented in Fig. 12.4b, where they are both connected to the subnet named external_servers. The key aspects to be defined in this case as well are the tasks needed to set up the training environment, as follows:Setup of mailCreate two user accounts, and modify the password for the root account.Capture network traffic in PCAP format for an emulated DDoS attack.Install the packages wireshark and nmap.Copy and execute the script needed to install the password cracking tool John the Ripper, and the Wi-Fi cracker software Aircrack-ng.Copy a Wi-Fi PCAP file that was prepared in advance.Configure the firewall rules for this VM.
Setup of webModify the password for the root account.Install the packages httpd and php.Copy the necessary resources, and execute a script to set up the web server.Configure the firewall rules for this VM.
Security Relevance Score: 14
Word Count: 2825
Extracted: 2025-06-13 23:41:15

---

The actual cyber range description files that serve as a reference for the explanation below are included in the corresponding archive available for download on the CROND web page [9]. One-VM Environment For the first level of the training content set, named Level 1, a single guest VM is required for each participant, which CyTrONE needs to deploy. Therefore, the topology of this environment is very basic, as shown in Fig. 12.4a. Thus, the cyber range contains one VM named desktop, which is connected to the office subnet. The key elements that must be defined in this case in the cyber range description file are those guest setup tasks that are needed to prepare the environment, namely:Create a user account for the desktop VM.Emulate an SSH attack on that user account.Capture network traffic in PCAP format for another SSH attack.Install the packages wireshark, GeoIP and lsof.Emulate a malicious program that leads to an increase in CPU load.
All the above setup actions are required for trainees to be able to solve the questions that are included in the Level 1 training content representation file. For an example of the actual syntax used in the corresponding cyber range description file to specify the first three of these tasks, please refer to lines 13–25 in Fig. 12.3.The image shows two diagrams representing cyber range setups. The first diagram, labeled "office," features one virtual machine (VM) named "desktop," corresponding to Level 1 training content. The second diagram, labeled "external_servers," includes two VMs named "mail" and "web," corresponding to Level 2 training content.Fig. 12.4Simple cyber range examples
Two-VM Environment The second level of the training content set, named Level 2, is slightly more complicated in terms of network topology, since two guest VMs are required to solve the included questions, a mail server and a web server. These two VMs, named mail and web, respectively, are deployed by CyTrONE according to the topology presented in Fig. 12.4b, where they are both connected to the subnet named external_servers. The key aspects to be defined in this case as well are the tasks needed to set up the training environment, as follows:Setup of mailCreate two user accounts, and modify the password for the root account.Capture network traffic in PCAP format for an emulated DDoS attack.Install the packages wireshark and nmap.Copy and execute the script needed to install the password cracking tool John the Ripper, and the Wi-Fi cracker software Aircrack-ng.Copy a Wi-Fi PCAP file that was prepared in advance.Configure the firewall rules for this VM.
Setup of webModify the password for the root account.Install the packages httpd and php.Copy the necessary resources, and execute a script to set up the web server.Configure the firewall rules for this VM.

The two-VM environment was necessary for this scenario because the questions in the associated training content ask participants to conduct a wider variety of tasks. Thus, several initial tasks are related to the investigation of a possible attack on the mail server. However, other tasks are related to penetration testing activities that are specific to web servers, such as Local File Inclusion or PHP Shell Upload techniques. In addition, a task related to network discovery must also be completed. For all these reasons, this more complicated two VM environment must be created.Note that changing the password for the root account is generally needed for guest VMs in CyTrONE since the password used in the base VM is predetermined, so as to make possible the initial automatic setup. Modifying the password when the cyber range is created ensures that participants cannot use root privileges, even if they are familiar with the predetermined password, as doing that would make solving some of the tasks easier.
12.4.2.2 Realistic Cyber RangesFor the next two examples, we will present more realistic cyber ranges that have a composition similar to actual company networks. Such cybersecurity training environments are required when organizers intend to place participants in conditions that mimic more closely real-life situations.IP Camera Scenario The first realistic cyber range example, which uses the network topology shown in Fig. 12.5, is inspired by the content of one of the written tests included in the Registered Information Security Specialist Examination1 conducted by the Information-technology Promotion Agency (IPA) in Japan.Diagram illustrating a workflow with labeled components and arrows. The "pen" connects to "office" with an arrow labeled "1," indicating a process flow. From "office," an arrow labeled "2" leads to "c2," suggesting a continuation of the process. Below "office," two components, "cam" and "web," are connected, with an arrow labeled "3" looping from "web" back to "cam," indicating a cyclical process.Fig. 12.5Cyber range for the IP camera scenario
In this scenario, trainees assume the role of pentesters that are tasked with reproducing a security incident that occurred in an organization. To start the training, they need to connect to the pentesting machine, named pen, where all the tools needed for the investigation are installed. Then, they have to carry out the following three main steps, which are also depicted in Fig. 12.5 for clarity: 1.Trainees use the pentesting machine pen to connect to a guest VM playing the role of an IP camera, named cam, via the TELNET protocol, which is the method allegedly employed by attackers in the security incident (step ① in the figure). 2.Next, trainees download an attack tool, slowhttptest in this case, from a guest VM that plays the role of a Command and Control (C&C) server, named c2, to the cam guest VM (step ②). 3.Finally, trainees use the downloaded attack tool to conduct an attack on another guest VM representing the web server of the organization, named web (step ③). 
The following tasks are used in the cyber range description file to set up the training environment needed to enact the above scenario:Setup of penInstall the packages nmap and telnet.Copy and execute a script to install the Metasploit pentesting framework.Modify the password for the root account.
Setup of camInstall the packages httpd, telnet-server, and wget.Copy and execute scripts to configure all the packages and the firewall.Modify the password for the root account.
Setup of webInstall the package httpd.Copy and execute scripts to configure the httpd package and the firewall.Modify the password for the root account.
Setup of c2Install the package httpd.Copy and execute scripts to configure the httpd package, the slowhttptest DoS attack tool, as well as the firewall.Modify the password for the root account.

This cyber range example is relevant due to the realism of the training scenario, with a sequence of steps that are inspired by an actual cybersecurity incident. On the other hand, the realism of the cyber range network topology is relatively low, as the topology was simplified for the purposes of the training activity, with all the VMs being connected to a single subnet (even though in reality several internal subnets and an external internet connection would be required).Company Network Scenario For the second realistic cyber range example, we present a more complex network topology, which mimics that of a company network. As shown in Fig. 12.6, this example uses a firewall to separate the external-facing servers, which are placed in a so-called Demilitarized Zone (DMZ), from the other servers and PCs located in the internal LAN. The following three subnets are used to define the topology for this scenario:external: Subnet including servers that are accessible from outside the company, in this case a server providing DNS and email services named dnsmail.internal: Subnet which contains servers that are accessible only from inside the company, in our scenario a file server and a database server, named filesrv and dbsrv, respectively.office: Subnet that includes office computers, which in this scenario are represented by a single machine named desktop.
Network diagram showing a firewall connecting external and internal networks. The external network includes "dnsmail," while the internal network connects "filesrv" and "dbsrv." An office network is linked to the internal network, featuring "desktop."Fig. 12.6Cyber range for the company network scenario
In addition to the four machines mentioned above, the firewall device, named firewall, plays a significant role in the described topology. In particular, the firewall allows the machines in the three subnets to connect with each other, while preventing unrelated traffic from the DMZ from reaching the intranet.The main point of interest of this example scenario is the manner in which such a network topology is represented in the CyTrONE cyber range description file. The excerpt shown in Fig. 12.7 presents the clone settings section of the file that is used to represent the cyber range discussed above.A YAML configuration file for a cloud setup is displayed. It includes settings for a firewall with rules for allowing specific ports and protocols. The file defines a host with a unique ID and a firewall with rules for TCP and UDP protocols on various ports. The configuration specifies network interfaces and applies security rules to manage data flow.Fig. 12.7Clone settings section of a cyber range description file defining the topology for the company network scenario
The excerpt makes it clear how the composition of the cyber range is defined in terms of which guests, and how many of them are to be included, as specified on lines 6–21 in the figure. As for the network communication and topology, the two most notable aspects regarding the custom syntax included in the representation shown in Fig. 12.7 are explained next:The element forwarding_rules is used to configure the firewall so as to allow access from the office subnet to the MySQL database (port 3306) and SMB file server (ports 139 and 445) in the internal subnet, as well as the SMTP server (port 25) and DNS service (port 53) in the external subnet (see lines 9–12).The subsection networks is employed to define the actual network topology (see lines 24–33); for example, on lines 28–30, for the internal subnet, filesrv and dbsrv interfaces are connected as subnet members, and the interface eth1 of the firewall is configured as the gateway for that subnet.



12.5 Lessons LearnedThe implementation process of the CyTrONE framework and its modules began in 2016, starting with the core component, the cyber range instantiation system CyRIS. During the many years of development, we have understood deeply the positive and negative aspects related to the various design decisions we made, as it will be explained below. We note here that interested readers can also consult [6] for a discussion of lessons learned in the context of cybersecurity training platform development from various perspectives.12.5.1 Modular ArchitectureLet us first discuss our experience with designing and implementing the CyTrONE framework by using a modular architecture. This paradigm signifies that a system is composed of a set of standalone modules that can be developed and tested independently. Therefore, modularity is considered to be one of the key approaches aimed at sound system engineering.As explained in Sect. 12.2.1, we implemented a total of five software modules in the CyTrONE framework that interact with each other: Web UI as user interface, CyTrONE for overall management, CyLMS for interaction with the LMS, CyRIS for cyber range creation, and CyPROM for dynamic scenario progression management. In addition, the external module Moodle provides LMS functionality to the framework (cf. Fig. 12.1).12.5.1.1 AdvantagesIn what follows we will summarize the main advantages that the modular design of CyTrONE had from our perspective.Function Separation Given that each module of CyTrONE is in charge of functionality that has a limited scope, the design and implementation of each module were done independently and sometimes even in parallel. The only constraints during the development process were related to the interactions between modules. For this purpose, we defined a communication protocol based on the HTTP/HTTPS protocol, which is a highly flexible solution.Distributed Execution Since the interaction between CyTrONE modules relies on a standard network protocol, it is possible to execute each module in a distributed manner on different servers. This not only makes the architecture more flexible, but also allows distributing the processing load.This capability is particularly useful for cyber range creation. Thus, when the total number of instances cannot be created on a single server, we have taken advantage of this flexibility to have several CyRIS modules running on multiple hosts, each being in charge of creating cyber range instances on those hosts.Standalone Module Use Since CyTrONE modules can operate independently of each other, they can also be executed in a standalone manner. Independent testing is one straightforward use of this feature. However, the possibility for training organizers to choose only the module or modules that are necessary for a particular task is another important advantage. Such an approach conveniently reduces the complexity of the setup procedure and also decreases the execution load on the host.For example, we have heard of a university that used only the CyRIS module of the framework to create a training environment for teaching OS operation skills. In that case, no LMS features were required, with the education tasks being handled directly by the course instructor, hence the simplified setup.
12.5.1.2 DisadvantagesAdopting a modular architecture for CyTrONE also made us realize several disadvantages of this approach, as it will be explained next. Nevertheless, we consider that the advantages greatly exceeded disadvantages in this case; hence, using such a modular architecture was an overall positive decision.Development Complexity One main issue regarding the development of the standalone modules in CyTrONE is that communication protocols between them had to be designed and implemented, as mentioned above, instead of simply making direct function calls between software modules.In particular in the beginning of the development process, whenever a new feature that affected module interaction was to be added, the communication protocol implementation had to be updated for both the sending and receiving modules. Fortunately, such changes became less frequent as the implementation matured, when most functionality changes were done internally to the modules.In addition to the above issue, the possibility of standalone execution of modules also meant that their core features had to be accessible via basic user interfaces, such as command line. This also slightly increased the implementation effort required to develop each module.User Guide Complexity Making it possible for end users to execute the CyTrONE modules in a standalone manner had another consequence. Thus, each module required a separate user guide to explain its functionality and features. Maintaining the user guides for all the modules and describing the interactions with the other modules (especially in the CyTrONE user guide) are relatively challenging tasks that required careful thinking.

12.5.2 Moodle LMS RelianceThe next CyTrONE feature that we will discuss is its reliance on the Moodle LMS. This refers first of all to the Portal functionality, which is used both by trainees and instructors, but also to the Education Functions aspect, for instructors to follow the progress of trainees, for example (see Sect. 12.2).12.5.2.1 AdvantagesIntegrating the Moodle LMS as a CyTrONE component had several advantages from our perspective, as follows.Rich Capabilities As an LMS that is widely used, and that has been developed for more than 20 years, Moodle has very rich capabilities regarding learning management. Some of these capabilities include user account management, learning activity management, learning activity scoring, score management, etc. Through the integration with the framework, CyTrONE can leverage all those capabilities with a minimum development effort (which is mainly related to the implementation in CyLMS of the communication mechanism with Moodle).Familiar UI In addition, since Moodle is a very well-known LMS, many instructors and trainees are already familiar with its interface and functions. This means that the amount of effort that is needed for new CyTrONE users to get used to the training UI is minimal in many cases.SCORM Compatibility The compatibility of Moodle with the generic SCORM format is another important advantage. Since we use SCORM for importing training activities into Moodle, we can say that our framework is not tightly coupled with Moodle, as any other LMS that supports the SCORM format could be integrated with CyTrONE in case a certain organization prefers a different LMS.
12.5.2.2 DisadvantagesAs seen below, there are not many disadvantages of using Moodle LMS, and we consider that reliance on it was also a good framework design decision.Lack of Full Control One drawback of having an external module, such as Moodle, as part of the CyTrONE framework is that developers do not have full control over its functionality. For instance, this leads to possible limitations in terms of the user interface, as that provided by the LMS must be employed as such.Code Porting Concerns Adding a desired feature that is not already provided by Moodle requires either developing a plugin for it, or even modifying the original source code of Moodle. Although code changes are possible due to the open-source nature of Moodle, this task is not only challenging in terms of programming, but the need to port that feature to newer versions of Moodle makes updates difficult.

12.5.3 YAML RepresentationBoth for training content and training environment representation, CyTrONE uses the YAML text-based format, as explained in Sects. 12.3 and 12.
