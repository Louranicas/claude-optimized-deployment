# Security Chapter Extract
Book: Shilpa Mahajan_ Mehak Khurana_ Vania Vieira Estrela - Applying Artificial Intelligence in Cybersecurity Analytics and Cyber Threat Detection (2024, WILEY) - libgen.li
Chapter: 49 - 2 Baldangombo, U., Jambaljav, N., and Horng, S.‐J. (2013). A static malware detection system using data mining methods. International Journal of Artificial Intelligence and Applications 4 (4): 113–126.
3 Wang, T.‐Y., Wu, C.‐H., and Hsieh, C.‐C. (2009). Detecting unknown malicious executables using portable executable headers. In: Proceedings of the 5th International Conference on Network and Communication Security, 278–284.
4 Tian, R., Islam, R., Batten, L., and Versteeg, S. (2010). Differentiating malware from clean ware using behavioral analysis. In: Proceedings of the 5th International Conference on Malicious and Unwanted Software: MALWARE 2010, 23–30.
5 Wang, C., Pang, J., Zhao, R., and Liu, X. (2009). Using API sequence and Bayes algorithm to detect suspicious behavior. In: Proceedings of the International Conference on Communication Software and Networks, 544–548.
6 Steven, A.H., Stephanie, F., and Anil, S. (1998). Intrusion detection using sequences of system calls. Journal of Computer Security 6 (3): 151–180.
7 Lo, T.D., Ordonez, P., and Cepeda, C. (2016). Feature selection and improving classification performance for malware detection. In: Proceedings of the IEEE International Conferences on Big Data and Cloud Computing, Social Computing and Networking, Sustainable Computing and Communications, 560–566.
8 Lo, C.T.D., Pablo, O., and Carlos, C. (2016). Feature selection and improving classification performance for malware detection. In: IEEE International Conferences on Big Data and Cloud Computing (BDCloud), Social Computing and Networking (SocialCom), Sustainable Computing and Communications (SustainCom), 560–566.
9 Win32 API Programming with Visual Basic by Roman, Steven–ISBN 10: 1565926315–ISBN 13: 9781565926318–O’Reilly Media–1999–Softcover.
10 Ye, Q., Wu, X., and Yan, B. (2010). An intrusion detection approach based on system call sequences and rules extraction. In: e‐business and information system security (EBISS), 2010 2nd international conference on. Wuhan, China: IEEE.
11 Arshad, J., Townend, P., and Xu, J. (2011). A novel intrusion severity analysis approach for clouds. Future Generation Computer Systems. The International Journal of Grid Computing and eScience 28 (7): 965–1154.
12 Jin, H. et al. (2013). A VMM‐based intrusion prevention system in cloud computing environment. The Journal of Supercomputing 66 (3): 1133–1151.
13 Shafiq, M.Z., Tabish, S.M., Mirza, F., and Farooq, M. (2009). PE‐Miner: mining structural information to detect malicious executables in real‐time. Recent Advances in Intrusion Detection 121–141.
14 Santos, I., Nieves, J., and Bringas, P.G. (2011). Semi‐supervised learning for unknown malware detection. In: International Symposium on DCAI. AISC, vol. 91 (ed. A. Abraham, J.M. Corchado, S.R. González, and J.F. De Paz Santana), 415–422. Heidelberg: Springer.
15 Lee, W., Stolfo, J.S., and Chan, P.K. (1997). Learning patterns from unix process execution traces for intrusion detection. In: Proceedings of AAAI97 workshop on AI methods in fraud and risk management.
16 Warrender, C., Forrest, S., and Pearlmutter, B. (1999). Detecting intrusions using system calls: alternative data models. In: IEEE Symposium on Security and Privacy. IEEE.
17 Ghosh, A.K., Schwartzbard, A., and Schatz, M. (1999). Learning program behaviour profiles for intrusion detection. In: Proceedings of 1st USENIX Workshop on Intrusion Detection.
18 Bharadwaja, S. et al. (2011). Collabra: a xen hypervisor based collaborative intrusion detection system. In: Information technology: New generations (ITNG), 2011 eighth international conference on. Las Vegas, NV: IEEE.
19 Vogl, S. (2010). A bottom‐up approach to VMI‐based Kernel‐level Rootkit detection. Ph.D. thesis in Computer Science, Technische Unversität München.
20 Kwon, H. et al. (2011). Self‐similarity based lightweight intrusion detection method for cloud computing intelligent information and database systems. In: Third international conference, ACIIDS 2011, Daegu, Korea, April 20–22, 2011, Proceedings, Part II (ed. N.N. Thanh, K. ChongGun, and J. Adam), 353–362. Berlin, Heidelberg: Springer.
21 Jinzhu, K. (2011). AdjointVM: a new intrusion detection model for cloud computing. Energy Procedia 13 (1): 7902–7911.
22 Shafiq, M.Z., Tabish, S.M., Mirza, F., and Farooq, M. (2009). PE‐Miner: mining structural information to detect malicious executables in realtime. In: Recent Advances in Intrusion Detection, vol. 5758 of the Series Lecture Notes in Computer Science, 121–141.
23 Wang, C., Pang, J., Zhao, R., and Liu, X. (2009). Using API sequence and Bayes algorithm to detect suspicious behaviour. In: International Conference on Communication Software and Networks, 544–548.
24 Shalaginov, A., Grini, L.S., and Franke, K. (2016). Understanding neuro‐fuzzy on a class of multinomial malware detection problems. In: IEEE International Joint Conference on Neural Networks (IJCNN), 684–691.
25 Tian, R., Islam, R., Batten, L., and Versteeg, S. (2010). Differentiating malware from clean ware using behavioural analysis. In: Proceedings of the 5th International Conference on Malicious and Unwanted Software: MALWARE, 2010, 23–30.
26 Wang, T.‐Y., Wu, C.‐H., and Hsieh, C.‐C. (2009). Detecting unknown malicious executables using portable executable headers. In: NCM, Fifth International Joint Conference on INC, IMS and IDC, 278–284.
27 Pektas, A. and Acarman, T. (2017). Classification of malware families based on runtime behaviours. Journal of Information Security and Applications 37: 91–100.
Security Relevance Score: 12
Word Count: 1253
Extracted: 2025-06-13 23:40:31

---

2 Baldangombo, U., Jambaljav, N., and Horng, S.‐J. (2013). A static malware detection system using data mining methods. International Journal of Artificial Intelligence and Applications 4 (4): 113–126.
3 Wang, T.‐Y., Wu, C.‐H., and Hsieh, C.‐C. (2009). Detecting unknown malicious executables using portable executable headers. In: Proceedings of the 5th International Conference on Network and Communication Security, 278–284.
4 Tian, R., Islam, R., Batten, L., and Versteeg, S. (2010). Differentiating malware from clean ware using behavioral analysis. In: Proceedings of the 5th International Conference on Malicious and Unwanted Software: MALWARE 2010, 23–30.
5 Wang, C., Pang, J., Zhao, R., and Liu, X. (2009). Using API sequence and Bayes algorithm to detect suspicious behavior. In: Proceedings of the International Conference on Communication Software and Networks, 544–548.
6 Steven, A.H., Stephanie, F., and Anil, S. (1998). Intrusion detection using sequences of system calls. Journal of Computer Security 6 (3): 151–180.
7 Lo, T.D., Ordonez, P., and Cepeda, C. (2016). Feature selection and improving classification performance for malware detection. In: Proceedings of the IEEE International Conferences on Big Data and Cloud Computing, Social Computing and Networking, Sustainable Computing and Communications, 560–566.
8 Lo, C.T.D., Pablo, O., and Carlos, C. (2016). Feature selection and improving classification performance for malware detection. In: IEEE International Conferences on Big Data and Cloud Computing (BDCloud), Social Computing and Networking (SocialCom), Sustainable Computing and Communications (SustainCom), 560–566.
9 Win32 API Programming with Visual Basic by Roman, Steven–ISBN 10: 1565926315–ISBN 13: 9781565926318–O’Reilly Media–1999–Softcover.
10 Ye, Q., Wu, X., and Yan, B. (2010). An intrusion detection approach based on system call sequences and rules extraction. In: e‐business and information system security (EBISS), 2010 2nd international conference on. Wuhan, China: IEEE.
11 Arshad, J., Townend, P., and Xu, J. (2011). A novel intrusion severity analysis approach for clouds. Future Generation Computer Systems. The International Journal of Grid Computing and eScience 28 (7): 965–1154.
12 Jin, H. et al. (2013). A VMM‐based intrusion prevention system in cloud computing environment. The Journal of Supercomputing 66 (3): 1133–1151.
13 Shafiq, M.Z., Tabish, S.M., Mirza, F., and Farooq, M. (2009). PE‐Miner: mining structural information to detect malicious executables in real‐time. Recent Advances in Intrusion Detection 121–141.
14 Santos, I., Nieves, J., and Bringas, P.G. (2011). Semi‐supervised learning for unknown malware detection. In: International Symposium on DCAI. AISC, vol. 91 (ed. A. Abraham, J.M. Corchado, S.R. González, and J.F. De Paz Santana), 415–422. Heidelberg: Springer.
15 Lee, W., Stolfo, J.S., and Chan, P.K. (1997). Learning patterns from unix process execution traces for intrusion detection. In: Proceedings of AAAI97 workshop on AI methods in fraud and risk management.
16 Warrender, C., Forrest, S., and Pearlmutter, B. (1999). Detecting intrusions using system calls: alternative data models. In: IEEE Symposium on Security and Privacy. IEEE.
17 Ghosh, A.K., Schwartzbard, A., and Schatz, M. (1999). Learning program behaviour profiles for intrusion detection. In: Proceedings of 1st USENIX Workshop on Intrusion Detection.
18 Bharadwaja, S. et al. (2011). Collabra: a xen hypervisor based collaborative intrusion detection system. In: Information technology: New generations (ITNG), 2011 eighth international conference on. Las Vegas, NV: IEEE.
19 Vogl, S. (2010). A bottom‐up approach to VMI‐based Kernel‐level Rootkit detection. Ph.D. thesis in Computer Science, Technische Unversität München.
20 Kwon, H. et al. (2011). Self‐similarity based lightweight intrusion detection method for cloud computing intelligent information and database systems. In: Third international conference, ACIIDS 2011, Daegu, Korea, April 20–22, 2011, Proceedings, Part II (ed. N.N. Thanh, K. ChongGun, and J. Adam), 353–362. Berlin, Heidelberg: Springer.
21 Jinzhu, K. (2011). AdjointVM: a new intrusion detection model for cloud computing. Energy Procedia 13 (1): 7902–7911.
22 Shafiq, M.Z., Tabish, S.M., Mirza, F., and Farooq, M. (2009). PE‐Miner: mining structural information to detect malicious executables in realtime. In: Recent Advances in Intrusion Detection, vol. 5758 of the Series Lecture Notes in Computer Science, 121–141.
23 Wang, C., Pang, J., Zhao, R., and Liu, X. (2009). Using API sequence and Bayes algorithm to detect suspicious behaviour. In: International Conference on Communication Software and Networks, 544–548.
24 Shalaginov, A., Grini, L.S., and Franke, K. (2016). Understanding neuro‐fuzzy on a class of multinomial malware detection problems. In: IEEE International Joint Conference on Neural Networks (IJCNN), 684–691.
25 Tian, R., Islam, R., Batten, L., and Versteeg, S. (2010). Differentiating malware from clean ware using behavioural analysis. In: Proceedings of the 5th International Conference on Malicious and Unwanted Software: MALWARE, 2010, 23–30.
26 Wang, T.‐Y., Wu, C.‐H., and Hsieh, C.‐C. (2009). Detecting unknown malicious executables using portable executable headers. In: NCM, Fifth International Joint Conference on INC, IMS and IDC, 278–284.
27 Pektas, A. and Acarman, T. (2017). Classification of malware families based on runtime behaviours. Journal of Information Security and Applications 37: 91–100.












2Detection and Analysis of Botnet Attacks Using Machine Learning Techniques
Supriya Raheja
Amity University, Noida, India


2.1 Introduction
Internet access is now considered to be a basic requirement for everyone. The age of cloud computing, which allows users to access and store data over the cloud, is currently upon us. A public, private, and hybrid shared lake of computing resources, such as storage, services, servers, networks, and applications, is what cloud computing represents. It enables convenient, on‐demand network access from anywhere. These services can be delivered swiftly and with the least amount of managerial work. The threat of various attacks carried out by harmful software is there nowadays for devices that are linked to the internet. Access to the cloud servers is possible. The more cloud computing is used, the more cyberattacks there will be thanks to the internet.
One of the most significant threats to online security is the botnet. The phrase “botnet,” which combines the terms “Bot” and “Network,” refers to a collection of hacked, infected, internet‐connected devices that are under the direction of a person known as the “Botmaster” or “Botterder.” Through a command‐and‐control server, the botmaster can remotely manipulate these infected devices. Because botnets enable a one‐to‐many interaction between the command‐and‐control server and the bots, the botmaster uses them for things like advertising and cyberattacks. As soon as a device is infected with malicious code, it joins a botnet and begins to work for the botmaster without the user’s knowledge. Botnet spreads itself periodically by infecting an increasing number of computers, laptops, servers, and mobile devices.
Most internet users today are victims of the numerous cyberattacks that are carried out using botnets. Cybercrimes such as DDoS, click fraud, phishing fraud, key logging, bitcoin fraud, spamming, sniffing traffic, propagating new viruses, and abusing Google AdSense can all be carried out by botmasters. Today, the botnet is being used as the foundation for all online cybercrimes. Drive‐by downloads, emails, and pirated software are the most popular ways for a botmaster to infect a user device and turn it into a zombie. Numerous detection methods have been suggested based on prior research.
However, most of them are concentrated on offline botnet detection; we still need to concentrate on the real‐time detection. The two primary categories of the currently used botnet detection methods are intrusion detection systems (IDSs) and Honeynets Based Detection Techniques. To identify botnet attacks and shield cloud servers from them, researchers concentrate on cybersecurity and machine learning (ML). ML algorithms are now involved in more and more aspects of everyday life, from what one can read and watch, to how one can shop, to who one can meet, and how one can travel [1–5]. This study presents the performance comparison of different ML algorithms for the detection of Internet of Things (IoT) botnet attacks.
The rest of the work is structured as mentioned.
