# Security Chapter Extract
Book: Debrupa Palit - Cybersecurity Today_ Cyber attacks, network security, and threat prevention (2024) - libgen.li
Chapter: 5 - This method facilitates secure communication between two parties without necessitating both parties to possess identical secret keys. Asymmetric encryption boasts several advantages over symmetric encryption, where a single key is used for encryption and decryption.
In the asymmetric encryption process, two parties are involved: The sender and the receiver, each with their own public and private keys. Initially, the sender acquires the receiver's public key. Subsequently, the sender encrypts the plain text message using the receiver's public key, resulting in ciphertext. This ciphertext is then transmitted to the receiver, who decrypts it using their private key, returning it to its original readable form, plain text. Due to the one-way nature of the encryption function, one sender cannot decipher the messages of another sender, even if both have access to the receiver's public key.
The process of asymmetric encryption can be explained as follows:
Security Relevance Score: 12
Word Count: 2601
Extracted: 2025-06-13 23:40:49

---

This method facilitates secure communication between two parties without necessitating both parties to possess identical secret keys. Asymmetric encryption boasts several advantages over symmetric encryption, where a single key is used for encryption and decryption.
In the asymmetric encryption process, two parties are involved: The sender and the receiver, each with their own public and private keys. Initially, the sender acquires the receiver's public key. Subsequently, the sender encrypts the plain text message using the receiver's public key, resulting in ciphertext. This ciphertext is then transmitted to the receiver, who decrypts it using their private key, returning it to its original readable form, plain text. Due to the one-way nature of the encryption function, one sender cannot decipher the messages of another sender, even if both have access to the receiver's public key.
The process of asymmetric encryption can be explained as follows:

Registration: The public and private keys are generated by an official entity, and the user and the sender connect with them.
Lookup: The sender searches for the recipient's public key information in a Public key directory.
Encryption: A message is created by the sender, encrypted with the recipient's public key, and then sent.
Decryption: The message is unscrambled by the recipient using the private key.
Reply: If a response is desired by the recipient, the process is reversed.

A primary benefit is eliminating the necessity to exchange secret keys, a potentially cumbersome task, mainly when communicating with numerous parties. Furthermore, asymmetric encryption enables the generation of digital signatures, which authenticate data. This form of encryption finds widespread application across various domains, such as secure online communication, digital signatures, and safe data transmission.
Asymmetric encryption, also called public key cryptography, is a cryptographic method employing two distinct keys for encrypting and decrypting data. Below are some advantages of asymmetric encryption:

Enhanced security: Asymmetric encryption offers a higher security level than symmetric encryption, where a single key is used for encryption and decryption. With asymmetric encryption, different keys are used for each process, and the private key used for decryption is kept confidential by the receiver, making it more challenging for attackers to intercept and decipher the data.
Authentication: Asymmetric encryption enables the receiver to verify the sender's identity. This is achieved by the sender encrypting a message with their private key, which can only be decrypted with their public key. Successfully decrypting the message proves it originated from the sender possessing the corresponding private key.
Non-repudiation: Asymmetric encryption provides non-repudiation, meaning the sender cannot deny sending a message or altering its contents. The message is encrypted with the sender's private key, and only their public key can decrypt it. Thus, the receiver can ascertain that the message was sent by the sender and remains untampered with.
Key distribution: Asymmetric encryption eliminates the necessity for a secure key distribution system required in symmetric encryption. In symmetric encryption, the same key is utilized for encryption and decryption, necessitating secure sharing between sender and receiver. Conversely, asymmetric encryption allows the public key to be openly shared, while the private key remains confidential with the receiver.
Versatility: Asymmetric encryption finds applications in various scenarios, including secure email communication, online banking transactions, and e-commerce. DomainKeys Identified Mail (DKIM) is a cryptographic authentication method used in email. It helps prevent spoofing by verifying the sender's domain and ensuring the message hasn't been tampered with during transmission. It is also instrumental in securing SSL/TSL connections, which are commonly used for Internet traffic security, refer to the following figure:


Figure 5.5: Asymmetric key encryption
Several examples of asymmetric encryption algorithms include:

Rivest-Shamir-Adleman (RSA)
Digital signature algorithm (DSA)
Diffie-Hellman (DH) key exchange
Elliptic Curve Cryptography (ECC)

Rivest-Shamir-Adleman algorithm
The RSA algorithm is a renowned asymmetric cryptographic method, safeguarding sensitive data through a private-public key pair for encryption and decryption. Introduced in 1977 by Ron Rivest, Adi Shamir, and Leonard Adleman of the Massachusetts Institute of Technology, RSA derives its name from the initials of its creators.
RSA employs a private and public key pair, with the private key held confidentially by the key pair's creator, while the public key remains accessible to all. RSA's security is based on the difficulty of factoring large numbers into their prime factors. It uses two large prime numbers to generate public and private keys. Factoring this product is computationally hard, making RSA secure. Encryption can be performed using either the public or private key, with the corresponding key utilized for decryption. This flexibility has made RSA a widely adopted encryption mechanism globally. However, RSA's computational complexity renders it relatively inefficient and resource-intensive, limiting its suitability for encrypting sizable messages or files.
Digital signature algorithm
The DSA is a federal information processing standard for creating digital signatures. It relies on mathematical concepts such as modular exponentiation and the discrete logarithm problem to encrypt digital signatures. A digital signature serves as a verification method employed by the recipient to confirm that the message originated from an authenticated source. Analogous to a customer's signature on a check, which the bank must authenticate to ensure its legitimacy, a digital signature on a document acts as a mark of authentication and non-repudiation, verifying the document's authenticity. DSA is a public key cryptography technique designed exclusively for creating digital signatures. Unlike other asymmetric algorithms, it does not handle encryption or key exchange. This emphasizes DSA specialization in digital signatures within the asymmetric cryptography domain. The process of executing the DSA involves the following steps categorized as follows:

Global public key components
User's private key
User's public key
Signing
Verifying

Diffie-Hellman key exchange
The DH key exchange, also called exponential key exchange, serves as a technique for securely exchanging cryptographic keys across an insecure channel. It is a foundational element in numerous secure communication protocols, such as SSL/TLS and Secure Shell (SSH). The mechanism of the DH key exchange enables two parties to establish a mutual secret key over an insecure channel, ensuring that no external party can intercept the key or gain insights into its properties. The DH key exchange protocol is a critical foundation for secure communication. It enables two parties to establish a shared secret key over an insecure channel, such as the public Internet. This shared key forms the basis for secure communication through established cryptographic algorithms for encryption and decryption. The versatility of this protocol is used for numerous secure communication protocols, including:

SSL/TLS and SSH: These protocols utilize DH to establish a secure channel between communicating parties. The generated shared secret key is employed to encrypt and decrypt messages transmitted over the channel.
VPNs: Secure connections within VPNs often rely on DH for key exchange. This allows the VPN client and server to establish a shared secret key, ensuring data is encrypted through the VPN tunnel.
Secure File Transfer Protocols and File Transfer Protocol Secure (SFTP and FTPS): These protocols leverage DH to create a secure channel for file transfers. The established shared secret key serves as the foundation for the encryption and decryption of the transferred files.
Beyond these specific examples, the DH protocol finds application in a broader range of secure communication scenarios, including secure email, secure web browsing, and secure Voice over Internet Protocol (VoIP). Its adaptability and widespread support solidify its position as a vital tool for establishing secure communication channels across various applications.

Differences between symmetric key encryption and asymmetric key encryption can be described in Table 5.1:









Features


Symmetric key encryption


Asymmetric key encryption




Key distribution


The sender and receiver use the same shared key.


The sender and receiver have a unique pair of public and private keys.




Key length


Shorter key length.


Longer key length.




Speed


Faster encryption and decryption.


Slower encryption and decryption.




Complexity


Simpler implementation and management.


More complex implementation and management.




Security


Less secure due to single key.


It is more secure due to separate public and private keys.




Data size


Efficient for large amounts of data.


Inefficient for large amounts of data.




Applications


Bulk data transfer, secure communication channels.


Digital signatures, secure key exchange.




Additional features


Provides confidentiality only.


Provides confidentiality, authenticity, and non-repudiation.




Resource usage


Lower resource consumption.


Higher resource consumption.




Examples


DES, AES.


RSA, ECC.




Table 5.1: Differences between symmetric and asymmetric key encryption
Role of hash functions
Hash functions are pivotal in virtually all information security applications due to their exceptional utility. A hash function is a mathematical operation that transforms a numerical input into a compressed numerical output. While the input to the hash function can vary in length, the output always maintains a fixed-length. The results generated by a hash function are commonly referred to as message digests or hash values. Figure 5.6 shows the functionality of a hash function:

Figure 5.6: Working of hash functions
Hash functions possess several characteristic features:

Fixed-length output (hash value): Hash functions transform data of any length into a standardized, fixed-length output. This transformation process is commonly known as hashing the data.
Compression function: Hash functions effectively compress data, as the resultant hash is typically much smaller than the input data. Consequently, hash functions are sometimes referred to as compression functions.
Digest representation: Since a hash serves as a condensed representation of larger data, it is often termed a digest.
Bit output specification: Hash functions are classified based on their output bit size. For instance, a hash function generating an output of n-bits is denoted as an n-bit hash function. Popular hash functions typically produce values ranging from 160 to 512-bits.
In general, the computation of a hash function h(x) for any input x is a swift operation. Computationally, hash functions exhibit significantly faster processing speeds than symmetric encryption methods.
For a hash function to serve effectively as a cryptographic tool, it is desired to possess the following properties:

Pre-image resistance: This property requires that reversing a hash function be computationally challenging. In simpler terms, if a hash function h produces a hash value z, it should be difficult to find any input value x that hashes to z. This property safeguards against attackers with only a hash value and aims to determine the original input.
Second pre-image resistance: This property implies that given an input and its hash, it should be arduous to discover a different input yielding the same hash. In essence, if a hash function h produces a hash value h(x) for an input x, finding another input y such that h(y) = h(x) should be challenging. This aspect protects against attackers who possess both an input value and its hash, attempting to substitute a different value while maintaining the same hash.
Collision resistance: This property signifies that finding two distinct inputs of any length should be difficult, resulting in the same hash. Referred to as a collision-free hash function, it entails that for a hash function h, identifying any two distinct inputs x and y such that h(x) = h(y) should be challenging. Although it's impossible for a hash function to be completely devoid of collisions due to its compression nature, the property of collision resistance ensures that these collisions are strenuous to find. This characteristic significantly complicates an attacker's task of discovering two input values with identical hashes.

Additionally, if a hash function exhibits collision resistance, it inherently demonstrates second pre-image resistance.
Some of the popular hash functions are:

Secure Hash Algorithm-256 (SHA-256): A widely-used hash function known for its strong cryptographic properties and 256-bit output length.
Message Digest 5 (MD5): Earlier MD5 is a widely used cryptographic hash function known for its fast computation but is now considered insecure due to vulnerabilities in collision resistance.
Whirlpool: This hash function is a cryptographic hash algorithm known for its strong security properties and high resistance to various cryptanalytic attacks.

Hash functions find direct applications based on their cryptographic properties, especially in password storage, data integrity checks and software distribution. In password storage systems, hashes of passwords are stored instead of the passwords themselves. During the login process, the system compares the hash of the entered password with the stored hash, allowing authentication without revealing the actual password. This method enhances security as even if an intruder gains access to the password file, they would only see hash values, making it challenging to retrieve the original passwords due to the pre-image resistance property of hash functions.
In data integrity checks, hash functions generate checksums for data files, providing assurance to users regarding the correctness of the data. By computing the hash of a file before and after transmission or storage, users can detect any changes or corruption in the file. However, while this technique helps detect alterations to the file's content, it does not guarantee its originality. Attackers may still modify the entire file and compute a new hash to match the altered content, bypassing the integrity check. Therefore, this application is most effective when users can ensure the originality of the files being checked.
Software distribution involves the process of delivering software applications to end-users. To ensure the integrity and authenticity of the software, various mechanisms are employed. These include digital signatures, which verify the authenticity of the software and its publisher, and checksums, which detect any modifications to the software during transmission or storage. Additionally, trusted repositories and secure distribution channels help maintain the integrity of the software supply chain, protecting users from malicious or counterfeit software.
Cryptographic protocols
A cryptographic protocol defines a set of rules or instructions for securely communicating under specific circumstances. Two widely recognized cryptographic protocols frequently used on the Internet to ensure secure communications are SSL and TLS:

SSL: It provides security for data transferred between a web browser and a server by encrypting the connection. This encryption ensures that all data exchanged between the server and the browser remains private and protected from potential attacks. SSL aims to facilitate the safe and secure transmission of sensitive data such as personal information, credit card details, and login credentials. SSL certificates safeguard data transfers using both asymmetric and symmetric encryption techniques. It is a digital certificate utilized to secure and authenticate the identity of a website or online service. This certificate is issued by a trusted third party known as a certificate authority (CA), which validates the identity of the website or service before issuing the certificate. The four phases of the SSL protocol as depicted in Figure 5.7 are:Establishing securing capabilities: Client and server agree on security parameters, such as encryption algorithms and session keys.Server authentication and key exchange: The server sends its certificate to authenticate its identity and share a public key.Client authentication and key exchange: The client may authenticate itself (optional) and exchange the session key for secure communication.Finalizing handshake protocol: Both parties confirm the setup, and the encrypted communication begins.


Figure 5.7: Phases of SSL Protocol

TLS: It is a cryptographic protocol that ensures end-to-end security for data transmitted between applications over the Internet. While users commonly recognize it through its use in secure web browsing, indicated by the padlock icon in web browsers during a secure session, TLS is also applicable and recommended for many other applications. These include email, file transfers, video/audio conferencing, instant messaging, VOIP, and various Internet services such as Domain Name System (DNS) and Network Time Protocol (NTP). TLS has evolved from SSL, initially created by Netscape Communications Corporation in 1994 to secure web sessions. TLS utilizes a combination of symmetric and asymmetric cryptography to achieve an optimal balance between performance and security when transmitting data securely.

Differences between SSL and TLS can be described in Table 5.2:









Characteristics


Secure Sockets Layer


Transport Layer Security






Development


Developed by Netscape Communications Corp.


Developed by Internet Engineering Task Force (IETF).




Versions


SSL 2.0, SSL 3.
