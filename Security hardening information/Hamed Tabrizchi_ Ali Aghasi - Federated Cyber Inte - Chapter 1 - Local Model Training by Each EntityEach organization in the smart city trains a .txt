# Security Chapter Extract
Book: Hamed Tabrizchi_ Ali Aghasi - Federated Cyber Intelligence _ Federated Learning for Cybersecurity (2025, Springer Nature Switzerland) - libgen.li
Chapter: 1 - Local Model Training by Each EntityEach organization in the smart city trains a phishing detection model based on its specific environment. For instance:Municipal offices analyze phishing attempts targeting administrative emails with fake tax refund claims.Hospitals focus on phishing links embedded in fraudulent patient records or appointment requests.Smart traffic systems detect phishing attempts that target operators with fake emergency alerts or update requests.Example features extracted for phishing detection in a smart city environment might include (Table 4.5):Table 4.5Related feature extracted for phishing detection in smart city nodesFeatureDescriptionExample valueSender domain authenticityChecks if the sender domain matches known entitiesNoEmbedded link behaviorAnalyzes redirections and final destination behaviorMultiple redirectsContextual relevanceMatches content with expected city operationsLowStep 2. Federated Aggregation for Global ModelThe trained models from various entities are sent as encrypted parameter updates to the central server, which aggregates them to form a global phishing detection model. This global model benefits from diverse phishing attack patterns across different city sectors. For example, the system learns to detect a broad spectrum of phishing strategies, from spear-phishing targeting city officials to automated phishing campaigns targeting public utility users.Step 3. Global Model Deployment Back to EntitiesThe improved global model is redistributed to all participating devices and systems. The municipal offices can now better detect phishing attacks that share characteristics with those targeting hospitals or traffic systems, and vice versa.
Security Relevance Score: 21
Word Count: 3573
Extracted: 2025-06-13 23:40:53

---

Local Model Training by Each EntityEach organization in the smart city trains a phishing detection model based on its specific environment. For instance:Municipal offices analyze phishing attempts targeting administrative emails with fake tax refund claims.Hospitals focus on phishing links embedded in fraudulent patient records or appointment requests.Smart traffic systems detect phishing attempts that target operators with fake emergency alerts or update requests.Example features extracted for phishing detection in a smart city environment might include (Table 4.5):Table 4.5Related feature extracted for phishing detection in smart city nodesFeatureDescriptionExample valueSender domain authenticityChecks if the sender domain matches known entitiesNoEmbedded link behaviorAnalyzes redirections and final destination behaviorMultiple redirectsContextual relevanceMatches content with expected city operationsLowStep 2. Federated Aggregation for Global ModelThe trained models from various entities are sent as encrypted parameter updates to the central server, which aggregates them to form a global phishing detection model. This global model benefits from diverse phishing attack patterns across different city sectors. For example, the system learns to detect a broad spectrum of phishing strategies, from spear-phishing targeting city officials to automated phishing campaigns targeting public utility users.Step 3. Global Model Deployment Back to EntitiesThe improved global model is redistributed to all participating devices and systems. The municipal offices can now better detect phishing attacks that share characteristics with those targeting hospitals or traffic systems, and vice versa.

4.2.3.3 Performance MetricsWhen evaluating the performance of federated learning for phishing detection, several metrics are essential to determine the effectiveness, efficiency, privacy, and adaptability of the system in distributed environments. These metrics provide insight into how FL compares to traditional machine learning approaches and how well it addresses challenges in real-world scenarios.One fundamental metric is detection accuracy, which measures the proportion of phishing attempts and legitimate activities correctly identified by the system. High accuracy ensures the system reliably distinguishes phishing from legitimate communication. For example, in a test dataset of 1000 emails containing 300 phishing attempts, if the model identifies 280 phishing emails and 650 legitimate ones correctly, the accuracy would be 93%. In FL systems, accuracy may vary depending on the quality and diversity of the data distributed across local nodes. Unequal or biased data distributions can sometimes lead to reduced accuracy compared to centralized systems.Another critical metric is precision, which evaluates the proportion of correctly flagged phishing attempts among all flagged instances. This metric is essential for minimizing false alarms, which are particularly problematic in phishing detection systems, as they may undermine user trust and lead to unnecessary interventions. For instance, if the system flags 320 emails as phishing but only 280 are actual phishing attempts, the precision would be 87.5%. The precision of FL models depends significantly on how local models contribute to the global model. Clients with noisy or low-quality data can introduce false patterns, which can reduce the precision unless robust aggregation techniques are applied.Recall, or sensitivity, measures the system’s ability to correctly identify actual phishing attempts. High recall is vital to ensure that phishing attacks are not overlooked, thereby reducing the risk of undetected threats. If, in a dataset with 300 phishing emails, the system detects 280 correctly but misses 20, the recall would be 93.3%. In FL, recall is influenced by the diversity of training data across nodes. FL systems trained on datasets with varying phishing patterns are more likely to generalize effectively, maintaining a high recall rate.False positive rate (FPR) is another important metric, representing the proportion of legitimate cases incorrectly flagged as phishing. A low FPR minimizes disruptions to users by reducing the frequency of false alarms. For example, in a scenario with 700 legitimate emails, if 40 are wrongly flagged as phishing, the FPR would be 5.7%. FPR can be challenging to optimize in FL systems due to the potential for localized patterns in client data to skew global predictions. However, techniques such as differential privacy and regularization can help mitigate this issue.Communication overhead is a unique concern for FL systems, representing the amount of data exchanged between local nodes and the central server during training. Efficient communication is crucial for scalability, particularly in environments with constrained network resources. For instance, if each client sends a 10 MB model update during 100 training rounds with 50 clients, the total communication cost would be 50GB. FL systems often use methods like model compression or selective communication to reduce these overheads without compromising performance.Adaptation time, or the time taken to detect and adapt to new phishing patterns, is another critical metric. FL systems need to quickly integrate new threats into the global model to stay ahead of evolving phishing strategies. For example, if a novel phishing attack is introduced, an FL system may update the global model within 6 h compared to 24 h for a centralized system, demonstrating its ability to leverage parallel training and local updates for faster adaptation.Privacy preservation is a cornerstone of FL-based phishing detection, assessing how well sensitive data remains secure during training and inference. Privacy metrics may involve measuring data leakage risks or evaluating the effectiveness of differential privacy mechanisms. For instance, a differential privacy implementation with a noise budget of ε = 1 can provide strong privacy guarantees while maintaining model utility. FL systems inherently reduce privacy risks by keeping data localized, but robust encryption and secure aggregation techniques further enhance this aspect.Finally, scalability measures the system’s ability to handle an increasing number of clients or data sources without significant performance degradation. Scalability is especially critical for phishing detection in distributed environments like smart cities or global networks. Metrics such as model convergence time and performance consistency across large-scale deployments are key indicators of scalability. For example, an FL system maintaining 90% accuracy across 10,000 IoT nodes demonstrates greater scalability than a centralized ML system that experiences significant accuracy loss due to bottlenecks in data aggregation.These performance metrics, collectively, provide a comprehensive understanding of FL’s potential in phishing detection. They highlight not only the technical capabilities of FL systems but also the trade-offs and advantages they offer over traditional approaches. Validating these metrics in real-world deployments or simulations, particularly in diverse and distributed environments, is crucial to fully realize the promise of FL for phishing detection.
4.2.3.4 PhishTank DatasetThe PhishTank dataset is a widely used resource in the field of phishing detection. It is maintained by the OpenDNS community, which collects, verifies, and shares information on suspected phishing URLs. PhishTank serves as a collaborative anti-phishing platform where users submit phishing URLs, which are then verified through crowdsourced validation. The dataset is freely available and extensively used in both research and industry for developing, benchmarking, and evaluating phishing detection systems [16].4.2.3.4.1 Key Features and ApplicationsIts dynamic nature ensures that it stays updated with the latest phishing trends, providing real-time data on active phishing campaigns. This feature is particularly useful for systems designed to address current and emerging phishing threats. The dataset includes a wide variety of phishing URLs, targeting different sectors such as banking, social media, and e-commerce platforms. This diversity enhances its utility for training models that must generalize across a broad spectrum of phishing techniques.A unique aspect of PhishTank is its reliance on community verification. Each URL submitted to the platform undergoes validation by community members, ensuring the authenticity of the data and reducing the likelihood of false positives. Furthermore, PhishTank is highly accessible. It offers an open API and downloadable data, enabling seamless integration into security systems and research workflows. This accessibility makes it a go-to resource for both academic and industrial applications.The PhishTank dataset serves multiple applications. It is extensively used to train machine learning models by providing labeled data, enabling systems to distinguish between phishing and legitimate URLs. For instance, features such as URL length, subdomain count, and domain reputation are often extracted from the dataset and used as inputs to classifiers. Additionally, it is frequently employed to evaluate the performance of phishing detection systems, with metrics like accuracy, precision, and recall being assessed using the dataset. In real-world deployments, threat intelligence platforms integrate PhishTank data to enhance their ability to block malicious URLs, thereby protecting users from phishing attempts.Another advanced application involves its use in federated learning settings. Researchers simulate distributed environments using subsets of the PhishTank dataset to evaluate the effectiveness of federated phishing detection systems. This approach allows them to assess how well FL systems can generalize and adapt to new threats without requiring centralized data collection.Overall, the PhishTank dataset is indispensable for developing, testing, and deploying phishing detection technologies. It not only enables the creation of robust machine learning models but also supports real-time threat mitigation and innovative research in decentralized systems like federated learning.
4.2.3.4.2 Example Usage in Phishing DetectionConsider a machine learning-based phishing detection system. Features such as the domain age, presence of HTTPS, unusual characters, and URL length are extracted from each URL in the PhishTank dataset. These features are then used to train a model to classify URLs. For instance, URLs like http://login-secure-banking.com may appear legitimate but can be identified as phishing based on extracted patterns.Here is an example table illustrating typical entries in the PhishTank dataset (Table 4.6):Table 4.6Typical entries in the PhishTank datasetPhishing URLTargetSubmission dateVerification statushttp://​secure-login-paypal.​comPayPal10/1/2024Verifiedhttp://​update-facebook-security.​netFacebook10/2/2024Verifiedhttp://​amazon-login.​auth-checker.​infoAmazon10/3/2024Verifiedhttp://​www.​bankofamerica-alerts.​orgBank of America10/4/2024VerifiedLimitations of this dataset is listed in the following tableBias toward verified URLsSince the dataset relies on community verification, it might exclude some phishing URLs that are difficult to verify, potentially leading to sampling bias.Short-lived URLsPhishing URLs often have a short lifespan. By the time they are verified and included in the dataset, they may no longer be active, which could limit their relevance for real-time detection.Lack of contextual informationThe dataset primarily includes URLs without additional context, such as the phishing email’s content or the website’s structure. This limits its use for comprehensive phishing detection approaches that rely on more than URL features.


4.2.4 Federated Learning for Threat Intelligence SharingToday’s computing paradigms are significantly shifting toward distributed computing, where a network of nodes communicates with each other. To make such a system robust against risks and hazards, such as cyber attacks, it is essential for each node to share its knowledge and experiences that is known as threat intelligence with other nodes.The growing complexity of cyber threats has led to an increased focus on threat intelligence sharing in distributed computing environments. Threat intelligence involves evidence-based knowledge about threats that can inform decision-making [17]. To address challenges in Industry 4.0 systems, a new threat intelligence scheme using beta mixture-hidden Markov models has been proposed for detecting anomalies in both physical and network systems. Trust and responsible use of sensitive information are crucial for effective threat intelligence sharing. A distributed security framework using blockchain technology has been developed to enhance trust and enable auditing of threat intelligence provenance [18]. To incentivize sharing and overcome reluctance among organizations, a blockchain-based marketplace for cybersecurity threat intelligence has been proposed, using standards like structured threat information expression (STIX) and introducing a cyber threat intelligence (CTI) token as a digital asset.4.2.4.1 OverviewTraditional threat intelligence methods often involve centralized collection and analysis of data, which, while effective to some extent, raise profound concerns about privacy, scalability, and real-time adaptability. FL, on the other hand, reimagines how intelligence can be shared and utilized by allowing organizations to collaboratively learn from distributed datasets without ever transferring sensitive information to a centralized hub.The dynamic and decentralized nature of FL ensures that critical threat data, such as indicators of compromise (IoCs) or behavioral patterns of malicious actors, remains securely localized within each organization’s infrastructure. This approach not only protects proprietary and confidential data but also significantly reduces the risks of breaches during transmission. FL achieves this by sending model updates instead of raw data, which are then aggregated securely to improve the global model.One of the most impressive features of FL in this domain is its adaptability to diverse environments. Each participating node—be it a financial institution, healthcare provider, or government entity—can contribute insights based on its unique threat landscape, enhancing the richness and diversity of the intelligence. This makes the global model far more robust and inclusive, capturing an extraordinary array of attack vectors and patterns that would otherwise be unavailable in a centralized approach [19].A prominent use case involves detecting advanced persistent threats (APTs), which often require deep collaboration across industries to uncover their intricate and stealthy techniques. For instance, financial institutions in different countries could use FL to collectively identify emerging phishing or ransomware campaigns targeting their sector. By sharing encrypted model updates reflecting suspicious activity, these organizations could preemptively bolster their defenses without exposing sensitive customer data (Fig. 4.5).Diagram illustrating a cybersecurity process involving three banks and an aggregator. A threat vector causes an anomaly at one bank, which is then communicated to the aggregator. The aggregator shares encrypted insights about incoming threats with the other banks. Additionally, the banks receive model updates about incidents from the aggregator. Arrows indicate the flow of information between the banks and the aggregator.Fig. 4.5General FL-based threat intelligence sharing in banking systemsAnother awe-inspiring application is in enhancing the detection of zero-day exploits. FL enables organizations to share learnings from newly identified vulnerabilities almost instantaneously. For example, when a novel malware strain targeting IoT devices emerges, FL allows different entities managing IoT ecosystems to collaboratively train a model that detects this malware based on diverse environmental signals, thereby accelerating the time to mitigation.
4.2.4.2 ImplementationFL’s foundational principle of keeping raw data localized is critical in threat intelligence, where sharing sensitive information—such as internal logs, behavioral patterns, or threat signatures—can pose risks to privacy, compliance, and competitive advantage. Encryption techniques, such as secure multi-party computation (SMPC) or homomorphic encryption, play a key role in protecting model updates during their transmission to the global server.The diversity of data sources in threat intelligence, such as endpoint logs, network traffic, or email metadata, requires FL systems to accommodate heterogeneous data formats and distributions. Moreover, organizations in different industries face distinct types of cyber threats, necessitating personalization techniques like meta-learning or transfer learning to ensure the global model adapts effectively to local needs.A fundamental challenge in FL is ensuring that the aggregated global model effectively represents the diverse patterns and insights contributed by all participants. Techniques such as Federated Averaging (FedAvg) or alternative aggregation algorithms like robust federated learning can be tailored to handle malicious contributions such as poisoned updates in the context of cybersecurity.Threat intelligence sharing often involves global networks with numerous participants, from enterprises to government agencies. Communication-efficient FL methods, such as quantized updates, sparse representation, or periodic model updates, are essential to ensure scalability and reduce bandwidth consumption.
4.2.4.3 Federated Learning Architectures for Threat Intelligence SharingInspiring from common FL architectures, one can adapt them for threat intelligence sharing as well.4.2.4.3.1 Hierarchical Federated LearningHierarchical Federated Learning organizes participants into clusters based on shared characteristics, such as geographic location or industry type. Within each cluster, local models are trained and aggregated, and the aggregated results are then used for global updates. This approach is particularly effective for scaling systems with a large number of participants by reducing communication overhead. Additionally, it enhances model specialization by allowing localized adaptations, which is beneficial for addressing region-specific threats like localized phishing campaigns or malware variants [20]. However, the clustering process can introduce complexities, as the grouping needs to balance similarities in data with diversity for robust learning. The additional clustering step can also delay updates, which might be a concern in environments requiring real-time threat mitigation. For instance, in a smart city deployment, clusters could represent specific city zones, each analyzing cyber threats to IoT devices and aggregating insights at a city-wide level.
4.2.4.3.2 Cross-Silo Federated LearningCross-silo Federated Learning involves a small and fixed number of trusted participants, such as enterprises, research institutions, or government agencies. These participants collaborate to train a global model without exposing their sensitive data, often operating within highly regulated industries like healthcare or finance. This architecture is advantageous because the data from participants is typically well-organized, offering high-quality insights into specific types of cyber threats. It also ensures compliance with data privacy regulations, such as GDPR, as raw data never leaves the silo [21]. However, the limited number of participants may restrict the diversity of the data, which could hinder the model’s generalizability to broader threat landscapes. An example of this application is in threat intelligence sharing among national cybersecurity agencies, where each agency shares updates from its malware analysis efforts to collaboratively strengthen a global model detecting state-sponsored attacks.
4.2.4.3.3 Cross-Device Federated LearningCross-device Federated Learning is designed for large-scale collaboration across numerous lightweight devices, such as IoT sensors, firewalls, and mobile devices. Each device trains models locally and contributes updates to a global model. This approach excels in scalability, as it can support thousands or even millions of devices, each contributing to a richer and more diverse model. It also enables real-time threat detection, as edge devices can act immediately upon detecting anomalies, such as malware exploiting an IoT sensor. However, the resource limitations of these devices, including constrained computation power and memory, can restrict the complexity of the models they can train. Connectivity issues and power constraints further challenge consistent participation [22]. In smart grids, cross-device FL enables IoT-enabled power meters and other devices to collaboratively detect malware trying to disrupt energy distribution while adapting to localized attack vectors.
4.2.4.3.4 Federated Transfer LearningFederated Transfer Learning facilitates collaboration among participants with non-overlapping datasets or feature spaces. It is particularly useful when participants belong to different industries with distinct threat landscapes but can still benefit from shared insights. For example, a technology firm focusing on malware detection can collaborate with a financial organization specializing in phishing detection. Through federated transfer learning, both parties can enhance their models by sharing domain-specific knowledge without compromising data privacy [23]. This architecture is advantageous for domain adaptability, as it allows learning across diverse datasets while requiring less shared data. However, it requires sophisticated techniques to align feature spaces across domains, which can introduce additional complexity. An example application could involve a multinational threat intelligence system where insights about phishing campaigns in the financial sector are transferred to technology firms, enabling them to detect multi-vector attacks that combine phishing with malware delivery (Table 4.7).Table 4.7Comparison of different FL architecturesFeatureHierarchical FLCross-Silo FLCross-device FLFederated transfer learningScalabilityModerateLowHighLowDiversity of dataModerateLowHighHighPrivacy protectionStrongStrongModerateStrongModel specializationHigh (within clusters)HighLowModerateCommunication efficiencyHigh (within clusters)ModerateLowModerateComplexityModerateLowHighHighBest use caseRegional or industry-specific threatsHighly regulated industriesIoT and edge-based systemsDomain-specific knowledge transfer

4.2.4.4 Discussion on BenefitsThe enhanced detection of multi-vector attacks is made possible by combining insights from different sectors, enabling the identification of complex threats like phishing, malware, and ransomware. For instance, an advanced persistent threat (APT) group targeting energy companies with phishing emails that lead to ransomware deployment can be detected through shared intelligence from both the banking and energy sectors. Federated Learning preserves privacy by ensuring that sensitive data, such as financial transactions or patient records, remains within the organization, addressing concerns and meeting regulatory requirements like GDPR and HIPAA. Additionally, FL facilitates cross-sector collaboration, breaking down sector-specific silos and enabling the sharing of threat intelligence. This allows emerging attack vectors identified in one sector to preemptively inform defenses in another, fostering a unified and proactive cybersecurity front.


4.3 ConclusionFL addresses key challenges faced by traditional machine learning methods in cybersecurity by preserving data privacy, enhancing scalability, and enabling continuous learning. This decentralized approach allows organizations to collaborate on improving threat detection and mitigation without compromising sensitive data, a crucial aspect in today’s privacy-focused world. As the cyber threat landscape grows increasingly sophisticated, FL-based systems provide a way to enhance the resilience and adaptability of defense mechanisms, making them more effective against emerging threats.Looking ahead, the potential of FL extends beyond current applications. For instance, FL could enable cross-border collaboration for critical infrastructure protection, where power grids in different countries share insights to preempt and defend against cyberattacks without revealing sensitive operational data. In smart cities, FL could allow decentralized learning between IoT devices in transportation systems, ensuring they collectively detect and respond to anomalies such as hacking attempts on traffic control systems. Furthermore, FL might revolutionize threat response in space communications, where satellites could share attack signatures while keeping sensitive telemetry data secure. These possibilities highlight FL’s capacity to not only strengthen cybersecurity but also enable innovative solutions tailored to future technological advancements.
References1.Folino, F., Folino, G., Pisani, F. S., Sabatino, P., & Pontieri, L. (2024, March). A scalable vertical federated learning framework for analytics in the cybersecurity domain. In 2024 32nd Euromicro international conference on Parallel, Distributed and Network-Based Processing (PDP) (pp. 245–252). IEEE.Crossref
2.Thantharate, P., & Anurag, T. (2023, December). CYBRIA-pioneering federated learning for privacy-aware cybersecurity with brilliance. In 2023 IEEE 20th international conference on smart communities: Improving quality of life using AI, robotics and IoT (HONET) (pp. 56–61). IEEE.
3.Li, S. C., Chen, Y. W., & Huang, Y. (2021). Examining compliance with personal data protection regulations in interorganizational data analysis. Sustainability, 13(20), 11459.Crossref
4.Verbraeken, J., Wolting, M., Katzy, J., Kloppenburg, J., Verbelen, T., & Rellermeyer, J. S. (2020). A survey on distributed machine learning. ACM Computing Surveys (CSUR), 53(2), 1–33.Crossref
5.Böse, B., Avasarala, B., Tirthapura, S., Chung, Y. Y., & Steiner, D. (2017). Detecting insider threats using radish: A system for real-time anomaly detection in heterogeneous data streams. IEEE Systems Journal, 11(2), 471–482.Crossref
6.Sarhan, M., Layeghy, S., Moustafa, N., & Portmann, M. (2023). Cyber threat intelligence sharing scheme based on federated learning for network intrusion detection. Journal of Network and Systems Management, 31(1), 3.Crossref
7.Ashoor, A. S., & Gore, S. (2011). Importance of intrusion detection system (IDS). International Journal of Scientific and Engineering Research, 2(1), 1–
