# Security Chapter Extract
Book: Steve Campbell - Bash Shell Scripting for Pentesters_ Master the art of command-line exploitation and enhance your penetration testing workflows (2024, Packt Publishing) - libgen.li
Chapter: 3 - Configure persistence (optional). This usually involves creating a separate partition on the 
USB drive and configuring the bootloader to recognize and use this partition. Y ou can find 
the documented steps required to create a live USB Kali system at https://www.kali.
org/docs/usb/usb-persistence/.
There are some considerations and drawbacks to using live USB:
• USB storage is usually much slower than running directly from an SSD. If you use live USB, 
be sure to use the USB 3.0 or 3.1 standard for best performance.
• Always download the ISO image from official sources and verify the checksum before trusting it.
• If you’re planning to use it for production use, be sure to use encrypted persistence due to the 
risk of exposing the sensitive data on the drive to someone not authorized to have it.
Now, let’s move on and discuss cloud-based systems.
Cloud-based systems
Many cloud platforms create free tiers for access to Linux systems with enough resources for modest 
workloads. Cloud providers with free tiers include Google Cloud Platform ( GCP ), Microsoft Azure, 
and Amazon EC2. Be aware that the free tier may not provide enough RAM for production use and 
will not be suitable for running Kali Linux images.
Kali Linux provides documentation and marketplace images for running on AWS, Digital Ocean, 
Linode, and Azure (https://www.kali.org/docs/cloud/). I have experience with customers 
who have configured Kali in the cloud for cloud security assessments, or connected via VPN to their 
internal network infrastructure to facilitate internal network pentests. If the customer’s internal 
network is already connected to a cloud provider over VPN, it’s relatively easy for them to spin up a 
Kali image and create a firewall rule to allow SSH access from my IP address. Now that we’ve explored 
options for running a pentesting system with Bash, let’s discover a few vulnerable systems we can use 
to practice within our lab.
Vulnerable lab targets
While following along with some of the later chapters related to pentesting methodology, it will be 
beneficial for you to have access to vulnerable targets when running the commands and developing your 
Bash scripts. There are several great sources of vulnerable targets you can use for practice in your lab.
Lab setup
 11
Metasploitable 2 is a vulnerable virtual machine provided by Rapid7. It was designed to showcase the 
capabilities of the Metasploit Framework. Metasploitable 2 is also a good beginner-level challenge for 
developing your hacker methodology and learning Bash for pentesting. The project requires modest 
resources to run the virtual machine and includes documentation on the machine’s vulnerabilities 
(Metasploitable 2 | Metasploit Documentation , https://docs.rapid7.com/metasploit/
metasploitable-2/).
Game of Active Directory (GOAD) is also an option.
“GOAD is a pentesting Active Directory LAB project. The purpose of this lab is to give pentesters a vulnerable 
Active Directory environment ready to use for them to practice usual attack techniques. ” ( Game of Active 
Directory – Orange-CyberDefense, https://github.com/Orange-Cyberdefense/GOAD)
Note that GOAD is free to use and uses free Microsoft Windows licenses that are activated for 180 
days. GOAD is the best resource I’ve found for practicing hacking on internal Active Directory 
network environments.
MayFly is the creator of GOAD. Their website contains plenty of articles on how to set GOAD up 
on different virtual machine hypervisors, as well as lab guides for using common pentesting tools to 
hack Active Directory.
Tip
MayFly also published a comprehensive mind map for pentesting Active Directory. Despite 
having years of experience in hacking Active Directory, I still find times that I’m running out 
of things to test and will refer to this mind map when I get stuck or want to ensure that I’ve left 
no stone unturned. This mind map is also the number one resource I recommend to junior 
pentesters who are learning Active Directory hacking techniques and tools (you can find more 
details at https://orange-cyberdefense.github.io/ocd-mindmaps/img/
pentest_ad_dark_2022_11.svg).
If you wish to practice your Bash scripts, tools, and methodology on web applications, OW ASP Juice 
Shop is a great resource.
“OWASP Juice Shop is probably the most modern and sophisticated insecure web application! It can 
be used in security training, awareness demos, CTFs, and as a guinea pig for security tools! Juice Shop 
encompasses vulnerabilities from the entire OWASP Top Ten ( https://owasp.org/www-project-
top-ten/) , along with many other security flaws found in real-world applications!”  (OWASP Juice 
Shop – OWASP Foundation, https://owasp.org/www-project-juice-shop/)
An older yet still very relevant vulnerable web application is Mutillidae II.
Bash Command-Line and Its Hacking Environment 12
“OWASP Mutillidae II is a free, open source, deliberately vulnerable web application that provides a target 
for web-security training. With dozens of vulnerabilities and hints to help the user, this is an easy-to-use 
web hacking environment designed for labs, security enthusiasts, classrooms, CTF, and vulnerability 
assessment tool targets. ” ( OWASP Mutillidae II – OWASP Foundation https://owasp.org/
www-project-mutillidae-ii/)
One of the things I love about Mutillidae is that it embeds hints, tutorials, and video tutorials in the 
content. Mutillidae is a resource I used many years ago to learn web app testing when I was a junior 
pentester. The difference between Juice Shop and Mutillidae is that Juice Shop is a modern web 
application that uses JavaScript frameworks, whereas Mutillidae is a more traditional web application. 
While Juice Shop has a scoreboard and you can find third-party walkthroughs online, Mutillidae has 
a large amount of training text and video embedded in the application.
The cybersecurity landscape is always changing, and new vulnerabilities are discovered regularly. 
A lab setup is an ideal place for research and development, allowing you to experiment with these 
vulnerabilities safely. It’s where you can contribute to the cybersecurity community by discovering 
new vulnerabilities or enhancing existing pentesting methodologies.
Now that we’ve explored vulnerable targets for your pentesting lab, next up, we’ll talk about customizing 
your Bash shell so that it suits your needs and personal style.
Configuring your hacker shell
If you’re following along using Kali Linux or macOS, note that your Terminal shell uses Zsh by default 
instead of Bash. Zsh has more features (such as better tab completion and theme support) but Bash 
is more widespread and standard. Bash has been around since the late 80s, making it a veteran in the 
shell world. It’s the default on most Linux distributions and macOS (up until Catalina, where Zsh 
took over). Bash’s longevity means it’s extremely stable and well-supported.
Zsh, on the other hand, came a bit later. It’s known for its improvements over Bash, including better 
interactive use and more powerful scripting capabilities.
Y ou can determine which shell is configured by entering the echo $SHELL command in your 
terminal. Almost all code shown in this book will work in both Bash and Zsh, except where noted. 
In my day-to-day pentesting activities, I rarely notice any difference. However, if you want to change 
your shell from Zsh to Bash, execute the chsh -s /bin/bash command in your Terminal, then 
log out and log in to see the change take place.
Bash configuration files can be found in the user home directory, /home/username. Because the 
filenames begin with a period character, they are commonly referred to as dotfiles . The following 
configuration files are used to configure the Bash shell:
• ~/.bash_profile: This file is executed at the start of an interactive login and is used to 
initialize the user environment. Think of an interactive login as logging in via the command 
line via a text-based Terminal such as an SSH session.
Configuring your hacker shell
 13
• ~/.bashrc: This file is used to configure the Terminal when you’ve logged in through the 
graphical user interface ( GUI). This file contains settings including aliases, functions, prompt  
customizations, and environment variables.
• ~/.bash_logout: This file is executed when your session ends. It’s used to perform tasks 
related to cleaning up the environment when you log out.
Tip
If you don’t understand the purpose of the tilde (~ ) character and forward slash preceding the 
dotfile name, the tilde character represents the user’s home directory. The ~/.bashrc path 
is equivalent to /home/username/.bashrc. This concept will be covered in Chapter 2.
The most common edits you’ll want to make will include adding aliases and functions and customizing 
your command prompt in your ~/.bashrc file. Aliases are a great way to shorten long or complex 
commands to a single word. Functions are more complex. Think of functions as a short script that 
you can include in your shell configuration and call by name in your Terminal. Functions will be 
discussed later in Chapter 5.
Here’s an example alias from my ~/.bashrc file that I use to search for IP addresses in text:
alias grepip="grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}'"
Y ou can see how this command would be difficult to remember, so it helps to create an alias for any 
complex command you may need to use repeatedly.
Important note
When you make edits to your Bash configuration files, you must either log out and log in or 
source the file to enact the change.
Enter the following command to source a file and enact changes immediately:
$ source ~/.bashrc
Now that you understand the purpose of Bash’s dotfiles, let’s move on and take a look at how we can 
edit them to personalize our environment.
Customizing the Bash prompt
The prompt is where you enter commands in the Bash Terminal. Y our prompt can be as simple or 
complex as you desire to meet your tastes and reflect your personality. Think of your prompt design 
choices like how a painter chooses their palate.
Bash Command-Line and Its Hacking Environment 14
Y ou can find your currently configured prompt by looking in your ~/.bashrc  file for a line that 
begins with PS1. A common Bash prompt would use a PS1 value such as export PS1="\u@\h 
\w\$ ", and it would look like username@hostname ~$ at the prompt. Let’s break this down. 
Here’s what each part does:
• \u will be replaced by the current username.
• @ is a literal character and will appear after the username.
• \h will be replaced by the hostname up to the first period.
• \w will be replaced by the current working directory, with $HOME abbreviated to a tilde character.
• \$ displays a $ character for a regular user, or # for the root user.
Once you edit your PS1 prompt, be sure to source the file to see the changes take effect.
Y ou can also get really fancy with your prompt. I’ve been known to insert the $(ip a show eth0 
| grep -m 1 inet | tr -s ' ' | cut -d ' ' -f 3) string in the middle of my 
PS1 prompt to show my IP address for capturing in my logs or report screenshots for the customer 
to correlate my activity with their Security Information and Event Management  (SIEM) alerts. See 
https://bash-prompt-generator.org/ for a graphical Bash prompt generator, or the  
official Bash manual for all options.
Customizing your Bash environment is about making your Terminal work for you. It’s a process of 
trial and improvement, finding what makes you more productive, and what brings a bit of joy into 
your command-line sessions. Start small, experiment, and see how a few changes can make a big 
difference in your daily tasks.
Setting up essential pentesting tools
In this section, we’ll go over setting up our pentesting environment by updating system software 
packages and installing the tools required to follow along. Most of the tools needed will already be 
installed in Kali, so we’ll only need to install a few more software packages.
Update the package manager
Y our first step when using a new Linux installation should be updating packages. As stated earlier, 
I’ll be using Kali Linux in all demonstrations. Kali is based on the Debian Linux distribution, which 
uses the Advanced Package Tool ( APT) package manager. At its core, apt streamlines software 
management. It automates the process of retrieving, configuring, and installing software packages 
from predefined repositories. This automation not only saves time but also ensures that software 
dependencies are resolved without manual intervention.
Setting up essential pentesting tools
 15
Running sudo apt update refreshes the local database of available packages and their versions, 
ensuring you have the latest information from the repositories. This step is crucial before installing 
new software or updating existing packages to ensure you’re getting the latest versions. If you’re using 
Kali, Ubuntu, or Debian Linux, the following commands to update and upgrade will work as expected 
because they all use the apt package manager:
$ sudo apt update && sudo apt upgrade -y && reboot
In the preceding command, we use sudo to elevate privileges and apt to update the list of available 
packages. The double ampersand symbols (&&) operate like a logical AND operator; the second 
command to upgrade packages without prompting (-y) is only run if the first command results in 
success. Finally, we reboot to ensure that all services and kernel updates take effect.
Install ProjectDiscovery tools
ProjectDiscovery offers some great tools I recommend for pentesting (PDTM – ProjectDiscovery, 
https://github.com/projectdiscovery/pdtm). Before we can install them, we must 
install the Go programming language runtime and libraries. Follow these steps to do so:
Security Relevance Score: 15
Word Count: 2197
Extracted: 2025-06-13 23:40:19

---

Configure persistence (optional). This usually involves creating a separate partition on the 
USB drive and configuring the bootloader to recognize and use this partition. Y ou can find 
the documented steps required to create a live USB Kali system at https://www.kali.
org/docs/usb/usb-persistence/.
There are some considerations and drawbacks to using live USB:
• USB storage is usually much slower than running directly from an SSD. If you use live USB, 
be sure to use the USB 3.0 or 3.1 standard for best performance.
• Always download the ISO image from official sources and verify the checksum before trusting it.
• If you’re planning to use it for production use, be sure to use encrypted persistence due to the 
risk of exposing the sensitive data on the drive to someone not authorized to have it.
Now, let’s move on and discuss cloud-based systems.
Cloud-based systems
Many cloud platforms create free tiers for access to Linux systems with enough resources for modest 
workloads. Cloud providers with free tiers include Google Cloud Platform ( GCP ), Microsoft Azure, 
and Amazon EC2. Be aware that the free tier may not provide enough RAM for production use and 
will not be suitable for running Kali Linux images.
Kali Linux provides documentation and marketplace images for running on AWS, Digital Ocean, 
Linode, and Azure (https://www.kali.org/docs/cloud/). I have experience with customers 
who have configured Kali in the cloud for cloud security assessments, or connected via VPN to their 
internal network infrastructure to facilitate internal network pentests. If the customer’s internal 
network is already connected to a cloud provider over VPN, it’s relatively easy for them to spin up a 
Kali image and create a firewall rule to allow SSH access from my IP address. Now that we’ve explored 
options for running a pentesting system with Bash, let’s discover a few vulnerable systems we can use 
to practice within our lab.
Vulnerable lab targets
While following along with some of the later chapters related to pentesting methodology, it will be 
beneficial for you to have access to vulnerable targets when running the commands and developing your 
Bash scripts. There are several great sources of vulnerable targets you can use for practice in your lab.
Lab setup
 11
Metasploitable 2 is a vulnerable virtual machine provided by Rapid7. It was designed to showcase the 
capabilities of the Metasploit Framework. Metasploitable 2 is also a good beginner-level challenge for 
developing your hacker methodology and learning Bash for pentesting. The project requires modest 
resources to run the virtual machine and includes documentation on the machine’s vulnerabilities 
(Metasploitable 2 | Metasploit Documentation , https://docs.rapid7.com/metasploit/
metasploitable-2/).
Game of Active Directory (GOAD) is also an option.
“GOAD is a pentesting Active Directory LAB project. The purpose of this lab is to give pentesters a vulnerable 
Active Directory environment ready to use for them to practice usual attack techniques. ” ( Game of Active 
Directory – Orange-CyberDefense, https://github.com/Orange-Cyberdefense/GOAD)
Note that GOAD is free to use and uses free Microsoft Windows licenses that are activated for 180 
days. GOAD is the best resource I’ve found for practicing hacking on internal Active Directory 
network environments.
MayFly is the creator of GOAD. Their website contains plenty of articles on how to set GOAD up 
on different virtual machine hypervisors, as well as lab guides for using common pentesting tools to 
hack Active Directory.
Tip
MayFly also published a comprehensive mind map for pentesting Active Directory. Despite 
having years of experience in hacking Active Directory, I still find times that I’m running out 
of things to test and will refer to this mind map when I get stuck or want to ensure that I’ve left 
no stone unturned. This mind map is also the number one resource I recommend to junior 
pentesters who are learning Active Directory hacking techniques and tools (you can find more 
details at https://orange-cyberdefense.github.io/ocd-mindmaps/img/
pentest_ad_dark_2022_11.svg).
If you wish to practice your Bash scripts, tools, and methodology on web applications, OW ASP Juice 
Shop is a great resource.
“OWASP Juice Shop is probably the most modern and sophisticated insecure web application! It can 
be used in security training, awareness demos, CTFs, and as a guinea pig for security tools! Juice Shop 
encompasses vulnerabilities from the entire OWASP Top Ten ( https://owasp.org/www-project-
top-ten/) , along with many other security flaws found in real-world applications!”  (OWASP Juice 
Shop – OWASP Foundation, https://owasp.org/www-project-juice-shop/)
An older yet still very relevant vulnerable web application is Mutillidae II.
Bash Command-Line and Its Hacking Environment 12
“OWASP Mutillidae II is a free, open source, deliberately vulnerable web application that provides a target 
for web-security training. With dozens of vulnerabilities and hints to help the user, this is an easy-to-use 
web hacking environment designed for labs, security enthusiasts, classrooms, CTF, and vulnerability 
assessment tool targets. ” ( OWASP Mutillidae II – OWASP Foundation https://owasp.org/
www-project-mutillidae-ii/)
One of the things I love about Mutillidae is that it embeds hints, tutorials, and video tutorials in the 
content. Mutillidae is a resource I used many years ago to learn web app testing when I was a junior 
pentester. The difference between Juice Shop and Mutillidae is that Juice Shop is a modern web 
application that uses JavaScript frameworks, whereas Mutillidae is a more traditional web application. 
While Juice Shop has a scoreboard and you can find third-party walkthroughs online, Mutillidae has 
a large amount of training text and video embedded in the application.
The cybersecurity landscape is always changing, and new vulnerabilities are discovered regularly. 
A lab setup is an ideal place for research and development, allowing you to experiment with these 
vulnerabilities safely. It’s where you can contribute to the cybersecurity community by discovering 
new vulnerabilities or enhancing existing pentesting methodologies.
Now that we’ve explored vulnerable targets for your pentesting lab, next up, we’ll talk about customizing 
your Bash shell so that it suits your needs and personal style.
Configuring your hacker shell
If you’re following along using Kali Linux or macOS, note that your Terminal shell uses Zsh by default 
instead of Bash. Zsh has more features (such as better tab completion and theme support) but Bash 
is more widespread and standard. Bash has been around since the late 80s, making it a veteran in the 
shell world. It’s the default on most Linux distributions and macOS (up until Catalina, where Zsh 
took over). Bash’s longevity means it’s extremely stable and well-supported.
Zsh, on the other hand, came a bit later. It’s known for its improvements over Bash, including better 
interactive use and more powerful scripting capabilities.
Y ou can determine which shell is configured by entering the echo $SHELL command in your 
terminal. Almost all code shown in this book will work in both Bash and Zsh, except where noted. 
In my day-to-day pentesting activities, I rarely notice any difference. However, if you want to change 
your shell from Zsh to Bash, execute the chsh -s /bin/bash command in your Terminal, then 
log out and log in to see the change take place.
Bash configuration files can be found in the user home directory, /home/username. Because the 
filenames begin with a period character, they are commonly referred to as dotfiles . The following 
configuration files are used to configure the Bash shell:
• ~/.bash_profile: This file is executed at the start of an interactive login and is used to 
initialize the user environment. Think of an interactive login as logging in via the command 
line via a text-based Terminal such as an SSH session.
Configuring your hacker shell
 13
• ~/.bashrc: This file is used to configure the Terminal when you’ve logged in through the 
graphical user interface ( GUI). This file contains settings including aliases, functions, prompt  
customizations, and environment variables.
• ~/.bash_logout: This file is executed when your session ends. It’s used to perform tasks 
related to cleaning up the environment when you log out.
Tip
If you don’t understand the purpose of the tilde (~ ) character and forward slash preceding the 
dotfile name, the tilde character represents the user’s home directory. The ~/.bashrc path 
is equivalent to /home/username/.bashrc. This concept will be covered in Chapter 2.
The most common edits you’ll want to make will include adding aliases and functions and customizing 
your command prompt in your ~/.bashrc file. Aliases are a great way to shorten long or complex 
commands to a single word. Functions are more complex. Think of functions as a short script that 
you can include in your shell configuration and call by name in your Terminal. Functions will be 
discussed later in Chapter 5.
Here’s an example alias from my ~/.bashrc file that I use to search for IP addresses in text:
alias grepip="grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}'"
Y ou can see how this command would be difficult to remember, so it helps to create an alias for any 
complex command you may need to use repeatedly.
Important note
When you make edits to your Bash configuration files, you must either log out and log in or 
source the file to enact the change.
Enter the following command to source a file and enact changes immediately:
$ source ~/.bashrc
Now that you understand the purpose of Bash’s dotfiles, let’s move on and take a look at how we can 
edit them to personalize our environment.
Customizing the Bash prompt
The prompt is where you enter commands in the Bash Terminal. Y our prompt can be as simple or 
complex as you desire to meet your tastes and reflect your personality. Think of your prompt design 
choices like how a painter chooses their palate.
Bash Command-Line and Its Hacking Environment 14
Y ou can find your currently configured prompt by looking in your ~/.bashrc  file for a line that 
begins with PS1. A common Bash prompt would use a PS1 value such as export PS1="\u@\h 
\w\$ ", and it would look like username@hostname ~$ at the prompt. Let’s break this down. 
Here’s what each part does:
• \u will be replaced by the current username.
• @ is a literal character and will appear after the username.
• \h will be replaced by the hostname up to the first period.
• \w will be replaced by the current working directory, with $HOME abbreviated to a tilde character.
• \$ displays a $ character for a regular user, or # for the root user.
Once you edit your PS1 prompt, be sure to source the file to see the changes take effect.
Y ou can also get really fancy with your prompt. I’ve been known to insert the $(ip a show eth0 
| grep -m 1 inet | tr -s ' ' | cut -d ' ' -f 3) string in the middle of my 
PS1 prompt to show my IP address for capturing in my logs or report screenshots for the customer 
to correlate my activity with their Security Information and Event Management  (SIEM) alerts. See 
https://bash-prompt-generator.org/ for a graphical Bash prompt generator, or the  
official Bash manual for all options.
Customizing your Bash environment is about making your Terminal work for you. It’s a process of 
trial and improvement, finding what makes you more productive, and what brings a bit of joy into 
your command-line sessions. Start small, experiment, and see how a few changes can make a big 
difference in your daily tasks.
Setting up essential pentesting tools
In this section, we’ll go over setting up our pentesting environment by updating system software 
packages and installing the tools required to follow along. Most of the tools needed will already be 
installed in Kali, so we’ll only need to install a few more software packages.
Update the package manager
Y our first step when using a new Linux installation should be updating packages. As stated earlier, 
I’ll be using Kali Linux in all demonstrations. Kali is based on the Debian Linux distribution, which 
uses the Advanced Package Tool ( APT) package manager. At its core, apt streamlines software 
management. It automates the process of retrieving, configuring, and installing software packages 
from predefined repositories. This automation not only saves time but also ensures that software 
dependencies are resolved without manual intervention.
Setting up essential pentesting tools
 15
Running sudo apt update refreshes the local database of available packages and their versions, 
ensuring you have the latest information from the repositories. This step is crucial before installing 
new software or updating existing packages to ensure you’re getting the latest versions. If you’re using 
Kali, Ubuntu, or Debian Linux, the following commands to update and upgrade will work as expected 
because they all use the apt package manager:
$ sudo apt update && sudo apt upgrade -y && reboot
In the preceding command, we use sudo to elevate privileges and apt to update the list of available 
packages. The double ampersand symbols (&&) operate like a logical AND operator; the second 
command to upgrade packages without prompting (-y) is only run if the first command results in 
success. Finally, we reboot to ensure that all services and kernel updates take effect.
Install ProjectDiscovery tools
ProjectDiscovery offers some great tools I recommend for pentesting (PDTM – ProjectDiscovery, 
https://github.com/projectdiscovery/pdtm). Before we can install them, we must 
install the Go programming language runtime and libraries. Follow these steps to do so:
