# Security Chapter Extract
Book: Rong Su - Cybersecurity of Discrete Event Systems_ From Smart Attacks to Resilient Defence (2024, CRC Press) - libgen.li
Chapter: 2 - (∀x∈X)(∀s∈Σ∗)(∀σ∈Σ)ξ(x, sσ ) :=ξ(ξ(x, s), σ ).
Let
EnG:X→2Σ:x7→EnG(x) :={σ∈Σ|ξ(x, σ)!
20■Cybersecurit
y of Discrete Event Systems
be a mapping that maps each state x∈Xto the set of events allowed
atxinG. We call EnG(x) the enabled event set atxinG.Gis called
reachable if
(∀x∈X)(∃s∈Σ∗)ξ(x0, s) =x,
namely, each state can be reached from the initial state; and
coreachable if
(∀x∈X)(∃s∈Σ∗)ξ(x, s)∈Xm,
namely, from each state there is a directed path towards one marker
state. Gis called trimmed if it is both reachable and coreachable.
Asub-automaton ofGis an automaton Gsub= (X sub,Σ, ξsub, x0,
Xm,sub ), not necessarily trimmed, such that Xsub⊆X,Xm,sub⊆Xm
and
(∀x, x′∈X)(∀σ∈Σ)ξsub(x, σ) =x′⇒ξ(x, σ) =x′,
that is, each transition of Gsubmust be a transition in G. However,
the opposite may not be true.
The language generated by FSA G(or the closed behaviour ofG)
captures all allowable sequences of events and is defined as
L(G) := {s∈Σ∗|ξ(x0, s)!}.
The language recognized byG(or the marked behaviour ofG) is
defined as
Lm(G) := {s∈L(G)|ξ (x0, s)∈Xm}.
Later, we will interpret each string s∈L(G) as a task, either completed
or uncompleted, and each string t∈Lm(G) will denote only a
completed task.
If we let L(G, x ) denote the set of all traces that originate from
state xofG(i.e., L(G, x ) :={s∈Σ∗|ξ(x, s)!}), then we have L(G) =
L(G, x 0).
In contrast to a DFSA, occasionally, in this book, we also use an
automaton, whose initial state is not unique and transition mapping
is also not deterministic in the sense that there may be more than
one target state for each transition, in order to represent a non-
deterministic outcomes. To this end, we introduce the concept of
nondeterministic finite-state automaton .
Intro
duction to Cybersecurity in Discrete Event Systems ■21
Definition 1.2 Anondeterministic finite-state automaton (NFSA) is
captured by G= (X, Σ, ξ, X 0, Xm), where Xis a finite set of states,
X0⊆Xa set of initial states, Xm⊆Xa set of marker (or final) states,
and Σ a finite alphabet, ξ:X×Σ∗→2Xa (total) state transition
function, where for all x∈X, we have ξ(x, ϵ) := {x}and for all s∈Σ∗
andσ∈Σ, we have ξ(x, sσ ) =∪x′∈ξ(x,s)ξ(x′, σ). □
For an NFSA G, its closed behavior isL(G) := {s∈Σ∗|(∃x 0∈
X0)ξ(x0, s)̸=∅}, and its marked behavior isLm(G) := {s∈Σ∗|(∃x 0∈
X0)ξ(x0, s)∩Xm̸=∅}. Similarly, we write EnG(x) := {sigma ∈
Σ|ξ(x, σ)̸=∅}to denote the enabled event set at state xin an FSA
G, and use L(G, x ) :={s∈Σ∗|ξ(x, s) ̸=∅}to denote the set of
all traces that originate from state xofG. In the remainder of this
monograph, if we do not explicitly state that an FSA is an NFSA, by
default, it is deterministic.
Given two FSAs Gi= (X i,Σi, ξi, xi,0, Xi,m) (i = 1, 2), their
parallel composition is denoted as G1×G2:= (X1×X2,Σ1∪Σ2, ξ1×
ξ2,(x1,0, x2,0), X1,m×X2,m), where the (partial) transition function
ξ1×ξ2is defined as follows, for all ( x1, x2)∈X1×X2andσ∈Σ =
Σ1∪Σ2:
ξ1×ξ2(x1, x2, σ) :=

(ξ1(x1, σ), ξ2(x2, σ))σ∈Σ1∩Σ2∧ξ1(x1, σ)
!∧ξ2(x2, σ)!,
(ξ1(x1, σ), x2) σ∈Σ1\Σ2∧ξ1(x1, σ)!,
(x1, ξ2(x2, σ)) σ∈Σ2\Σ1∧ξ2(x2, σ)!,
undefined otherwise.
Definition 1.3 Given two FSAs Gi= (Xi,Σ, ξi, xi,0, Xi,m) (i= 1,2),
we say G1isDES-isomorphic toG2if there exists a bijection θ:X1→
X2such that the following hold:
Security Relevance Score: 3
Word Count: 537
Extracted: 2025-06-13 23:40:25

---

(∀x∈X)(∀s∈Σ∗)(∀σ∈Σ)ξ(x, sσ ) :=ξ(ξ(x, s), σ ).
Let
EnG:X→2Σ:x7→EnG(x) :={σ∈Σ|ξ(x, σ)!
20■Cybersecurit
y of Discrete Event Systems
be a mapping that maps each state x∈Xto the set of events allowed
atxinG. We call EnG(x) the enabled event set atxinG.Gis called
reachable if
(∀x∈X)(∃s∈Σ∗)ξ(x0, s) =x,
namely, each state can be reached from the initial state; and
coreachable if
(∀x∈X)(∃s∈Σ∗)ξ(x, s)∈Xm,
namely, from each state there is a directed path towards one marker
state. Gis called trimmed if it is both reachable and coreachable.
Asub-automaton ofGis an automaton Gsub= (X sub,Σ, ξsub, x0,
Xm,sub ), not necessarily trimmed, such that Xsub⊆X,Xm,sub⊆Xm
and
(∀x, x′∈X)(∀σ∈Σ)ξsub(x, σ) =x′⇒ξ(x, σ) =x′,
that is, each transition of Gsubmust be a transition in G. However,
the opposite may not be true.
The language generated by FSA G(or the closed behaviour ofG)
captures all allowable sequences of events and is defined as
L(G) := {s∈Σ∗|ξ(x0, s)!}.
The language recognized byG(or the marked behaviour ofG) is
defined as
Lm(G) := {s∈L(G)|ξ (x0, s)∈Xm}.
Later, we will interpret each string s∈L(G) as a task, either completed
or uncompleted, and each string t∈Lm(G) will denote only a
completed task.
If we let L(G, x ) denote the set of all traces that originate from
state xofG(i.e., L(G, x ) :={s∈Σ∗|ξ(x, s)!}), then we have L(G) =
L(G, x 0).
In contrast to a DFSA, occasionally, in this book, we also use an
automaton, whose initial state is not unique and transition mapping
is also not deterministic in the sense that there may be more than
one target state for each transition, in order to represent a non-
deterministic outcomes. To this end, we introduce the concept of
nondeterministic finite-state automaton .
Intro
duction to Cybersecurity in Discrete Event Systems ■21
Definition 1.2 Anondeterministic finite-state automaton (NFSA) is
captured by G= (X, Σ, ξ, X 0, Xm), where Xis a finite set of states,
X0⊆Xa set of initial states, Xm⊆Xa set of marker (or final) states,
and Σ a finite alphabet, ξ:X×Σ∗→2Xa (total) state transition
function, where for all x∈X, we have ξ(x, ϵ) := {x}and for all s∈Σ∗
andσ∈Σ, we have ξ(x, sσ ) =∪x′∈ξ(x,s)ξ(x′, σ). □
For an NFSA G, its closed behavior isL(G) := {s∈Σ∗|(∃x 0∈
X0)ξ(x0, s)̸=∅}, and its marked behavior isLm(G) := {s∈Σ∗|(∃x 0∈
X0)ξ(x0, s)∩Xm̸=∅}. Similarly, we write EnG(x) := {sigma ∈
Σ|ξ(x, σ)̸=∅}to denote the enabled event set at state xin an FSA
G, and use L(G, x ) :={s∈Σ∗|ξ(x, s) ̸=∅}to denote the set of
all traces that originate from state xofG. In the remainder of this
monograph, if we do not explicitly state that an FSA is an NFSA, by
default, it is deterministic.
Given two FSAs Gi= (X i,Σi, ξi, xi,0, Xi,m) (i = 1, 2), their
parallel composition is denoted as G1×G2:= (X1×X2,Σ1∪Σ2, ξ1×
ξ2,(x1,0, x2,0), X1,m×X2,m), where the (partial) transition function
ξ1×ξ2is defined as follows, for all ( x1, x2)∈X1×X2andσ∈Σ =
Σ1∪Σ2:
ξ1×ξ2(x1, x2, σ) :=

(ξ1(x1, σ), ξ2(x2, σ))σ∈Σ1∩Σ2∧ξ1(x1, σ)
!∧ξ2(x2, σ)!,
(ξ1(x1, σ), x2) σ∈Σ1\Σ2∧ξ1(x1, σ)!,
(x1, ξ2(x2, σ)) σ∈Σ2\Σ1∧ξ2(x2, σ)!,
undefined otherwise.
Definition 1.3 Given two FSAs Gi= (Xi,Σ, ξi, xi,0, Xi,m) (i= 1,2),
we say G1isDES-isomorphic toG2if there exists a bijection θ:X1→
X2such that the following hold:
1.θ(x1,0) =x2,0,
2.θ(X1,m) =X2,m,
