# Security Chapter Extract
Book: Steve Campbell - Bash Shell Scripting for Pentesters (2024, Packt Publishing Pvt Ltd) - libgen.li
Chapter: 4 - that the
Security Relevance Score: 9
Word Count: 1480
Extracted: 2025-06-13 23:41:12

---

that the Bash interpreter runs your script on systems where multiple shells are installed.
    

     While performing
    



     security assessments, you’re very likely to encounter Linux servers where Bash is the default shell.
    

     It will be essential for a pentester to understand how to interact with Bash to exploit applications, escalate privileges, and
    


      move laterally.
     




     Fortunately, there are many ways you can access a Bash shell for free.
    

     This section will explore a variety of ways you can access a Bash shell in an ideal setting so that you can follow along and learn how to use Bash for pentesting.
    

     We will also explore vulnerable lab environments where you can safely practice using Bash and
    


      pentesting tools.
     




     Virtual machines are the preferred way to follow along with this book’s activities, as well as when performing pentesting.
    

     You may be tempted to install your pentesting tools and exploit code on the same system you use for business or personal activities.
    

     It’s easy to damage your system by installing software prerequisites for various tools.
    

     There’s always a risk of hacking tools containing malware and infecting the same system that you use from day to day to send emails or access the web.
    

     A virtual machine provides a convenient sandbox environment with everything you need to quickly refresh or replace a testing environment.
    

     I have chosen to use Kali Linux in all demonstrations.
    

     We want to avoid installing pentesting tools and exploit code in the same system we use daily for business or personal use.
    

     It’s
    



     best to use a clean testing environment to avoid creating software dependency issues for us.
    

     Kali makes it easy to install the needed software packages related
    


      to pentesting.
     






     Virtual machines
    



     Using a
    


      virtual machine
     


     is the preferred method.
    

     During a pentest, you’ll likely install a multitude of tools and exploit proof of concept code.
    

     At some point, you’ll also save sensitive data about your customer or target.
    

     A virtual machine provides a convenient container that you can snapshot and restore, or
    



     delete and replace easily after
    


      an assessment.
     




     There are numerous free and paid virtualization solutions to fit
    


      any need:
     





      Oracle VirtualBox is a free x86 virtualization hypervisor.
     

      It’s available for Windows, macOS (Intel chipset), and Linux.
     

      VirtualBox is user-friendly, making it a popular choice for beginners and professionals alike.
     

      It supports a wide range of guest operating systems and offers features such as snapshots, seamless mode, and
     


       shared folders.
      




      VMware offers a free version of their virtualization
     



      software called VMware Workstation Player for non-commercial use.
     

      It’s compatible with Windows and Linux hosts.
     

      Workstation Player is easy to use and supports VMware’s VMDK virtual disk format, and it’s also compatible with virtual machines created by other
     


       VMware products.
      




      Microsoft Hyper-V is free and available on Windows 10 Pro, Enterprise, and Education editions.
     

      While it’s more commonly used in server environments, Hyper-V can also be a good option for desktop virtualization on Microsoft
     


       Windows hosts.
      





     Tip
    



     For those on macOS with the Apple CPU, your virtualization options are UTM, Parallels, and VMWare Fusion.
    

     UTM is the
    



     only
    


      free option.
     






     Docker containers
    




      Docker containers
     


     offer a lightweight option over virtual machines.
    

     Docker offers a runtime for Windows, Linux, and macOS.
    

     Containers are more lightweight and efficient on lower-end hardware than virtual machines because they use the host’s kernel, so they don’t have to virtualize hardware as traditional
    


      hypervisors do.
     




     Because Docker uses the host’s kernel, you’re limited to running containers while utilizing the same operating system as the host.
    

     Docker Desktop is an alternative that uses a virtual machine to run containers with a different operating system from
    


      the host.
     




     Based on my experience, there are
    



     some positive and negative points to consider about
    


      using Docker.
     




     Docker is more lightweight and is a good alternative to traditional hypervisors when your hardware is less robust.
    

     The minimum hardware resources I would assign to a virtual machine running Kali Linux is 4 GB of RAM and 40 GB of disk space.
    

     You’re not always going to be using that 4 GB/40 GB.
    

     At the same time, you’re limited to those values unless you shut down the virtual machine, adjust the RAM, and extend the disk.
    

     A Docker container runs in a native process (excluding Docker Desktop), so it uses only as much memory and disk space as needed to run
    


      the container.
     




     On a Linux host, you can attach a container directly to the host network and open and close ports as needed, provided you include specific command-line arguments.
    

     This allows you to dynamically open listening server ports on the host’s network adapter without stopping and starting the container.
    

     You can also attach a container to a USB or serial port to interface with hardware devices.
    

     I sometimes use this option when I need to run an old Python2 pentesting application that interfaces with a USB or serial device for radio frequency and
    


      hardware hacking.
     




     When using Docker Desktop, NAT is used to connect container network ports to the host’s network, so the container must be stopped and restarted if you need to close or open additional ports.
    

     With Docker Desktop, it isn’t possible to attach a container to hardware devices.
    

     This can be aggravating when you’ve configured an application and its dependencies on a container and then lose your work and have to start over when you destroy the container and
    



     start a new instance, just to open another TCP port for a reverse listener or
    


      server application.
     




     In summary, my preference is to use Docker only on a Linux host, and I use it for three specific pentesting
    


      use cases:
     





      It provides an easy way to isolate old Python 2 applications and avoid dependency hell.
     

      There are official Docker containers for all Python 2 and
     


       3 versions.
      




      I use it to create and run applications that aren’t available through my package manager, and I want to avoid wasting time solving dependency issues.
     

      For example, a particular hacking tool is available through the Kali software repository, but not in Ubuntu.
     

      I can create a thin Kali container that uses only enough resources to run the contained application and use an alias in my
     


       ~/.bashrc
      


      file to reduce a long
     


       docker run
      


      command to a single word I can enter in my Terminal.
     

      This is a much faster and more lightweight option than a heavy virtual machine when I just want to run a single application that can’t be run or would be difficult to run on my
     


       host system.
      




      When I want to practice exploiting or creating an exploit tool for a recently announced vulnerable web application, I can frequently find a Docker container that allows me to immediately start the vulnerable application without spending precious time installing and
     


       configuring it.
      





     Docker containers are perfect for specific use cases.
    

     However, they’re less preferred than virtual machines.
    

     Next, we’ll explore using live USB systems as an alternative to virtual machines
    


      and containers.
     






     Live USB
    



     A
    


      live USB
     


     is an operating system image written to a USB disk in a way that makes it bootable.
    

     Live USB is a good choice to use when your computer doesn’t have the hardware resources to run a virtual machine.
    

     You can use imaging software to burn Linux ISO disks to USB and boot a Linux operating system.
    

     After you finish your work on Linux, you simply restart the computer and remove the USB drive to revert to the installed operating system.
    

     Some Linux
    



     distributions enable you to create persistent storage on the USB drive so that you don’t lose your changes when
    


      you reboot.
     




     The following are some general steps for
    



     running a Linux distribution from
    


      live USB:
     





      Download the ISO image.
     

      Some popular Linux distributions for pentesters include Kali, Parrot Security OS,
     


       and BlackArch.
      




      Create a live USB drive.
     

      Common tools for this purpose include Rufus, balenaEtcher, and the Linux
     



        dd
       




       command.
      




      Configure persistence (optional).
     

      This usually involves creating a separate partition on the USB drive and configuring the bootloader to recognize and use this partition.
     

      You can find the documented steps required to create a live USB Kali system
     


       at
      




        https://www.kali.org/docs/usb/usb-persistence/
       




       .
      





     There are some considerations and drawbacks to using
    


      live USB:
     





      USB storage is usually much slower than running directly from an SSD.
     

      If you use live USB, be sure to use the
     



      USB 3.0 or 3.1 standard for
     


       best performance.
      




      Always download the ISO image from official sources and verify the checksum before
     


       trusting it.
      




      If you’re planning to use it for production use, be sure to use encrypted persistence due to the risk of exposing the sensitive data on the drive to someone not authorized to
     


       have it.
      





     Now, let’s move on and discuss
    


      cloud-based systems.
     






     Cloud-based systems
    



     Many cloud platforms create free tiers for access to Linux systems with enough resources for modest workloads.
    

     Cloud
    



     providers with free tiers include
    


      Google Cloud Platform
     


     (
    


      GCP
     


     ), Microsoft Azure, and
    



     Amazon EC
