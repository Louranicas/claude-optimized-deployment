# Security Chapter Extract
Book: Travis DeForge - Ultimate Penetration Testing with Nmap_ Master Cybersecurity Assessments for Network Security, Monitoring, and Scanning Using N (2024, Orange Education Pvt Ltd, AVA™) - libgen.li
Chapter: 5 - Mapping a Large Environment, when scans are conducted too slowly, they can lose accuracy by hitting the host timeout limit default in Nmap. To account for this, additional considerations need to be included, such as specifying the timeout value and defining the number of retries per endpoint. Adding these components makes the scan even more complex:
Nmap -f --data-length 5 --randomize-hosts -T2 -Pn --exclude-ports 22,139, 445 --host-timeout 5m --max-retries 3 10.0.0.2-254
Here, we have a solution that combines eight individual Nmap flags in a strategic combination with a defined scan range to strike a balance between being obfuscated and efficient. However, keep in mind that this scan results in only a basic port status and prints to the command line. Adding additional options to include service versioning (-sV), specifying that only open ports are included (--open), or including the reason for statuses (--reason), with any degree of verbosity (-v), and outputting the results to a saved file (-oX), all add additional flags, bringing the total to well over a dozen for a single scan.
Avoiding Blue Team Detection
Time and time again in retrospective analysis and real-time purple teaming engagements, a handful of fairly common mistakes lead to detection by the blue team. Understanding these common pitfalls will allow us to better tailor scan parameters that have a higher probability of remaining undetected:
Security Relevance Score: 22
Word Count: 2434
Extracted: 2025-06-13 23:40:38

---

Mapping a Large Environment, when scans are conducted too slowly, they can lose accuracy by hitting the host timeout limit default in Nmap. To account for this, additional considerations need to be included, such as specifying the timeout value and defining the number of retries per endpoint. Adding these components makes the scan even more complex:
Nmap -f --data-length 5 --randomize-hosts -T2 -Pn --exclude-ports 22,139, 445 --host-timeout 5m --max-retries 3 10.0.0.2-254
Here, we have a solution that combines eight individual Nmap flags in a strategic combination with a defined scan range to strike a balance between being obfuscated and efficient. However, keep in mind that this scan results in only a basic port status and prints to the command line. Adding additional options to include service versioning (-sV), specifying that only open ports are included (--open), or including the reason for statuses (--reason), with any degree of verbosity (-v), and outputting the results to a saved file (-oX), all add additional flags, bringing the total to well over a dozen for a single scan.
Avoiding Blue Team Detection
Time and time again in retrospective analysis and real-time purple teaming engagements, a handful of fairly common mistakes lead to detection by the blue team. Understanding these common pitfalls will allow us to better tailor scan parameters that have a higher probability of remaining undetected:

Avoid scanning the gateway: The gateway is the IP address on a subnet that traffic is directed to when it is in transit outside of the local subnet. This address most often has a switch or a router present, which will then do the necessary routing to forward the traffic to the intended endpoint. These devices also often have the capacity of an intrusion detection system (IDS). By scanning these endpoints deliberately, you are figuratively shooting paintballs at the guard tower.
In most instances, the gateway will either be at the .1 or the .255 address on a subnet, which should be avoided in most scanning. This can be accomplished best by either defining a specific range 10.10.10.2-254 or by listing the possible gateway address specifically with the --exclude-host flag.
Avoid scanning ports 22, 139, and 445 until absolutely necessary: Many security products are particularly sensitive to activity on ports that are often associated with malicious activity, such as SSH (22) and those related to SMB (139,445). 
Starting with SSH, there are many ways in which a penetration tester (or malicious actor) can manipulate outdated implementations of the protocol. Most commonly exploitation is requisite on brute forcing, which is seldom permitted within the rules of engagement, or denial of service, which is virtually never permitted. For this reason, searching for open SSH ports can be deprioritized to the ending stages of the engagement.
The SMB ports, however, are another matter entirely. There are numerous highly significant and actionable vulnerabilities traditionally associated with SMB, which can be pivotal in offensive security engagements. For this reason, the urge to target these systems right away can seem at times overpowering, especially when there is an indication that there may be outdated server infrastructure in the environment. This allure is recognized by many security products, and as such, there tends to be a more watchful eye on these services in mature environments.
Avoid scanning the same endpoint multiple times in a row: While it may seem obvious, it is worth noting that continuing to hit the same endpoint over and over again is not particularly subtle, and with each additional scan, the likelihood of detection increases. Take care to split up scans into different segments to ensure that analysis can continue in one area while a cool-down period is ongoing in another. This is a very simple way to help avoid breaking the noise floor.
Avoid any scripts that attempt default logins: There are many NSE scripts available that will attempt default or anonymous login attempts on services that are identified. These (usually failed) authentication attempts often have a higher probability of detection than the scan itself.
Ensure the speed of the scan is throttled to stay below the noise floor: You can add all the obfuscation flags you want, but if you forget to reduce the speed of the scan, you will likely be identified as the noisiest endpoint on the network and trigger an investigation. Remember, the default speed of Nmap is (T3), which accomplishes a scan of a local host in roughly a fifth of a second (as per the official documentation). The default is fast.
Ensure that there is sufficient entropy in both the packets themselves (signature) and in the way the scan operates (heuristic): You must take care to ensure that the packets are obfuscated (consider fragmentation and appending random data) as well as the operations (reducing speed, randomizing endpoints, reducing retries, and more). When both elements are strategically combined, there is a far greater probability of successful evasion than only one technique.
Always start on your local subnet before scanning others: When conducting an internal penetration test, you should begin by fully analyzing the subnet that you are already on. This allows you to scan and gather information on the local endpoints without going through a gateway, which often means sending traffic through an intrusion detection system. This doesn’t mean that no obfuscation is necessary, but it does mean that you can lean more toward speed than extreme stealth on the local subnet.

Case Study: Purple Teaming with Nmap
For an organization with a mature security posture, a purple teaming engagement can be one of the most insightful and collaborative opportunities available to fine-tune their security products and defense-in-depth architecture. The fundamental concept of purple teaming is that the red team works in close collaboration with the blue team to conduct specific scenarios and verify the validity of the detection and incident response process. Rather than in a red teaming engagement, where the goal is often thought of as “beating” the blue team, purple teaming is an opportunity to foster teamwork and allow each team to learn from one another to better the organization's security posture.
Most purple teaming engagements have several distinctly different scenarios that employ TTPs outlined by major security frameworks, such as MITRE ATT&CK or the Purple Team Exercise framework (PTEF). One of the most insightful purple team engagements involved leading an extremely large organization with hundreds of locations worldwide and thousands of employees. This engagement was composed of five different scenarios as follows:

Internal Network Reconnaissance
Active Directory Exploitation
Windows Workstation Privilege Escalation
Windows Server Privilege Escalation and Persistence
Linux Server Privilege Escalation and Persistence

The majority of the first scenario was conducted with Nmap by using a wide variety of specific scans against different parts of the network scope. The engagement began by establishing a baseline of detection against a default Nmap scan on both the local subnet (10.10.41.0/24) and another subnet hosting server infrastructure (10.10.42.0/24). This activity was detected immediately.
From here, the fun begins by trying to determine the cause of the detection and sequentially adding different techniques and parameters until there is no detection. Considering that even scanning the local workstation subnet was detected, which would not have been routed through an IDS (and the gateway was not scanned), indicating that there was a security product sensor on the local network that detected the activity.
To search for this sensor, an open-source tool called NetDiscover was used, which can passively listen to Address Resolution Protocol (ARP) traffic on the network and then match the MAC addresses in those ARP packets to specific vendors. Sure enough, 10.10.41.117 was identified as a security product. Rescanning the local subnet while excluding 10.10.41.117 allowed the scan to proceed undetected:
Nmap -T2 –-exclude-host 10.10.41.117 10.10.42.2-254
The next step was to achieve the same results on different subnets, meaning Nmap would have to traverse and successfully bypass the client’s IDS. Since this was a collaborative process, the strategy of progressively increasing obfuscation while the blue team monitored their detection resources was ideal. This started by reducing the speed and skipping the gateway:
Nmap -T2 10.10.42.2-254
No change; this was still easily detected by the SOC. The next step was to add more entropy to the heuristics of the scan as well as the signature of the packets. To do this, hosts that were scanned were randomized, host discovery was disabled, packets were fragmented, and 5 bits of random data were appended to the end of each packet fragment, as well as the TTL was reduced from the default of 64 to 58:
Nmap -T2 –-randomize-hosts -Pn -f –-data-length 5 -ttl 58 10.10.42.2-254
Despite this, the scan was still detected. Collaborating with the blue team to analyze the results, it became evident that what was being detected in this scenario was not a port scan of the entire subnet, but a port scan of SSH. Relaunching the same scan on a different subnet and excluding port 22 did the trick, with meaningful results and no alerts:
Nmap -T2 –-randomize-hosts -Pn -f –-data-length 5 -ttl 58 –-exclude-port 22 10.10.43.2-254
Identifying how to bypass the IDS was an important step in the process, but it was not a complete scenario for this engagement. The final step was to begin stripping the different layers of obfuscation to identify the simplest scan that avoided detection. By doing this, it becomes far clearer how to fine-tune the security products to increase the detection capability. Understanding that excluding SSH was key to the process, this was done in two stages: removing the entropy of the scan and removing the entropy of the signature:

Nmap -Pn -f --data-length 5 -ttl 58 –-exclude-port 22 10.10.43.0/24
Nmap -T2 --randomize-hosts –-exclude-port 22 10.10.43.2-254

Interestingly, both versions of this scan were successful and avoided detection. There was an inherent overreliance on detecting malicious SSH connections as a highly valued anomalous activity by the IDS. While monitoring specific ports deemed impactful for malicious activity is a beneficial practice, other detection settings were reduced to avoid the deluge of false-positive alerts.
This exercise was valuable in identifying specific gaps in the blue team’s detection capability and demonstrating the legitimate impact of those gaps. In this case, it demonstrated the potential for a malicious actor who had gained access to the corporate network to conduct reconnaissance.
Case Study: Red Teaming a Bank
Red teaming is among the most advanced and challenging types of engagement within the realm of offensive network security. This type of engagement pits a blue team and a red team directly against each other, with each team operating autonomously. In contrast to purple teaming, where scenarios are carefully curated and coordinated to foster collaboration between the red and the blue teams, red teaming truly emulates a malicious actor intent on breaking into the target organization.
In most red team engagements, there will be a mixture of both traditional penetration testing activities and social engineering components. Most pentesters versed in social engineering will tell you that the often-cited annual statistic from Verizon, which states that greater than 70% of security breaches involved some degree of social engineering, is far from a coincidence. In actuality, social engineering remains among the most effective ways of gaining an initial foothold into an organization from the exterior.
When people hear social engineering, one of the first things that come to mind are old-school phishing emails riddled with misspellings and unlikely stories attempting to steal credit card information. However, the reality over the last several years is that malicious actors are employing progressively more sophisticated techniques beyond simple phishing emails. Leveraging enterprise communication platforms such as Slack or Microsoft Teams, impersonating VIPs or support staff on the telephone, sending malicious QR codes, and even utilizing artificial intelligence to spoof the voice of key staff are all techniques being leveraged by malicious actors. In a red team engagement, if it is something malicious actors do, then it is typically fair game, as long as it does not impact the confidentiality, integrity, or availability of systems.
During large-scale red team engagement against a medium-sized bank based out of the United States, initial access was obtained through social engineering. The engagement began as external penetration tests often do, with blind reconnaissance of the organization, its domains and subdomains, exposed assets, personnel, hierarchy, line of business, clients, customers, partners, and products. This context plays a critical role in developing effective social engineering campaigns with believable pretexts.
In this instance, the mail records gave away a key piece of information that led to the successful social engineering, the name of the organization’s IT managed service provider (ITMSP). Considering this client had a mature security posture, it was unlikely that purchasing and utilizing a typo-squatted domain to impersonate key leaders in their organization would be successful (many email security products such as Microsoft 365 and Proofpoint include domain impersonation protections); it was decided to instead impersonate their ITMSP.
For only a few dollars, we were able to purchase a domain very similar to that of the IT provider’s domain and created an email account for an IT Support Specialist associated with that organization. Next, instead of simply using this account to send phishing emails (as malicious attachments or hyperlinks would almost certainly be detected and reported), we opted to employ vishing as an attack mechanism. By dialing the company's automated phone line, we determined that there was a dial-by-name option, which meant we could call anybody in the organization without knowing their phone extension or going through a receptionist.
With this context, we built a target list based on the client company’s public LinkedIn page, targeting any employee we could find who had been hired within the last 60 days or had their position listed as an intern. New employees were targeted for two main reasons. The first is that they may not have yet built a relationship with specific personnel at their ITMSP and may be more likely to believe our impersonation attempts. The other reason is that new personnel are often given a ton of information all at once in their onboarding and may not be as familiar with how to report suspicious activity, such as a questionable phone call.
With the target list in place, the technique was very simple. We called each new employee and pretended to be a pre-selected Support Specialist from their ITMSP and claimed that their workstation was flagged for not receiving updates and we would need to remotely access their computer to troubleshoot the issue. This is a classic pre-texting technique used by malicious actors and is very similar to the technique that was leveraged in the cyberattack against MGM in September of
