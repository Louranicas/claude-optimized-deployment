# Security Chapter Extract
Book: Travis DeForge - Ultimate Penetration Testing with Nmap_ Master Cybersecurity Assessments for Network Security, Monitoring, and Scanning Using N (2024, Orange Education Pvt Ltd, AVA™) - libgen.li
Chapter: 255 - This creates a distinctly noticeable pattern on the network, which can be easily detected by the IDS. This flag is great for adding entropy to the scan operations by simply picking random endpoints from the list. So, scanning 10.10.10.0/24 with –-randomize-hosts may start with 10.10.10.47, then 10.10.10.2, followed by 10.10.10.217, and so on.
--data-length #: Nmap packets are usually lean, with just simple headers, a fact known by security products. By default, Nmap packets are 40 bytes in length, and ICMP echo requests are 28 bytes; this known length is often used to detect the use of Nmap on the network. The –data-length flag allows you to append a random set of data to the end of the packets. This helps make each packet unique and can, when combined with other techniques such as fragmentation, be highly effective in obfuscating the activity.
Keep in mind that this feature tends to slow the scan down; for this reason, appending a large number of bytes is not recommended. Appending between 5 and 10 bytes will be sufficient for most use cases and strike a balance between speed and stealth.
--exclude-port: There may be times when you want to scan a large number of ports but want to exclude one or more specific ones, which often leads to detection. This scenario is when --exclude-port comes into play. As we have discussed, the default Nmap scan will utilize the top 1000 most common ports, but there are some ports, such as 22, 139, and 445, which tend to be more sensitive to detection. To exclude these ports, but keep the other 997, you could use the following scan: 
Nmap --exclude-ports 22,139,445 10.10.10.0/24
--exclude-host: Similarly, to the concept of excluding specific ports, you can also exclude specific hosts in a range of IP addresses. At first, many people consider using this as a way of excluding the gateway when scanning a subnet; however, considering IP address ranges (10.10.10.2-254) can be used, it is only a minimally helpful use case. Instead, host exclusion can be used to avoid scanning yourself on the local subnet or to avoid scanning endpoints that you have identified as security products themselves. For example, if during passive ARP scanning, you identified what appeared to be a Dark Trace listener on 10.10.10.14, you could run the following scan to avoid it:
Nmap --exclude-host 10.10.10.14 10.10.10.0/24
--discovery-ignore-rst: While not technically a means of obfuscation, this flag can be helpful in obtaining better results when facing a firewall. In some situations, firewalls will spoof TCP reset responses to all probes being sent to a disallowed address. Considering the default behavior of Nmap would recognize these RST packets as an indicator that a host is alive, Nmap would then waste an inordinate amount of time scanning things that do not exist. This flag can help in those situations by ignoring the initial RST packet and instead relying on other specified host discovery options.
In a scenario where you get back a response for a large number of ports or endpoints, all returned as “filtered”; this is a good trick to employ.
-Pn: This flag simply disables the ICMP ping as part of the host discovery process and instead considers every endpoint as up. In some environments, ICMP will be blocked or detected fairly readily, and this can be a helpful option.
-D: This flag is used for decoy scanning, which has a fairly niche place in engagements when detection has occurred, but you are trying to avoid containment by the blue team. By specifying decoys, Nmap can spoof the originating IP address of the scan across multiple provided IPs. The idea here is to hide your true IP that is conducting the scanning from detection by also triggering activation, seeming to originate from other IP addresses.
Security Relevance Score: 10
Word Count: 1078
Extracted: 2025-06-13 23:40:38

---

This creates a distinctly noticeable pattern on the network, which can be easily detected by the IDS. This flag is great for adding entropy to the scan operations by simply picking random endpoints from the list. So, scanning 10.10.10.0/24 with –-randomize-hosts may start with 10.10.10.47, then 10.10.10.2, followed by 10.10.10.217, and so on.
--data-length #: Nmap packets are usually lean, with just simple headers, a fact known by security products. By default, Nmap packets are 40 bytes in length, and ICMP echo requests are 28 bytes; this known length is often used to detect the use of Nmap on the network. The –data-length flag allows you to append a random set of data to the end of the packets. This helps make each packet unique and can, when combined with other techniques such as fragmentation, be highly effective in obfuscating the activity.
Keep in mind that this feature tends to slow the scan down; for this reason, appending a large number of bytes is not recommended. Appending between 5 and 10 bytes will be sufficient for most use cases and strike a balance between speed and stealth.
--exclude-port: There may be times when you want to scan a large number of ports but want to exclude one or more specific ones, which often leads to detection. This scenario is when --exclude-port comes into play. As we have discussed, the default Nmap scan will utilize the top 1000 most common ports, but there are some ports, such as 22, 139, and 445, which tend to be more sensitive to detection. To exclude these ports, but keep the other 997, you could use the following scan: 
Nmap --exclude-ports 22,139,445 10.10.10.0/24
--exclude-host: Similarly, to the concept of excluding specific ports, you can also exclude specific hosts in a range of IP addresses. At first, many people consider using this as a way of excluding the gateway when scanning a subnet; however, considering IP address ranges (10.10.10.2-254) can be used, it is only a minimally helpful use case. Instead, host exclusion can be used to avoid scanning yourself on the local subnet or to avoid scanning endpoints that you have identified as security products themselves. For example, if during passive ARP scanning, you identified what appeared to be a Dark Trace listener on 10.10.10.14, you could run the following scan to avoid it:
Nmap --exclude-host 10.10.10.14 10.10.10.0/24
--discovery-ignore-rst: While not technically a means of obfuscation, this flag can be helpful in obtaining better results when facing a firewall. In some situations, firewalls will spoof TCP reset responses to all probes being sent to a disallowed address. Considering the default behavior of Nmap would recognize these RST packets as an indicator that a host is alive, Nmap would then waste an inordinate amount of time scanning things that do not exist. This flag can help in those situations by ignoring the initial RST packet and instead relying on other specified host discovery options.
In a scenario where you get back a response for a large number of ports or endpoints, all returned as “filtered”; this is a good trick to employ.
-Pn: This flag simply disables the ICMP ping as part of the host discovery process and instead considers every endpoint as up. In some environments, ICMP will be blocked or detected fairly readily, and this can be a helpful option.
-D: This flag is used for decoy scanning, which has a fairly niche place in engagements when detection has occurred, but you are trying to avoid containment by the blue team. By specifying decoys, Nmap can spoof the originating IP address of the scan across multiple provided IPs. The idea here is to hide your true IP that is conducting the scanning from detection by also triggering activation, seeming to originate from other IP addresses.

This function gets a good amount of attention from cybersecurity content creators because it ‘seems’ like a great idea, like being a needle in a haystack. However, in reality, there are a couple of important considerations before employing this technique:

If you try to spoof an IP of a host that is down, you may SYN flood the targets.
If you spoof IPs that don’t actually exist, you will still be detected easily.
If you do this in a production environment, when the client is not expecting the activity, it could be seen as multiple compromised endpoints, which could result in panic and disruption to the organization.

For these reasons, employing decoys is a risky business and may be best suited to collaborative and well-planned purple teaming scenarios.
Intrusion Detection System (IDS) and Firewall Evasion
By now, you have seen dozens of individual Nmap flags, scripts, and techniques that have been introduced to fill a wide variety of use cases in a very scientific manner. However, in the case of evading detection, it becomes more of an art form. No individual flag or script that has been discussed will prove to be a magic bullet that pieces the defenses of client organizations. Instead, they are individual cogs in a complex machinery that you will have to build and tailor to the specific use case by strategically combining these options.
Some of the earlier flags synergize very naturally together. Consider the following scan:
Nmap -f --data-length 5 --randomize-hosts 10.0.0.0/24
This scan will fragment each packet from the original (usually) 58 bytes into 8 separate packets of 8 bytes or fewer, and then append five additional bytes of random data to the end of each. Now, instead of a single well-known packet length, there are numerous smaller packets, each with unique and seemingly random values. This obfuscates the signature of the tool. Next, the order in which the subnet is scanned becomes randomized, which adds entropy to the process of how Nmap is expected to operate.
This scan is a good start for obfuscation, but several more elements need to be considered, such as the speed of the scan, the necessity for host discovery, the risk of scanning often-detected ports, and the risk of scanning the gateways, just to name a few. Once these elements are added, you will note that the scan becomes somewhat more complex:
Nmap -f --data-length 5 --randomize-hosts -T2 -Pn --exclude-ports 22,139, 445 10.0.0.2-254
This scan is likely to avoid detection. However, when adding so many options to reduce the speed while still scanning a large number of ports (997 in this case), there will likely be issues related to host timeout. As discussed in
