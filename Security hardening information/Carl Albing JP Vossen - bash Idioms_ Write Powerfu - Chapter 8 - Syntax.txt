# Security Chapter Extract
Book: Carl Albing, JP Vossen - bash Idioms_ Write Powerful, Flexible, Readable Shell Scripts (2022, O'Reilly Media) - libgen.li
Chapter: 8 - Syntax
Security Relevance Score: 2
Word Count: 887
Extracted: 2025-06-13 23:40:28

---

Syntax
Following are style guidelines related to syntax:


Use \#!/bin/bash - or \#!/usr/bin/env bash when writing bash code, not \#!/bin/sh


FIXME-TOOLS: there’s a Markdown/Asciidoctor rendering issue with the three # ! above




Use $@ unless you are really sure you need $*


Use == instead of = for equality, to reduce confusion with assignment


Use $() instead of <code>``</code> backticks/backquotes


FIXME-TOOLS: there’s a Markdown/Asciidoctor rendering issue with the backticks




Use [[ instead of [


Use 0 1 and 2 3 as needed for integer arithmetic, avoid let and expr


Use [[ expression ]] && block or [[ expression ]] || block when simple and readable. Do not use [[ expression ]] && block || block because that doesn’t do what you think it does, use if .. (elif ..) then .. else for that.




Other
Other guidelines:


For “system” scripts, log to syslog and let the OS worry about final destination(s), log rotation, etc.


Error messages should go to STDOUT, like echo 'A Bad Thing happened' >&2


Sanity check that external tools are available


Provide useful messages when things fail


Set exit codes, especially when you fail




Script Template
This is a sample skeleton or template script you can copy as a reminder and to save some typing when you create a new script.
#!/bin/bash -
# Or possibly: #!/usr/bin/env bash
# <Name>: <description>
# Original Author & date:
# Current maintainer?
# Copyright/License?
# Where this code belongs?  (Hosts, paths, etc.)
# Project/repo?
# Caveats/gotchas?
# Usage?  (Better to have `-h` and/or `--help` options!)
# $URL$  # If using SVN
ID=''    # If using SVN
#_________________________________________________________________________
PROGRAM=${0##*/}  # bash version of `basename`

# GLOBAL and constant variables are in UPPER case
LOG_DIR='/path/to/log/dir'

# Functions are in Mixed Case
###########################################################################
# Define functions

#--------------------------------------------------------------------------
# Example function
# Globals: none
# Input:   nothing
# Output:  nothing
function foo {
    local var1="$1"
    ...
} # end of function foo


#--------------------------------------------------------------------------
# Another example function
# Globals: none
# Input:   nothing
# Output:  nothing
function bar {
    local var1="$1"
    ...
} # end of function bar


###########################################################################
# Main
...


Other Style Guides
We strongly suggestion you have a style guide and use it!  If you don’t like ours, and you don’t want to tweak it yourself, you can go steal one from someplace else.


https://google.github.io/styleguide/shellguide.html


While we have a few quibbles and disagreements with this, it’s very good and quite extensive.  At best you can just use it, and at worst it’s a place to start.  There is a lot to like and you could do worse (like not having anything), and a lot of other projects have adopted it, so…


Among other things, we don’t agree with:


The 100 line limit.  We see the point, especially for an environment like Google’s, but we’ve got lots of scripts over that limit that are “mostly calling other utilities and are doing relatively little data manipulation.”


“Indent 2 spaces” is a bit shallow for us, we like 2 spaces for continued lines and 4 spaces otherwise.  (Oops, we weren’t going to admit that, were we?)


"${var}" is too busy, we prefer "$var" when possible.


function cleanup() {?  Ouch, no.


}} closes the +case..esac block and belongs at the same indent as the block opener, not at the indent of the code in the block






The following are other guides you can look at:


https://linuxcommand.org/lc3_adv_standards.php


https://www.ovirt.org/develop/infra/infra-bash-style-guide.html


https://wiki.bash-hackers.org/scripting/style


http://mywiki.wooledge.org/BashGuide/Practices


Great info http://mywiki.wooledge.org/BashPitfalls






Or do a web search for


"Shell Style Guide"


"Bash Style Guide"


"Shell script coding standards"






Bash Linter
Using a “linter” instead of or in addition to a style guide can also be handy.  To be honest, we don’t use one, but we thought we should cover it.  The one we know about is shellcheck, and we have mixed feelings about the results, it’s especially picky about quoting and we don’t always agree with its suggestions either on quoting or in general, but those things are somewhat adjustable.  That said, it’s still very cool, and worth checking out.


Bash linter: https://www.shellcheck.net/


https://github.com/koalaman/shellcheck (Haskell)


History: https://www.vidarholen.net/contents/blog/?p=859


Checks: https://github.com/koalaman/shellcheck/wiki/Checks


Tweaking: https://github.com/koalaman/shellcheck/wiki/Directive


Ignoring errors: https://github.com/koalaman/shellcheck/wiki/Ignore


Note, Eol (2020) CentOS-6 is too old: https://github.com/koalaman/shellcheck/wiki/CentOS6




If you install through your package system remember that the version may be quite old.  The Linux version is a tarball containing a single compiled binary though, so it’s easy to drop a current version in your path somewhere.


Summary
Hopefully, this book has given you a better understanding of how to read and write “bashistic” code, and this chapter has provided a place to get started on defining a style (and guide) that will work for you.
Happy bashing!

1 Really: “Complexity is the worst enemy of security” from https://www.schneier.com/news/archives/2012/12/complexity_the_worst.html.2 https://en.wikipedia.org/wiki/ISO-8601













Appendix A. Bash Idioms Style Guide

A Note for Early Release Readers
With Early Release ebooks, you get books in their earliest form—the author’s raw and unedited content as they write—so you can take advantage of these technologies long before the official release of these titles.
This will be the appendix of the final book. Please note that the GitHub repo will be made active later on.
If you have comments about how we might improve the content and/or examples in this book, or if you notice missing material within this chapter, please reach out to the authors at carl@bashcookbook.com.

This is a copy of the points in
