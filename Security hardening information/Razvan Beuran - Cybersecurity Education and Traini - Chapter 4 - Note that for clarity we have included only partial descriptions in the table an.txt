# Security Chapter Extract
Book: Razvan Beuran - Cybersecurity Education and Training (2025, Springer Nature Singapore) - libgen.li
Chapter: 4 - Note that, for clarity, we have included only partial descriptions in the table, and the knowledge base should be referred to for details. Each category represents an attack mechanism, and trainees can consult the explanation of that mechanism during attack training to learn how to conduct the corresponding types of attacks.Attack Patterns On the second level of CAPECs are situated the attack patterns. Each category includes a number of concrete attack patterns that correspond to it logically. CAPEC distinguishes three types of attack patterns, depending on the abstraction level of their mechanism:Meta: Most abstract of the attack patterns, which describe a general methodology, but lack specific technology or implementation information (e.g., Content Spoofing); they are meant to provide an understanding of a high-level approach and are useful for threat modeling at design level.Standard: Attack patterns that describe a specific methodology or technique, and represent a singular piece of a fully executed attack (e.g., Intent Spoof); they are meant to provide sufficient details to understand the specific techniques and how they work, being specific types of meta-level attack patterns.Detailed: Attack patterns that provide low-level details, which leverage specific techniques and target specific technologies, and which express a complete execution flow (e.g., Checksum Spoofing); they are more specific than meta and standard attack patterns and often leverage a number of different standard attack patterns chained together to accomplish a goal.
For example, the Engage in Deceptive Interactions category in the Mechanisms of Attack view includes six meta attack patterns, as shown in Table 4.5. Note that, for clarity, we have included only partial descriptions in the table, and the CAPEC knowledge base should be referred to for details.Each attack pattern includes various information fields, such as description, typical severity, prerequisites, required resources, mitigations, and related weaknesses. For example, the description for the Checksum Spoofing (CAPEC-145) detailed attack pattern is as follows [8]:An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender’s checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient’s checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.
Table 4.5Overview of the meta attack patterns for the Engage in Deceptive Interactions category in the CAPEC knowledge baseNameMeta attack pattern descriptionContent SpoofingAn adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchangedIdentity SpoofingIdentity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goalResource Location SpoofingAn adversary deceives an application or user and convinces them to request a resource from an unintended locationAction SpoofingAn adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different actionManipulate Human BehaviorAn adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary’s interestsMetadata SpoofingAn adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible
Table 4.6Selected weakness categories in the CWE knowledge baseNameWeakness category descriptionAPI/Function ErrorsWeaknesses in this category are related to the use of built-in functions or external APIsAudit/Logging ErrorsWeaknesses in this category are related to audit-based components of a software systemAuthentication ErrorsWeaknesses in this category are related to authentication components of a systemAuthorization ErrorsWeaknesses in this category are related to authorization components of a systemBad Coding PracticesWeaknesses in this category are related to coding practices that are deemed unsafe and increase the chances that an exploitable vulnerability will be present in the applicationBehavioral ProblemsWeaknesses in this category are related to unexpected behaviors from code that an application usesBusiness Logic ErrorsWeaknesses in this category identify some of the underlying problems that commonly allow attackers to manipulate the business logic of an applicationCommunication Channel ErrorsWeaknesses in this category are related to improper handling of communication channels and access pathsComplexity IssuesWeaknesses in this category are associated with things being overly complexConcurrency IssuesWeaknesses in this category are related to concurrent use of shared resources
By analyzing the fields of various attack patterns of interest, trainees can learn how to design an attack, what weaknesses can be exploited to realize that attack, what mitigations can be expected, and so on. This makes CAPEC a very useful resource for attack training, especially in terms of learning how to devise effective attack strategies.
Security Relevance Score: 25
Word Count: 2872
Extracted: 2025-06-13 23:41:15

---

Note that, for clarity, we have included only partial descriptions in the table, and the knowledge base should be referred to for details. Each category represents an attack mechanism, and trainees can consult the explanation of that mechanism during attack training to learn how to conduct the corresponding types of attacks.Attack Patterns On the second level of CAPECs are situated the attack patterns. Each category includes a number of concrete attack patterns that correspond to it logically. CAPEC distinguishes three types of attack patterns, depending on the abstraction level of their mechanism:Meta: Most abstract of the attack patterns, which describe a general methodology, but lack specific technology or implementation information (e.g., Content Spoofing); they are meant to provide an understanding of a high-level approach and are useful for threat modeling at design level.Standard: Attack patterns that describe a specific methodology or technique, and represent a singular piece of a fully executed attack (e.g., Intent Spoof); they are meant to provide sufficient details to understand the specific techniques and how they work, being specific types of meta-level attack patterns.Detailed: Attack patterns that provide low-level details, which leverage specific techniques and target specific technologies, and which express a complete execution flow (e.g., Checksum Spoofing); they are more specific than meta and standard attack patterns and often leverage a number of different standard attack patterns chained together to accomplish a goal.
For example, the Engage in Deceptive Interactions category in the Mechanisms of Attack view includes six meta attack patterns, as shown in Table 4.5. Note that, for clarity, we have included only partial descriptions in the table, and the CAPEC knowledge base should be referred to for details.Each attack pattern includes various information fields, such as description, typical severity, prerequisites, required resources, mitigations, and related weaknesses. For example, the description for the Checksum Spoofing (CAPEC-145) detailed attack pattern is as follows [8]:An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender’s checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient’s checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.
Table 4.5Overview of the meta attack patterns for the Engage in Deceptive Interactions category in the CAPEC knowledge baseNameMeta attack pattern descriptionContent SpoofingAn adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchangedIdentity SpoofingIdentity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goalResource Location SpoofingAn adversary deceives an application or user and convinces them to request a resource from an unintended locationAction SpoofingAn adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different actionManipulate Human BehaviorAn adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary’s interestsMetadata SpoofingAn adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible
Table 4.6Selected weakness categories in the CWE knowledge baseNameWeakness category descriptionAPI/Function ErrorsWeaknesses in this category are related to the use of built-in functions or external APIsAudit/Logging ErrorsWeaknesses in this category are related to audit-based components of a software systemAuthentication ErrorsWeaknesses in this category are related to authentication components of a systemAuthorization ErrorsWeaknesses in this category are related to authorization components of a systemBad Coding PracticesWeaknesses in this category are related to coding practices that are deemed unsafe and increase the chances that an exploitable vulnerability will be present in the applicationBehavioral ProblemsWeaknesses in this category are related to unexpected behaviors from code that an application usesBusiness Logic ErrorsWeaknesses in this category identify some of the underlying problems that commonly allow attackers to manipulate the business logic of an applicationCommunication Channel ErrorsWeaknesses in this category are related to improper handling of communication channels and access pathsComplexity IssuesWeaknesses in this category are associated with things being overly complexConcurrency IssuesWeaknesses in this category are related to concurrent use of shared resources
By analyzing the fields of various attack patterns of interest, trainees can learn how to design an attack, what weaknesses can be exploited to realize that attack, what mitigations can be expected, and so on. This makes CAPEC a very useful resource for attack training, especially in terms of learning how to devise effective attack strategies.
4.3.1.3 CWECommon Weakness Enumeration (CWE) is a list of weaknesses that are commonly encountered in software and hardware, which is also maintained by MITRE Corporation [9]. The term weakness is used here to refer to a condition in a system component that, under certain circumstances, could contribute to the introduction of vulnerabilities. The goal of CWE is to serve as a common language for describing security weaknesses and to support the efforts regarding their identification, mitigation, and prevention. The content of the CWE database can be accessed based on three types of views, as follows:Software Development: A representation intended for software developers and educators that groups weaknesses around concepts that are frequently encountered in software development.Hardware Design: A representation intended for hardware designers and educators that groups weaknesses around concepts that are frequently used in the area of hardware design.Research Concepts: A representation intended for academic researchers, vulnerability analysts, and assessment tool vendors that organizes weaknesses according to abstractions of behaviors.Weakness Categories At the top level of each CWE view are situated the weakness categories. There are currently about 40 categories in the Software Development view, which are organized in alphabetical order. The first 10 such categories are shown in Table 4.6 for illustration purposes. Note that, for clarity, we have included only partial descriptions of the categories in the table, and the CWE knowledge base should be referred to for details.Each weakness category represents a class of related weaknesses, and trainees can consult this information during attack training to learn what are the issues that can be exploited to conduct a certain type of attack.Weaknesses On the second level of CWE are located the actual weaknesses. Each category includes a number of concrete base weaknesses that can be linked to vulnerabilities. Thus, the first weakness category in the Software Development view, API/Function Errors, includes the seven base weaknesses, as shown in Table 4.7.Table 4.7Overview of the base weaknesses for the API/Function Errors category in the CWE knowledge baseNameBase weakness descriptionUse of Inherently Dangerous FunctionThe product calls a function that can never be guaranteed to work safelyUse of Function with Inconsistent ImplementationsThe code uses a function that has inconsistent implementations across operating systems and versionsUndefined Behavior for Input to APIThe behavior of this function is undefined unless its control parameter is set to a specific valueUse of Obsolete FunctionThe code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintainedUse of Potentially Dangerous functionThe product invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safelyUse of Low-Level FunctionalityThe product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operateExposed Dangerous Method or FunctionThe product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted
Each weakness includes many fields, such as description and extended description, relationship, and mapping information. For example, the extended description for the Use of Inherently Dangerous Function (CWE-242) weakness is [9]:Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily sized input to gets() and overflow the destination buffer. Similarly, the  operator is unsafe to use when reading into a statically allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily sized input to the  operator and overflow the destination buffer.Of particular interest from an attack training perspective is the fact that examples are provided for each weakness, both in terms of how the weakness itself is introduced, and in which context it was observed. Moreover, potential mitigation and detection methods are also proposed. By studying these details, trainees can understand how to recognize weaknesses in source code, and how they could be exploited, but also how those weaknesses could be fixed.For the case of Use of Inherently Dangerous Function (CWE-242), for example, two source code fragments regarding the C function getc() are provided as demonstrative examples. In addition, the vulnerability CVE-2007-4004 is provided as an observed example with the following description:FTP client uses inherently insecure gets() function and is setuid root on some systems, allowing buffer overflow.As potential mitigations regarding CWE-242, banning the use of dangerous functions, and the replacement with their safe equivalent are suggested for the implementation/requirements phase. Moreover, the use of grep or static analysis tools to spot the use of dangerous functions are suggested as mitigations for the testing phase. Finally, with regard to detection, automated static analysis, also known as Static Application Security Testing (SAST), is recommended as highly effective.
4.3.1.4 Vulnerability and Exploit DatabasesLearning about actual vulnerabilities is an important component of attack training. Some very useful resources in this context are the following:Common Vulnerabilities and Exposures (CVE)2: A standard for identifying, defining, and cataloging publicly disclosed cybersecurity vulnerabilities operated by MITRE Corporation. The associated database, named CVE List, is very large, containing detailed records on more that 240,000 vulnerabilities at the time of writing.National Vulnerability Database (NVD)3: A repository of standards-based vulnerability management data operated by the U.S. NIST. All vulnerabilities in the NVD have an associated CVE identifier. Moreover, the Common Vulnerability Scoring System (CVSS) is used to supply a qualitative measure of the severity of each vulnerability.Exploit-DB4: A fully searchable CVE-compliant archive of public exploits and vulnerable software maintained by the Offensive Security (OffSec) cybersecurity training company. The database is intended for use by pentesters and vulnerability researchers. Its extension, the Google Hacking Database (GHDB), is an index of search queries that are designed to uncover potentially sensitive information available on the Internet.Exploit DB5: A repository of computer software exploits and exploitable vulnerabilities maintained by the Rapid7 cybersecurity company. The database contains technical details for over 180,000 vulnerabilities and 4000 exploits that are made available for security professionals and researchers. All the exploits are included in the Metasploit framework, meaning that they are readily available for pentesting and similar activities.
The information in the CVE and NVD databases mentioned above represents basic knowledge that is extremely useful for trainees to understand the potential attack surfaces for a system. The CVSS score mentioned in connection with NVD, and the detailed metrics associated with each CVSS score value (exploitability, impact, exploit code maturity, etc.) can then be used to determine the vulnerabilities that are potentially easier to exploit, or that have a potentially greater impact. Last but not least, the exploits from the mentioned exploit databases can be used as basic tools to attempt to take advantage of those vulnerabilities during attack training.We note that navigating the complex ecosystem of cybersecurity-related knowledge bases, such as those mentioned so far, can be quite challenging. One resource that is specifically helpful in this context is BRON, a project that automatically unifies several information sources to create an aggregative graph representation [4]. In particular, BRON is able to integrate the information made available in ATT&CK, CAPEC, CWE, NVD, Exploit-DB, as well as several other knowledge bases.

4.3.2 Security Testing GuidelinesWe have seen that pentesting training is an important component that prepares trainees for real-life situations. However, security testing is an even broader field, and it is important to follow standard methodologies in order to ensure that the testing is done thoroughly and correctly. Below we describe two examples of such standard methodologies that interested readers can consult for further information.4.3.2.1 Technical Guide to Information Security Testing and AssessmentThe Technical Guide to Information Security Testing and Assessment is a guideline pertaining to basic technical aspects related to conducting information security assessments developed by the U.S. National Institute of Standards and Technology (NIST) [17]. The goal of the guideline is to help organizations develop assessment policies and methodologies, plan and safely execute the assessment, handle the technical data correctly, and translate the findings into risk mitigation actions for improving their security posture.The guideline starts by providing an overview on security testing and assessment. This is followed by technical details on the three main categories of security testing and assessment techniques, which trainees can refer to in order to understand what the best practices in this domain are: 1.Review techniques: A class of techniques that includes review of documentation, logs and system configuration, network sniffing, and file integrity checking. 2.Target identification and analysis techniques: A class of techniques that includes network discovery, network port and service identification, vulnerability scanning, and wireless scanning. 3.Target vulnerability validation techniques: A class of techniques that includes password cracking, penetration testing, and social engineering. 
The NIST guideline also contains recommendations about the planning and execution of security assessment, as well as post-testing activities. Such information can serve for trainees as a complement to their technical knowledge, so that they can become more effective security professionals.
4.3.2.2 Open Source Security Testing Methodology ManualThe Open Source Security Testing Methodology Manual (OSSTTM) is a comprehensive methodology that addresses the full spectrum of penetration and security testing, security analysis and operational security assessment [5]. OSSTTM, for which version 3 was released in 2010, was developed by the Institute for Security and Open Methodologies (ISECOM) with the goal of breaking the complex overall process of testing into elemental processes. The manual also defines suites of tests for verifying those elemental processes, as well as metrics that ensure the methodology has been carried out correctly and make it possible to grade the result of applying the methodology.The guideline starts by introducing general concepts, such as an overview of security analysis and testing, operational security metrics, and trust analysis. Then details are provided on the actual security testing from several perspectives: human, physical, wireless, telecommunications, and data networks. Finally, issues such as compliance and regulations, and the security testing audit report are discussed. This comprehensive guideline provides a wealth of targeted knowledge that can support trainees in becoming more effective security professionals.

4.3.3 Attack Training ToolsTrainees must be able to master a wide range of tools in order to become effective at attack training exercises. For example, the Kali Linux distribution includes about a dozen meta installation packages that are related to offensive actions, with names such as kali-tools-exploitation or kali-tools-passwords, comprising a total of more than 100 relevant tools.An exhaustive presentation of such tools is out of our scope, but we briefly discuss two representative examples below to illustrate the overall nature of the tools used in this context. For interested readers, a large amount of technical details about related tools can be found in Handbook for CTFers [10].4.3.3.1 NmapNetwork Mapper (Nmap) is one indispensable tool used during attack training [6]. Nmap is an open-source utility that is employed for discovering the properties of hosts and services present in a computer network. This tool is often used for security auditing, but also for network inventory and various other purposes.Nmap works by sending packets from a host into the networks that host is connected to and analyzing the responses to those packets in order to gather information about the connected hosts and services that are running on them. Nmap has a huge list of features, with the most important ones being as follows: host discovery, port scanning, service and version detection, and OS detection. Nmap also has other specific features, such as support for a scripting engine, as well as firewall and IDS evasion and spoofing mechanisms.
4.3.3.2 MetasploitMetasploit, which is described as the “world’s most used penetration testing framework” [16], is one of the most widely used tools for attack training activities. This applies in particular to those situations when complex actions need to be performed, such as exploitation.The main strength of the Metasploit framework is represented by the large number of modules that it includes, totaling more than 5500 at the time of writing. The Metasploit modules are grouped into several classes, based on their purpose, as shown in Table 4.
