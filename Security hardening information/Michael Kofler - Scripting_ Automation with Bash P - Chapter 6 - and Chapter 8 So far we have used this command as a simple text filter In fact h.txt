# Security Chapter Extract
Book: Michael Kofler - Scripting_ Automation with Bash, PowerShell, and Python (2024, Rheinwerk Publishing) - libgen.li
Chapter: 6 - and Chapter 8. So far, we have used this command as a simple text filter. In fact, however, the first parameter passed to grep is analyzed as a regular pattern, by default in simple POSIX syntax. However, the command can also handle the ERE and PCRE regex dialects:
Security Relevance Score: 2
Word Count: 196
Extracted: 2025-06-13 23:41:06

---

and Chapter 8. So far, we have used this command as a simple text filter. In fact, however, the first parameter passed to grep is analyzed as a regular pattern, by default in simple POSIX syntax. However, the command can also handle the ERE and PCRE regex dialects:


-e: Enable ERE


-P: Enable PCRE


-o or --only-matching: Output only the expression that matches the pattern (i.e., do not display the entire line)


To avoid the various regex special characters being analyzed by Bash, you should pass the pattern in quotes.
The following command filters all IPv4 addresses from the access.log logging file and displays only the addresses. (You can find the file in the sample files for the previous chapter.)
$ grep -o -P '(\d{1,3}\.){3}\d{1,3}' access.log  221.245.9.91  135.84.251.52  160.85.252.207  ... 
If you want to extract all IPv6 addresses in an analogous manner, you can call grep using the following expression:
$ grep -o -P '([\da-f]*:){1,7}\d{1,4}' access.log 
The search pattern works for most “common” IPv6 addresses. However, the IPv6 syntax allows for various special cases, whose correct processing requires much more complex (and slower!) patterns. If necessary, you should look at the following Stack Overflow webpage: https://stackoverflow.com/questions/
