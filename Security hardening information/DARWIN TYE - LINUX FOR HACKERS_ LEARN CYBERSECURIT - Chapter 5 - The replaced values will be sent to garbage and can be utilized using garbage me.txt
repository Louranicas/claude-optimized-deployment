# Security Chapter Extract
Book: DARWIN, TYE - LINUX FOR HACKERS_ LEARN CYBERSECURITY PRINCIPLES WITH SHELL,PYTHON,BASH PROGRAMMING USING KALI LINUX TOOLS. A COMPLETE GUIDE FO (2020, GVS PUBLICATIONS) - libgen.li
Chapter: 5 - The replaced values will be sent to garbage and can be utilized using garbage mechanism or cache memory for complex programs. For now, it is out of scope of this book.
All the famous data types that can be used to create variables in Python are int,float,double,string, boolean and characters.
In the next section of this chapter we will talk about comments that are important to display some information about the code for reference or for others if involved in a group.
What are comments in Python?
Comments are an easy way to give a clarity about the code that was written. At the beginning of the code multi-line comments can be used to introduce all the modules that are used along with a brief description about what is being done in the program.
Comments become very useful for beginners to understand the process flow of the code that has been written. Even for experienced programmers who are working in teams on a project these comments can help to understand the code more easily.
The Python interpreter whenever it sees a single-line comment or multi-line comment ignores them completely. They are only for information purpose.
Here is a comment:
Security Relevance Score: 11
Word Count: 6064
Extracted: 2025-06-13 23:40:27

---

The replaced values will be sent to garbage and can be utilized using garbage mechanism or cache memory for complex programs. For now, it is out of scope of this book.
All the famous data types that can be used to create variables in Python are int,float,double,string, boolean and characters.
In the next section of this chapter we will talk about comments that are important to display some information about the code for reference or for others if involved in a group.
What are comments in Python?
Comments are an easy way to give a clarity about the code that was written. At the beginning of the code multi-line comments can be used to introduce all the modules that are used along with a brief description about what is being done in the program.
Comments become very useful for beginners to understand the process flow of the code that has been written. Even for experienced programmers who are working in teams on a project these comments can help to understand the code more easily.
The Python interpreter whenever it sees a single-line comment or multi-line comment ignores them completely. They are only for information purpose.
Here is a comment:

“””

This is multi-line comment
This is an excellent comment
“””
I = 5
Print (i)

// This is a single-line comment

From the above example, you can understand that “”” can be used to create multi-line comments where as // can be used to create a single line comment.
With this, we have provided necessary basics to the Python language. In the next chapter we will discuss about other important stuff in Python that are important for you as a hacker. Follow along!












Chapter Two



Control statements and Loops in python





In the previous
 chapter we have introduced data types and variables that are the foundational blocks of the programming. In this chapter we will introduce concepts of conditionals, loops and advanced data structures with examples. Let us start!
What are control statements?
In programming, taking decisions is a vital role for the program to create complex programs. By using control statements we can create dynamic programs instead of the usual static ones that do not consider the user views. By using these control statements we can make the user decide what he wants to do with a program.
For example, while playing a computer game the user has the option to select whether to start the game or quit the game. When the user clicks of the “start” button the computer game code executes the game and in the other case it just quits. This is a practical example for the implementation of control statements in a computer program.
If and else are the two important blocks of the control statements. While the first executes when the condition is true the latter executes when the condition is file. Let us look at an example!
Python program code:

I = 3

J = 5
If i == j
Print (“ These are equal numbers”)
Else

Print (“ These are not equal”)

Explanation :
This example, provides a simple scenario to explain the importance of control statements in Python.
I) First, two variables are created with values, and then they are both compared using the if control statement.
ii) Here ‘==‘ stands for the equal to operator. It says that if both the values in the variables are equal then the below string should be printed on the screen.
iii) In the next block of code that is ‘else’ the print statement executes if the statement is false.
In the real world programs we can increase the complexity using nested control statements and blocks of control statements with a single execution. Control statements in Python are handy and can help us create efficient programs which can interact with user inputs.
Now, with this done we will now talk about loops that execute a statement or result again and again. Let us go!
What are Loops in Python?
Loops are programming statements that are used to execute a statement again and again. There are different types of loops such as for loop, while loop and do-while loop available for python and almost every programming language. In this section, we will discuss in detail about the philosophy of loops along with a brief explanation about for and while loops with examples. Follow along!
A) For loop
For loop is the most popular way to use loops in Python. While using a for loop we check a logic and print the suggested results until the condition stops. When the condition doesn’t satisfy anymore then the program just quits without heading over to the next step.
Here is the format:

for ( i =0; i > 30 ; i++)


// Here i is the variable

Here is the explanation :
Whenever a for loop is used ‘I’ is given by the user using the input devices. Now, when the program starts it operates by checking the input that is present. Here I>30 condition is used to satisfy the loop procedure. By using loops, we can print infinite numbers without using just one print statement.
B) While loop
While loop uses the same procedure but will print results only after the successful execution. The main difference between for and while is that for can be effectively used to print nested loops without any delay while loops can be used to take decisions while solving problems.
What Next?
With this, we have given a complete introduction to conditional statements and loops in Python. While these topics may seem complex they are very useful for hackers who are trying to write programs using various scripting languages. Remember that understanding the goal that you want to achieve is essential for hackers. In the next section of this module we will discuss about other advanced topics. Follow along!












Chapter Three



Modules in Python





In the previous
 chapter we have discussed about conditional statements and loops with examples. While Python syntactical structures are easy to master we need to use them in our programs using different link concepts such as modules. Modules are the primary reason why Python has become a popular language. Let us now discuss about in depth about Python modules in this chapter.
What are modules?
In general terms, modules are like boxes that can be used to fit anywhere needed. When it comes to programming terminology modules are code that are independent but can be used by other projects whenever they seem necessary. They are like spare parts in a vehicle but giving a lot more capabilities than the default features.
There are usually two types of modules, namely system or standard modules and third-party modules.
A) Standard modules
Standard modules are the ones which come by default when Python is installed in the Linux system. For example, print statement that is used to display information on the screen is from the input/output module in Python. Even certain mathematical functions such as max, min work because of the Math module that comes with the Python installation by default.
However, standard modules are definitely not sufficient for creating new software because of its limiting capabilities. If you want to achieve more with Python then you need to know about third-party modules.
B) Third-party modules
Third-party modules are modules that are usually not installed by default. You need to search and download them to your system to install them. The most common way to install Third-party modules is using a package manager such as pip.
What is pip?
Pip is a package manager that manages all the important packages that Python offers in its repository for easy download and upgrading. To install pip in your system use the below command.

root@server : apt-get install python3-pip

This installs pip, a package manager that is light-weight and which can efficiently link all the files while installing.
How to install packages from pip?
Before trying to install a package do a google search about what you are expecting to achieve the module. For example, if you are a machine learning enthusiast and are looking forward to create some machine learning algorithms then you need to install Numpy , a machine learning Python module in your system.
So, to confirm that the package is correct use the following command.

root@server : pip3 show numpy

The above command will display all the information about the package that you are trying to download. Mostly the information will be about the package name, its owner name , No. Of times it has been downloaded and its creation date. Some packages will also provide the license agreement details along with the url address of the package.
Other ways to install python modules :
Not all packages are available from package managers such as pip. Some modules needed to be downloaded from official websites or from websites such as Github.
To install Python modules from other sources use the following procedure :
1) First of all, do a complete research about the module you are trying to download. Some modules may slow down the system intentionally. All the important Python modules are available from pip. If you are looking for this option then it may be some script that was written by a programmer to do a specific task. A lot of scripts that are written in Python are usually used to automate tasks.
2) Now, note down the address the source package is available from and use wget to download it to the Python library. Wget is a Python command that is used to download any url from the web.
Here is a command :

root@server : wget https://github.com/sample


This command will download the package to the current directory.
3) Usually the downloaded python module will be in the tar package format. You need to decompress it using the following command. However, if you are not comfortable with the command line decompression you can use GUI compression tools such as gZip.
Here is the command :

root@server : tar -xf filename.tar.gz

This command will decompress the package into a separate folder in the same directory.
4) Now, after extracting the files into the directory search for a file that says ‘install.py’. All the third party modules will have this in the directory. If you confirm the existence of file then enter the following command that is given below.
Here is the command :

root@server : python3 install.py

This will install the package/module in the Linux system. After completing the process you can run the package commands in the terminal to check whether the package is installed or not.
How to use modules in your own code?
While modules are usually run as separate entities they are also famously used while creating programs. To use a particular module in your own program code you can use the ‘import’ command.
Here is the format :

import packagename

What Next?
With this, we have completed a simple introduction to modules in Python. In the next chapter we will discussing about advanced topics such as functions and OOP with detailed examples. Let us go!












Chapter Four



Functions and OOP in Python





In the previous
 chapter we have talked about modules and provided different ways to make programmers use different third-party modules in their own code. While modules help us to borrow code written by other programmers or team members , concepts such as functions and object oriented programming help us to create complex programs that can complete even complex tasks very efficiently. This chapter not only provides explanation about these concepts but will also provide real-life and coding examples to help you master the subject thoroughly. Let us go!
What are functions?
If you remember correctly you should have first heard the function in elementary mathematic classes. They come in algebra lessons.
For example :

f(x) = 2x+3


Where x is your preferred number.

In mathematical terms, function is a mathematical component that can be used to create different values using the same definition. A lot of these functions in mathematics are used to create complex mathematical equations.
What are functions in Python?
Functions are a bunch of code that can be used again and again whenever needed. All you have to do is call the function using the parameters in your program to obtain results. While the principle may seem easy, function implementation can be overwhelming especially for beginners learning Python.
There are usually two type of function . One being in-built functions and the other being custom functions.
i) In-built functions
These are the functions that are present when you install Python in your system. For example, print is a function that displays whatever is given for it in between the quotation marks. It is a prebuilt function and thus cannot be modified or changed by the end user.
ii) Custom functions
These are the functions that developers usually create using the Python modules. All the custom functions can be imported to use in other programs. However, a lot of programmers encrypt their functions while deploying software to not make them understood for protecting their logic in the code.
However, all the open-source programs without any fear publish their code because they think that sharing can help everyone if done correctly. Being an open-source developer or not is your choice. But, if you really want to the community as a responsible hackers we obviously recommended to share whatever you have create for everyone who are waiting to utilize your work.
Tip:
Almost all downloadable libraries consist functions that start with the identifier “def”. If you want to learn how functions are written then header to an open source project and analyze all the functions written and try to understand what logic the programmer have used.
Here is the format:

def functionname

Some Example functions in Python :
1) exit ()
This is a built-in function that helps to exit the program or daemon that is created using Python whenever needed. You can use it in a command line interface or can integrate in GUI based applications
2) help()
This is a python function that is used to provide information about the modules and usage of the script or program. All the information that is provided with the help() function can only be accessed by the man command in linux.
3) len()
This is a common function in Python that is used to find the length of the string. It will print the length of the string as output.
Here is an example:

len(“thisisgreat”)

Output :

11

4) max , min
These are functions that are usually used to determine the highest and lowest of the elements in a Python list.
Here is an example:

nice = [ 3, 5, 8]


// This is a list in Python

We will discuss in detail about lists and dictionaries in the next chapter. For now, think a list as something that holds items.

max(nice)

// This will give the output as 8
min(nice)

// This will give the output as 3

In the next section, we will talk about object oriented programming topics such as Classes, objects and inheritance in detail. Follow along!
What is Object oriented programming ?
Object oriented programming is a programming paradigm that is developed much later after the invention of functional and procedural programming. In functional and procedural programming, methods are created and are used whenever needed to complete tasks. In object oriented programming we used classes and objects to complete these tasks.
We are not arguing that Object oriented programming is the best because every programming paradigm has its ups and downs. The success of Object oriented programming is mainly due to its simplicity and a logical way to create classes that can be used in much larger projects. This is the reason why OOP languages such as Java and C\++ are used extensively in enterprises and businesses.
What are objects and Classes?
In simple words, Objects are programming entities that are created to replicate real world things. In real world, things have properties and perform methods with these properties. In the same way, in OOP model objects replicate these properties and methods.
Classes are the collection of objects in a sense that can help us understand its importance. Classes may not be sequential but consist of a group of objects that are similar and are thus easy to implement or use in any project.
A real world example:
Imagine boats in the real world. They are things and thus satisfy as objects in the programming world. They have engine , deck and color which are called as attributes. These are also known as properties and are usually represented by variables and constant modifiers in the programming implementation.
On the other hand, we can use these attributes to create methods. For example, boat can drive, accelerate and lift weights using these attributes that are present. Without attribute you cannot perfectly explain the method and without methods attributes have no use.
In syntactic terms, properties are destined to be adjective that valuate the noun that is an object. All the methods are called as verbs that does a work in general.
When we collect different type of boat objects and group them then these are called classes. We can also create sub classes with more concrete evaluation to create much more efficient programs.
In python :

class car

// This is a class in Python
car.driving()

// This is an object calling a method in Python

Inheritance in Python classes
Inheritance is an Object oriented concept by which the child classes can inherit all the properties and methods that the parent class possess. You can implement this principle in Python to create much more efficient programs. All you need to do is call the parent and child class together using a single apostrophe between them.
What Next?
With this, we have completed a brief introduction to functions and OOP concepts in Python. As a wannabe hacker, these concepts are usually more than enough to get you started to create programs that can automate work flows and maintaining some basic tasks as a Linux system administrator. We will now talk about bash scripting in detail in the next chapter. Let us go!












Chapter Five



Introducing Bash Scripting





In the previous
 chapters we have discussed about the important details and basics of python scripting in detail. In this final chapter of this module we will introduce the concepts of Bash scripting. Bash is a shell and is an essential part of the Linux environment. We will discuss the fundamentals of Shell programming in detail in the next module of the book. For now, try to understand how bash script works with the help of few examples that are provided. Let us go!
What is a shell in general?
Linux uses system resources such as hardware equipment to interact with the software kernel so that everything would function in a perfect way. Linux kernel is complex and provides use case for almost every essential driver that has been created. All the communication between the user and the kernel is performed in a command line environment known as a shell.
In Linux, shell is like a crossover bridge between the user and the operating system. Whatever you enter will be sent to the Linux kernel. However, remember that Linux kernel responds to the only shell commands that seem correct to it. It will not perform any malicious self destructive commands that can shutdown the system or wipe it down completely. If you do have root privileges and are performing commands using shell environment then be sure because any wrong command can mess up your system pretty badly.
What are the advantages of shell?
You might have often heard about shell and should be confused why they are so special in Linux systems. Their popularity among Sysadmins and hackers is due to the fact that they make very less clutter unlike GUI applications and installers that take away a lot of system resources. You may feel that it doesn’t matter much as a normal PC user but while maintaining servers and databases allocating memory resources and constantly monitoring them to not crash is a petty task.
This is where shell comes in with its minimal system usage. It performs even complex tasks with very less code and time. Also, it should be remembered that shell can run in both Linux and UNIX operating systems. As macOS is built upon UNIX you can run all of your linux written shell code in it. For windows, there are other sandbox alternatives that create a shell environment within windows.
Some of the famous examples of shell are Korn shell, C shell and Bourne-again shell (Bash). In the next section of this chapter, we will be talking about the basics of bash shell with few examples.
How to write a simple Bash Script?
Bash script can be used to interact with kernel as said as before. It acts like an interpreter to execute the shell code that is written. Difference between Bash and other shell interpreters are that it has its own in-built commands that makes the execution process easy and less time-consuming.
To understand Bash better read this code:

#! /bin/bash

echo ( “ This is a sample example”)

# This is a comment

Explanation :
The above bash shell program that can be executed from a Linux computer consists of three important concepts of Bash that every hacker needs to understand and implement them in their programs.
I) First, we will talk about the Line that starts with a Shebang (#!) symbol. If a text file starts with a Shebang command then it directly means that the file is asking the Linux kernel to look for the system file that can run this program as an interpreter.
Here, /bin/bash is provided as the interpreter Location. So, now Linux knows that the mentioned text file needs to be run as a Bourne-again shell.
If you want to run the program as a Python interpreter then you need to enter the command as below mentioned.

#! /bin/python


// This runs using the Python interpreter

ii) In the second line, we used echo to display a message on the computer screen. Echo is a shell built-in-program that can be used to display or print information according to the user wish.
iii) And the third line that is followed after the ‘#’ is known as a comment. Comments are usually used by programmers to make others understand what they has written. However, it is important to remember that everything that is written in a comment will be ignored by the bash interpreter to save compiling time and system resources.
In the next section, we will know how to run a Bash program in a Linux machine.
How to run a bash script?
Linus respects user privacy and is highly restricted to run potential system harming programs such as bash scripts. Even if you are the owner of the file you will not be allowed to run the bash program without certain tweaks that confirm the system that you are well aware of the risks that may happen if you mess up any system files. But that is what hackers like us do right ? Take risks, mess up the system and fix them.
Whenever you want to run any script file in Linux operating system you need to first check the permissions the file has by default.
Use the following command:

root@server : ls -l sample.sh


// This shows all the permissions

If you are unaware of the permissions in a Linux system we recommend you to head over to the second module of this book where we have discussed about Linux file permissions in detail.
The above command will display an output with all the permissions that the file possess. Generally when a file is created the owner of the file will have read(r) and write(w) permissions but not execute (x) permission. To run the bash script we need to have execute permission which we can achieve using the below command.

root@server : chmod +x sample.sh


// Now, the sample file gets the execute permissions

You, can check the permissions again using the ls -l command to confirm that you have done the procedure right. After checking, head over to the directory where file is present and enter the following command to run the bash shell script.

root@server : ./sample.sh

Here ./ represents that the designated file should be searched only in the current directory. This is a good practice it reduces the search time and is therefore recommended by all Linux system administrators to run a Bourn-again shell in a terminal.
When you run, the following output will be displayed on the computer screen :

This is a simple example

What Next?
In this chapter, we have looked at an example that described the basic concepts of a bash shell. In the next chapter we will discuss other examples that increases the complexity that we are dealing with while writing programs that interact with the shell interface. Follow along!












Chapter Six



Variables in Bash





The previous chapter
 introduced Bash scripting and provided a simple example to understand the basic flow and philosophy of the shell programming and Bourne-again shell principles. In this chapter, we will reach out to the complex options that Bash will provide for Linux enthusiasts. Don’t forget to experiment these written programs in your Linux machine. Practicality is different from theoretical knowledge. As a system administrator and a Linux enthusiast from years I recommend you to be gain practical knowledge first and spread all the theoretical information about it parallel to become an expert in Linux systems. Let us go!
What are variables in Bash Scripting?
Variables hold the same principle in any programming or scripting languages. They are just a representation of storage in memory of the computer. They can be used to fill any type with data such as numbers, strings or even Boolean types.
Variables are dynamic and can be changed manually or automatically by the program. The destroyed data in the variable can be sent to cache memory or can be utilised using the garbage mechanism. But, most of the time the variable data will be destroyed with the new data when replaced. Hackers need to learn to implement variables in their scripts to exploit and crack systems.
We will give an example that will help you to understand how to use variables effectively while writing script files that can be run in a bash interface.
Here is the code :

#! /bin/bash

# This is an example program that takes input from the user
# and store them in variables and later display them in a string
Echo “What is Your name?”
Read name
Echo “ What is Your city?”
Read city
Echo “ Why are you here for?”
Read reason
Echo “ Hi $name, You are from $city and You are here for $reason “

# End of the bash program

Explanation :
The program mentioned maybe somewhat overwhelming if you are new to programming or scripting by any change. But don’t worry because we will explain each line of the program with precision in simple terms for your understanding.
i) As said before, the first line of the program which starts with a Shebang(#!) command says to the Linux machine that it needs to run the below code using the interpreter that is present in the location “/bin/bash”. If by any chance bash is not installed in the system then this location will be empty and the program will exit with an error. Remember that all Linux systems come pre installed with Bourne-again shell as it is default and recommended shell environment by Linux enthusiasts. If you are by any chance using other shell environments such as K-shell make sure that you have installed it on the system and the location of the interpreter is correct.
ii) The second line of the program comes with a comment. In the above comment the main purpose of the program is written and you can observe that you can even write multiple lines of code in a shell script file that can be run using Bourne-again shell.
iii) Now, starts the main logic of the script file we are dealing with. In this line an echo is introduced to display a question that can be used to get an input from the end user. ‘Echo’ not only displays the static information but can also be used to interact with the user.
A message will be displayed on the computer screen as

What is your name?

And now the user will have an option to enter data because in the next line a variable is created using the ‘read’ identifier to store that data in this particular variable.
Let us assume that the user entered his name as

Tom

Now, the entered data will be read by the shell program and will be saved in the variable ‘name’. In the similar way obtain information from the end user for the next two questions that is about his city and his reason to use this program. Let us assume that the user entered this data as ‘New York’ and ‘Knowledge’.
Now, we have three variables ‘name’, ‘city’,’reason’ with data which we need to be displayed using a string. We will learn how to do that now.
iv) In the next line, we display all the stored data in the variables using the ‘$’ behind the variable name.

echo “ Hi $name, You are from $city and You are here for $reason “


Here name = Tom, City = New York , reason = knowledge

So, the displayed output will be as following :

Hi Tom, You are from New York and You are here for Knowledge

That’s it. Getting user input, storing them in variables and using them whenever you needed is the basic foundation of the scripting to interact with different components of the target system. Experienced hackers use different complex components such as conditionals, loops and templates tp increase the complexity of the program.
What Next?
In the next chapter, we will provide an example to help you understand the complex scripting skills such as using functions and loops to create efficient automated programs. Before heading to the next chapter, take a quick glance about operators and conditional from the Python lessons we discussed before. Shell scripting uses the same philosophy, so we need you to be aware of these topics so that we can help you with an example. Let us go!












Chapter Seven



Advanced Bash Scripting Techniques





The previous chapter
 is a tour to the much essential variables in scripting languages. Variables are often called as the building blocks of the programming because they are used in almost every part of the implementation of a program. And also, they are often easily misunderstood because of the simplicity they comes with. With the gained knowledge about variables we move farther to talk about the advanced topics that make Bash scripting a must learn for hackers. All the examples provided will help you to gain a practical knowledge on the subject. Let us go!
Nmap and its importance
Before starting to understand the complexity of bash scripting we need you to know a bit about Nmap the tool we are using to scan the open ports. Nmap is a penetration testing tool that has been being used by hackers to understand about the target system.
What does Nmap do?
Nmap basically automates the process of scanning the ports you have provided in the command. If not with tools like Nmap, you need to manually enter the port and IP address each time and send packets to analyze whether we are receiving any response or not. It is time consuming and thus these tools are life saving for hackers.
Nmap usually works with TCP scans to analyze the target system and will give an output information about the operating system and services it is using. What we are going to do now is to automatically scan all the addresses using Nmap with a specified open port and display them in a text file for our reference. If you are still confused look below the step by step procedure what the program does.
What does the scanner does?
Step 1 : We scan all the network addresses in a Local network using the Nmap Tcp scanner
Step 2 : Now we send all the output to a specified text file in a way that it can interact with the GREP format. This is essential because it is troublesome to analyze a bunch of network code with a lot of information. As a hacker we need to simplify things. We needs what we only need. That is a hackers philosophy.
Step 3 : Now using group we extract the addresses that starts with open port specification after the scanning procedure and will send then all to a new text file and will display as results for the end user.
That’s it. That’s the use case of the scanner we are going to develop now using bash script components. Follow along!
Here is the program code :

#! /bin/bash

# This program creates a scanner that scans a specified port number to check whether they are open or not in a local network
Nmap -sT 191.123.111.32 -p 2378
-oG resultsfile1
Cat resultsfile1 | grep open > resultsfile2
Cat resultsfile2

# End of the bash script file

Explanation:
The above program may seem complex for beginners bu believe us it is simple and does what it is entitled to.
I) Life every time, we start the script file with a #! Command with the location of bash interpreter. And in the next line we follow with a comment that explains the role of the scanner that we are trying to create.
ii) In the third line, we actually get into some business by invoking a TCP scan using the nmap command. Here carefully follow what each of the command does while scanning.
A) nmap - This starts the scanning program. It is essential to scan the open ports
B) -sT - This command informs to the Nmap hat it needs to perform a TCP scan
C) 191.123.111.32 - This is the address of the local network we are trying to attack with nMap
D) -p - This says that nmap is searching for the open ports. Nmap also provides other options such as -T, -V to know about other details of the target system. Also, make sure that you are using a TOR network or other relay network with a lot of proxies to not being stopped by efficient intrusion detection systems.
E)2378 - This is the number of the port that we are trying to scan in all the network addresses in Local area network
The bash script automatically scans all the network addresses in the given network and will look out for any ports with 2378 and if they are open will print a log with ‘open’ modifier.
iii) By now, the shell terminal reaches the next line of the code a result will be generated by the nmap on command line. You can even stop displaying the output if you want to. After the scanning completes we reach the next line of the script file where it says to export all the output into a text file with GREP format enabled.
The file name that the script asks to be created is ‘resultsfile1’. If you wonder what a GREP format is let us explain you. Usually shell terminal prints a lot of code while performing actions. GREP allows us to extract a part of the output for easy reading or analyzing purposes. It is a handy tool that is often used by hackers and system administrators to search and filter things. You will learn about it in detail in the next module of this book.
iv) The next line of the bash script separates the file content that is preceded using the ‘cat’ command. After that it asks all the extracted lines to be exported to ‘resultsfile2’.
V) That’s it. Now a new file will be created with all the network addresses with open ports
