# Security Chapter Extract
Book: Steve Campbell - Bash Shell Scripting for Pentesters (2024, Packt Publishing Pvt Ltd) - libgen.li
Chapter: 5 - minutes
ALERT_EMAIL="<user>@devsecops.local"
GITLAB_LOG="/srv/gitlab/logs/gitlab-rails/application_json.log"
Security Relevance Score: 37
Word Count: 4459
Extracted: 2025-06-13 23:41:12

---

minutes
ALERT_EMAIL="<user>@devsecops.local"
GITLAB_LOG="/srv/gitlab/logs/gitlab-rails/application_json.log"


     This section verifies root privileges and sets key variables.
    

     The script checks every five minutes for failed logins
    



     exceeding a threshold of five attempts.
    

     Be sure to change the email address username to your own before running the script.
    

     Replace
    


      <user>
     


     with
    


      your username.
     




     As shown here, the alert function handles
    


      email notifications:
     



send_alert() {
    local failed_count=$1
    local recent_failures=$2
    echo "WARNING: $failed_count failed login attempts in the last 5 minutes
Time: $(date)
Recent failures:
$recent_failures" | mail -s "GitLab Security Alert - Failed Logins" "$ALERT_EMAIL"
}


     This function formats and sends email alerts using the local mail system.
    

     It includes the count of failures and details about
    


      recent attempts.
     




     As shown here, the main monitoring logic is
    


      as follows:
     



monitor_failed_logins() {
    if [ ! -f "$GITLAB_LOG" ]; then
        echo "Error: GitLab log file not found at $GITLAB_LOG"
        exit 1
    }
    local current_time=$(date +%s)
    local window_start=$((current_time - CHECK_INTERVAL))
    local window_start_iso=$(date -u -d "@$window_start" +"%Y-%m-%dT%H:%M:%S")


     This section checks for the log file’s existence and calculates the time window for monitoring.
    

     It converts Unix timestamps to ISO format for
    


      log comparison.
     




     The log analysis portion is
    




      demonstrated next:
     



local recent_failures=$(grep "Failed Login:" "$GITLAB_LOG" | while read -r line; do
        log_time=$(echo "$line" | jq -r '.time' | cut -d'.' -f1)
        if [[ "$log_time" > "$window_start_iso" ]]; then
            echo "$line"
        fi
    done)
    local failed_count=$(echo "$recent_failures" | grep -c "Failed Login:")
    if [ "$failed_count" -gt "$THRESHOLD" ]; then
        send_alert "$failed_count" "$(echo "$recent_failures" | jq -r '.message')"
    fi
}


     This code performs the
    


      following functions:
     





      Searches for failed
     


       login entries
      




      Uses
     


       jq
      


      to parse the JSON
     


       log format
      




      Filters entries within the
     




       time window
      




      Counts failures and triggers alerts if above
     


       the threshold
      





     The main loop is
    


      shown here:
     



while true; do
    monitor_failed_logins
    sleep "$CHECK_INTERVAL"
done


     This creates a continuous monitoring cycle, running checks every five minutes.
    

     The script never exits unless manually stopped or an
    


      error occurs.
     




     After repeatedly entering failed login attempts in the GitLab login at
    


      http://localhost/
     


     , I check my mail and find alerts, as shown in the
    


      following figure:
     











     Figure 16.6: An email alert reveals failed login attempts
    



     This section
    



     demonstrated that you don’t need expensive software to implement security features.
    

     In the next section, we’ll explore how to make setting up a fresh Kali Linux instance quick
    


      and painless.
     






     Automating custom Kali Linux builds for pentesting
    



     For pentesters who perform consulting work for external customers, every project should start with a fresh installation
    



     of the operating
    



     system, which is typically Kali Linux.
    

     There are many ways to
    


      deploy Kali:
     






       Virtual machines
      





       Docker containers
      





       Cloud images
      




      Bare metal installation on laptops or
     


       other devices
      





     This section will focus on building Kali ISO image installers using Bash scripting.
    

     The resulting ISO image will automate the installation of Kali on virtual machines or bare metal.
    

     The image file can be connected to a virtual machine or to a laptop or other device using USB storage.
    

     From there, you simply boot the system, and your custom image
    


      is installed.
     




     Your system will need a few gigabytes of free disk space to create the image.
    

     The amount of free disk space needed depends on the options you choose and whether you choose to install all or a
    



     subset of packages.
    

     To begin building custom Kali Linux ISOs, first, install the required packages and clone the
    


      build
     


     repository
    



     using the
    


      following commands:
     



$ sudo apt update
$ sudo apt install -y git live-build simple-cdd cdebootstrap curl
$ git clone https://gitlab.com/kalilinux/build-scripts/live-build-config.git
$ cd live-build-config


     The build process supports two types
    


      of images:
     






       Live images
      


      : For running Kali directly from USB without installation.
     

      Use the
     


       --live
      


      command-line option
     



      with the
     



        build
       




       script.
      





       Installer images
      


      : For performing
     



      customized system installations.
     

      Use the
     


       --installer
      


      command-line option with the
     



        build
       




       script.
      





     To build with different desktop environments, use the
    


      --variant
     


     flag.
    

     Here are
    


      some examples:
     





      Build with the
     


       GNOME desktop:
      


$ ./build.sh --variant gnome --verbose



      Build with the
     


       KDE desktop:
      


$ ./build.sh --variant kde --verbose



      Build with the XFCE
     


       desktop (default):
      


$ ./build.sh --variant xfce --verbose




     You may also want to specify different architectures, for example, x86-64 for Intel/AMD CPUs, or ARM64 for running in a virtual machine on macOS.
    

     Specify the target architecture using the
    


      --
     




       arch
      




      flag:
     





      Build
     


       for x86-64:
      


$ ./build.sh --verbose --arch amd64



      Build
     


       for ARM64:
      


$ ./build.sh --verbose --arch arm64




     Here’s a complete automated build
    



     script that sets common options.
    

     You can
    









     find this in the GitHub directory for
    



     this chapter as
    


      ch16_build_kali.sh
     


     .
    

     Note that this must be run on a Kali
    


      Linux system:
     



#!/usr/bin/env bash
# Set build parameters
DESKTOP="gnome"  # Options: gnome, kde, xfce
ARCH="amd64"     # Options: amd64, arm64
VERSION="custom-1.0"
BUILD_TYPE="installer"  # Options: installer, live
# Create custom password configuration
mkdir -p kali-config/common/includes.chroot/etc/live/config
echo 'LIVE_USER_DEFAULT_GROUPS="audio cdrom dialout floppy video plugdev netdev powerdev scanner bluetooth kali"' > kali-config/common/includes.chroot/etc/live/config/user-setup
echo 'LIVE_USER_PASSWORD=kali' >> kali-config/common/includes.chroot/etc/live/config/user-setup
# Launch build with all parameters
./build.sh \
  --verbose \
  --variant ${DESKTOP} \
  --arch ${ARCH} \
  --version ${VERSION} \
  --${BUILD_TYPE}


     The build system offers several
    




      customization options:
     






       Package selection
      


      : Edit package lists in
     


       kali-config/variant-*/package-lists/kali.list.chroot
      


      .
     

      Default packages come from the
     


       kali-linux-default
      


      metapackage.
     

      I highly recommend that you review these options
     



      to customize what gets installed.
     

      This will affect the resulting ISO image size.
     

      You can simply comment or uncomment lines to achieve the desired effect, as shown in the
     


       following figure:
      












     Figure 16.7 – You may comment or uncomment lines to choose metapackages
    





       File overlays
      


      : Place custom
     



      files in
     


       kali-config/common/includes.chroot/
      


      .
     

      Files will be copied to corresponding locations in the
     


       final image.
      






        Build parameters
       




       :
      





         --distribution
        


        : Specify the
       



        Kali version (e.g.,
       



          kali-rolling
         




         ,
        




          kali-last-snapshot
         




         )
        





         --version
        


        : Set a custom
       


         version string
        





         --subdir
        


        : Define the output
       


         directory structure
        





         --verbose
        


        : Show detailed
       


         build output
        





         --debug
        


        : Display maximum
       


         debug information
        







       Preseeding
      


      : You can fully customize and automate the installation process using a preseed file.
     

      Kali is based on Debian Linux.
     

      You can find Debian documentation on all preseed options at
     


       https://www.debian.org/releases/stable/amd64/apbs01.en.html
      


      .
     

      For guidance on how to use the preseed file for the Kali build process, see step
     


       0x05
      



       at
      




        https://www.kali.org/docs/development/dojo-mastering-live-build/
       




       .
      





     Once you have customized the build to your needs, including editing variables at the top of the
    


      ch16_build_kali.sh
     


     script, make the script executable and
    


      run it.
     




     Once the build is complete, you can test the built image using QEMU, provided you have at least 20 GB of free disk space.
    

     Otherwise, you’ll need to test it on another system.
    

     The build process will create an ISO file in the
    


      images/
     


     subdirectory.
    

     The exact filename will depend on the
    



     build
    


      options selected.
     




     Caution
    



     Booting a computer or virtual machine with the resulting installer image will overwrite anything on
    


      the disk!
     




     How can we test drive the new image using QEMU?
    

     Let’s take a look at
    


      the steps:
     






       Install QEMU:
      


$ sudo apt install -y qemu qemu-system-x86 ovmf



      Create a
     


       test disk:
      


$ qemu-img create -f qcow2 /tmp/kali.img 20G



      Boot the image to a
     




       virtual machine:
      


qemu-system-x86_64 -enable-kvm -drive if=virtio,aio=threads,cache=unsafe,format=qcow2,file=/tmp/kali-test.hdd.img -cdrom images/kali-custom-image.iso -boot once=d




     You can read more about the process of creating custom Kali images
    


      at
     




       https://gitlab.com/kalilinux/build-scripts/live-build-config
      




      .
     




     As a consultant, I start new projects with a different customer as often as every week.
    

     Each customer gets a fresh virtual machine to prevent the cross-contamination of data between customers.
    

     The build process outlined in this section makes it easy to quickly create a new Kali image customized for your needs and preferences.
    

     If you rely on different tool sets for different
    



     types of pentests, simply make a copy of the
    


      ch16_build_kali.sh
     


     script and customize the choice of packages and metapackages to suit
    


      your needs.
     






     Summary
    



     In this chapter, you learned how to create a simple DevSecOps environment using Bash scripting on Kali Linux.
    

     The Bash scripts demonstrated essential patterns for secure shell scripting including proper error handling, logging, input validation, and environment verification.
    

     You saw how to integrate multiple security tools including OWASP Dependency-Check and Trivy.
    

     You also learned how to create simple (and free) automated security monitoring
    


      Bash scripts.
     




     Through the scripts, you learned about professional logging practices, modular function design, and proper system setup validation.
    

     The examples covered real-world security considerations such as running as
    


      root
     


     safely, checking prerequisites, handling errors gracefully, and creating clean workspaces with
    


      appropriate permissions.
     




     After reading this book, you should now have a thorough understanding of how to integrate Bash into your pentesting workflow.
    

     In Bash, there are many ways to accomplish any particular task.
    

     I’ve been careful to show the most straightforward way in my examples and avoided complexity as much as possible to make this subject easier to learn.
    

     Please create an
    


      issue
     


     in the book’s GitHub repository if any of the code isn’t working or needs
    


      further explanation.
     




     Thanks
    


      for reading!
     















     Index
    



     As this ebook edition doesn't have fixed pagination, the page numbers below are hyperlinked for reference only, based on the printed edition of this book.
    



     A
    



     absolute path
    



     versus relative paths
    


      28
     




     Advanced Encryption Standard with a 256-bit key (AES-256)
    


      190
     




     advanced evasion tactics
    



     with Bash
    


      297
     


     -
    


      301
     




     Advanced Intrusion Detection Environment (AIDE)
    


      265
     




     Advanced Package Tool (APT)
    


      14
     




     advanced parallel processing
    



     GNU parallel, using
    


      127
     




     xargs, using
    


      127
     




     advanced persistence techniques
    


      253
     


     -
    


      255
     




     AI
    



     used, for enhancing vulnerability identification
    


      321
     


     -
    


      328
     




     AI-assisted decision-making
    



     in pentesting
    


      328
     


     ,
    


      329
     




     Pentest Hero AI agent, testing
    


      329
     


     -
    


      332
     




     AI, in pentesting
    



     basics
    


      314
     




     ethical and practical considerations
    


      313
     


     ,
    


      314
     




     foundation, creating
    


      317
     




     ML
    


      314
     




     system prompt, redefining
    


      317
     


     -
    


      321
     




     aliases
    



     versus functions
    


      96
     


     -
    


      98
     




     alternations
    



     tips
    


      70
     




     utilizing
    


      69
     


     ,
    


      70
     




     ANDing
    


      101
     




     AND operation
    


      101
     




     antivirus (AV) systems
    


      291
     




     environment, enumerating
    


      292
     


     -
    


      295
     




     AppArmor
    


      221
     




     arguments
    



     benefits
    


      84
     




     default values
    


      86
     


     ,
    


      87
     




     passing, to functions
    


      84
     


     ,
    


      85
     




     variable number, handling
    


      85
     


     ,
    


      86
     




     arrays
    



     looping through
    


      58
     


     ,
    


      59
     




     using, for data containers
    


      57
     




     associative arrays
    


      58
     




     awk
    


      75
     


     ,
    


      270
     




     B
    



     backdoor cron jobs
    



     creating
    


      247
     


     -
    


      249
     




     backdooring
    



     with SSH authorized keys
    


      252
     


     ,
    


      253
     




     Base64 encoding
    


      187
     




     Bash
    


      4
     


     ,
    


      5
     




     data collection for reporting, automating
    


      268
     




     evasion script generation, automating
    


      301
     


     -
    


      309
     




     features
    


      5
     




     integrating, with reporting tools
    


      285
     


     -
    


      288
     




     networking basics
    


      100
     




     network pivoting
    


      255
     


     -
    


      257
     




     obfuscation techniques
    


      295
     


     ,
    


      297
     




     raw data, cleaning
    


      270
     


     -
    


      280
     




     raw data, parsing
    


      270
     


     -
    


      280
     




     tracks, cleaning up
    


      262
     


     -
    


      265
     




     used, for processing scan results
    


      201
     


     ,
    


      202
     




     user, creating
    


      245
     


     ,
    


      246
     




     using, for advanced evasion tactics
    


      297
     


     -
    


      301
     




     Bash commands
    



     used, for configuring network interfaces
    


      104
     




     used, for exploiting SUID and SGID binaries
    


      233
     


     -
    


      238
     




     Bash functions
    


      80
     




     Bash functions, benefits
    



     code reuse
    


      80
     




     encapsulation
    


      81
     




     function, calling
    


      82
     


     ,
    


      83
     




     function, defining
    


      82
     


     ,
    


      83
     




     modularity
    


      81
     




     performance
    


      82
     




     testability
    


      81
     




     Bash prompt
    



     customizing
    


      13
     


     ,
    


      14
     




     BASH_REMATCH
    


      71
     




     Bash scripting
    



     uses
    


      6
     




     Bash scripts
    



     advantages
    


      110
     




     Bash shell
    



     backdooring
    


      246
     


     ,
    


      247
     




     Bash tools
    



     used, for troubleshooting network connectivity
    


      105
     


     -
    


      109
     




     basic parallel execution
    



     implementing
    


      125
     


     -
    


      127
     




     Bats
    


      81
     




     black boxes
    


      313
     




     Boolean
    


      321
     




     Bourne Again Shell
    


      4
     




     break statement
    


      55
     




     broadcast address
    


      102
     




     C
    



     capture groups
    


      68
     




     case statements
    


      48
     




     certificate authority (CA)
    


      164
     




     certificate enumeration
    



     Bash, using for
    


      163
     


     -
    


      168
     




     character classes
    



     using
    


      66
     




     characters
    


      62
     




     Chisel
    



     reference link
    


      258
     




     chmod command
    



     used, for modifying file permissions
    


      30
     


     -
    


      32
     




     chown command
    



     used, for changing ownership
    


      29
     




     CI/CD pipeline configuration, with Bash
    


      338
     




     development tools installation
    


      341
     


     ,
    


      342
     




     error handler and initialization
    


      340
     




     functions, logging
    


      339
     




     GitLab CI/CD setup
    


      343
     




     initial setup and error handling
    


      339
     




     security tools installation
    


      342
     




     system checks
    


      341
     




     workspace creation
    


      343
     


     ,
    


      344
     




     Cipher Block Chaining (CBC)
    


      190
     




     Cisco Certified Network Associate (CCNA)
    


      115
     




     cloud-based systems
    


      10
     




     cmp
    


      265
     




     command-line interface (CLI)
    


      27
     




     command-line scans
    



     running, with  ZAP
    


      185
     


     -
    


      187
     




     command substitution
    


      36
     




     Comma-Separated Values (CSV)
    


      150
     


     ,
    


      270
     




     Common Gateway Interface (CGI)
    


      113
     




     conditional statements
    



     case statements
    


      48
     




     comparisons
    


      43
     


     -
    


      47
     




     conditions, combining
    


      47
     


     ,
    


      48
     




     else if (elif)
    


      43
     




     else statement, adding
    


      42
     




     if statement
    


      42
     




     used, in branching
    


      41
     




     content delivery network (CDN)
    


      6
     




     reference link
    


      164
     




     context prompt
    


      317
     




     continue statement
    


      55
     




     Continuous Integration/Continuous Delivery (CI/CD)
    


      335
     




     cron daemon
    


      240
     


     ,
    


      247
     




     cron jobs
    


      240
     




     significance
    


      248
     




     cross-site scripting (XSS)
    


      184
     




     custom Kali Linux builds
    



     automating, for pentesting
    


      361
     


     -
    


      364
     




     Cyclic Redundancy Check 32 (CRC-32)
    


      188
     




     D
    



     data containers
    



     arrays, using
    


      57
     


     -
    


      60
     




     data, for pentest reports
    



     key points, identifying
    


      268
     


     -
    


      270
     




     with Bash
    


      268
     




     data manipulation techniques
    


      187
     


     -
    


      192
     




     declare keyword
    


      58
     




     dependency hell
    


      4
     




     DevSecOps, for pentesters
    


      336
     




     intersection, with security
    


      336
     


     ,
    


      337
     




     use case, in security automation
    


      337
     


     ,
    


      338
     




     DevSecOps
    


      335
     


     ,
    


      337
     




     security-focused Bash scripts, crafting
    


      344
     




     dictionaries
    


      58
     




     diff
    


      265
     




     dig tool
    


      106
     




     dig utility
    


      158
     




     directories
    



     working with
    


      20
     


     -
    


      22
     




     directory navigation and manipulation
    



     filesystem design and hierarchy
    


      22
     


     -
    


      26
     




     filesystem navigation commands
    


      27
     


     ,
    


      28
     




     DNS enumeration
    



     Bash, using for
    


      151
     




     scope, expanding
    


      152
     


     -
    


      155
     




     DNS exfiltration
    


      301
     




     DNS tunneling
    


      261
     


     ,
    


      301
     




     working
    


      261
     




     Docker containers
    



     using
    


      8
     


     ,
    


      9
     




     Domain Name System (DNS)
    


      25
     




     don’t repeat yourself (DRY)
    


      95
     




     dotfiles
    


      12
     




     dynamic chain pivoting
    


      257
     


     -
    


      260
     




     Dynamic Host Configuration Protocol (DHCP)
    


      103
     




     E
    



     else if (elif) statement
    


      43
     




     else statement
    



     adding
    


      42
     




     encapsulation
    


      81
     




     Endpoint Detection and Response (EDR)
    


      219
     


     ,
    


      291
     




     environment, enumerating
    


      292
     


     -
    


      295
     




     enumeration
    


      195
     


     ,
    


      221
     




     environment variable
    


      38
     


     ,
    


      39
     




     evasion script generation
    



     automating, in Bash
    


      301
     


     -
    


      309
     




     evasion techniques
    


      291
     




     exploitation
    


      195
     




     Exploit-DB
    


      228
     




     Extensible Markup Language (XML)
    


      270
     




     F
    



     file ownership
    



     changing, with chown command
    


      29
     




     group
    


      29
     




     owner
    


      29
     




     file permissions
    



     execute
    


      30
     




     modifying, with chmod command
    


      30
     


     -
    


      32
     




     read
    


      30
     




     write
    


      30
     




     files
    



     working with
    


      20
     


     -
    


      22
     




     file test primaries
    


      44
     




     flags
    



     used, for search
    


      66
     




     for loop
    


      49
     




     function exporting feature
    


      112
     




     function return values
    



     output, using instead of return codes
    


      93
     


     ,
    


      94
     




     returning, as exit status
    


      92
     


     ,
    


      93
     




     functions
    



     advanced techniques
    


      92
     




     global variables, modifying
    


      90
     


     -
    


      92
     




     importing
    


      95
     


     ,
    


      96
     




     return values
    


      92
     




     variable lifetime
    


      87
     




     variable scope
    


      87
     




     versus aliases
    


      96
     


     -
    


      98
     




     G
    



     glob
    


      20
     




     global variables
    


      88
     




     modifying, inside function
    


      90
     


     -
    


      92
     




     glob character
    


      63
     




     GNU parallel
    



     used, for advanced parallel processing
    


      127
     




     using, for enhanced control
    


      129
     


     -
    


      135
     




     versus xargs
    


      135
     




     Google Cloud Platform (GCP)
    


      10
     




     Goscan
    



     URL
    


      257
     




     graphical user interface (GUI)
    


      13
     


     ,
    


      118
     




     Greenbone
    



     vulnerability scanning, automating with
    


      210
     


     -
    


      217
     




     grep command
    


      62
     




     used, for matching IP addresses
    


      72
     


     ,
    


      73
     




     grep flags
    



     using
    


      73
     


     ,
    


      74
     




     grouping
    


      68
     




     H
    



     hacker shell
    



     configuring
    


      12
     


     ,
    


      13
     




     hard link
    


      33
     




     hash maps
    


      58
     




     here-string operator
    


      160
     




     host-based intrusion detection system (HIDS)
    


      265
     




     Hot Standby Router Protocol (HSRP)
    


      116
     


     ,
    


      205
     




     HTTP requests
    



     automating
    


      172
     


     -
    


      181
     




     I
    



     iconv
    


      47
     




     if statement
    


      42
     




     infrastructure vulnerability assessment
    



     network hosts, enumerating with NetExec
    


      208
     


     -
    


      210
     




     vulnerability scanning, with Greenbone
    


      210
     


     -
    


      217
     




     with Bash
    


      208
     




     initial prompt
    


      317
     




     installer images
    


      361
     




     internal field separator
    


      156
     


     ,
    


      284
     




     Internet Control Message Protocol (ICMP)
    


      105
     




     Internet Protocol (IP)
    


      100
     




     intrusion detection systems (IDSs)
    


      33
     




     iodined project documentation
    



     reference link
    


      262
     




     iodined server
    


      262
     




     IP addresses
    



     redacting
    


      74
     


     -
    


      76
     




     ipcalc program
    


      101
     




     IP Version 4 (IPv4)
    


      100
     




     IP version 6 (IPv6) network traffic
    


      206
     




     J
    



     JavaScript Object Notation (JSON)
    


      270
     




     journald
    


      109
     




     K
    



     Kali Linux
    


      10
     




     L
    



     lab environments
    



     setting up
    


      7
     




     large language model (LLM)
    


      315
     




     lateral movement
    


      243
     




     LaTeX
    


      285
     




     advantages
    


      285
     




     Ligolo-ng
    



     reference link
    


      258
     




     Link Local Multicast Name Resolution (LLMNR)
    


      117
     




     Linux Auditing System (Auditd)
    


      265
     




     Linux cron jobs
    


      247
     




     Linux snapshot tools
    



     Advanced Intrusion Detection Environment (AIDE)
    


      265
     




     cmp
    


      265
     




     diff
    


      265
     




     Linux Auditing System (Auditd)
    


      265
     




     OSSEC
    


      265
     




     Tripwire
    


      265
     




     live images
    


      361
     




     live USB
    


      9
     




     Linux distribution, running from
    


      10
     




     using, considerations and drawbacks
    


      10
     




     localhost
    


      101
     




     local port forwarding
    


      256
     




     local variables
    


      89
     




     logical NOT expression
    


      64
     




     logical operators
    


      65
     




     loopback adapter
    


      101
     




     loops
    


      49
     




     break command, using
    


      56
     




     continue command, using
    


      56
     




     for loop
    


      49
     


     ,
    


      50
     




     nested loops
    


      55
     


     ,
    


      56
     




     select command
    


      54
     


     ,
    


      55
     




     until loop
    


      53
     


     ,
    


      54
     




     while loop
    


      51
     


     ,
    


      53
     




     M
    



     Man-in-the-Middle (MITM) attack
    


      116
     


     ,
    


      205
     




     Masscan
    



     used, for network scanning
    


      200
     


     ,
    


      201
     




     Message-Digest Algorithm 5 (MD5) hashing
    


      189
     




     metacharacters
    


      62
     




     Metasploit Framework
    


      97
     




     Microsoft Defender for Identity (MDI)
    


      152
     




     misconfigured services
    



     leveraging
    


      239
     


     -
    


      241
     




     ML
    



     reinforcement learning
    


      315
     




     supervised learning
    


      315
     




     unsupervised learning
    


      315
     




     ML, using with AI
    



     automated exploitation
    


      315
     




     defense optimization
    


      315
     




     password cracking
    


      315
     




     social engineering
    


      315
     




     threat detection
    


      315
     




     vulnerability assessment
    


      315
     




     modulus operator
    


      56
     




     N
    



     National Security Agency (NSA)
    


      189
     




     Nessus
    



     reference link
    


      168
     




     nested loops
    


      55
     


     ,
    


      56
     




     netask
    


      101
     




     NetBIOS Name Service (NBT-NS)
    


      117
     




     Netcat command
    


      114
     




     NetExec
    



     installing
    


      16
     




     used, for enumerating network hosts
    


      208
     




     Network Attached Storage (NAS)
    


      115
     




     network demilitarized zone (DMZ)
    


      197
     




     network enumeration
    



     scripting
    


      109
     


     -
    


      111
     




     network exploitation
    


      112
     




     network hosts
    



     enumerating, with NetExec
    


      208
     


     -
    


      210
     




     networking basics, with Bash
    



     IP addresses and subnets (IPv4)
    


      100
     


     -
    


      102
     




     IP addresses and subnets (IPv6)
    


      102
     


     -
    


      104
     




     network connectivity, troubleshooting
    


      105
     


     -
    


      109
     




     network interfaces, configuring with Bash commands
    


      104
     




     Network Interface Card (NIC)
    


      223
     




     network pentesting
    



     core methodologies
    


      195
     




     enumeration
    


      195
     




     environment, setting up
    


      196
     




     exploitation
    


      195
     




     fundamentals
    


      195
     




     network scanning, with Masscan
    


      200
     


     ,
    


      201
     




     network scanning, with Nmap
    


      198
     


     -
    


      200
     




     post-exploitation
    


      195
     




     reconnaissance
    


      195
     




     reporting
    


      195
     




     scanning
    


      195
     




     scan results, processing with Bash
    


      201
     


     ,
    


      202
     




     tmux, using for persistent sessions
    


      197
     


     ,
    


      198
     




     network pivoting
    



     with Bash
    


      255
     


     -
    


      257
     




     network scanning techniques
    



     in Bash
    


      202
     


     -
    


      204
     




     network service exploitation
    


      112
     


     -
    


      115
     




     network services
    



     enumerating, with Bash
    


      205
     


     -
    


      207
     




     network traffic
    



     analyzing
    


      115
     


     -
    


      120
     




     capturing
    


      116
     


     -
    


      120
     




     packet captures, interpreting
    


      120
     


     -
    


      122
     




     Nmap
    



     used, for network scanning
    


      198
     


     -
    


      200
     




     nslookup command
    


      106
     




     nslookup tool
    


      106
     




     O
    



     obfuscation techniques
    


      291
     




     in Bash
    


      295
     


     -
    


      297
     




     octal dump
    


      302
     




     octets
    


      100
     




     Offensive Security
    


      229
     




     online regex testers
    



     reference link
    


      70
     




     Open Source Intelligence (OSINT)
    


      6
     




     OSSEC
    


      265
     




     OWASP Dependency-Check
    


      342
     




     P
    



     packet captures
    



     interpreting
    


      120
     


     ,
    


      121
     




     parallel execution
    



     best practices
    


      140
     




     parallelism
    



     achieving, with screen command
    


      135
     


     ,
    


      136
     




     parallel processing
    


      123
     




     background processes
    


      124
     




     benefits
    


      124
     




     concurrency, versus parallelism
    


      124
     




     drawbacks
    


      124
     




     parallel execution
    


      124
     




     practical applications
    


      137
     


     -
    


      140
     




     separate processes
    


      124
     




     serial execution
    


      124
     




     Password-Based Key Derivation Function 2 (PBKDF2)
    


      190
     




     Pentest Hero AI agent
    



     testing
    


      329
     


     -
    


      332
     




     pentesting
    



     AI-assisted decision-making
    


      328
     


     ,
    


      329
     




     custom Kali Linux builds, automating for
    


      361
     


     -
    


      364
     




     pentesting tools
    



     NetExec, installing
    


      16
     


     ,
    


      17
     




     package manager, updating
    


      14
     




     ProjectDiscovery tools, installing
    


      15
     


     ,
    


      16
     




     setting up
    


      14
     




     persistence
    


      243
     


     -
    


      245
     




     system files, backdooring for
    


      249
     


     -
    


      252
     




     PetitPotam tool
    


      52
     




     download link
    


      52
     




     pings
    


      109
     




     pivoting
    


      243
     




     popd command
    


      27
     




     post-exploitation
    


      195
     




     practical applications
    



     demonstrating
    


      70
     


     ,
    


      71
     




     grep flags, using
    


      73
     


     ,
    


      74
     




     IP addresses, matching with grep
    


      72
     




     IP addresses, redacting
    


      74
     


     -
    


      76
     




     primaries
    


      43
     




     privilege escalation
    


      219
     




     in Unix/Linux systems
    


      220
     


     ,
    


      221
     




     types
    


      220
     




     privilege escalation, enumeration techniques
    


      221
     




     initial access
    


      222
     


     -
    


      225
     




     system information, gathering
    


      225
     


     -
    


      233
     




     privilege escalation vectors
    


      219
     




     ProjectDiscovery Chaos API key
    



     reference link
    


      159
     




     ProjectDiscovery tools
    



     installing
    


      15
     


     ,
    


      16
     




     prompt
    


      317
     




     protocols
    



     enumerating, with Bash
    


      205
     


     -
    


      207
     




     proxychains tool
    


      256
     




     R
    



     real-time security monitoring
    



     integration, with Bash
    


      358
     


     -
    


      361
     




     reconnaissance
    


      146
     


     ,
    


      147
     


     ,
    


      195
     




     recursive functions
    


      94
     


     ,
    


      95
     




     regex patterns
    



     and techniques
    


      68
     




     used, for data extraction
    


      68
     


     ,
    


      69
     




     regular expressions (regex)
    


      61
     




     basics
    


      62
     


     -
    


      66
     




     character classes, using
    


      66
     




     examples, applying
    


      67
     


     ,
    


      68
     




     flags
    


      66
     




     tips and best practices
    


      77
     




     using, for data extraction and validation
    


      62
     




     reinforcement learning
    


      315
     




     relative paths
    



     versus absolute path
    


      28
     




     remote port forwarding
    


      256
     




     reporting tools
    



     Bash, integrating with
    


      285
     


     -
    


      288
     




     Responder
    


      53
     




     retrieval-augmented generation (RAG)
    


      316
     




     return code
    


      92
     




     robust parallel processing
    



     with xargs
    


      127
     


     ,
    


      128
     




     router
    


      102
     




     S
    



     scanning
    


      195
     




     scheduled tasks
    



     leveraging
    


      239
     


     -
    


      241
     




     screen command
    



     used, for achieving parallelism
    


      135
     


     ,
    


      136
     




     searchsploit program
    


      322
     




     Secure Hash Algorithm 256-bit (SHA-256)
    


      189
     




     security-enhanced Linux (SELinux)
    


      221
     




     security-focused Bash scripts
    



     crafting
    


      344
     




     scan script, creating
    


      344
     


     -
    


      352
     




     vulnerable artifacts, creating
    


      352
     


     -
    


      358
     




     Security Information and Event Management (SIEM)
    


      14
     




     URL
    


      14
     




     select command
    


      54
     


     ,
    


      55
     




     sequence
    


      50
     




     Set Group ID (SGID)
    


      219
     




     binaries, exploiting with Bash
    


      233
     


     -
    


      238
     




     Set User ID (SUID)
    


      219
     




     binaries, exploiting with Bash
    


      233
     


     -
    


      238
     




     SGID permission
    


      32
     


     ,
    


      33
     




     shebang
    


      7
     


     ,
    


      41
     


     ,
    


      139
     


     ,
    


      152
     


     ,
    


      322
     




     shUnit2
    


      81
     




     signature-based detection systems
    


      297
     




     Simple Object Access Protocol (SOAP)
    


      153
     




     Sipcalc
    


      103
     




     Socket Secure (SOCKS) proxy
    


      256
     




     SQL injection testing
    


      137
     




     SQLite
    


      280
     




     advantages, for pentesters
    


      280
     




     pentest data, storing and managing
    


      281
     


     -
    


      284
     




     SSH authorized keys
    



     for backdooring
    


      252
     


     ,
    


      253
     




     SSH port forwarding
    


      255
     


     ,
    


      256
     




     Static Application Security Testing (SAST)
    


      349
     




     Sticky Bit
    


      221
     




     Stripe
    


      148
     




     subdomain enumeration
    



     automating, with Bash
    


      156
     


     -
    


      161
     




     Subject Alternative Name (SAN)
    


      164
     




     subnet mask
    


      101
     




     subnets
    


      100
     




     SUID permission
    


      32
     


     ,
    


      33
     




     supervised learning
    


      315
     




     symlinks
    


      34
     




     Systemd
    


      239
     




     system files
    



     backdooring, for persistence
    


      249
     


     -
    


      252
     




     system prompt
    


      317
     




     redefining
    


      317
     


     -
    


      321
     




     T
    



     tab-separated values (TSV)
    


      150
     


     ,
    


      321
     




     tee command
    


      196
     




     telemetry
    


      295
     




     The Exploit Database
    



     reference link
    


      322
     




     timing-based evasion
    


      297
     




     tmux
    



     using, for persistent sessions
    


      197
     


     ,
    


      198
     




     tokenization
    


      316
     




     top-level domain (TLD)
    


      151
     




     Transport Layer Security (TLS)
    


      164
     




     trap
    


      340
     




     tree command
    


      23
     




     Tripwire
    


      265
     




     U
    



     Unix/Linux permission model
    


      221
     




     Unix/Linux systems
    



     privilege escalation
    


      220
     


     ,
    


      221
     




     unsupervised learning
    


      315
     




     until loop
    


      53
     




     upvar-style references
    


      81
     




     user
    



     creating, in Bash
    


      245
     


     ,
    


      246
     




     usernames and email addresses
    



     formatting
    


      147
     


     -
    


      151
     




     UTF-8
    


      47
     




     UTF-16
    


      47
     




     V
    



     variables
    


      36
     




     accessing
    


      37
     


     ,
    


      38
     




     declaring
    


      36
     


     ,
    


      37
     




     environment variables
    


      38
     


     ,
    


      39
     




     global variables
    


      88
     




     lifetime
    


      87
     


     -
    


      90
     




     local variables
    


      89
     




     reviewing
    


      40
     


     ,
    


      41
     




     scope
    


      87
     




     virtual machine
    



     using
    


      7
     


     ,
    


      8
     




     VMware Workstation Player
    


      8
     




     vulhub
    


      114
     




     vulnerability identification
    



     enhancing, with AI
    


      321
     


     -
    


      328
     




     vulnerability scanning
    



     automating, with Greenbone
    


      210
     


     -
    


      217
     




     vulnerability scan targets
    



     formatting, with Bash
    


      168
     


     -
    


      170
     




     vulnerable lab targets
    


      10
     


     -
    


      12
     




     W
    



     web application firewall (WAF)
    


      6
     


     ,
    


      164
     




     web applications
    



     identifying, with Bash
    


      162
     




     web application security
    



     analyzing, with Bash
    


      182
     




     command-line scans, running, with ZAP
    


      185
     


     -
    


      187
     




     testing, with PD
    


      182
     


     -
    


      185
     




     while loop
    


      51
     




     Windows Subsystem for Linux (WSL)
    



     download link
    


      4
     




     X
    



     xargs
    



     used, for advanced parallel processing
    


      127
     




     using, for robust parallel processing
    


      127
     


     -
    


      129
     




     versus GNU parallel
    


      135
     




     xUnit style
    


      81
     




     Z
    



     ZAP
    



     used, for running command-line scans
    


      185
     


     -
    


      187
     




















       packtpub.com
      





     Subscribe to our online digital library for full access to over 7,000 books and videos, as well as industry leading tools to help you plan your personal development and advance your career.
    

     For more information, please visit
    


      our website.
     






     Why subscribe?
    




      Spend less time learning and more time coding with practical eBooks and Videos from over 4,000 industry professionals
     



      Improve your learning with Skill Plans built especially for you
     



      Get a free eBook or video every month
     



      Fully searchable for easy access to vital information
     



      Copy and paste, print, and bookmark content
     




     Did you know that Packt offers eBook versions of every book published, with PDF and ePub files available?
    

     You can upgrade to the eBook version at
    


      packtpub.com
     


     and as a print book customer, you are entitled to a discount on the eBook copy.
    

     Get in touch with us at
    


      customercare@packtpub.com
     


     for
    


      more details.
     




     At
    


      www.packtpub.com
     


     , you can also read a collection of free technical articles, sign up for a range of free newsletters, and receive exclusive discounts and offers on Packt books
    


      and eBooks.
     






     Other Books You May Enjoy
    



     If you enjoyed this book, you may be interested in these other books
    


      by Packt:
     















       Pentesting APIs
      






      Maurício Harley
     





      ISBN: 978-1-83763-316-6
     





      Get an introduction to APIs and their relationship with security
     



      Set up an effective pentesting lab for API intrusion
     



      Conduct API reconnaissance and information gathering in the discovery phase
     



      Execute basic attacks such as injection, exception handling, and DoS
     



      Perform advanced attacks, including data exposure and business logic abuse
     



      Benefit from expert security recommendations to protect APIs against attacks
     














      PowerShell Automation and Scripting
     




       for Cybersecurity
      





     Miriam
    


      C.
     

      Wiesner
     





      ISBN: 978-1-80056-637-8
     





      Leverage PowerShell, its mitigation techniques, and detect attacks
     



      Fortify your environment and systems against threats
     



      Get unique insights into event logs and IDs in relation to PowerShell and detect attacks
     



      Configure PSRemoting and learn about risks, bypasses, and best practices
     



      Use PowerShell for system access, exploitation, and hijacking
     



      Red and blue team introduction to Active Directory and Azure AD security
     



      Discover PowerShell security measures for attacks that go deeper than simple commands
     



      Explore JEA to restrict what commands can be executed
     






     Packt is searching for authors like you
    



     If you’re interested in becoming an author for Packt, please visit
    


      authors.packtpub.com
     


     and apply today.
    

     We have worked with thousands of developers and tech professionals, just like you, to help them share their insight with the global tech community.
    

     You can make a general application, apply for a specific hot topic that we are recruiting an author for, or submit your
    


      own idea.
     






     Share Your Thoughts
    



     Now you’ve finished
    


      Bash Shell Scripting for Pentesters
     


     , we’d love to hear your thoughts!
    

     If you purchased the book from Amazon, please
    


      click here to go straight to the Amazon review page
     


     for this book and share your feedback or leave a review on the site that you purchased
    


      it from.
     




     Your review is important to us and the tech community and will help us make sure we’re delivering excellent
    


      quality content.
     






     Download a free PDF copy of this book
    



     Thanks for purchasing
    


      this book!
     




     Do you like to read on the go but are unable to carry your print
    


      books everywhere?
     




     Is your eBook purchase not compatible with the device of
    


      your choice?
     




     Don’t worry, now with every Packt book you get a DRM-free PDF version of that book at
    


      no cost.
     




     Read anywhere, any place, on any device.
    

     Search, copy, and paste code from your favorite technical books directly into your application.
    



     The perks don’t stop there, you can get exclusive access to discounts, newsletters, and great free content in your
    


      inbox daily
     




     Follow these simple steps to get
    


      the benefits:
     





      Scan the QR code or visit the
     


       link below
      













      https://packt.link/free-ebook/9781835880821
     





      Submit your proof
     


       of purchase
      




      That’s it!
     

      We’ll send your free PDF and other benefits to your
     


       email directly
      













    Contents
   



      Bash Shell Scripting for Pentesters
     



      Foreword
     



      Contributors
     



      About the author
     



      About the reviewers
     



      Preface
     



        Who this book is for
       



        What this book covers
       



        To get the most out of this book
       



        Download the example code files
       



        Conventions used
       



        Disclaimer
       



        Get in touch
       



        Share Your Thoughts
       



        Download a free PDF copy of this book
       





      Part 1: Getting Started with Bash Shell Scripting
