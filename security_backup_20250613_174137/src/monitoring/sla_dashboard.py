"""
SLA dashboard data feeds and reporting.

Provides:
- Real-time SLA dashboard data
- Performance reports and analytics
- Executive summaries
- Grafana/dashboard integration
"""

import asyncio
import json
from typing import Dict, List, Optional, Any, Union
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
import logging

from .sla import get_sla_tracker, SLATracker, SLAReport
from .sla_alerting import get_sla_alert_manager, SLAAlertManager
from .sla_history import get_sla_history_tracker, SLAHistoryTracker
from .prometheus_client import get_prometheus_client

__all__ = [
    "SLADashboardData",
    "SLAExecutiveSummary", 
    "SLADashboardAPI",
    "get_sla_dashboard_api"
]

logger = logging.getLogger(__name__)


@dataclass
class SLADashboardData:
    """Complete SLA dashboard data structure."""
    timestamp: str
    overall_health: str  # excellent, good, warning, critical
    overall_score: float
    
    # Current status
    objectives: Dict[str, Any]
    active_alerts: List[Dict[str, Any]]
    
    # Trends and history
    trends: Dict[str, Any]
    compliance_summary: Dict[str, Any]
    
    # System metrics
    system_status: Dict[str, Any]
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization."""
        return asdict(self)


@dataclass 
class SLAExecutiveSummary:
    """Executive-level SLA summary."""
    period: str
    overall_availability: float
    total_objectives: int
    objectives_met: int
    critical_incidents: int
    
    # Key metrics
    worst_performing_sla: Optional[str]
    best_performing_sla: Optional[str]
    average_error_budget_remaining: float
    
    # Trends
    month_over_month_change: float
    predicted_next_month: str  # improving, stable, degrading
    
    # Risk assessment
    high_risk_objectives: List[str]
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization."""
        return asdict(self)


class SLADashboardAPI:
    """API for SLA dashboard data and reporting."""
    
    def __init__(self):
        self.sla_tracker = get_sla_tracker()
        self.alert_manager = get_sla_alert_manager()
        self.history_tracker = get_sla_history_tracker()
        self.prometheus_client = get_prometheus_client()
        
        # Cache for expensive operations
        self._cache: Dict[str, Any] = {}
        self._cache_expiry: Dict[str, datetime] = {}
        self._cache_duration = timedelta(minutes=5)\n    \n    async def get_dashboard_data(self, refresh_cache: bool = False) -> SLADashboardData:\n        \"\"\"Get complete dashboard data.\"\"\"\n        cache_key = \"dashboard_data\"\n        \n        if not refresh_cache and self._is_cached(cache_key):\n            return self._cache[cache_key]\n        \n        # Get current SLA reports\n        sla_reports = await self.sla_tracker.check_all_objectives()\n        \n        # Get active alerts\n        active_alerts = self.alert_manager.get_active_alerts()\n        \n        # Get trends (cached for longer)\n        trends = await self._get_trends_cached()\n        \n        # Get compliance summary\n        compliance_summary = await self.history_tracker.get_compliance_summary(days=7)\n        \n        # Calculate overall health and score\n        overall_health, overall_score = self._calculate_overall_health(sla_reports, active_alerts)\n        \n        # Get system status\n        system_status = await self._get_system_status()\n        \n        # Format objectives data\n        objectives_data = self._format_objectives_data(sla_reports)\n        \n        # Format alerts data\n        alerts_data = [alert.to_dict() for alert in active_alerts]\n        \n        dashboard_data = SLADashboardData(\n            timestamp=datetime.now().isoformat(),\n            overall_health=overall_health,\n            overall_score=overall_score,\n            objectives=objectives_data,\n            active_alerts=alerts_data,\n            trends=trends,\n            compliance_summary=compliance_summary,\n            system_status=system_status\n        )\n        \n        # Cache the result\n        self._cache[cache_key] = dashboard_data\n        self._cache_expiry[cache_key] = datetime.now() + self._cache_duration\n        \n        return dashboard_data\n    \n    async def get_executive_summary(self, period_days: int = 30) -> SLAExecutiveSummary:\n        \"\"\"Get executive summary for specified period.\"\"\"\n        end_time = datetime.now()\n        start_time = end_time - timedelta(days=period_days)\n        \n        # Get historical data\n        compliance_summary = await self.history_tracker.get_compliance_summary(days=period_days)\n        trends = await self.history_tracker.get_trend_summary(days=period_days)\n        \n        # Get current SLA status\n        current_reports = await self.sla_tracker.check_all_objectives()\n        \n        # Get alerts for the period\n        alert_history = self.alert_manager.get_alert_history(hours=period_days * 24)\n        \n        # Calculate key metrics\n        total_objectives = len(current_reports)\n        objectives_met = sum(1 for report in current_reports.values() if report.is_compliant)\n        \n        # Calculate overall availability (weighted average)\n        if compliance_summary:\n            availabilities = [data['mean'] for data in compliance_summary.values()]\n            overall_availability = sum(availabilities) / len(availabilities) if availabilities else 0\n        else:\n            overall_availability = 0\n        \n        # Find worst and best performing SLAs\n        worst_sla = None\n        best_sla = None\n        if compliance_summary:\n            sorted_slas = sorted(\n                compliance_summary.items(),\n                key=lambda x: x[1]['mean']\n            )\n            if sorted_slas:\n                worst_sla = sorted_slas[0][0]\n                best_sla = sorted_slas[-1][0]\n        \n        # Calculate average error budget\n        error_budgets = [report.error_budget_remaining for report in current_reports.values()]\n        avg_error_budget = sum(error_budgets) / len(error_budgets) if error_budgets else 0\n        \n        # Count critical incidents\n        critical_incidents = sum(\n            1 for alert in alert_history\n            if alert.severity.value == \"critical\"\n        )\n        \n        # Calculate month-over-month change (simplified)\n        mom_change = 0.0\n        if period_days >= 60:\n            # Compare first half vs second half of period\n            mid_point = start_time + timedelta(days=period_days // 2)\n            \n            early_summary = await self.history_tracker.get_compliance_summary(\n                days=period_days // 2\n            )\n            \n            if early_summary and compliance_summary:\n                early_avg = sum(data['mean'] for data in early_summary.values()) / len(early_summary)\n                current_avg = sum(data['mean'] for data in compliance_summary.values()) / len(compliance_summary)\n                mom_change = current_avg - early_avg\n        \n        # Predict next month trend\n        if trends:\n            improving_count = sum(1 for trend in trends.values() if trend.direction.value == \"improving\")\n            degrading_count = sum(1 for trend in trends.values() if trend.direction.value == \"degrading\")\n            \n            if improving_count > degrading_count:\n                predicted_trend = \"improving\"\n            elif degrading_count > improving_count:\n                predicted_trend = \"degrading\"\n            else:\n                predicted_trend = \"stable\"\n        else:\n            predicted_trend = \"stable\"\n        \n        # Identify high-risk objectives\n        high_risk_objectives = [\n            name for name, trend in trends.items()\n            if trend.risk_level in [\"high\", \"critical\"]\n        ] if trends else []\n        \n        return SLAExecutiveSummary(\n            period=f\"{period_days} days\",\n            overall_availability=overall_availability,\n            total_objectives=total_objectives,\n            objectives_met=objectives_met,\n            critical_incidents=critical_incidents,\n            worst_performing_sla=worst_sla,\n            best_performing_sla=best_sla,\n            average_error_budget_remaining=avg_error_budget,\n            month_over_month_change=mom_change,\n            predicted_next_month=predicted_trend,\n            high_risk_objectives=high_risk_objectives\n        )\n    \n    async def get_sla_details(self, objective_name: str) -> Dict[str, Any]:\n        \"\"\"Get detailed information for a specific SLA objective.\"\"\"\n        if objective_name not in self.sla_tracker.objectives:\n            raise ValueError(f\"Unknown SLA objective: {objective_name}\")\n        \n        # Get current report\n        objective = self.sla_tracker.objectives[objective_name]\n        current_report = await self.sla_tracker.check_objective(objective)\n        \n        # Get recent history\n        history = await self.history_tracker.get_history(\n            objective_name,\n            start_time=datetime.now() - timedelta(days=7),\n            limit=100\n        )\n        \n        # Get trend analysis\n        trend = await self.history_tracker.analyze_trend(objective_name, days=30)\n        \n        # Get active alerts for this objective\n        active_alerts = [\n            alert for alert in self.alert_manager.get_active_alerts()\n            if alert.objective_name == objective_name\n        ]\n        \n        # Calculate burn rate\n        burn_rate = await self.sla_tracker.get_error_budget_burn_rate(objective_name)\n        \n        # Predict budget exhaustion\n        exhaustion_prediction = await self.sla_tracker.predict_budget_exhaustion(\n            objective_name, burn_rate\n        )\n        \n        return {\n            \"objective\": {\n                \"name\": objective.name,\n                \"type\": objective.type.value,\n                \"target\": objective.target,\n                \"description\": objective.description,\n                \"measurement_window\": str(objective.measurement_window),\n                \"labels\": objective.labels\n            },\n            \"current_status\": current_report.to_dict(),\n            \"trend\": trend.to_dict() if trend else None,\n            \"history\": [point.to_dict() for point in history[-50:]],  # Last 50 points\n            \"active_alerts\": [alert.to_dict() for alert in active_alerts],\n            \"error_budget\": {\n                \"remaining_percent\": current_report.error_budget_remaining,\n                \"burn_rate\": burn_rate,\n                \"exhaustion_prediction\": exhaustion_prediction.isoformat() if exhaustion_prediction else None\n            }\n        }\n    \n    async def get_grafana_metrics(self) -> Dict[str, Any]:\n        \"\"\"Get metrics formatted for Grafana dashboards.\"\"\"\n        sla_reports = await self.sla_tracker.check_all_objectives()\n        \n        metrics = {\n            \"sla_compliance\": {},\n            \"error_budget_remaining\": {},\n            \"sla_violations\": {},\n            \"overall_health_score\": 0\n        }\n        \n        total_compliance = 0\n        for name, report in sla_reports.items():\n            metrics[\"sla_compliance\"][name] = report.compliance_percent\n            metrics[\"error_budget_remaining\"][name] = report.error_budget_remaining\n            metrics[\"sla_violations\"][name] = len(report.violations)\n            total_compliance += report.compliance_percent\n        \n        if sla_reports:\n            metrics[\"overall_health_score\"] = total_compliance / len(sla_reports)\n        \n        # Add alert counts\n        active_alerts = self.alert_manager.get_active_alerts()\n        metrics[\"active_alerts_by_severity\"] = {\n            \"critical\": sum(1 for a in active_alerts if a.severity.value == \"critical\"),\n            \"high\": sum(1 for a in active_alerts if a.severity.value == \"high\"),\n            \"medium\": sum(1 for a in active_alerts if a.severity.value == \"medium\"),\n            \"low\": sum(1 for a in active_alerts if a.severity.value == \"low\")\n        }\n        \n        return metrics\n    \n    async def export_report(self, \n                          format: str = \"json\", \n                          period_days: int = 30) -> str:\n        \"\"\"Export comprehensive SLA report.\"\"\"\n        if format not in [\"json\", \"markdown\", \"csv\"]:\n            raise ValueError(f\"Unsupported format: {format}\")\n        \n        # Get comprehensive data\n        dashboard_data = await self.get_dashboard_data(refresh_cache=True)\n        executive_summary = await self.get_executive_summary(period_days)\n        \n        if format == \"json\":\n            return json.dumps({\n                \"executive_summary\": executive_summary.to_dict(),\n                \"dashboard_data\": dashboard_data.to_dict(),\n                \"export_timestamp\": datetime.now().isoformat()\n            }, indent=2)\n        \n        elif format == \"markdown\":\n            return self._generate_markdown_report(executive_summary, dashboard_data)\n        \n        elif format == \"csv\":\n            return self._generate_csv_report(dashboard_data)\n        \n        return \"\"\n    \n    def _calculate_overall_health(self, \n                                sla_reports: Dict[str, SLAReport],\n                                active_alerts: List[Any]) -> tuple[str, float]:\n        \"\"\"Calculate overall system health.\"\"\"\n        if not sla_reports:\n            return \"unknown\", 0.0\n        \n        # Calculate compliance score\n        compliance_scores = [report.compliance_percent for report in sla_reports.values()]\n        avg_compliance = sum(compliance_scores) / len(compliance_scores)\n        \n        # Factor in active alerts\n        critical_alerts = sum(1 for alert in active_alerts if alert.severity.value == \"critical\")\n        high_alerts = sum(1 for alert in active_alerts if alert.severity.value == \"high\")\n        \n        # Determine health status\n        if critical_alerts > 0 or avg_compliance < 95:\n            health = \"critical\"\n        elif high_alerts > 0 or avg_compliance < 98:\n            health = \"warning\"\n        elif avg_compliance < 99.5:\n            health = \"good\"\n        else:\n            health = \"excellent\"\n        \n        # Calculate score (0-100)\n        score = avg_compliance\n        \n        # Penalize for alerts\n        score -= critical_alerts * 10\n        score -= high_alerts * 5\n        \n        score = max(0, min(100, score))\n        \n        return health, score\n    \n    def _format_objectives_data(self, sla_reports: Dict[str, SLAReport]) -> Dict[str, Any]:\n        \"\"\"Format objectives data for dashboard.\"\"\"\n        formatted = {}\n        \n        for name, report in sla_reports.items():\n            formatted[name] = {\n                \"compliance_percent\": report.compliance_percent,\n                \"current_value\": report.current_value,\n                \"target\": report.objective.target,\n                \"error_budget_remaining\": report.error_budget_remaining,\n                \"is_compliant\": report.is_compliant,\n                \"violations\": len(report.violations),\n                \"type\": report.objective.type.value,\n                \"status\": \"healthy\" if report.is_compliant else \"unhealthy\"\n            }\n        \n        return formatted\n    \n    async def _get_trends_cached(self) -> Dict[str, Any]:\n        \"\"\"Get trends with longer caching.\"\"\"\n        cache_key = \"trends_30d\"\n        cache_duration = timedelta(hours=1)  # Cache trends for 1 hour\n        \n        if (cache_key in self._cache and \n            cache_key in self._cache_expiry and\n            datetime.now() < self._cache_expiry[cache_key]):\n            return self._cache[cache_key]\n        \n        trends = await self.history_tracker.get_trend_summary(days=30)\n        trends_dict = {name: trend.to_dict() for name, trend in trends.items()}\n        \n        self._cache[cache_key] = trends_dict\n        self._cache_expiry[cache_key] = datetime.now() + cache_duration\n        \n        return trends_dict\n    \n    async def _get_system_status(self) -> Dict[str, Any]:\n        \"\"\"Get general system status metrics.\"\"\"\n        try:\n            # Query basic system metrics from Prometheus\n            cpu_query = \"avg(100 - (avg by (instance) (rate(node_cpu_seconds_total{mode='idle'}[5m])) * 100))\"\n            memory_query = \"avg((1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100)\"\n            \n            cpu_metrics = await self.prometheus_client.query(cpu_query)\n            memory_metrics = await self.prometheus_client.query(memory_query)\n            \n            cpu_usage = cpu_metrics[0].latest_value if cpu_metrics else 0\n            memory_usage = memory_metrics[0].latest_value if memory_metrics else 0\n            \n            return {\n                \"cpu_usage_percent\": round(cpu_usage, 2) if cpu_usage else 0,\n                \"memory_usage_percent\": round(memory_usage, 2) if memory_usage else 0,\n                \"timestamp\": datetime.now().isoformat()\n            }\n        \n        except Exception as e:\n            logger.warning(f\"Failed to get system status: {e}\")\n            return {\n                \"cpu_usage_percent\": 0,\n                \"memory_usage_percent\": 0,\n                \"error\": str(e),\n                \"timestamp\": datetime.now().isoformat()\n            }\n    \n    def _is_cached(self, key: str) -> bool:\n        \"\"\"Check if data is cached and not expired.\"\"\"\n        return (key in self._cache and \n                key in self._cache_expiry and\n                datetime.now() < self._cache_expiry[key])\n    \n    def _generate_markdown_report(self, \n                                executive_summary: SLAExecutiveSummary,\n                                dashboard_data: SLADashboardData) -> str:\n        \"\"\"Generate markdown format report.\"\"\"\n        lines = [\n            \"# SLA Performance Report\",\n            f\"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\",\n            \"\",\n            \"## Executive Summary\",\n            f\"- **Period**: {executive_summary.period}\",\n            f\"- **Overall Availability**: {executive_summary.overall_availability:.2f}%\",\n            f\"- **Objectives Met**: {executive_summary.objectives_met}/{executive_summary.total_objectives}\",\n            f\"- **Critical Incidents**: {executive_summary.critical_incidents}\",\n            f\"- **Average Error Budget**: {executive_summary.average_error_budget_remaining:.2f}%\",\n            \"\",\n            \"## Current Status\",\n            f\"- **Overall Health**: {dashboard_data.overall_health.title()}\",\n            f\"- **Health Score**: {dashboard_data.overall_score:.1f}/100\",\n            f\"- **Active Alerts**: {len(dashboard_data.active_alerts)}\",\n            \"\",\n            \"## SLA Objectives\"\n        ]\n        \n        for name, obj in dashboard_data.objectives.items():\n            status_icon = \"✅\" if obj[\"is_compliant\"] else \"❌\"\n            lines.extend([\n                f\"### {status_icon} {name}\",\n                f\"- **Compliance**: {obj['compliance_percent']:.2f}%\",\n                f\"- **Target**: {obj['target']}%\",\n                f\"- **Error Budget**: {obj['error_budget_remaining']:.2f}%\",\n                \"\"\n            ])\n        \n        return \"\\n\".join(lines)\n    \n    def _generate_csv_report(self, dashboard_data: SLADashboardData) -> str:\n        \"\"\"Generate CSV format report.\"\"\"\n        import csv\n        import io\n        \n        output = io.StringIO()\n        writer = csv.writer(output)\n        \n        # Headers\n        writer.writerow([\n            \"Objective\", \"Type\", \"Compliance %\", \"Target %\", \n            \"Current Value\", \"Error Budget %\", \"Status\", \"Violations\"\n        ])\n        \n        # Data rows\n        for name, obj in dashboard_data.objectives.items():\n            writer.writerow([\n                name,\n                obj[\"type\"],\n                obj[\"compliance_percent\"],\n                obj[\"target\"],\n                obj[\"current_value\"],\n                obj[\"error_budget_remaining\"],\n                obj[\"status\"],\n                obj[\"violations\"]\n            ])\n        \n        return output.getvalue()\n\n\n# Global dashboard API instance\n_sla_dashboard_api: Optional[SLADashboardAPI] = None\n\n\ndef get_sla_dashboard_api() -> SLADashboardAPI:\n    \"\"\"Get the global SLA dashboard API instance.\"\"\"\n    global _sla_dashboard_api\n    if _sla_dashboard_api is None:\n        _sla_dashboard_api = SLADashboardAPI()\n    return _sla_dashboard_api