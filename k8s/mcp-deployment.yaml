# Production Kubernetes Deployment for MCP Servers
# Complete deployment with all services, security, and monitoring

---
apiVersion: v1
kind: Namespace
metadata:
  name: mcp-production
  labels:
    name: mcp-production
    environment: production
    security: restricted

---
# ConfigMap for shared configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-config
  namespace: mcp-production
data:
  log_level: "info"
  environment: "production"
  rate_limit_requests: "1000"
  rate_limit_window: "3600"
  worker_threads: "4"
  max_connections: "1000"
  ml_cache_size: "512"
  learning_mode: "adaptive"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: mcp-secrets
  namespace: mcp-production
type: Opaque
stringData:
  database-url: "postgresql://mcp_user:secure_password@postgres:5432/mcp_db"
  redis-url: "redis://redis:6379"
  jwt-secret: "your-secure-jwt-secret-here"
  grafana-password: "secure-grafana-password"

---
# TypeScript MCP API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-typescript-api
  namespace: mcp-production
  labels:
    app: mcp-typescript-api
    tier: api
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: mcp-typescript-api
  template:
    metadata:
      labels:
        app: mcp-typescript-api
        tier: api
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-api-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: mcp-typescript-api
        image: mcp-typescript-server:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: MCP_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: database-url
        - name: MCP_REDIS_URL
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: redis-url
        - name: MCP_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: jwt-secret
        - name: MCP_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: mcp-config
              key: log_level
        envFrom:
        - configMapRef:
            name: mcp-config
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: data
        persistentVolumeClaim:
          claimName: mcp-data-pvc
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
# Python Learning System Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-learning-system
  namespace: mcp-production
  labels:
    app: mcp-learning-system
    tier: ml
    version: v1.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: mcp-learning-system
  template:
    metadata:
      labels:
        app: mcp-learning-system
        tier: ml
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-ml-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: mcp-learning-system
        image: mcp-learning-system:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8001
          protocol: TCP
        - name: metrics
          containerPort: 9091
          protocol: TCP
        env:
        - name: PYTHONPATH
          value: "/app:/app/python_learning:/app/learning_core"
        - name: MCP_ENV
          value: "production"
        - name: MCP_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: database-url
        - name: MCP_REDIS_URL
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: redis-url
        - name: OMP_NUM_THREADS
          value: "4"
        envFrom:
        - configMapRef:
            name: mcp-config
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: models
          mountPath: /app/models
        - name: data
          mountPath: /app/data
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: models
        persistentVolumeClaim:
          claimName: mcp-models-pvc
      - name: data
        persistentVolumeClaim:
          claimName: mcp-data-pvc
      nodeSelector:
        kubernetes.io/os: linux
        workload: ml

---
# Rust High-Performance Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-rust-server
  namespace: mcp-production
  labels:
    app: mcp-rust-server
    tier: compute
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: mcp-rust-server
  template:
    metadata:
      labels:
        app: mcp-rust-server
        tier: compute
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8002"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-compute-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: mcp-rust-server
        image: mcp-rust-server:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8002
          protocol: TCP
        - name: metrics
          containerPort: 9092
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info"
        - name: MCP_ENV
          value: "production"
        - name: MCP_BIND_ADDRESS
          value: "0.0.0.0:8002"
        - name: MCP_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: database-url
        envFrom:
        - configMapRef:
            name: mcp-config
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - /app/mcp-rust-server
            - --health-check
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /app/mcp-rust-server
            - --health-check
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: data
        persistentVolumeClaim:
          claimName: mcp-data-pvc
      nodeSelector:
        kubernetes.io/os: linux
        performance: high

---
# Services for internal communication
apiVersion: v1
kind: Service
metadata:
  name: mcp-typescript-api-service
  namespace: mcp-production
  labels:
    app: mcp-typescript-api
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: mcp-typescript-api

---
apiVersion: v1
kind: Service
metadata:
  name: mcp-learning-system-service
  namespace: mcp-production
  labels:
    app: mcp-learning-system
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8001
    targetPort: 8001
    protocol: TCP
  - name: metrics
    port: 9091
    targetPort: 9091
    protocol: TCP
  selector:
    app: mcp-learning-system

---
apiVersion: v1
kind: Service
metadata:
  name: mcp-rust-server-service
  namespace: mcp-production
  labels:
    app: mcp-rust-server
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8002
    targetPort: 8002
    protocol: TCP
  - name: metrics
    port: 9092
    targetPort: 9092
    protocol: TCP
  selector:
    app: mcp-rust-server

---
# Load Balancer Service for external access
apiVersion: v1
kind: Service
metadata:
  name: mcp-api-loadbalancer
  namespace: mcp-production
  labels:
    app: mcp-api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/cert-id"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
spec:
  type: LoadBalancer
  ports:
  - name: https
    port: 443
    targetPort: 3000
    protocol: TCP
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  selector:
    app: mcp-typescript-api

---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mcp-data-pvc
  namespace: mcp-production
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 50Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mcp-models-pvc
  namespace: mcp-production
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi

---
# Horizontal Pod Autoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mcp-typescript-api-hpa
  namespace: mcp-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mcp-typescript-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Network Policies for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mcp-network-policy
  namespace: mcp-production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: mcp-production
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: mcp-production
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80