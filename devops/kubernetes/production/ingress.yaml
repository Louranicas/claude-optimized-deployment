---
# Primary API Ingress with Advanced Security
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: code-api-ingress
  namespace: code-production
  labels:
    app: code-api
    component: api
    tier: frontend
  annotations:
    # Ingress Controller Configuration
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Load Balancing and Connection Settings
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/upstream-keepalive-connections: "10"
    nginx.ingress.kubernetes.io/upstream-keepalive-requests: "100"
    nginx.ingress.kubernetes.io/upstream-keepalive-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "15"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-next-upstream: "error timeout http_502 http_503 http_504"
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "100"
    nginx.ingress.kubernetes.io/rate-limit-status-code: "429"
    
    # CORS Configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://code.example.com, https://app.code.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS, PATCH"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-API-Key,X-Client-Version"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range,X-Request-ID,X-RateLimit-Limit,X-RateLimit-Remaining,X-RateLimit-Reset"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Request Size and Buffering
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    
    # SSL/TLS Configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: http01
    
    # Security Headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), interest-cohort=()" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:; media-src 'self'; object-src 'none'; frame-ancestors 'self'; base-uri 'self'; form-action 'self';" always;
      
      # Request ID for tracing
      add_header X-Request-ID $request_id always;
      
      # Hide server information
      more_clear_headers "Server";
      
    # Custom configuration for specific paths
    nginx.ingress.kubernetes.io/configuration-snippet: |
      # API versioning
      location ~* ^/v1/(.*) {
        proxy_set_header X-API-Version "v1";
      }
      
      # Health check endpoints (no auth required)
      location ~* ^/(health|metrics|ready|live) {
        proxy_set_header X-Health-Check "true";
        access_log off;
      }
      
      # API documentation
      location ~* ^/(docs|redoc|openapi\.json) {
        proxy_set_header X-Documentation "true";
      }
      
      # WebSocket support
      location ~* ^/ws/(.*) {
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
      }
    
    # Canary Deployment Support
    nginx.ingress.kubernetes.io/canary: "false"
    nginx.ingress.kubernetes.io/canary-weight: "0"
    nginx.ingress.kubernetes.io/canary-by-header: "X-Canary"
    nginx.ingress.kubernetes.io/canary-by-header-value: "always"
    
    # External DNS
    external-dns.alpha.kubernetes.io/hostname: api.code.example.com
    external-dns.alpha.kubernetes.io/ttl: "300"
    
    # Monitoring and Logging
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/access-log-path: "/var/log/nginx/access.log"
    nginx.ingress.kubernetes.io/error-log-path: "/var/log/nginx/error.log"
spec:
  tls:
  - hosts:
    - api.code.example.com
    - code.example.com
    secretName: code-api-tls
  rules:
  - host: api.code.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: code-api
            port:
              number: 80
  - host: code.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: code-api
            port:
              number: 80
      - path: /docs
        pathType: Prefix
        backend:
          service:
            name: code-api
            port:
              number: 80
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: code-api
            port:
              number: 80

---
# Canary Ingress for A/B Testing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: code-api-canary-ingress
  namespace: code-production
  labels:
    app: code-api
    component: api
    tier: frontend
    version: canary
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "0"
    nginx.ingress.kubernetes.io/canary-by-header: "X-Canary"
    nginx.ingress.kubernetes.io/canary-by-header-value: "true"
    nginx.ingress.kubernetes.io/canary-by-cookie: "canary"
    nginx.ingress.kubernetes.io/canary-weight-total: "100"
spec:
  tls:
  - hosts:
    - api.code.example.com
    secretName: code-api-tls
  rules:
  - host: api.code.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: code-api-canary
            port:
              number: 80

---
# Monitoring Ingress for Grafana
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: code-monitoring-ingress
  namespace: code-production
  labels:
    app: code-monitoring
    component: observability
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Authentication (Basic Auth or OAuth)
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: "Monitoring Dashboard"
    
    # IP Whitelisting for additional security
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
spec:
  tls:
  - hosts:
    - monitoring.code.example.com
    - grafana.code.example.com
    secretName: code-monitoring-tls
  rules:
  - host: monitoring.code.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: code-grafana
            port:
              number: 3000
  - host: grafana.code.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: code-grafana
            port:
              number: 3000

---
# Tracing Ingress for Jaeger
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: code-tracing-ingress
  namespace: code-production
  labels:
    app: code-jaeger
    component: tracing
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
spec:
  tls:
  - hosts:
    - tracing.code.example.com
    secretName: code-tracing-tls
  rules:
  - host: tracing.code.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: code-jaeger-query
            port:
              number: 16686

---
# NetworkPolicy for Ingress Traffic Control
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: code-ingress-policy
  namespace: code-production
  labels:
    app: code-api
spec:
  podSelector:
    matchLabels:
      app: code-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: metrics-server
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: code-postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: code-redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443