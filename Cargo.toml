[package]
name = "claude-optimized-deployment"
version = "1.0.0"
edition = "2021"
description = "Claude-Optimized Deployment Engine with Rust acceleration"
license = "MIT"
repository = "https://github.com/Louranicas/claude-optimized-deployment"

[workspace]
members = [
    "rust_core",
    "mcp_learning_system/rust_core",
    "mcp_learning_system/servers/bash_god/rust_src",
    "mcp_learning_system/servers/devops/rust_src",
    "mcp_learning_system/servers/quality/rust_src",
    "mcp_learning_system/servers/development/rust_src",
    "deploy-code-module"
, "mcp_launcher_rust"]

[dependencies]
# Async runtime
tokio = { version = "1.0", features = ["full"] }
async-trait = "0.1"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Error handling
anyhow = "1.0"
thiserror = "1.0"

# Logging
tracing = "0.1"
tracing-subscriber = "0.3"

# HTTP/Network
reqwest = { version = "0.11", features = ["json"] }
hyper = { version = "0.14", features = ["full"] }

# Security
ring = { version = "0.16", optional = true }
uuid = { version = "1.0", features = ["v4"] }

# Performance
rayon = { version = "1.7", optional = true }
dashmap = "5.4"

# Testing utilities
mockall = "0.11"

# Python bindings
pyo3 = { version = "0.20", features = ["extension-module"], optional = true }

[dev-dependencies]
# Testing framework
tokio-test = "0.4"
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.0"
quickcheck = "1.0"
quickcheck_macros = "1.0"

# Test utilities
tempfile = "3.0"
wiremock = "0.5"
serial_test = "2.0"
rstest = "0.18"

# Benchmarking
divan = "0.1"

# Coverage (commented out - install manually if needed)
# tarpaulin = "0.27"

# Security testing (commented out - install manually if needed) 
# cargo-audit = "0.18"

[features]
default = ["python-bindings"]
python-bindings = ["pyo3"]
performance = ["rayon"]
security = ["ring"]
testing = []

# Profile for development
[profile.dev]
opt-level = 0
debug = true
split-debuginfo = "unpacked"
debug-assertions = true
overflow-checks = true
lto = false
panic = "unwind"
incremental = true
codegen-units = 256
rpath = false

# Profile for release - Optimized for Ryzen 7 7800X3D
[profile.release]
opt-level = 3
debug = false
split-debuginfo = "off"
debug-assertions = false
overflow-checks = false
lto = false
panic = "abort"
incremental = false
codegen-units = 4
rpath = false

# Profile for testing
[profile.test]
opt-level = 1
debug = 2
split-debuginfo = "unpacked"
debug-assertions = true
overflow-checks = true
lto = false
panic = "unwind"
incremental = true
codegen-units = 256

# Profile for benchmarking
[profile.bench]
opt-level = 3
debug = false
split-debuginfo = "off"
debug-assertions = false
overflow-checks = false
lto = "thin"
panic = "abort"
incremental = false
codegen-units = 1

# Test configuration (commented out until tests are created)
# [[test]]
# name = "integration_tests"
# path = "tests/integration_tests.rs"

# [[test]]
# name = "security_tests"
# path = "tests/security_tests.rs"

# [[test]]
# name = "performance_tests"
# path = "tests/performance_tests.rs"

# Benchmark configuration (commented out until benchmarks are created)
# [[bench]]
# name = "mcp_benchmarks"
# harness = false
# required-features = ["performance"]

# [[bench]]
# name = "memory_benchmarks"
# harness = false
# required-features = ["performance"]

# Binary targets (commented out until binaries are created)
# [[bin]]
# name = "mcp_server"
# path = "src/bin/mcp_server.rs"
# required-features = ["python-bindings"]

# Example targets (commented out until examples are created)
# [[example]]
# name = "basic_mcp_server"
# path = "examples/basic_mcp_server.rs"

# [[example]]
# name = "performance_demo"
# path = "examples/performance_demo.rs"
# required-features = ["performance"]

# Build configuration
[build-dependencies]
cc = "1.0"

# Documentation
[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

# Security audit configuration
[package.metadata.audit]
db-path = "~/.cargo/advisory-db"
db-urls = ["https://github.com/RustSec/advisory-db"]
deny = ["unmaintained", "unsound", "yanked"]
warn = ["notice"]

# Testing configuration
[package.metadata.testing]
timeout = 300
parallel = true
coverage = true
mutation-testing = false

# Clippy configuration
[package.metadata.clippy]
msrv = "1.70"

[lints.rust]
unsafe_code = "forbid"
missing_docs = "warn"
unreachable_pub = "warn"

[lints.clippy]
all = "warn"
pedantic = "warn"
nursery = "warn"
cargo = "warn"
# Allow some pedantic lints that are too restrictive
module_name_repetitions = "allow"
missing_errors_doc = "allow"
missing_panics_doc = "allow"
