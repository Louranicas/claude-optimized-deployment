#!/usr/bin/env python3
"""
Pre-commit hook optimized for Claude Code.
Validates commits before they're created.
"""

import sys
import re
import subprocess
from pathlib import Path

# ANSI colors
RED = '\033[0;31m'
GREEN = '\033[0;32m'
YELLOW = '\033[1;33m'
NC = '\033[0m'  # No Color

def check_commit_message():
    """Validate commit message format."""
    # Get the commit message
    commit_msg_file = sys.argv[1]
    with open(commit_msg_file, 'r') as f:
        commit_msg = f.read()
    
    # Skip if it's a merge commit
    if commit_msg.startswith('Merge'):
        return True
    
    # Conventional commit pattern
    pattern = r'^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,50}'
    
    first_line = commit_msg.split('\n')[0]
    if not re.match(pattern, first_line):
        print(f"{RED}‚ùå Invalid commit message format!{NC}")
        print(f"{YELLOW}Expected: <type>(<scope>): <subject>{NC}")
        print(f"{YELLOW}Example: feat(api): add user authentication{NC}")
        return False
    
    return True

def check_file_size():
    """Ensure no large files are committed."""
    MAX_SIZE = 10 * 1024 * 1024  # 10MB
    
    # Get list of staged files
    result = subprocess.run(['git', 'diff', '--cached', '--name-only'], 
                          capture_output=True, text=True)
    files = result.stdout.strip().split('\n')
    
    large_files = []
    for file in files:
        if file and Path(file).exists():
            size = Path(file).stat().st_size
            if size > MAX_SIZE:
                large_files.append((file, size))
    
    if large_files:
        print(f"{RED}‚ùå Large files detected!{NC}")
        for file, size in large_files:
            print(f"  {file}: {size / 1024 / 1024:.1f}MB")
        print(f"{YELLOW}Consider using Git LFS for large files{NC}")
        return False
    
    return True

def check_sensitive_data():
    """Check for potential sensitive data."""
    patterns = [
        (r'(?i)(api[_-]?key|apikey)', 'API key'),
        (r'(?i)(secret[_-]?key|secretkey)', 'Secret key'),
        (r'(?i)(password|passwd|pwd)', 'Password'),
        (r'(?i)(token)', 'Token'),
        (r'(?i)(private[_-]?key)', 'Private key'),
        (r'[a-zA-Z0-9]{32,}', 'Potential secret (long string)'),
    ]
    
    # Get diff of staged changes
    result = subprocess.run(['git', 'diff', '--cached'], 
                          capture_output=True, text=True)
    diff = result.stdout
    
    found_issues = []
    for pattern, desc in patterns:
        if re.search(pattern, diff):
            # Check if it's in a test file or example
            if not any(x in diff for x in ['.test.', '_test.', 'example', 'sample']):
                found_issues.append(desc)
    
    if found_issues:
        print(f"{YELLOW}‚ö†Ô∏è  Potential sensitive data detected:{NC}")
        for issue in set(found_issues):
            print(f"  - {issue}")
        print(f"{YELLOW}Please review your changes carefully{NC}")
        # Warning only, don't block
    
    return True

def run_code_quality_checks():
    """Run quick code quality checks."""
    print(f"{GREEN}Running code quality checks...{NC}")
    
    # Check Python syntax
    result = subprocess.run(['python', '-m', 'py_compile', '*.py'], 
                          capture_output=True, text=True)
    if result.returncode != 0:
        print(f"{RED}‚ùå Python syntax errors found!{NC}")
        return False
    
    # Check for debugging statements
    result = subprocess.run(['git', 'diff', '--cached'], 
                          capture_output=True, text=True)
    if any(debug in result.stdout for debug in ['print(', 'console.log', 'debugger']):
        print(f"{YELLOW}‚ö†Ô∏è  Debug statements detected - consider removing{NC}")
    
    return True

def main():
    """Main pre-commit checks."""
    print(f"{GREEN}üîç Running Claude Code pre-commit checks...{NC}")
    
    checks = [
        ("Commit message", check_commit_message),
        ("File size", check_file_size),
        ("Sensitive data", check_sensitive_data),
        ("Code quality", run_code_quality_checks),
    ]
    
    all_passed = True
    for name, check in checks:
        print(f"Checking {name}...", end='')
        if check():
            print(f" {GREEN}‚úì{NC}")
        else:
            print(f" {RED}‚úó{NC}")
            all_passed = False
    
    if not all_passed:
        print(f"\n{RED}Pre-commit checks failed!{NC}")
        print(f"{YELLOW}Fix the issues above and try again.{NC}")
        sys.exit(1)
    
    print(f"\n{GREEN}‚úÖ All checks passed!{NC}")
    sys.exit(0)

if __name__ == '__main__':
    main()
