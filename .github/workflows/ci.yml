name: CI

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  RUST_VERSION: 'stable'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "rust_core -> target"
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install maturin
        
    - name: Build Rust extensions
      run: |
        cd rust_core
        maturin develop
        
    - name: Run Python tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml
        
    - name: Run Rust tests
      run: |
        cd rust_core
        cargo test --all-features
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt, clippy
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Run Python linters
      run: |
        make lint
        make format-check
        
    - name: Run Rust linters
      run: |
        cd rust_core
        cargo fmt -- --check
        cargo clippy -- -D warnings
        
    - name: Type checking
      run: |
        make type-check

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit
        
    - name: Run Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
        
    - name: Run Safety
      run: |
        safety check --json > safety-report.json || true
        
    - name: Run pip-audit
      run: |
        pip-audit --desc > pip-audit-report.txt || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.txt

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build maturin
        
    - name: Build Rust package
      run: |
        cd rust_core
        maturin build --release
        
    - name: Build Python package
      run: |
        python -m build
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: |
          dist/
          rust_core/target/wheels/