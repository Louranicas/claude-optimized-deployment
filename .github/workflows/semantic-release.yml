name: Semantic Release

on:
  push:
    branches:
      - main
      - beta
      - alpha

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install semantic-release
      run: |
        npm install -g \
          semantic-release \
          @semantic-release/git \
          @semantic-release/github \
          @semantic-release/changelog \
          @semantic-release/commit-analyzer \
          @semantic-release/release-notes-generator \
          conventional-changelog-conventionalcommits
    
    - name: Create Release Config
      run: |
        cat > .releaserc.json << 'EOF'
        {
          "branches": [
            "main",
            {
              "name": "beta",
              "prerelease": true
            },
            {
              "name": "alpha",
              "prerelease": true
            }
          ],
          "plugins": [
            [
              "@semantic-release/commit-analyzer",
              {
                "preset": "conventionalcommits",
                "releaseRules": [
                  {"type": "feat", "release": "minor"},
                  {"type": "fix", "release": "patch"},
                  {"type": "perf", "release": "patch"},
                  {"type": "docs", "scope": "README", "release": "patch"},
                  {"breaking": true, "release": "major"},
                  {"revert": true, "release": "patch"}
                ]
              }
            ],
            [
              "@semantic-release/release-notes-generator",
              {
                "preset": "conventionalcommits",
                "presetConfig": {
                  "types": [
                    {"type": "feat", "section": "✨ Features", "hidden": false},
                    {"type": "fix", "section": "🐛 Bug Fixes", "hidden": false},
                    {"type": "perf", "section": "⚡ Performance", "hidden": false},
                    {"type": "docs", "section": "📚 Documentation", "hidden": false},
                    {"type": "style", "section": "🎨 Styling", "hidden": false},
                    {"type": "refactor", "section": "♻️ Refactoring", "hidden": false},
                    {"type": "test", "section": "✅ Tests", "hidden": false},
                    {"type": "build", "section": "🏗️ Build System", "hidden": false},
                    {"type": "ci", "section": "🤖 CI/CD", "hidden": false},
                    {"type": "chore", "section": "🔧 Maintenance", "hidden": false},
                    {"type": "revert", "section": "⏪ Reverts", "hidden": false}
                  ]
                }
              }
            ],
            [
              "@semantic-release/changelog",
              {
                "changelogFile": "CHANGELOG.md"
              }
            ],
            [
              "@semantic-release/git",
              {
                "assets": ["CHANGELOG.md", "package.json"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }
            ],
            [
              "@semantic-release/github",
              {
                "successComment": "🎉 This ${issue.pull_request ? 'PR is included' : 'issue has been resolved'} in version ${nextRelease.version}",
                "labels": ["released"],
                "releasedLabels": ["released on @${nextRelease.channel}"]
              }
            ]
          ]
        }
        EOF
    
    - name: Run Semantic Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npx semantic-release
    
    - name: Update Claude Code Context
      if: steps.release.outputs.new_release_published == 'true'
      run: |
        # Update version in Claude Code config
        VERSION=${{ steps.release.outputs.new_release_version }}
        
        # Update Python version
        sed -i "s/__version__ = .*/__version__ = \"$VERSION\"/" src/__init__.py
        
        # Create PR for version updates
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git checkout -b update-version-$VERSION
        git add .
        git commit -m "chore: update version to $VERSION"
        git push origin update-version-$VERSION
        
        # Create PR
        gh pr create \
          --title "chore: update version to $VERSION" \
          --body "Automated version update after release" \
          --base main \
          --label "automated"
