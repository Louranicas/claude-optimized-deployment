name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - performance
          - security
      deploy_environment:
        description: 'Deployment environment'
        required: false
        default: 'none'
        type: choice
        options:
          - none
          - development
          - staging

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  RUST_VERSION: 'stable'
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: '-C target-cpu=native'
  # Optimize for 16-thread CPU
  CARGO_BUILD_JOBS: 16
  MAKEFLAGS: '-j16'
  PYTEST_XDIST_WORKER_COUNT: 16

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pre-flight checks
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.changes.outputs.should_build }}
      should_test: ${{ steps.changes.outputs.should_test }}
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
      version: ${{ steps.version.outputs.version }}
      build_matrix: ${{ steps.matrix.outputs.build_matrix }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        id: changes
        run: |
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "should_test=true" >> $GITHUB_OUTPUT
          echo "should_deploy=${{ github.ref == 'refs/heads/main' || github.event.inputs.deploy_environment != 'none' }}" >> $GITHUB_OUTPUT
      
      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION=$(git describe --tags --always --dirty)
          else
            VERSION="${{ github.sha }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Generate build matrix
        id: matrix
        run: |
          if [[ "${{ github.event.inputs.build_type }}" == "performance" ]]; then
            echo 'build_matrix={"python-version":["3.11"],"os":["ubuntu-latest"],"rust-target":["x86_64-unknown-linux-gnu"]}' >> $GITHUB_OUTPUT
          else
            echo 'build_matrix={"python-version":["3.10","3.11","3.12"],"os":["ubuntu-latest"],"rust-target":["x86_64-unknown-linux-gnu"]}' >> $GITHUB_OUTPUT
          fi

  # Parallel testing suite
  test:
    name: Test Suite (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: preflight
    if: needs.preflight.outputs.should_test == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.preflight.outputs.build_matrix) }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          targets: ${{ matrix.rust-target }}
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "rust_core -> target"
          key: "${{ matrix.rust-target }}-${{ hashFiles('**/Cargo.lock') }}"
      
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ matrix.python-version }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install maturin pytest-xdist pytest-benchmark
      
      - name: Install Node.js dependencies
        run: |
          npm ci --prefer-offline --no-audit
      
      - name: Build Rust extensions (Optimized)
        run: |
          cd rust_core
          export RUSTFLAGS="$RUSTFLAGS -C link-arg=-fuse-ld=lld"
          maturin develop --release --strip
      
      - name: Run Python tests (Parallel)
        run: |
          pytest tests/ -v \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            -n ${{ env.PYTEST_XDIST_WORKER_COUNT }} \
            --benchmark-skip \
            --timeout=300
      
      - name: Run Rust tests (Parallel)
        run: |
          cd rust_core
          cargo test --all-features --release --jobs ${{ env.CARGO_BUILD_JOBS }}
      
      - name: Run Node.js tests
        run: |
          npm test -- --maxWorkers=${{ env.PYTEST_XDIST_WORKER_COUNT }}
      
      - name: Generate test report
        if: always()
        run: |
          echo "## Test Results for Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Python Tests | ${{ job.steps.run-python-tests.outcome || 'Unknown' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rust Tests | ${{ job.steps.run-rust-tests.outcome || 'Unknown' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Node.js Tests | ${{ job.steps.run-nodejs-tests.outcome || 'Unknown' }} |" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            rust_core/target/debug/
            test-results.xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Code quality and security checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: preflight
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy, rust-src
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          npm ci --prefer-offline --no-audit
      
      - name: Python code formatting
        run: |
          black --check --diff src/ tests/
          isort --check-only --diff src/ tests/
      
      - name: Python linting
        run: |
          ruff check src/ tests/ --format=github
          pylint src/ --output-format=colorized
      
      - name: Python type checking
        run: |
          mypy src/ --show-error-codes --pretty
      
      - name: Rust formatting
        run: |
          cd rust_core
          cargo fmt -- --check
      
      - name: Rust linting
        run: |
          cd rust_core
          cargo clippy --all-targets --all-features -- -D warnings -D clippy::all
      
      - name: Node.js linting
        run: |
          npm run lint -- --format=unix
      
      - name: Documentation check
        run: |
          python -m doctest src/**/*.py
          cargo doc --no-deps --document-private-items
      
      - name: License compliance check
        uses: fossa-contrib/fossa-action@v2
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

  # Advanced security scanning
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: preflight
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit semgrep
          npm install -g audit-ci snyk
      
      - name: Python security scan (Bandit)
        run: |
          bandit -r src/ -f json -o bandit-report.json -ll
          bandit -r src/ -f txt -o bandit-report.txt -ll
      
      - name: Dependency vulnerability scan
        run: |
          safety check --json --output safety-report.json || true
          pip-audit --desc --format json --output pip-audit-report.json || true
      
      - name: Node.js security audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          audit-ci --report-type json > audit-ci-report.json || true
      
      - name: Static analysis (Semgrep)
        run: |
          semgrep --config=auto --json --output=semgrep-report.json src/ || true
      
      - name: Secrets detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            *-report.json
            *-report.txt

  # Optimized build pipeline
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [preflight, test, quality]
    if: needs.preflight.outputs.should_build == 'true'
    outputs:
      docker_image: ${{ steps.docker.outputs.image }}
      version: ${{ needs.preflight.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: x86_64-unknown-linux-gnu
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "rust_core -> target"
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install build maturin cibuildwheel
          npm ci --prefer-offline --no-audit
      
      - name: Build Rust package (Optimized)
        run: |
          cd rust_core
          export RUSTFLAGS="$RUSTFLAGS -C target-cpu=native -C link-arg=-fuse-ld=lld"
          maturin build --release --strip --jobs ${{ env.CARGO_BUILD_JOBS }}
      
      - name: Build Python package
        run: |
          python -m build --wheel --sdist
      
      - name: Build Node.js package
        run: |
          npm run build
          npm pack
      
      - name: Build Docker image
        id: docker
        run: |
          IMAGE_TAG="ghcr.io/${{ github.repository }}:${{ needs.preflight.outputs.version }}"
          docker buildx build \
            --platform linux/amd64 \
            --tag "${IMAGE_TAG}" \
            --tag "ghcr.io/${{ github.repository }}:latest" \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg PYTHON_VERSION=${{ env.PYTHON_VERSION }} \
            --build-arg NODE_VERSION=${{ env.NODE_VERSION }} \
            --load \
            .
          echo "image=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      
      - name: Test Docker image
        run: |
          docker run --rm ${{ steps.docker.outputs.image }} --version
      
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.docker.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            rust_core/target/wheels/
            *.tgz
            trivy-results.sarif
      
      - name: Login to GitHub Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker push ${{ steps.docker.outputs.image }}
          docker push "ghcr.io/${{ github.repository }}:latest"

  # Performance benchmarking
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [preflight, build]
    if: github.event.inputs.build_type == 'performance' || github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: Install package
        run: |
          pip install dist/*.whl
          pip install pytest-benchmark
      
      - name: Run benchmarks
        run: |
          pytest tests/benchmarks/ \
            --benchmark-only \
            --benchmark-json=benchmark-results.json \
            --benchmark-compare-fail=min:5% \
            --benchmark-columns=min,max,mean,stddev,rounds,iterations
      
      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.json

  # Deployment pipeline
  deploy:
    name: Deploy to ${{ github.event.inputs.deploy_environment || 'development' }}
    runs-on: ubuntu-latest
    needs: [preflight, test, quality, security, build]
    if: needs.preflight.outputs.should_deploy == 'true'
    environment: ${{ github.event.inputs.deploy_environment || 'development' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: artifacts/
      
      - name: Deploy to environment
        run: |
          echo "Deploying version ${{ needs.preflight.outputs.version }} to ${{ github.event.inputs.deploy_environment || 'development' }}"
          echo "Image: ${{ needs.build.outputs.docker_image }}"
          # Add actual deployment logic here
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test logic here
      
      - name: Generate deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ github.event.inputs.deploy_environment || 'development' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ needs.preflight.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ needs.build.outputs.docker_image }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Success" >> $GITHUB_STEP_SUMMARY

  # Pipeline monitoring and reporting
  monitor:
    name: Pipeline Monitoring
    runs-on: ubuntu-latest
    needs: [preflight, test, quality, security, build]
    if: always()
    
    steps:
      - name: Collect pipeline metrics
        run: |
          echo "## Pipeline Execution Report" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Pre-flight | ${{ needs.preflight.result }} | N/A |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} | N/A |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality | ${{ needs.quality.result }} | N/A |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} | N/A |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} | N/A |" >> $GITHUB_STEP_SUMMARY
      
      - name: Send notifications
        if: failure()
        run: |
          echo "Pipeline failed - notifications would be sent here"
          # Add notification logic (Slack, email, etc.)