# Database Configuration for Claude Optimized Deployment Engine
# Copy this file to .env and configure for your environment

# =============================================================================
# PRIMARY DATABASE CONFIGURATION
# =============================================================================

# Database URL - Choose one based on your setup
# For Development (SQLite)
DATABASE_URL=sqlite+aiosqlite:///./code_deployment.db

# For Production (PostgreSQL - Recommended)
#DATABASE_URL=postgresql+asyncpg://username:password@localhost:5432/code_deployment

# For Docker PostgreSQL
#DATABASE_URL=postgresql+asyncpg://postgres:password@db:5432/code_deployment

# =============================================================================
# CONNECTION POOLING SETTINGS
# =============================================================================

# Connection pool size (PostgreSQL only)
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=10
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=3600
DB_POOL_MIN_SIZE=5
DB_MAX_QUERIES=50000
DB_CONNECTION_LIFETIME=300

# =============================================================================
# DEBUGGING & MONITORING
# =============================================================================

# Enable SQL query logging (use sparingly in production)
DB_ECHO=false

# Enable connection pool logging
DB_ECHO_POOL=false

# =============================================================================
# BACKUP & ARCHIVAL SETTINGS
# =============================================================================

# Backup directory
BACKUP_DIR=./backups

# Archive directory
ARCHIVE_DIR=./archives

# Data retention periods (in days)
AUDIT_RETENTION_DAYS=90
METRICS_RETENTION_DAYS=30
QUERY_HISTORY_RETENTION_DAYS=60

# =============================================================================
# MIGRATION SETTINGS
# =============================================================================

# Alembic configuration
ALEMBIC_CONFIG=src/database/alembic.ini

# Auto-create tables on startup (development only)
AUTO_CREATE_TABLES=false

# Run migrations on startup (development only)
AUTO_MIGRATE=false

# =============================================================================
# ENVIRONMENT-SPECIFIC SETTINGS
# =============================================================================

# Environment (development, staging, production)
ENVIRONMENT=development

# Enable/disable database features
ENABLE_QUERY_LOGGING=true
ENABLE_PERFORMANCE_MONITORING=true
ENABLE_AUTO_ARCHIVAL=false

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# Enable SSL for database connections
DB_SSL_MODE=prefer

# SSL certificate paths (if using SSL)
#DB_SSL_CERT=/path/to/client-cert.pem
#DB_SSL_KEY=/path/to/client-key.pem
#DB_SSL_CA=/path/to/ca-cert.pem

# =============================================================================
# TORTOISE ORM SETTINGS (if using Tortoise)
# =============================================================================

# Tortoise configuration
TORTOISE_DB_URL=sqlite://./tortoise_code_deployment.db
#TORTOISE_DB_URL=postgres://username:password@localhost:5432/tortoise_code_deployment

# =============================================================================
# REDIS CONFIGURATION (for caching and sessions)
# =============================================================================

# Redis URL for caching database queries
REDIS_URL=redis://localhost:6379/0

# Cache TTL in seconds
CACHE_TTL=300

# =============================================================================
# MONITORING & ALERTING
# =============================================================================

# Database monitoring
MONITOR_DB_PERFORMANCE=true
MONITOR_CONNECTION_POOL=true
MONITOR_QUERY_PERFORMANCE=true

# Alert thresholds
DB_CONNECTION_THRESHOLD=80
DB_QUERY_TIME_THRESHOLD=1000
DB_ERROR_RATE_THRESHOLD=5

# =============================================================================
# EXAMPLE CONFIGURATIONS FOR DIFFERENT ENVIRONMENTS
# =============================================================================

# Development (SQLite)
#DATABASE_URL=sqlite+aiosqlite:///./dev_code_deployment.db
#DB_ECHO=true
#AUTO_CREATE_TABLES=true

# Testing (In-memory SQLite)
#DATABASE_URL=sqlite+aiosqlite:///:memory:
#DB_ECHO=false

# Staging (PostgreSQL with connection pooling)
#DATABASE_URL=postgresql+asyncpg://staging_user:staging_pass@staging-db:5432/code_deployment_staging
#DB_POOL_SIZE=10
#DB_MAX_OVERFLOW=5

# Production (PostgreSQL with SSL)
#DATABASE_URL=postgresql+asyncpg://prod_user:prod_pass@prod-db:5432/code_deployment_prod
#DB_POOL_SIZE=50
#DB_MAX_OVERFLOW=20
#DB_SSL_MODE=require

# =============================================================================
# DOCKER COMPOSE CONFIGURATION
# =============================================================================

# For use with docker-compose.yml
#DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
#POSTGRES_USER=postgres
#POSTGRES_PASSWORD=secure_password_here
#POSTGRES_DB=code_deployment

# =============================================================================
# CLOUD DATABASE CONFIGURATIONS
# =============================================================================

# AWS RDS PostgreSQL
#DATABASE_URL=postgresql+asyncpg://username:password@your-rds-instance.region.rds.amazonaws.com:5432/code_deployment

# Google Cloud SQL PostgreSQL
#DATABASE_URL=postgresql+asyncpg://username:password@your-project:region:instance/code_deployment

# Azure Database for PostgreSQL
#DATABASE_URL=postgresql+asyncpg://username:password@your-server.postgres.database.azure.com:5432/code_deployment

# DigitalOcean Managed PostgreSQL
#DATABASE_URL=postgresql+asyncpg://username:password@your-cluster.db.ondigitalocean.com:25060/code_deployment?sslmode=require

# =============================================================================
# NOTES
# =============================================================================

# 1. Always use strong passwords in production
# 2. Enable SSL for production database connections
# 3. Configure appropriate connection pool sizes based on your workload
# 4. Set up regular backups using the included backup utilities
# 5. Monitor database performance and adjust settings as needed
# 6. Use environment-specific configuration files
# 7. Never commit real credentials to version control