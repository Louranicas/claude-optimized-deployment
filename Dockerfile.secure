# Secure Dockerfile for Claude Optimized Deployment
FROM python:3.12-slim-bullseye

# Security: Create non-root user first
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install system dependencies as root
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    git \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Rust for performance modules
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Create app directory with proper permissions
RUN mkdir -p /app && chown -R appuser:appuser /app
WORKDIR /app

# Copy requirements first for better caching
COPY --chown=appuser:appuser requirements.txt .
COPY --chown=appuser:appuser pyproject.toml .

# Install Python dependencies as root for system-wide access
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY --chown=appuser:appuser . .

# Build Rust extensions if needed
RUN if [ -d "rust_core" ]; then \
        cd rust_core && \
        cargo build --release && \
        cd .. ; \
    fi

# Security: Switch to non-root user
USER appuser

# Security: Use non-root port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/health')" || exit 1

# Security: Set read-only root filesystem (writable volumes should be mounted)
# Note: Uncomment after ensuring app doesn't write to filesystem
# RUN chmod -R a-w /app

# Run the application
CMD ["python", "-m", "uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]