version: '3.8'

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-prometheus
    user: "1000:1000"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      # Bind to localhost only for security - prevents external access
      - "127.0.0.1:9090:9090"
    environment:
      - NODE_OPTIONS=--max-old-space-size=6144 --gc-interval=100 --optimize-for-size
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./src/monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: claude-grafana
    user: "1000:1000"
    ports:
      # Bind to localhost only for security - prevents external access
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - NODE_OPTIONS=--max-old-space-size=6144 --gc-interval=100 --optimize-for-size
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./src/monitoring/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: claude-jaeger
    user: "1000:1000"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      # Bind all ports to localhost only for security - prevents external access
      - "127.0.0.1:5775:5775/udp"   # Zipkin compact thrift
      - "127.0.0.1:6831:6831/udp"   # Jaeger compact thrift
      - "127.0.0.1:6832:6832/udp"   # Jaeger binary thrift
      - "127.0.0.1:5778:5778"       # Config HTTP
      - "127.0.0.1:16686:16686"     # Jaeger UI
      - "127.0.0.1:14268:14268"     # Jaeger collector HTTP
      - "127.0.0.1:14250:14250"     # Jaeger gRPC
      - "127.0.0.1:9411:9411"       # Zipkin compatible endpoint
      - "127.0.0.1:4317:4317"       # OTLP gRPC
      - "127.0.0.1:4318:4318"       # OTLP HTTP
    networks:
      - monitoring
    restart: unless-stopped

  # AlertManager for alert routing
  alertmanager:
    image: prom/alertmanager:latest
    container_name: claude-alertmanager
    user: "1000:1000"
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    ports:
      # Bind to localhost only for security - prevents external access
      - "127.0.0.1:9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring
    restart: unless-stopped

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: claude-node-exporter
    user: "65534:65534"  # nobody user for node-exporter
    security_opt:
      - no-new-privileges:true
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "127.0.0.1:9100:9100"  # Bind to localhost only for security
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    networks:
      - monitoring
    restart: unless-stopped

  # Pushgateway for batch job metrics
  pushgateway:
    image: prom/pushgateway:latest
    container_name: claude-pushgateway
    user: "1000:1000"
    ports:
      # Bind to localhost only for security - prevents external access
      - "127.0.0.1:9091:9091"
    networks:
      - monitoring
    restart: unless-stopped

  # cAdvisor for container metrics (with security improvements)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: claude-cadvisor
    user: "1000:1000"
    cap_add:
      - SYS_ADMIN
    cap_drop:
      - ALL
    ports:
      - "127.0.0.1:8080:8080"  # Bind to localhost only for security
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - monitoring
    restart: unless-stopped

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data: