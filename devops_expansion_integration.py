
# Integration code for bash_god_mcp_server.py
# Add this to the _initialize_command_library method after line 438

# EXPANDED DEVOPS PIPELINE COMMANDS (125+ commands)
devops_expanded_commands = [
    {
        "id": "devops_docker_build_cache",
        "name": "Docker Build with Cache Mount",
        "description": "Build Docker images with BuildKit cache mounts for faster builds",
        "command_template": "DOCKER_BUILDKIT=1 docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from {registry}/{image}:cache --tag {registry}/{image}:{tag} .",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'registry', 'type': 'string', 'default': 'localhost:5000'}, {'name': 'image', 'type': 'string', 'required': True}, {'name': 'tag', 'type': 'string', 'default': 'latest'}],
        "examples": ['DOCKER_BUILDKIT=1 docker build --cache-from myregistry/app:cache .'],
        "performance_hints": ['Use BuildKit for better caching', 'Enable inline cache'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": True,
        "parallel_execution": True,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_multi_stage_parallel",
        "name": "Parallel Multi-Stage Docker Build",
        "description": "Build multi-stage Docker images with parallel stage execution",
        "command_template": "DOCKER_BUILDKIT=1 docker build --parallel --target {stage} -t {image}:{tag} .",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'stage', 'type': 'string', 'default': 'production'}, {'name': 'image', 'type': 'string', 'required': True}, {'name': 'tag', 'type': 'string', 'default': 'latest'}],
        "examples": ['DOCKER_BUILDKIT=1 docker build --parallel --target production -t app:v1.0 .'],
        "performance_hints": ['Use --parallel for concurrent stage builds', 'Optimize Dockerfile stage order'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_layer_analysis",
        "name": "Docker Layer Size Analysis",
        "description": "Analyze Docker image layers for optimization opportunities",
        "command_template": "docker history --no-trunc --format 'table {{.CreatedBy}}	{{.Size}}' {image} | sort -k2 -hr",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.SAFE,
        "parameters": [{'name': 'image', 'type': 'string', 'required': True}],
        "examples": ['docker history --no-trunc myapp:latest | sort -k2 -hr'],
        "performance_hints": ['Identify large layers', 'Optimize layer ordering'],
        "dependencies": ['docker', 'sort'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_prune_system",
        "name": "Docker System Cleanup with Filters",
        "description": "Clean up Docker system with advanced filtering options",
        "command_template": "docker system prune -af --filter 'until={hours}h' --filter 'label!=keep' && docker volume prune -f --filter 'label!=persist'",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'hours', 'type': 'int', 'default': 24}],
        "examples": ["docker system prune -af --filter 'until=48h'"],
        "performance_hints": ['Schedule regular cleanup', 'Use filters to preserve important resources'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_registry_sync",
        "name": "Docker Registry Synchronization",
        "description": "Sync Docker images between registries with parallel transfers",
        "command_template": "skopeo sync --src docker --dest docker {source_registry} {dest_registry} --parallel {cores}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'source_registry', 'type': 'string', 'required': True}, {'name': 'dest_registry', 'type': 'string', 'required': True}, {'name': 'cores', 'type': 'int', 'default': 8}],
        "examples": ['skopeo sync --src docker --dest docker registry.source.com registry.dest.com --parallel 8'],
        "performance_hints": ['Use parallel transfers', 'Batch sync operations'],
        "dependencies": ['skopeo'],
        "amd_ryzen_optimized": True,
        "parallel_execution": True,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_container_security_scan",
        "name": "Container Security Vulnerability Scan",
        "description": "Scan container images for security vulnerabilities using Trivy",
        "command_template": "trivy image --severity {severity} --exit-code {exit_code} --format {format} {image}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.SAFE,
        "parameters": [{'name': 'severity', 'type': 'string', 'default': 'HIGH,CRITICAL'}, {'name': 'exit_code', 'type': 'int', 'default': 1}, {'name': 'format', 'type': 'string', 'default': 'json'}, {'name': 'image', 'type': 'string', 'required': True}],
        "examples": ['trivy image --severity CRITICAL --exit-code 1 myapp:latest'],
        "performance_hints": ['Cache vulnerability database', 'Scan in CI pipeline'],
        "dependencies": ['trivy'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_compose_parallel",
        "name": "Docker Compose Parallel Operations",
        "description": "Execute Docker Compose operations with parallel container handling",
        "command_template": "docker-compose -f {compose_file} up -d --scale {service}={replicas} --parallel {cores}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'compose_file', 'type': 'string', 'default': 'docker-compose.yml'}, {'name': 'service', 'type': 'string', 'required': True}, {'name': 'replicas', 'type': 'int', 'default': 3}, {'name': 'cores', 'type': 'int', 'default': 16}],
        "examples": ['docker-compose up -d --scale web=5 --parallel 16'],
        "performance_hints": ['Use parallel flag for faster startup', 'Optimize service dependencies'],
        "dependencies": ['docker-compose'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 0
    },
    {
        "id": "devops_buildah_container",
        "name": "Buildah Rootless Container Build",
        "description": "Build containers without Docker daemon using Buildah",
        "command_template": "buildah bud --layers --cache-ttl {cache_ttl}h --jobs {jobs} -t {image}:{tag} .",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.SAFE,
        "parameters": [{'name': 'cache_ttl', 'type': 'int', 'default': 168}, {'name': 'jobs', 'type': 'int', 'default': 16}, {'name': 'image', 'type': 'string', 'required': True}, {'name': 'tag', 'type': 'string', 'default': 'latest'}],
        "examples": ['buildah bud --layers --jobs 16 -t myapp:v1.0 .'],
        "performance_hints": ['Use --jobs for parallel processing', 'Enable layer caching'],
        "dependencies": ['buildah'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 0
    },
    {
        "id": "devops_podman_pod_create",
        "name": "Podman Pod Creation with Resource Limits",
        "description": "Create Podman pods with CPU and memory limits",
        "command_template": "podman pod create --name {pod_name} --cpus {cpus} --memory {memory} --network {network}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'pod_name', 'type': 'string', 'required': True}, {'name': 'cpus', 'type': 'float', 'default': 2.0}, {'name': 'memory', 'type': 'string', 'default': '2g'}, {'name': 'network', 'type': 'string', 'default': 'bridge'}],
        "examples": ['podman pod create --name webapp --cpus 4 --memory 4g'],
        "performance_hints": ['Set appropriate resource limits', 'Use host networking for performance'],
        "dependencies": ['podman'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_container_benchmark",
        "name": "Container Performance Benchmark",
        "description": "Benchmark container performance using sysbench",
        "command_template": "docker run --rm --cpus {cpus} {image} sysbench --threads={threads} --time={time} cpu run",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.SAFE,
        "parameters": [{'name': 'cpus', 'type': 'float', 'default': 4.0}, {'name': 'image', 'type': 'string', 'required': True}, {'name': 'threads', 'type': 'int', 'default': 16}, {'name': 'time', 'type': 'int', 'default': 60}],
        "examples": ['docker run --rm --cpus 4 ubuntu sysbench --threads=16 cpu run'],
        "performance_hints": ['Test with different CPU limits', 'Compare container vs native performance'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_healthcheck",
        "name": "Docker Health Check Configuration",
        "description": "Configure and monitor Docker container health checks",
        "command_template": "docker run -d --health-cmd='{health_cmd}' --health-interval={interval}s --health-retries={retries} {image}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'health_cmd', 'type': 'string', 'default': 'curl -f http://localhost/ || exit 1'}, {'name': 'interval', 'type': 'int', 'default': 30}, {'name': 'retries', 'type': 'int', 'default': 3}, {'name': 'image', 'type': 'string', 'required': True}],
        "examples": ["docker run -d --health-cmd='curl -f http://localhost:8080/health' myapp"],
        "performance_hints": ['Set appropriate intervals', 'Use lightweight health checks'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_network_optimize",
        "name": "Docker Network Performance Optimization",
        "description": "Create optimized Docker networks with custom MTU and driver options",
        "command_template": "docker network create --driver {driver} --opt mtu={mtu} --opt com.docker.network.driver.mtu={mtu} {network_name}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'driver', 'type': 'string', 'default': 'bridge'}, {'name': 'mtu', 'type': 'int', 'default': 9000}, {'name': 'network_name', 'type': 'string', 'required': True}],
        "examples": ['docker network create --driver bridge --opt mtu=9000 fast-network'],
        "performance_hints": ['Use jumbo frames for internal networks', 'Consider host networking for performance'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_resource_stats",
        "name": "Real-time Container Resource Monitoring",
        "description": "Monitor container resource usage with custom formatting",
        "command_template": "docker stats --format 'table {{.Container}}	{{.CPUPerc}}	{{.MemUsage}}	{{.NetIO}}	{{.BlockIO}}' --no-stream",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.SAFE,
        "parameters": [],
        "examples": ["docker stats --format 'table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}'"],
        "performance_hints": ['Use --no-stream for snapshots', 'Parse output for alerting'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_log_rotation",
        "name": "Docker Log Rotation Configuration",
        "description": "Configure Docker log rotation with size and file limits",
        "command_template": "docker run -d --log-driver json-file --log-opt max-size={max_size} --log-opt max-file={max_files} {image}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'max_size', 'type': 'string', 'default': '100m'}, {'name': 'max_files', 'type': 'int', 'default': 5}, {'name': 'image', 'type': 'string', 'required': True}],
        "examples": ['docker run -d --log-opt max-size=50m --log-opt max-file=3 nginx'],
        "performance_hints": ['Prevent disk space issues', 'Use appropriate retention policies'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_export_import",
        "name": "Docker Image Export/Import Pipeline",
        "description": "Export and import Docker images with compression",
        "command_template": "docker save {image} | gzip -c --fast > {output_file}.tar.gz && gzip -cd {output_file}.tar.gz | docker load",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'image', 'type': 'string', 'required': True}, {'name': 'output_file', 'type': 'string', 'default': 'image_backup'}],
        "examples": ['docker save myapp:latest | gzip > myapp_backup.tar.gz'],
        "performance_hints": ['Use fast compression', 'Pipe directly to avoid temp files'],
        "dependencies": ['docker', 'gzip'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_volume_backup",
        "name": "Docker Volume Backup with Compression",
        "description": "Backup Docker volumes with tar and compression",
        "command_template": "docker run --rm -v {volume}:/data -v $(pwd):/backup alpine tar czf /backup/{backup_name}.tar.gz -C /data .",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'volume', 'type': 'string', 'required': True}, {'name': 'backup_name', 'type': 'string', 'default': 'volume_backup'}],
        "examples": ['docker run --rm -v mydata:/data -v $(pwd):/backup alpine tar czf /backup/data_backup.tar.gz -C /data .'],
        "performance_hints": ['Use alpine for minimal overhead', 'Compress during backup'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_swarm_deploy",
        "name": "Docker Swarm Service Deployment",
        "description": "Deploy services to Docker Swarm with rolling updates",
        "command_template": "docker service create --name {service_name} --replicas {replicas} --update-parallelism {parallelism} --update-delay {delay}s {image}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'service_name', 'type': 'string', 'required': True}, {'name': 'replicas', 'type': 'int', 'default': 3}, {'name': 'parallelism', 'type': 'int', 'default': 2}, {'name': 'delay', 'type': 'int', 'default': 10}, {'name': 'image', 'type': 'string', 'required': True}],
        "examples": ['docker service create --name webapp --replicas 5 --update-parallelism 2 nginx'],
        "performance_hints": ['Use appropriate parallelism', 'Monitor during updates'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_secret_management",
        "name": "Docker Secret Creation and Management",
        "description": "Create and manage Docker secrets securely",
        "command_template": "echo '{secret_value}' | docker secret create {secret_name} - && docker service update --secret-add {secret_name} {service}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.HIGH_RISK,
        "parameters": [{'name': 'secret_value', 'type': 'string', 'required': True}, {'name': 'secret_name', 'type': 'string', 'required': True}, {'name': 'service', 'type': 'string', 'required': True}],
        "examples": ["echo 'mypassword' | docker secret create db_pass -"],
        "performance_hints": ['Use files for large secrets', 'Rotate secrets regularly'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_config_management",
        "name": "Docker Config File Management",
        "description": "Manage Docker configuration files for services",
        "command_template": "docker config create {config_name} {config_file} && docker service update --config-add source={config_name},target={target_path} {service}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'config_name', 'type': 'string', 'required': True}, {'name': 'config_file', 'type': 'string', 'required': True}, {'name': 'target_path', 'type': 'string', 'default': '/etc/config'}, {'name': 'service', 'type': 'string', 'required': True}],
        "examples": ['docker config create nginx_conf nginx.conf'],
        "performance_hints": ['Version config files', 'Use for non-sensitive data'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_docker_plugin_install",
        "name": "Docker Plugin Installation and Management",
        "description": "Install and configure Docker plugins for extended functionality",
        "command_template": "docker plugin install {plugin_name} {plugin_options} && docker plugin enable {plugin_name}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'plugin_name', 'type': 'string', 'required': True}, {'name': 'plugin_options', 'type': 'string', 'default': ''}],
        "examples": ['docker plugin install vieux/sshfs DEBUG=1'],
        "performance_hints": ['Verify plugin compatibility', 'Monitor plugin performance'],
        "dependencies": ['docker'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_deploy_rollout",
        "name": "Kubernetes Deployment with Rollout Strategy",
        "description": "Deploy applications with advanced rollout strategies",
        "command_template": "kubectl apply -f {manifest} && kubectl rollout status deployment/{deployment} -n {namespace} --timeout={timeout}s",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'manifest', 'type': 'string', 'required': True}, {'name': 'deployment', 'type': 'string', 'required': True}, {'name': 'namespace', 'type': 'string', 'default': 'default'}, {'name': 'timeout', 'type': 'int', 'default': 600}],
        "examples": ['kubectl apply -f app.yaml && kubectl rollout status deployment/webapp'],
        "performance_hints": ['Use --record for history', 'Monitor rollout progress'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_scale_deployment",
        "name": "Kubernetes Horizontal Scaling",
        "description": "Scale Kubernetes deployments horizontally with HPA",
        "command_template": "kubectl autoscale deployment {deployment} --cpu-percent={cpu_threshold} --min={min_replicas} --max={max_replicas} -n {namespace}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'deployment', 'type': 'string', 'required': True}, {'name': 'cpu_threshold', 'type': 'int', 'default': 80}, {'name': 'min_replicas', 'type': 'int', 'default': 2}, {'name': 'max_replicas', 'type': 'int', 'default': 10}, {'name': 'namespace', 'type': 'string', 'default': 'default'}],
        "examples": ['kubectl autoscale deployment webapp --cpu-percent=70 --min=3 --max=20'],
        "performance_hints": ['Set appropriate thresholds', 'Monitor metrics server'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_pod_debug",
        "name": "Kubernetes Pod Debugging",
        "description": "Debug running pods with ephemeral containers",
        "command_template": "kubectl debug {pod} -it --image={debug_image} --target={container} -n {namespace} -- {command}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'pod', 'type': 'string', 'required': True}, {'name': 'debug_image', 'type': 'string', 'default': 'busybox'}, {'name': 'container', 'type': 'string', 'default': ''}, {'name': 'namespace', 'type': 'string', 'default': 'default'}, {'name': 'command', 'type': 'string', 'default': 'sh'}],
        "examples": ['kubectl debug mypod -it --image=nicolaka/netshoot -- bash'],
        "performance_hints": ['Use minimal debug images', 'Clean up debug containers'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_resource_usage",
        "name": "Kubernetes Resource Usage Analysis",
        "description": "Analyze resource usage across namespaces and nodes",
        "command_template": "kubectl top nodes && kubectl top pods --all-namespaces --sort-by={sort_by} | head -20",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.SAFE,
        "parameters": [{'name': 'sort_by', 'type': 'string', 'default': 'cpu'}],
        "examples": ['kubectl top pods --all-namespaces --sort-by=memory'],
        "performance_hints": ['Requires metrics-server', 'Use for capacity planning'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_configmap_update",
        "name": "Kubernetes ConfigMap Hot Reload",
        "description": "Update ConfigMaps and trigger pod restarts",
        "command_template": "kubectl create configmap {name} --from-file={file} --dry-run=client -o yaml | kubectl apply -f - && kubectl rollout restart deployment/{deployment} -n {namespace}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'name', 'type': 'string', 'required': True}, {'name': 'file', 'type': 'string', 'required': True}, {'name': 'deployment', 'type': 'string', 'required': True}, {'name': 'namespace', 'type': 'string', 'default': 'default'}],
        "examples": ['kubectl create configmap app-config --from-file=config.yaml --dry-run=client -o yaml | kubectl apply -f -'],
        "performance_hints": ['Use immutable configmaps when possible', 'Consider using helm for updates'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_network_policy",
        "name": "Kubernetes Network Policy Management",
        "description": "Apply network policies for pod-to-pod communication",
        "command_template": "kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {policy_name}
  namespace: {namespace}
spec:
  podSelector:
    matchLabels:
      app: {app_label}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          role: {allowed_role}
    ports:
    - protocol: TCP
      port: {port}
EOF",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'policy_name', 'type': 'string', 'required': True}, {'name': 'namespace', 'type': 'string', 'default': 'default'}, {'name': 'app_label', 'type': 'string', 'required': True}, {'name': 'allowed_role', 'type': 'string', 'default': 'frontend'}, {'name': 'port', 'type': 'int', 'default': 8080}],
        "examples": ['kubectl apply -f network-policy.yaml'],
        "performance_hints": ['Test policies in dev first', 'Use deny-all default policies'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_pvc_resize",
        "name": "Kubernetes PVC Dynamic Resize",
        "description": "Dynamically resize Persistent Volume Claims",
        "command_template": "kubectl patch pvc {pvc_name} -n {namespace} -p '{"spec":{"resources":{"requests":{"storage":"{new_size}"}}}}'",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'pvc_name', 'type': 'string', 'required': True}, {'name': 'namespace', 'type': 'string', 'default': 'default'}, {'name': 'new_size', 'type': 'string', 'required': True}],
        "examples": ['kubectl patch pvc data-pvc -p \'{"spec":{"resources":{"requests":{"storage":"100Gi"}}}}\''],
        "performance_hints": ['Check StorageClass allowVolumeExpansion', 'Monitor resize progress'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_job_parallel",
        "name": "Kubernetes Parallel Job Execution",
        "description": "Run parallel jobs with completion tracking",
        "command_template": "kubectl create job {job_name} --image={image} --parallelism={parallelism} --completions={completions} -- {command}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'job_name', 'type': 'string', 'required': True}, {'name': 'image', 'type': 'string', 'required': True}, {'name': 'parallelism', 'type': 'int', 'default': 4}, {'name': 'completions', 'type': 'int', 'default': 10}, {'name': 'command', 'type': 'string', 'default': "echo 'Processing...'"}],
        "examples": ['kubectl create job batch-processor --image=worker:latest --parallelism=8 --completions=100'],
        "performance_hints": ['Set appropriate parallelism', 'Use job queues for large batches'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_cronjob_manage",
        "name": "Kubernetes CronJob Management",
        "description": "Create and manage scheduled jobs in Kubernetes",
        "command_template": "kubectl create cronjob {name} --image={image} --schedule='{schedule}' -- {command}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'name', 'type': 'string', 'required': True}, {'name': 'image', 'type': 'string', 'required': True}, {'name': 'schedule', 'type': 'string', 'default': '0 * * * *'}, {'name': 'command', 'type': 'string', 'default': 'date'}],
        "examples": ["kubectl create cronjob backup --image=backup:latest --schedule='0 2 * * *' -- /backup.sh"],
        "performance_hints": ['Set concurrencyPolicy', 'Monitor job history'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_service_mesh",
        "name": "Kubernetes Service Mesh Traffic Management",
        "description": "Manage service mesh traffic with Istio VirtualService",
        "command_template": "kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: {service_name}
  namespace: {namespace}
spec:
  hosts:
  - {service_name}
  http:
  - match:
    - headers:
        {header_name}:
          exact: {header_value}
    route:
    - destination:
        host: {service_name}
        subset: {subset}
      weight: {weight}
EOF",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'service_name', 'type': 'string', 'required': True}, {'name': 'namespace', 'type': 'string', 'default': 'default'}, {'name': 'header_name', 'type': 'string', 'default': 'version'}, {'name': 'header_value', 'type': 'string', 'default': 'v2'}, {'name': 'subset', 'type': 'string', 'default': 'v2'}, {'name': 'weight', 'type': 'int', 'default': 100}],
        "examples": ['kubectl apply -f virtualservice.yaml'],
        "performance_hints": ['Use traffic mirroring for testing', 'Monitor service mesh metrics'],
        "dependencies": ['kubectl', 'istio'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_pod_disruption",
        "name": "Kubernetes Pod Disruption Budget",
        "description": "Create Pod Disruption Budgets for high availability",
        "command_template": "kubectl create pdb {pdb_name} --selector={selector} --min-available={min_available} -n {namespace}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'pdb_name', 'type': 'string', 'required': True}, {'name': 'selector', 'type': 'string', 'required': True}, {'name': 'min_available', 'type': 'string', 'default': '1'}, {'name': 'namespace', 'type': 'string', 'default': 'default'}],
        "examples": ['kubectl create pdb webapp-pdb --selector=app=webapp --min-available=2'],
        "performance_hints": ['Set appropriate minimums', 'Consider percentage-based limits'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_ingress_tls",
        "name": "Kubernetes Ingress with TLS Configuration",
        "description": "Configure Ingress with TLS/SSL certificates",
        "command_template": "kubectl create secret tls {secret_name} --cert={cert_file} --key={key_file} -n {namespace} && kubectl apply -f {ingress_file}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'secret_name', 'type': 'string', 'required': True}, {'name': 'cert_file', 'type': 'string', 'required': True}, {'name': 'key_file', 'type': 'string', 'required': True}, {'name': 'namespace', 'type': 'string', 'default': 'default'}, {'name': 'ingress_file', 'type': 'string', 'required': True}],
        "examples": ['kubectl create secret tls webapp-tls --cert=cert.pem --key=key.pem'],
        "performance_hints": ['Use cert-manager for automation', 'Enable HTTP/2'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_resource_quota",
        "name": "Kubernetes Resource Quota Management",
        "description": "Set resource quotas for namespaces",
        "command_template": "kubectl create quota {quota_name} --hard=cpu={cpu},memory={memory},persistentvolumeclaims={pvcs} -n {namespace}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'quota_name', 'type': 'string', 'required': True}, {'name': 'cpu', 'type': 'string', 'default': '100'}, {'name': 'memory', 'type': 'string', 'default': '200Gi'}, {'name': 'pvcs', 'type': 'int', 'default': 10}, {'name': 'namespace', 'type': 'string', 'required': True}],
        "examples": ['kubectl create quota compute-quota --hard=cpu=1000,memory=1Ti -n production'],
        "performance_hints": ['Monitor quota usage', 'Set appropriate limits'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_node_affinity",
        "name": "Kubernetes Node Affinity Rules",
        "description": "Configure pod scheduling with node affinity",
        "command_template": "kubectl patch deployment {deployment} -n {namespace} --type='json' -p='[{"op": "add", "path": "/spec/template/spec/affinity", "value": {"nodeAffinity": {"requiredDuringSchedulingIgnoredDuringExecution": {"nodeSelectorTerms": [{"matchExpressions": [{"key": "{label_key}", "operator": "In", "values": ["{label_value}"]}]}]}}}}]'",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'deployment', 'type': 'string', 'required': True}, {'name': 'namespace', 'type': 'string', 'default': 'default'}, {'name': 'label_key', 'type': 'string', 'default': 'node-type'}, {'name': 'label_value', 'type': 'string', 'default': 'compute-optimized'}],
        "examples": ['kubectl patch deployment webapp --type=\'json\' -p=\'[{"op": "add", "path": "/spec/template/spec/affinity"}]\''],
        "performance_hints": ['Use for workload isolation', 'Consider pod anti-affinity'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_k8s_priority_class",
        "name": "Kubernetes Priority Class Configuration",
        "description": "Create and assign pod priority classes",
        "command_template": "kubectl create priorityclass {name} --value={value} --global-default={is_default} --description='{description}'",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'name', 'type': 'string', 'required': True}, {'name': 'value', 'type': 'int', 'default': 1000}, {'name': 'is_default', 'type': 'bool', 'default': False}, {'name': 'description', 'type': 'string', 'default': 'Custom priority class'}],
        "examples": ['kubectl create priorityclass high-priority --value=1000000'],
        "performance_hints": ['Use for critical workloads', 'Avoid preemption cascades'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_github_actions_matrix",
        "name": "GitHub Actions Matrix Build",
        "description": "Run GitHub Actions with matrix strategy for parallel builds",
        "command_template": "gh workflow run {workflow_file} -f matrix='{"include":[{"os":"ubuntu-latest","node":"16"},{"os":"ubuntu-latest","node":"18"}]}'",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'workflow_file', 'type': 'string', 'required': True}],
        "examples": ['gh workflow run build.yml -f matrix=\'{"os":["ubuntu-latest","windows-latest"]}\''],
        "performance_hints": ['Use matrix for parallel testing', 'Limit matrix size for faster feedback'],
        "dependencies": ['gh'],
        "amd_ryzen_optimized": True,
        "parallel_execution": True,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_jenkins_parallel_pipeline",
        "name": "Jenkins Parallel Pipeline Execution",
        "description": "Execute Jenkins pipeline with parallel stages",
        "command_template": "java -jar jenkins-cli.jar -s {jenkins_url} build {job_name} -p PARALLEL_EXECUTORS={executors} -p BRANCH={branch}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'jenkins_url', 'type': 'string', 'required': True}, {'name': 'job_name', 'type': 'string', 'required': True}, {'name': 'executors', 'type': 'int', 'default': 16}, {'name': 'branch', 'type': 'string', 'default': 'main'}],
        "examples": ['java -jar jenkins-cli.jar build multi-branch-pipeline -p PARALLEL_EXECUTORS=8'],
        "performance_hints": ['Use node labels for distribution', 'Monitor executor usage'],
        "dependencies": ['java', 'jenkins-cli.jar'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 0
    },
    {
        "id": "devops_gitlab_ci_cache",
        "name": "GitLab CI Cache Optimization",
        "description": "Configure GitLab CI with distributed cache",
        "command_template": "gitlab-runner exec docker {job_name} --cache-type {cache_type} --cache-shared --cache-dir {cache_dir}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'job_name', 'type': 'string', 'required': True}, {'name': 'cache_type', 'type': 'string', 'default': 's3'}, {'name': 'cache_dir', 'type': 'string', 'default': '/cache'}],
        "examples": ['gitlab-runner exec docker build --cache-type s3 --cache-shared'],
        "performance_hints": ['Use distributed cache', 'Cache dependencies aggressively'],
        "dependencies": ['gitlab-runner'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_circleci_workflow",
        "name": "CircleCI Workflow Orchestration",
        "description": "Trigger CircleCI workflows with parameters",
        "command_template": "circleci workflow trigger {project_slug} {workflow_name} --branch {branch} --parameter {params}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'project_slug', 'type': 'string', 'required': True}, {'name': 'workflow_name', 'type': 'string', 'required': True}, {'name': 'branch', 'type': 'string', 'default': 'main'}, {'name': 'params', 'type': 'string', 'default': 'deploy=true'}],
        "examples": ['circleci workflow trigger gh/org/repo deploy-workflow --branch main'],
        "performance_hints": ['Use workflow dependencies', 'Optimize job parallelism'],
        "dependencies": ['circleci'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_drone_ci_parallel",
        "name": "Drone CI Parallel Pipeline",
        "description": "Execute Drone CI pipelines with parallel steps",
        "command_template": "drone exec --pipeline {pipeline_name} --parallel --threads {threads}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'pipeline_name', 'type': 'string', 'default': 'default'}, {'name': 'threads', 'type': 'int', 'default': 8}],
        "examples": ['drone exec --parallel --threads 16'],
        "performance_hints": ['Use runner concurrency', 'Distribute across agents'],
        "dependencies": ['drone'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 0
    },
    {
        "id": "devops_tekton_pipeline",
        "name": "Tekton Pipeline Execution",
        "description": "Run Tekton pipelines in Kubernetes",
        "command_template": "tkn pipeline start {pipeline_name} --param {params} --workspace name={workspace},claimName={pvc} --showlog",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'pipeline_name', 'type': 'string', 'required': True}, {'name': 'params', 'type': 'string', 'default': 'image-tag=latest'}, {'name': 'workspace', 'type': 'string', 'default': 'source'}, {'name': 'pvc', 'type': 'string', 'default': 'pipeline-pvc'}],
        "examples": ['tkn pipeline start build-and-deploy --param git-url=https://github.com/org/repo'],
        "performance_hints": ['Use persistent workspaces', 'Optimize task ordering'],
        "dependencies": ['tkn'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_argo_workflow",
        "name": "Argo Workflows DAG Execution",
        "description": "Execute complex DAG workflows with Argo",
        "command_template": "argo submit {workflow_file} --parameter {params} --parallelism {parallelism} --watch",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'workflow_file', 'type': 'string', 'required': True}, {'name': 'params', 'type': 'string', 'default': 'branch=main'}, {'name': 'parallelism', 'type': 'int', 'default': 10}],
        "examples": ['argo submit workflow.yaml --parallelism 20 --watch'],
        "performance_hints": ['Use DAG templates', 'Set appropriate parallelism'],
        "dependencies": ['argo'],
        "amd_ryzen_optimized": True,
        "parallel_execution": True,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_buildkite_parallel",
        "name": "Buildkite Parallel Job Execution",
        "description": "Run Buildkite jobs with parallel execution",
        "command_template": "buildkite-agent pipeline upload <<< 'steps:
  - label: "Parallel Tests"
    parallelism: {parallelism}
    command: "{command}"'",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'parallelism', 'type': 'int', 'default': 10}, {'name': 'command', 'type': 'string', 'default': 'make test'}],
        "examples": ['buildkite-agent pipeline upload pipeline.yml'],
        "performance_hints": ['Use agent queues', 'Distribute tests evenly'],
        "dependencies": ['buildkite-agent'],
        "amd_ryzen_optimized": True,
        "parallel_execution": True,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_travis_matrix",
        "name": "Travis CI Matrix Builds",
        "description": "Configure Travis CI matrix builds for multiple environments",
        "command_template": "travis env set MATRIX_OS '{os}' MATRIX_LANG '{lang}' --repo {repo}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'os', 'type': 'string', 'default': 'linux,osx'}, {'name': 'lang', 'type': 'string', 'default': 'node_js,python'}, {'name': 'repo', 'type': 'string', 'required': True}],
        "examples": ["travis env set MATRIX_OS 'linux,osx,windows' --repo org/repo"],
        "performance_hints": ['Limit matrix combinations', 'Use build stages'],
        "dependencies": ['travis'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_azure_pipelines",
        "name": "Azure Pipelines Parallel Jobs",
        "description": "Run Azure Pipelines with parallel job execution",
        "command_template": "az pipelines run --name {pipeline_name} --branch {branch} --parameters parallelism={parallelism}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'pipeline_name', 'type': 'string', 'required': True}, {'name': 'branch', 'type': 'string', 'default': 'main'}, {'name': 'parallelism', 'type': 'int', 'default': 10}],
        "examples": ['az pipelines run --name build-pipeline --parameters parallelism=20'],
        "performance_hints": ['Use agent pools', 'Optimize job dependencies'],
        "dependencies": ['az'],
        "amd_ryzen_optimized": True,
        "parallel_execution": True,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_bamboo_parallel",
        "name": "Bamboo Parallel Stage Execution",
        "description": "Execute Bamboo build plans with parallel stages",
        "command_template": "bamboo-cli build --plan {plan_key} --parallel-stages {stages} --wait",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'plan_key', 'type': 'string', 'required': True}, {'name': 'stages', 'type': 'int', 'default': 4}],
        "examples": ['bamboo-cli build --plan PROJ-PLAN --parallel-stages 8'],
        "performance_hints": ['Use remote agents', 'Balance stage workloads'],
        "dependencies": ['bamboo-cli'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 8,
        "memory_requirement": 0
    },
    {
        "id": "devops_codefresh_pipeline",
        "name": "Codefresh Pipeline Trigger",
        "description": "Trigger Codefresh pipelines with variables",
        "command_template": "codefresh run {pipeline_id} --branch {branch} --variable {variables} --detach=false",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'pipeline_id', 'type': 'string', 'required': True}, {'name': 'branch', 'type': 'string', 'default': 'main'}, {'name': 'variables', 'type': 'string', 'default': 'CF_REVISION=latest'}],
        "examples": ['codefresh run pipeline-id --variable IMAGE_TAG=v1.0'],
        "performance_hints": ['Use pipeline caching', 'Optimize Docker layer caching'],
        "dependencies": ['codefresh'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_semaphore_workflow",
        "name": "Semaphore 2.0 Workflow Execution",
        "description": "Execute Semaphore workflows with promotions",
        "command_template": "sem create workflow --project {project} --pipeline {pipeline_file}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'project', 'type': 'string', 'required': True}, {'name': 'pipeline_file', 'type': 'string', 'default': '.semaphore/semaphore.yml'}],
        "examples": ['sem create workflow --project my-project'],
        "performance_hints": ['Use auto-promotions', 'Optimize block dependencies'],
        "dependencies": ['sem'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_spinnaker_pipeline",
        "name": "Spinnaker Pipeline Deployment",
        "description": "Deploy applications using Spinnaker pipelines",
        "command_template": "spin pipeline execute --application {app} --name {pipeline} --parameter-file {params_file}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'app', 'type': 'string', 'required': True}, {'name': 'pipeline', 'type': 'string', 'required': True}, {'name': 'params_file', 'type': 'string', 'default': 'parameters.json'}],
        "examples": ['spin pipeline execute --application myapp --name deploy-prod'],
        "performance_hints": ['Use pipeline templates', 'Enable fast property'],
        "dependencies": ['spin'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_concourse_fly",
        "name": "Concourse Pipeline Management",
        "description": "Manage Concourse CI pipelines with fly CLI",
        "command_template": "fly -t {target} set-pipeline -p {pipeline} -c {config} -l {vars_file} --non-interactive",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'target', 'type': 'string', 'default': 'main'}, {'name': 'pipeline', 'type': 'string', 'required': True}, {'name': 'config', 'type': 'string', 'required': True}, {'name': 'vars_file', 'type': 'string', 'default': 'vars.yml'}],
        "examples": ['fly -t main set-pipeline -p my-pipeline -c pipeline.yml'],
        "performance_hints": ['Use resource caching', 'Optimize job plans'],
        "dependencies": ['fly'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_terraform_parallel",
        "name": "Terraform Parallel Provider Operations",
        "description": "Apply Terraform with parallel provider operations",
        "command_template": "terraform apply -parallelism={parallelism} -auto-approve -var-file={vars_file}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.HIGH_RISK,
        "parameters": [{'name': 'parallelism', 'type': 'int', 'default': 10}, {'name': 'vars_file', 'type': 'string', 'default': 'terraform.tfvars'}],
        "examples": ['terraform apply -parallelism=20 -auto-approve'],
        "performance_hints": ['Increase parallelism for large infrastructures', 'Use remote state locking'],
        "dependencies": ['terraform'],
        "amd_ryzen_optimized": True,
        "parallel_execution": True,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_ansible_parallel",
        "name": "Ansible Parallel Playbook Execution",
        "description": "Run Ansible playbooks with parallel task execution",
        "command_template": "ansible-playbook -i {inventory} {playbook} --forks={forks} --strategy=free",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'inventory', 'type': 'string', 'required': True}, {'name': 'playbook', 'type': 'string', 'required': True}, {'name': 'forks', 'type': 'int', 'default': 50}],
        "examples": ['ansible-playbook -i hosts site.yml --forks=100 --strategy=free'],
        "performance_hints": ['Use free strategy for speed', 'Increase forks for large inventories'],
        "dependencies": ['ansible-playbook'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 0
    },
    {
        "id": "devops_pulumi_deploy",
        "name": "Pulumi Stack Deployment",
        "description": "Deploy infrastructure using Pulumi with parallel resources",
        "command_template": "pulumi up --yes --parallel {parallel} --stack {stack}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.HIGH_RISK,
        "parameters": [{'name': 'parallel', 'type': 'int', 'default': 16}, {'name': 'stack', 'type': 'string', 'required': True}],
        "examples": ['pulumi up --yes --parallel 32 --stack production'],
        "performance_hints": ['Use parallel flag for faster deployments', 'Enable resource caching'],
        "dependencies": ['pulumi'],
        "amd_ryzen_optimized": True,
        "parallel_execution": True,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_cloudformation_deploy",
        "name": "CloudFormation Stack Deployment",
        "description": "Deploy AWS CloudFormation stacks with change sets",
        "command_template": "aws cloudformation deploy --template-file {template} --stack-name {stack} --capabilities CAPABILITY_IAM --parameter-overrides {params}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.HIGH_RISK,
        "parameters": [{'name': 'template', 'type': 'string', 'required': True}, {'name': 'stack', 'type': 'string', 'required': True}, {'name': 'params', 'type': 'string', 'default': ''}],
        "examples": ['aws cloudformation deploy --template-file template.yaml --stack-name my-stack'],
        "performance_hints": ['Use change sets for safety', 'Enable termination protection'],
        "dependencies": ['aws'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_helm_deploy",
        "name": "Helm Chart Deployment with Hooks",
        "description": "Deploy Helm charts with pre/post hooks",
        "command_template": "helm upgrade --install {release} {chart} --namespace {namespace} --create-namespace --values {values_file} --atomic --timeout {timeout}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'release', 'type': 'string', 'required': True}, {'name': 'chart', 'type': 'string', 'required': True}, {'name': 'namespace', 'type': 'string', 'default': 'default'}, {'name': 'values_file', 'type': 'string', 'default': 'values.yaml'}, {'name': 'timeout', 'type': 'string', 'default': '5m'}],
        "examples": ['helm upgrade --install myapp ./chart --atomic'],
        "performance_hints": ['Use --atomic for rollback on failure', 'Enable hooks for validation'],
        "dependencies": ['helm'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_crossplane_deploy",
        "name": "Crossplane Composite Resource Deployment",
        "description": "Deploy cloud resources using Crossplane compositions",
        "command_template": "kubectl apply -f {composition_file} && kubectl wait --for=condition=ready {resource_type}/{resource_name} --timeout={timeout}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'composition_file', 'type': 'string', 'required': True}, {'name': 'resource_type', 'type': 'string', 'default': 'xrd'}, {'name': 'resource_name', 'type': 'string', 'required': True}, {'name': 'timeout', 'type': 'string', 'default': '10m'}],
        "examples": ['kubectl apply -f xrd.yaml && kubectl wait --for=condition=ready xrd/my-resource'],
        "performance_hints": ['Use compositions for reusability', 'Monitor provider controllers'],
        "dependencies": ['kubectl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_cdk_deploy",
        "name": "AWS CDK Stack Deployment",
        "description": "Deploy AWS infrastructure using CDK with hotswap",
        "command_template": "cdk deploy {stack} --hotswap --concurrency {concurrency} --require-approval never",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.HIGH_RISK,
        "parameters": [{'name': 'stack', 'type': 'string', 'default': '*'}, {'name': 'concurrency', 'type': 'int', 'default': 10}],
        "examples": ['cdk deploy --hotswap --concurrency 20'],
        "performance_hints": ['Use hotswap for faster Lambda updates', 'Increase concurrency for multiple stacks'],
        "dependencies": ['cdk'],
        "amd_ryzen_optimized": True,
        "parallel_execution": True,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_chef_converge",
        "name": "Chef Node Convergence",
        "description": "Converge Chef nodes with parallel execution",
        "command_template": "knife ssh 'name:{pattern}' 'sudo chef-client' --concurrency {concurrency} --attribute ipaddress",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'pattern', 'type': 'string', 'default': '*'}, {'name': 'concurrency', 'type': 'int', 'default': 20}],
        "examples": ["knife ssh 'role:webserver' 'sudo chef-client' --concurrency 50"],
        "performance_hints": ['Use search patterns', 'Increase concurrency for large fleets'],
        "dependencies": ['knife'],
        "amd_ryzen_optimized": True,
        "parallel_execution": True,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_puppet_deploy",
        "name": "Puppet Code Deployment",
        "description": "Deploy Puppet code with r10k and environment isolation",
        "command_template": "r10k deploy environment {environment} --puppetfile --verbose && puppet job run --query '{query}'",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'environment', 'type': 'string', 'default': 'production'}, {'name': 'query', 'type': 'string', 'default': 'nodes {}'}],
        "examples": ['r10k deploy environment production --puppetfile'],
        "performance_hints": ['Use dynamic environments', 'Leverage PuppetDB queries'],
        "dependencies": ['r10k', 'puppet'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_salt_highstate",
        "name": "SaltStack Highstate Execution",
        "description": "Execute Salt highstate with targeting and batching",
        "command_template": "salt '{target}' state.highstate --batch-size {batch_size} --state-output=terse",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.MEDIUM_RISK,
        "parameters": [{'name': 'target', 'type': 'string', 'default': '*'}, {'name': 'batch_size', 'type': 'string', 'default': '25%'}],
        "examples": ["salt 'web*' state.highstate --batch-size 10"],
        "performance_hints": ['Use grain targeting', 'Batch for large deployments'],
        "dependencies": ['salt'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_prometheus_config",
        "name": "Prometheus Configuration Reload",
        "description": "Reload Prometheus configuration without downtime",
        "command_template": "curl -X POST http://{prometheus_host}:9090/-/reload && promtool check config {config_file}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'prometheus_host', 'type': 'string', 'default': 'localhost'}, {'name': 'config_file', 'type': 'string', 'default': '/etc/prometheus/prometheus.yml'}],
        "examples": ['curl -X POST http://localhost:9090/-/reload'],
        "performance_hints": ['Validate config before reload', 'Use file_sd for dynamic targets'],
        "dependencies": ['curl', 'promtool'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_grafana_dashboard",
        "name": "Grafana Dashboard Provisioning",
        "description": "Provision Grafana dashboards via API",
        "command_template": "curl -X POST -H 'Content-Type: application/json' -H 'Authorization: Bearer {api_key}' -d @{dashboard_file} http://{grafana_host}:3000/api/dashboards/db",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'api_key', 'type': 'string', 'required': True}, {'name': 'dashboard_file', 'type': 'string', 'required': True}, {'name': 'grafana_host', 'type': 'string', 'default': 'localhost'}],
        "examples": ["curl -X POST -H 'Authorization: Bearer token' -d @dashboard.json http://localhost:3000/api/dashboards/db"],
        "performance_hints": ['Use provisioning for automation', 'Version control dashboards'],
        "dependencies": ['curl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_elasticsearch_snapshot",
        "name": "Elasticsearch Snapshot Management",
        "description": "Create and manage Elasticsearch snapshots",
        "command_template": "curl -X PUT '{es_host}:9200/_snapshot/{repo}/{snapshot}?wait_for_completion=false' -H 'Content-Type: application/json' -d '{"indices": "{indices}", "include_global_state": false}'",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'es_host', 'type': 'string', 'default': 'localhost'}, {'name': 'repo', 'type': 'string', 'required': True}, {'name': 'snapshot', 'type': 'string', 'required': True}, {'name': 'indices', 'type': 'string', 'default': '*'}],
        "examples": ["curl -X PUT 'localhost:9200/_snapshot/backup/snapshot_1?wait_for_completion=false'"],
        "performance_hints": ['Use async snapshots', 'Schedule during low load'],
        "dependencies": ['curl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_jaeger_sampling",
        "name": "Jaeger Dynamic Sampling Configuration",
        "description": "Configure Jaeger adaptive sampling strategies",
        "command_template": "curl -X POST http://{jaeger_host}:14268/api/sampling -H 'Content-Type: application/json' -d @{sampling_config}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'jaeger_host', 'type': 'string', 'default': 'localhost'}, {'name': 'sampling_config', 'type': 'string', 'required': True}],
        "examples": ['curl -X POST http://localhost:14268/api/sampling -d @sampling.json'],
        "performance_hints": ['Use adaptive sampling', 'Balance trace volume vs detail'],
        "dependencies": ['curl'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_loki_query",
        "name": "Loki Log Query and Export",
        "description": "Query and export logs from Loki",
        "command_template": "logcli query '{query}' --from={from} --to={to} --limit={limit} --forward --output={output_format}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.SAFE,
        "parameters": [{'name': 'query', 'type': 'string', 'required': True}, {'name': 'from', 'type': 'string', 'default': '1h'}, {'name': 'to', 'type': 'string', 'default': 'now'}, {'name': 'limit', 'type': 'int', 'default': 1000}, {'name': 'output_format', 'type': 'string', 'default': 'jsonl'}],
        "examples": ['logcli query \'{job="nginx"} |= "error"\' --from=1h --limit=100'],
        "performance_hints": ['Use label filters first', 'Limit time ranges'],
        "dependencies": ['logcli'],
        "amd_ryzen_optimized": False,
        "parallel_execution": False,
        "cpu_cores": 1,
        "memory_requirement": 0
    },
    {
        "id": "devops_bazel_parallel",
        "name": "Bazel Parallel Build Execution",
        "description": "Execute Bazel builds with maximum parallelism",
        "command_template": "bazel build {target} --jobs={jobs} --local_cpu_resources={cpus} --local_ram_resources={ram_mb}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'target', 'type': 'string', 'default': '//...'}, {'name': 'jobs', 'type': 'int', 'default': 32}, {'name': 'cpus', 'type': 'int', 'default': 16}, {'name': 'ram_mb', 'type': 'int', 'default': 32768}],
        "examples": ['bazel build //... --jobs=32 --local_cpu_resources=16'],
        "performance_hints": ['Use remote caching', 'Enable build without bytes'],
        "dependencies": ['bazel'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 32768
    },
    {
        "id": "devops_gradle_parallel",
        "name": "Gradle Parallel Build with Daemon",
        "description": "Execute Gradle builds with parallel execution and daemon",
        "command_template": "gradle {task} --parallel --max-workers={workers} --build-cache --configuration-cache",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'task', 'type': 'string', 'default': 'build'}, {'name': 'workers', 'type': 'int', 'default': 16}],
        "examples": ['gradle build --parallel --max-workers=16 --build-cache'],
        "performance_hints": ['Enable build cache', 'Use configuration cache'],
        "dependencies": ['gradle'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 0
    },
    {
        "id": "devops_maven_parallel",
        "name": "Maven Parallel Module Build",
        "description": "Build Maven projects with parallel module compilation",
        "command_template": "mvn {goal} -T {threads} -DskipTests={skip_tests} -Dmaven.compile.fork=true",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'goal', 'type': 'string', 'default': 'clean install'}, {'name': 'threads', 'type': 'string', 'default': '2C'}, {'name': 'skip_tests', 'type': 'bool', 'default': False}],
        "examples": ['mvn clean install -T 2C -Dmaven.compile.fork=true'],
        "performance_hints": ['Use thread-per-core', 'Enable parallel test execution'],
        "dependencies": ['mvn'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 0
    },
    {
        "id": "devops_ninja_build",
        "name": "Ninja Build System Execution",
        "description": "Execute Ninja builds with optimal parallelism",
        "command_template": "ninja -j {jobs} -k {keep_going} -C {build_dir} {target}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'jobs', 'type': 'int', 'default': 0}, {'name': 'keep_going', 'type': 'int', 'default': 0}, {'name': 'build_dir', 'type': 'string', 'default': 'build'}, {'name': 'target', 'type': 'string', 'default': 'all'}],
        "examples": ['ninja -j 0 -C build all'],
        "performance_hints": ['Use -j 0 for auto parallelism', 'Enable ccache'],
        "dependencies": ['ninja'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 0
    },
    {
        "id": "devops_scons_parallel",
        "name": "SCons Parallel Build Execution",
        "description": "Build with SCons using parallel jobs",
        "command_template": "scons -j {jobs} --cache --implicit-cache {target}",
        "category": CommandCategory.DEVOPS_PIPELINE,
        "safety_level": SafetyLevel.LOW_RISK,
        "parameters": [{'name': 'jobs', 'type': 'int', 'default': 16}, {'name': 'target', 'type': 'string', 'default': '.'}],
        "examples": ['scons -j 16 --cache --implicit-cache'],
        "performance_hints": ['Enable caching', 'Use implicit dependency cache'],
        "dependencies": ['scons'],
        "amd_ryzen_optimized": True,
        "parallel_execution": False,
        "cpu_cores": 16,
        "memory_requirement": 0
    },

]

# Add to all_commands list
all_commands.extend(devops_expanded_commands)
