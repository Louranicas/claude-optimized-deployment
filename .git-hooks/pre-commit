#!/bin/bash
# Pre-commit hook for CODE project
# Performs various checks before allowing commit

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üîç Running pre-commit checks..."

# Initialize error flag
ERRORS=0

# Function to check command existence
command_exists() {
    command -v "$1" &> /dev/null
}

# 1. Check for debugging statements
echo -n "Checking for debug statements... "
DEBUG_PATTERNS="console\.(log|debug)|print\(|debugger|pdb\.set_trace|binding\.pry|byebug|dd\(|dump\(|var_dump"
if git diff --cached --name-only | grep -E '\.(py|js|ts|rb|php)$' | xargs grep -E "$DEBUG_PATTERNS" > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Found${NC}"
    echo "  Debug statements detected in:"
    git diff --cached --name-only | grep -E '\.(py|js|ts|rb|php)$' | xargs grep -l -E "$DEBUG_PATTERNS" | sed 's/^/    /'
    ERRORS=$((ERRORS + 1))
else
    echo -e "${GREEN}‚úÖ Clean${NC}"
fi

# 2. Check for merge conflict markers
echo -n "Checking for merge conflicts... "
CONFLICT_PATTERNS="<<<<<<<|>>>>>>>|======="
if git diff --cached --name-only | xargs grep -E "$CONFLICT_PATTERNS" > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Found${NC}"
    echo "  Conflict markers detected in:"
    git diff --cached --name-only | xargs grep -l -E "$CONFLICT_PATTERNS" | sed 's/^/    /'
    ERRORS=$((ERRORS + 1))
else
    echo -e "${GREEN}‚úÖ Clean${NC}"
fi

# 3. Check Python files with flake8
if command_exists flake8; then
    PYTHON_FILES=$(git diff --cached --name-only | grep '\.py$')
    if [ -n "$PYTHON_FILES" ]; then
        echo -n "Running flake8... "
        if echo "$PYTHON_FILES" | xargs flake8 --config=.flake8 > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Passed${NC}"
        else
            echo -e "${RED}‚ùå Failed${NC}"
            echo "  Run 'flake8' to see issues"
            ERRORS=$((ERRORS + 1))
        fi
    fi
fi

# 4. Check Python formatting with black
if command_exists black; then
    PYTHON_FILES=$(git diff --cached --name-only | grep '\.py$')
    if [ -n "$PYTHON_FILES" ]; then
        echo -n "Checking black formatting... "
        if echo "$PYTHON_FILES" | xargs black --check > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Formatted${NC}"
        else
            echo -e "${RED}‚ùå Needs formatting${NC}"
            echo "  Run 'black .' to fix"
            ERRORS=$((ERRORS + 1))
        fi
    fi
fi

# 5. Check for large files
echo -n "Checking for large files... "
LARGE_FILES=""
MAX_SIZE=5242880  # 5MB in bytes

for file in $(git diff --cached --name-only); do
    if [ -f "$file" ]; then
        size=$(wc -c < "$file" 2>/dev/null || echo 0)
        if [ "$size" -gt "$MAX_SIZE" ]; then
            LARGE_FILES="$LARGE_FILES\n    $file ($(numfmt --to=iec --suffix=B $size 2>/dev/null || echo "${size}B"))"
        fi
    fi
done

if [ -n "$LARGE_FILES" ]; then
    echo -e "${RED}‚ùå Found${NC}"
    echo -e "  Large files detected:$LARGE_FILES"
    echo "  Consider using Git LFS for files larger than 5MB"
    ERRORS=$((ERRORS + 1))
else
    echo -e "${GREEN}‚úÖ OK${NC}"
fi

# 6. Check for secrets
echo -n "Checking for potential secrets... "
SECRET_PATTERNS="(api[_-]?key|apikey|secret[_-]?key|password|passwd|pwd|token|auth|credential)[[:space:]]*[=:][[:space:]]*[\"']?[a-zA-Z0-9+/]{20,}[\"']?"

# Also check for specific patterns
SPECIFIC_PATTERNS="AKIA[0-9A-Z]{16}|AIza[0-9A-Za-z\-_]{35}|[0-9]+-[0-9A-Za-z_]{32}\.apps\.googleusercontent\.com|sk_test_[0-9a-zA-Z]{24}|sk_live_[0-9a-zA-Z]{24}"

FOUND_SECRETS=0
for file in $(git diff --cached --name-only); do
    if [ -f "$file" ]; then
        # Skip binary files
        if file "$file" | grep -q "text"; then
            if grep -E -i "$SECRET_PATTERNS|$SPECIFIC_PATTERNS" "$file" > /dev/null 2>&1; then
                if [ $FOUND_SECRETS -eq 0 ]; then
                    echo -e "${RED}‚ùå Potential secrets found${NC}"
                    echo "  Check these files:"
                    FOUND_SECRETS=1
                    ERRORS=$((ERRORS + 1))
                fi
                echo "    $file"
            fi
        fi
    fi
done

if [ $FOUND_SECRETS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Clean${NC}"
fi

# 7. Check TODO/FIXME comments
echo -n "Checking for TODO/FIXME... "
TODO_COUNT=$(git diff --cached | grep -c "TODO\|FIXME\|XXX\|HACK" || true)
if [ "$TODO_COUNT" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found $TODO_COUNT TODO/FIXME comments${NC}"
    echo "  Consider creating issues for these items"
else
    echo -e "${GREEN}‚úÖ None${NC}"
fi

# 8. Run tests if available
if [ -d "tests" ] && command_exists pytest; then
    echo -n "Running tests... "
    if python -m pytest tests/ -x --tb=short --quiet > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Passed${NC}"
    else
        echo -e "${RED}‚ùå Failed${NC}"
        echo "  Run 'pytest' to see failures"
        ERRORS=$((ERRORS + 1))
    fi
fi

# 9. Check file permissions (Unix-like systems only)
if [[ "$OSTYPE" != "msys" && "$OSTYPE" != "win32" ]]; then
    echo -n "Checking file permissions... "
    EXEC_FILES=$(git diff --cached --name-only | xargs -I {} sh -c 'test -x "{}" && echo "{}"' 2>/dev/null || true)
    
    # Filter out intended executable files
    UNEXPECTED_EXEC=$(echo "$EXEC_FILES" | grep -v -E '\.(sh|bash|py)$|Makefile|gradlew' || true)
    
    if [ -n "$UNEXPECTED_EXEC" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Unexpected executable files${NC}"
        echo "$UNEXPECTED_EXEC" | sed 's/^/    /'
        echo "  Remove execute permission if not intended"
    else
        echo -e "${GREEN}‚úÖ OK${NC}"
    fi
fi

# 10. Validate JSON files
JSON_FILES=$(git diff --cached --name-only | grep '\.json$')
if [ -n "$JSON_FILES" ]; then
    echo -n "Validating JSON files... "
    JSON_ERRORS=0
    for file in $JSON_FILES; do
        if [ -f "$file" ]; then
            if ! python -m json.tool "$file" > /dev/null 2>&1; then
                if [ $JSON_ERRORS -eq 0 ]; then
                    echo -e "${RED}‚ùå Invalid JSON${NC}"
                    echo "  Invalid files:"
                fi
                echo "    $file"
                JSON_ERRORS=1
                ERRORS=$((ERRORS + 1))
            fi
        fi
    done
    if [ $JSON_ERRORS -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Valid${NC}"
    fi
fi

# Summary
echo ""
if [ $ERRORS -gt 0 ]; then
    echo -e "${RED}‚ùå Pre-commit checks failed with $ERRORS error(s)${NC}"
    echo "Please fix the issues above and try again."
    exit 1
else
    echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
    exit 0
fi
