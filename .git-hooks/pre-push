#!/bin/bash
# Pre-push hook for CODE project
# Final checks before pushing to remote

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "🚀 Running pre-push checks..."

# Get remote and branch information
remote="$1"
url="$2"

# Read stdin to get branch information
while read local_ref local_sha remote_ref remote_sha; do
    # Extract branch names
    local_branch=$(echo "$local_ref" | sed 's/refs\/heads\///')
    remote_branch=$(echo "$remote_ref" | sed 's/refs\/heads\///')
    
    # Check if pushing to protected branch
    protected_branches="main master develop"
    for branch in $protected_branches; do
        if [ "$remote_branch" = "$branch" ]; then
            echo -e "${YELLOW}⚠️  Pushing to protected branch: $branch${NC}"
            
            # Check if it's a direct push (not through PR)
            if [ "$local_branch" = "$branch" ]; then
                echo -e "${RED}❌ Direct push to $branch branch is not allowed${NC}"
                echo "Please create a feature branch and submit a pull request."
                echo ""
                echo "Steps:"
                echo "1. git checkout -b feature/your-feature"
                echo "2. git push -u origin feature/your-feature"
                echo "3. Create a pull request on GitHub"
                exit 1
            fi
        fi
    done
    
    # Get list of commits to be pushed
    if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
        # New branch
        commits=$(git rev-list "$local_sha" --not --remotes)
    else
        # Existing branch
        commits=$(git rev-list "$remote_sha..$local_sha")
    fi
    
    # Check each commit
    for commit in $commits; do
        # Check commit message format
        msg=$(git log -1 --pretty=%s "$commit")
        if ! echo "$msg" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .{1,50}$'; then
            if ! echo "$msg" | grep -q "^Merge\|^Revert"; then
                echo -e "${RED}❌ Invalid commit message format${NC}"
                echo "  Commit: $(git log -1 --oneline $commit)"
                echo "  Please use conventional commit format"
                exit 1
            fi
        fi
        
        # Check for large files in commits
        large_files=$(git diff-tree --no-commit-id --name-only -r "$commit" | \
                     xargs -I {} git cat-file -s "$commit:{}" 2>/dev/null | \
                     awk '$1 > 5242880 {print $2}' || true)
        
        if [ -n "$large_files" ]; then
            echo -e "${YELLOW}⚠️  Large files detected in commit $commit${NC}"
            echo "  Consider using Git LFS for files > 5MB"
        fi
    done
done

# Run security scan if available
if command -v safety &> /dev/null; then
    echo -n "Running security scan... "
    if safety check --json > /dev/null 2>&1; then
        echo -e "${GREEN}✅ No vulnerabilities${NC}"
    else
        echo -e "${YELLOW}⚠️  Security vulnerabilities found${NC}"
        echo "  Run 'safety check' for details"
        echo "  Consider fixing before push"
    fi
elif command -v pip-audit &> /dev/null; then
    echo -n "Running pip-audit... "
    if pip-audit > /dev/null 2>&1; then
        echo -e "${GREEN}✅ No vulnerabilities${NC}"
    else
        echo -e "${YELLOW}⚠️  Security vulnerabilities found${NC}"
        echo "  Run 'pip-audit' for details"
    fi
fi

# Check for secrets one more time
echo -n "Final secrets check... "
if command -v detect-secrets &> /dev/null; then
    if detect-secrets scan --baseline .secrets.baseline > /dev/null 2>&1; then
        echo -e "${GREEN}✅ Clean${NC}"
    else
        echo -e "${RED}❌ Potential secrets detected${NC}"
        echo "  Run 'detect-secrets scan' to review"
        exit 1
    fi
else
    # Fallback to basic patterns
    if git diff HEAD --name-only | xargs grep -l -E "(api_key|apikey|password|secret|token).*=.*['\"][^'\"]+['\"]" 2>/dev/null; then
        echo -e "${RED}❌ Potential secrets detected${NC}"
        exit 1
    else
        echo -e "${GREEN}✅ Clean${NC}"
    fi
fi

# Check for TODO/FIXME comments
todo_count=$(git diff HEAD | grep -c "TODO\|FIXME\|XXX" || true)
if [ "$todo_count" -gt 0 ]; then
    echo -e "${YELLOW}📝 Found $todo_count TODO/FIXME comments in changes${NC}"
fi

# Run tests one final time
if [ -d "tests" ] && command -v pytest &> /dev/null; then
    echo -n "Running final test suite... "
    if python -m pytest tests/ -x --tb=short --quiet > /dev/null 2>&1; then
        echo -e "${GREEN}✅ All tests passed${NC}"
    else
        echo -e "${RED}❌ Tests failed${NC}"
        echo "  Push blocked until tests pass"
        echo "  Run 'pytest' to see failures"
        exit 1
    fi
fi

# Check branch naming convention
current_branch=$(git rev-parse --abbrev-ref HEAD)
valid_branch_pattern="^(feature|fix|hotfix|release|chore|experiment)\/[a-z0-9-]+$|^(main|master|develop)$"

if ! echo "$current_branch" | grep -qE "$valid_branch_pattern"; then
    echo -e "${YELLOW}⚠️  Non-standard branch name: $current_branch${NC}"
    echo "  Consider using standard naming:"
    echo "  - feature/description"
    echo "  - fix/description"
    echo "  - hotfix/description"
fi

# Provide push statistics
echo ""
echo "📊 Push Statistics:"
commits_count=$(git rev-list --count HEAD ^origin/HEAD 2>/dev/null || echo "unknown")
echo "  Commits to push: $commits_count"

files_changed=$(git diff --stat origin/HEAD..HEAD 2>/dev/null | tail -1 || echo "unknown")
echo "  Files changed: $files_changed"

# Success
echo ""
echo -e "${GREEN}✅ Pre-push checks completed${NC}"

# Helpful reminder
if [ "$current_branch" != "main" ] && [ "$current_branch" != "master" ] && [ "$current_branch" != "develop" ]; then
    echo ""
    echo "💡 Remember to create a pull request after pushing!"
    echo "   gh pr create --title \"Your PR title\" --body \"Description\""
fi

exit 0
