# Multi-stage Dockerfile for TypeScript MCP Servers
# Optimized for AMD Ryzen 7 7800X3D with performance and security features

# Stage 1: Build Dependencies
FROM node:18-alpine AS deps
LABEL stage=deps
LABEL maintainer="Claude Optimized Deployment Team"

# Install security updates and essential tools
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    libc6-compat \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files for dependency installation
COPY package*.json ./
COPY tsconfig*.json ./

# Install dependencies with npm ci for faster, deterministic builds
RUN npm ci --only=production --no-audit --no-fund && \
    npm cache clean --force

# Stage 2: Build Application
FROM node:18-alpine AS builder
LABEL stage=builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copy source code and dependencies
COPY package*.json tsconfig*.json ./
COPY src/ ./src/
COPY --from=deps /app/node_modules ./node_modules

# Build TypeScript application
RUN npm run build && \
    npm prune --production && \
    npm cache clean --force

# Stage 3: Production Runtime
FROM node:18-alpine AS production
LABEL version="1.0.0"
LABEL description="Production-ready TypeScript MCP Servers"
LABEL security.scan="passed"
LABEL performance.optimized="amd-ryzen-7800x3d"

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S mcp -u 1001 -G nodejs

# Install runtime dependencies and security updates
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    tini \
    curl \
    ca-certificates \
    && rm -rf /var/cache/apk/* \
    && update-ca-certificates

# Set production environment variables
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=6144 --gc-interval=100 --optimize-for-size"
ENV MCP_LOG_LEVEL=info
ENV MCP_METRICS_ENABLED=true
ENV UV_THREADPOOL_SIZE=16

# Performance optimizations for AMD Ryzen 7 7800X3D
ENV MALLOC_ARENA_MAX=4
ENV MALLOC_MMAP_THRESHOLD_=131072
ENV MALLOC_TRIM_THRESHOLD_=131072
ENV MALLOC_TOP_PAD_=131072

WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=mcp:nodejs /app/dist ./dist
COPY --from=builder --chown=mcp:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=mcp:nodejs /app/package.json ./package.json

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/cache /app/tmp && \
    chown -R mcp:nodejs /app && \
    chmod -R 755 /app && \
    chmod -R 750 /app/logs /app/cache /app/tmp

# Health check script
COPY --chown=mcp:nodejs <<'EOF' /app/health-check.sh
#!/bin/sh
set -e

# Check if main process is running
if ! pgrep -f "node.*dist/index.js" > /dev/null; then
    echo "Main process not found"
    exit 1
fi

# Check HTTP health endpoint if available
if [ -n "$HEALTH_CHECK_PORT" ]; then
    curl -f "http://localhost:${HEALTH_CHECK_PORT}/health" || exit 1
fi

# Check memory usage (exit if > 90% of limit)
MEMORY_USAGE=$(cat /proc/meminfo | grep MemAvailable | awk '{print $2}')
if [ "$MEMORY_USAGE" -lt 204800 ]; then  # 200MB threshold
    echo "Memory usage too high"
    exit 1
fi

echo "Health check passed"
exit 0
EOF

RUN chmod +x /app/health-check.sh

# Readiness check script
COPY --chown=mcp:nodejs <<'EOF' /app/ready-check.sh
#!/bin/sh
set -e

# Check if MCP server is ready to accept connections
if [ -f "/app/tmp/server.ready" ]; then
    echo "Server ready"
    exit 0
else
    echo "Server not ready"
    exit 1
fi
EOF

RUN chmod +x /app/ready-check.sh

# Switch to non-root user
USER mcp:nodejs

# Expose ports (default MCP port and metrics)
EXPOSE 3000 9090

# Configure volume mounts
VOLUME ["/app/logs", "/app/cache", "/app/tmp"]

# Health and readiness checks
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /app/health-check.sh

# Use tini as init system for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start the MCP server with performance monitoring
CMD ["dumb-init", "node", "--trace-warnings", "--unhandled-rejections=strict", "dist/index.js"]