# Production Docker Compose for MCP Servers
# Includes all MCP servers with production configurations

version: '3.8'

# Custom networks for service isolation
networks:
  mcp-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  mcp-backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
  mcp-data:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24

# Persistent volumes
volumes:
  mcp-data:
    driver: local
  mcp-logs:
    driver: local
  mcp-models:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local

services:
  # TypeScript MCP Servers
  mcp-typescript-api:
    build:
      context: ./mcp_servers
      dockerfile: Dockerfile.mcp-typescript
      target: runtime
    image: mcp-typescript-server:latest
    container_name: mcp-typescript-api
    restart: unless-stopped
    networks:
      - mcp-frontend
      - mcp-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MCP_DATABASE_URL=postgresql://mcp_user:${DB_PASSWORD}@postgres:5432/mcp_db
      - MCP_REDIS_URL=redis://redis:6379/0
      - MCP_JWT_SECRET=${JWT_SECRET}
      - MCP_LOG_LEVEL=info
      - MCP_RATE_LIMIT_REQUESTS=1000
      - MCP_RATE_LIMIT_WINDOW=3600
    volumes:
      - mcp-logs:/app/logs:rw
      - mcp-data:/app/data:rw
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "node", "dist/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Python Learning System
  mcp-learning-system:
    build:
      context: ./mcp_learning_system
      dockerfile: Dockerfile.learning-python
      target: runtime
    image: mcp-learning-system:latest
    container_name: mcp-learning-system
    restart: unless-stopped
    networks:
      - mcp-backend
    ports:
      - "8001:8001"
    environment:
      - PYTHONPATH=/app:/app/python_learning:/app/learning_core
      - MCP_ENV=production
      - MCP_DATABASE_URL=postgresql://mcp_user:${DB_PASSWORD}@postgres:5432/mcp_db
      - MCP_REDIS_URL=redis://redis:6379/1
      - MCP_ML_CACHE_SIZE=512
      - MCP_LEARNING_MODE=adaptive
      - OMP_NUM_THREADS=4
    volumes:
      - mcp-logs:/app/logs:rw
      - mcp-models:/app/models:rw
      - mcp-data:/app/data:rw
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=10)"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Rust High-Performance Server
  mcp-rust-server:
    build:
      context: ./mcp_learning_system/servers
      dockerfile: Dockerfile.rust-server
      target: runtime
    image: mcp-rust-server:latest
    container_name: mcp-rust-server
    restart: unless-stopped
    networks:
      - mcp-backend
    ports:
      - "8002:8002"
    environment:
      - RUST_LOG=info
      - MCP_ENV=production
      - MCP_BIND_ADDRESS=0.0.0.0:8002
      - MCP_WORKER_THREADS=4
      - MCP_MAX_CONNECTIONS=1000
      - MCP_DATABASE_URL=postgresql://mcp_user:${DB_PASSWORD}@postgres:5432/mcp_db
    volumes:
      - mcp-logs:/app/logs:rw
      - mcp-data:/app/data:rw
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "./mcp-rust-server", "--health-check"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Development Workflow Server
  mcp-devops-server:
    build:
      context: ./mcp_learning_system/servers/devops
      dockerfile: ../../Dockerfile.learning-python
      target: runtime
    image: mcp-devops-server:latest
    container_name: mcp-devops-server
    restart: unless-stopped
    networks:
      - mcp-backend
    ports:
      - "8003:8003"
    environment:
      - PYTHONPATH=/app
      - MCP_ENV=production
      - MCP_SERVER_PORT=8003
      - MCP_REDIS_URL=redis://redis:6379/2
    volumes:
      - mcp-logs:/app/logs:rw
      - mcp-data:/app/data:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8003/health', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Quality Assurance Server
  mcp-quality-server:
    build:
      context: ./mcp_learning_system/servers/quality
      dockerfile: ../../Dockerfile.learning-python
      target: runtime
    image: mcp-quality-server:latest
    container_name: mcp-quality-server
    restart: unless-stopped
    networks:
      - mcp-backend
    ports:
      - "8004:8004"
    environment:
      - PYTHONPATH=/app
      - MCP_ENV=production
      - MCP_SERVER_PORT=8004
      - MCP_REDIS_URL=redis://redis:6379/3
    volumes:
      - mcp-logs:/app/logs:rw
      - mcp-data:/app/data:rw
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8004/health', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: unless-stopped
    networks:
      - mcp-data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data:rw
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    restart: unless-stopped
    networks:
      - mcp-data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mcp_db
      - POSTGRES_USER=mcp_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_db"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: unless-stopped
    networks:
      - mcp-backend
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yaml:/etc/prometheus/alert_rules.yaml:ro
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: unless-stopped
    networks:
      - mcp-backend
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Load Balancer / API Gateway
  nginx:
    image: nginx:1.25-alpine
    container_name: mcp-nginx
    restart: unless-stopped
    networks:
      - mcp-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - mcp-logs:/var/log/nginx:rw
    depends_on:
      - mcp-typescript-api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'