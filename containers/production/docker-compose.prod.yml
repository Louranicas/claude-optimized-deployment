# Production Docker Compose
# Optimized for high-performance production deployment
version: '3.8'

services:
  # Rust microservice
  rust-service:
    build:
      context: ../..
      dockerfile: containers/production/Dockerfile.rust-service
      args:
        RUST_VERSION: 1.75
        DEBIAN_VERSION: bullseye-slim
    container_name: claude-rust-prod
    user: "1000:1000"
    read_only: true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /app/tmp:noexec,nosuid,size=100m
    environment:
      - RUST_LOG=warn
      - RUST_BACKTRACE=0
    volumes:
      - type: bind
        source: ./logs
        target: /app/logs
        read_only: false
      - type: bind
        source: ./data
        target: /app/data
        read_only: false
    ports:
      - "127.0.0.1:8001:8000"
    networks:
      - internal
      - web
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '4.0'
        reservations:
          memory: 512M
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 30s
    healthcheck:
      test: ["/app/bin/claude-optimized-deployment", "--health-check"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Python API service
  python-api:
    build:
      context: ../..
      dockerfile: containers/production/Dockerfile.python-api
      args:
        PYTHON_VERSION: 3.11
        DEBIAN_VERSION: bullseye-slim
    container_name: claude-api-prod
    user: "1000:1000"
    read_only: true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /app/tmp:noexec,nosuid,size=100m
    environment:
      - PYTHONOPTIMIZE=2
      - PYTHONHASHSEED=random
      - DATABASE_URL=postgresql://claude_prod:${DB_PASSWORD}@postgres:5432/claude_prod
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    volumes:
      - type: bind
        source: ./logs
        target: /app/logs
        read_only: false
      - type: bind
        source: ./data
        target: /app/data
        read_only: false
    ports:
      - "127.0.0.1:8002:8000"
    networks:
      - internal
      - web
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 3
      resources:
        limits:
          memory: 4G
          cpus: '6.0'
        reservations:
          memory: 1G
          cpus: '2.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 30s
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Production PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: claude-postgres-prod
    user: "999:999"
    read_only: true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /run/postgresql:noexec,nosuid,size=100m
    environment:
      - POSTGRES_DB=claude_prod
      - POSTGRES_USER=claude_prod
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    ports:
      - "127.0.0.1:5433:5432"
    networks:
      - internal
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U claude_prod -d claude_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Production Redis
  redis:
    image: redis:7-alpine
    container_name: claude-redis-prod
    user: "999:999"
    read_only: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    command: >
      redis-server
      --appendonly yes
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
    volumes:
      - redis_prod_data:/data
    ports:
      - "127.0.0.1:6380:6379"
    networks:
      - internal
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # NGINX reverse proxy and load balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: claude-nginx-prod
    user: "101:101"
    read_only: true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=100m
      - /tmp:noexec,nosuid,size=100m
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - web
    depends_on:
      - python-api
      - rust-service
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 256M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Production monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-prometheus-prod
    user: "65534:65534"
    read_only: true
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=20GB'
      - '--web.enable-lifecycle'
    volumes:
      - ../../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - internal
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

networks:
  web:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
  internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.19.0.0/16

volumes:
  postgres_prod_data:
  redis_prod_data:
  prometheus_prod_data:
  nginx_logs: