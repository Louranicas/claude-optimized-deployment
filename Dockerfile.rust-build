# Multi-stage Dockerfile for optimized Rust builds
# Optimized for production deployment with maximum performance

FROM rust:1.75-bookworm as chef

# Create non-root user
RUN groupadd -r synthex && useradd -r -g synthex synthex

RUN cargo install cargo-chef
WORKDIR /app

# Prepare build plan
FROM chef AS planner

# Create non-root user
RUN groupadd -r synthex && useradd -r -g synthex synthex

COPY . .
RUN cargo chef prepare --recipe-path recipe.json

# Build dependencies (cached layer)
FROM chef AS builder

# Create non-root user
RUN groupadd -r synthex && useradd -r -g synthex synthex

COPY --from=planner /app/recipe.json recipe.json

# Install system dependencies for optimized builds
RUN apt-get update && apt-get install -y \
    clang \
    lld \
    pkg-config \
    libssl-dev \
    python3-dev \
    python3-pip \
    sccache \
    && rm -rf /var/lib/apt/lists/*

# Setup build environment for AMD Ryzen optimization
ENV RUSTFLAGS="-C target-cpu=znver4 -C target-feature=+avx2,+fma,+f16c,+sse4.2,+aes,+pclmul,+sha,+rdrnd,+adx -C link-arg=-fuse-ld=lld"
ENV CARGO_BUILD_JOBS=16
ENV RUSTC_WRAPPER=sccache
ENV SCCACHE_DIR=/app/.sccache

# Build dependencies
RUN cargo chef cook --release --recipe-path recipe.json

# Build application
COPY . .
RUN cargo build --release --all-features

# Runtime stage
FROM debian:bookworm-slim AS runtime

# Create non-root user
RUN groupadd -r synthex && useradd -r -g synthex synthex


# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    python3 \
    python3-pip \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy built artifacts
COPY --from=builder /app/target/release/ ./bin/
COPY --from=builder /app/target/release/*.so ./lib/

# Set up Python path for FFI bindings
ENV PYTHONPATH=/app/lib:$PYTHONPATH
ENV LD_LIBRARY_PATH=/app/lib:$LD_LIBRARY_PATH

# Runtime configuration
EXPOSE 8080
USER synthex
CMD ["./bin/main"]