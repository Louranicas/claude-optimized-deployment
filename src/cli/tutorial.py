"""
Interactive tutorial and onboarding system.

Features:
- Step-by-step guided tutorials
- Interactive learning modules
- Progress tracking
- Contextual help
"""

import time
from typing import Dict, Any, List, Optional
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn
from rich.text import Text
from rich.tree import Tree
from rich.table import Table

from src.cli.utils import format_success, format_error, format_warning, format_info

console = Console()


class TutorialStep:
    """Represents a single tutorial step."""
    
    def __init__(self, title: str, description: str, content: str, 
                 action: Optional[str] = None, validation: Optional[callable] = None):
        self.title = title
        self.description = description
        self.content = content
        self.action = action  # Command to execute
        self.validation = validation  # Function to validate completion
        self.completed = False


class Tutorial:
    """Interactive tutorial with progress tracking."""
    
    def __init__(self, name: str, description: str, steps: List[TutorialStep]):
        self.name = name
        self.description = description
        self.steps = steps
        self.current_step = 0
        self.started = False
        self.completed = False
        
    def start(self):
        """Start the tutorial."""
        self.started = True
        console.print(Panel(
            f"[bold]{self.name}[/bold]\n\n{self.description}\n\n" +
            f"This tutorial has {len(self.steps)} steps.\n" +
            "You can type 'skip' to skip a step or 'quit' to exit.",
            title="🎓 Tutorial",
            border_style="green"
        ))
        
        while self.current_step < len(self.steps):
            if not self._execute_step(self.steps[self.current_step]):
                break
            self.current_step += 1
            
        if self.current_step >= len(self.steps):
            self._complete_tutorial()
            
    def _execute_step(self, step: TutorialStep) -> bool:
        """Execute a single tutorial step."""
        console.print(f"\n[bold]Step {self.current_step + 1}/{len(self.steps)}: {step.title}[/bold]")\n        console.print(f"{step.description}
")
        
        # Show step content
        console.print(Panel(step.content, border_style="blue"))
        
        # If there's an action, show it
        if step.action:
            console.print(f"\n💡 [bold]Try this command:[/bold] [cyan]{step.action}[/cyan]")\n\n        # Wait for user to complete the step\n        while True:\n            response = Prompt.ask(\n                "\nReady to continue?",\n                choices=["yes", "y", "skip", "help", "quit"],\n                default="yes"\n            )\n\n            if response in ["quit"]:\n                console.print(format_warning("Tutorial cancelled"))\n                return False\n            elif response == "skip":\n                console.print(format_info("Step skipped"))\n                break\n            elif response == "help":\n                self._show_step_help(step)\n                continue\n            else:\n                # Validate completion if validation function provided\n                if step.validation and not step.validation():\n                    console.print(format_warning("Step not completed correctly. Try again or type 'skip'."))\n                    continue\n                else:\n                    step.completed = True\n                    console.print(format_success("✅ Step completed!"))\n                    break\n\n        return True\n\n    def _show_step_help(self, step: TutorialStep):\n        """Show contextual help for current step."""\n        help_content = f"""\n[bold]Help for: {step.title}[/bold]\n\n{step.description}\n\nCommands:\n• yes/y - Mark step as complete and continue\n• skip - Skip this step\n• help - Show this help\n• quit - Exit tutorial\n\n"""\n        if step.action:\n            help_content += f"Suggested command: [cyan]{step.action}[/cyan]\n"\n\n        console.print(Panel(help_content, title="Help", border_style="yellow"))\n\n    def _complete_tutorial(self):\n        """Complete the tutorial."""\n        self.completed = True\n        completed_steps = sum(1 for step in self.steps if step.completed)\n\n        console.print(Panel(\n            f"[bold green]🎉 Tutorial Complete![/bold green]\n\n" +\n            f"You completed {completed_steps}/{len(self.steps)} steps.\n\n" +\n            "Great job! You're now ready to use Claude Deploy effectively.\n" +\n            "Run 'claude-deploy help' anytime for reference.",\n            title="Congratulations!",\n            border_style="green"\n        ))\n\n        # Show next steps\n        self._show_next_steps()\n\n    def _show_next_steps(self):\n        """Show recommended next steps."""\n        console.print("\n[bold]🚀 What's Next?[/bold]")\n\n        next_steps = [\n            "Explore available commands: claude-deploy help",\n            "Initialize a new project: claude-deploy init",\n            "Ask AI experts for guidance: claude-deploy expert ask",\n            "Check system status: claude-deploy diagnose",\n            "Visit documentation: https://docs.claude-deploy.ai"\n        ]\n\n        for i, step in enumerate(next_steps, 1):\n            console.print(f"{i}. {step}")\n\n\nclass TutorialManager:\n    """Manages multiple tutorials and tracks progress."""\n\n    def __init__(self):\n        self.tutorials = self._initialize_tutorials()\n        self.completed_tutorials = set()\n\n    def list_tutorials(self):\n        """List available tutorials."""\n        table = Table(title="Available Tutorials")\n        table.add_column("Name", style="cyan")\n        table.add_column("Description", style="white")\n        table.add_column("Steps", style="yellow")\n        table.add_column("Status", style="green")\n\n        for name, tutorial in self.tutorials.items():\n            status = "✅ Completed" if name in self.completed_tutorials else "📚 Available"\n            table.add_row(\n                tutorial.name,\n                tutorial.description[:50] + "..." if len(tutorial.description) > 50 else tutorial.description,\n                str(len(tutorial.steps)),\n                status\n            )\n\n        console.print(table)\n\n    def start_tutorial(self, tutorial_name: str):\n        """Start a specific tutorial."""\n        if tutorial_name not in self.tutorials:\n            console.print(format_error(f"Tutorial not found: {tutorial_name}"))\n            self.list_tutorials()\n            return\n\n        tutorial = self.tutorials[tutorial_name]\n        tutorial.start()\n\n        if tutorial.completed:\n            self.completed_tutorials.add(tutorial_name)\n\n    def _initialize_tutorials(self) -> Dict[str, Tutorial]:\n        """Initialize available tutorials."""\n        tutorials = {}\n\n        # Getting Started Tutorial\n        tutorials["getting-started"] = Tutorial(\n            name="Getting Started with Claude Deploy",\n            description="Learn the basics of Claude Deploy and set up your first deployment",\n            steps=[\n                TutorialStep(\n                    title="Welcome to Claude Deploy",\n                    description="Let's start with the basics and understand what Claude Deploy can do for you.",\n                    content="""\nClaude Deploy is an AI-powered deployment orchestration tool that makes it easy to:\n\n• Deploy applications with intelligent automation\n• Get expert advice from AI systems\n• Manage complex deployments with confidence\n• Monitor and optimize your infrastructure\n\nThe tool uses a "Circle of Experts" approach, consulting multiple AI systems\nto provide you with the best possible guidance and automation.\n"""\n                ),\n                TutorialStep(\n                    title="Check System Status",\n                    description="Let's verify that your system is ready for deployment.",\n                    content="""\nBefore we start deploying, it's good practice to check that all systems\nare functioning correctly. The diagnose command will check:\n\n• Configuration validity\n• Network connectivity\n• Available resources\n• MCP server health\n• Expert system availability\n\nThis helps identify potential issues before they cause deployment problems.\n""",\n                    action="claude-deploy diagnose"\n                ),\n                TutorialStep(\n                    title="Initialize a New Project",\n                    description="Create a new deployment project with smart defaults.",\n                    content="""\nThe init command creates a new project structure with:\n\n• Configuration templates\n• Example deployment files\n• Best practices documentation\n• Environment-specific settings\n\nYou can choose from different project templates:\n- basic: Simple single-service deployment\n- microservices: Multi-service architecture\n- ml-pipeline: Machine learning workflows\n- web-app: Full-stack web applications\n""",\n                    action="claude-deploy init --template basic --name tutorial-project"\n                ),\n                TutorialStep(\n                    title="Validate Your Configuration",\n                    description="Learn how to validate deployment configurations.",\n                    content="""\nConfiguration validation is crucial for successful deployments. It checks:\n\n• YAML/JSON syntax correctness\n• Required field completeness\n• Value constraint compliance\n• Security best practices\n\nThe validate command can auto-detect configuration files in your\ncurrent directory, or you can specify a specific file to validate.\n""",\n                    action="claude-deploy config validate"\n                ),\n                TutorialStep(\n                    title="Ask the AI Experts",\n                    description="Learn how to get intelligent guidance from AI experts.",\n                    content="""\nOne of Claude Deploy's unique features is the ability to consult\nAI experts for guidance. You can ask questions about:\n\n• Deployment strategies and best practices\n• Troubleshooting and problem resolution\n• Performance optimization techniques\n• Security recommendations\n\nThe system will consult multiple AI providers and provide you with\nconsensus recommendations based on their collective expertise.\n""",\n                    action="claude-deploy expert ask 'What are the best practices for production deployments?'"\n                )\n            ]\n        )\n\n        # Advanced Deployment Tutorial\n        tutorials["advanced-deployment"] = Tutorial(\n            name="Advanced Deployment Strategies",\n            description="Master advanced deployment patterns like blue-green, canary, and rolling updates",\n            steps=[\n                TutorialStep(\n                    title="Understanding Deployment Strategies",\n                    description="Learn about different deployment strategies and when to use them.",\n                    content="""\nClaude Deploy supports several deployment strategies:\n\n• Rolling Update: Gradually replace instances (default, minimal downtime)\n• Blue-Green: Deploy to parallel environment, then switch (zero downtime)\n• Canary: Deploy to subset of instances first (risk mitigation)\n• Recreate: Stop all, then deploy new (fastest, but has downtime)\n\nThe choice depends on your requirements for:\n- Downtime tolerance\n- Resource availability\n- Risk tolerance\n- Rollback needs\n"""\n                ),\n                TutorialStep(\n                    title="Configuring Blue-Green Deployment",\n                    description="Set up a blue-green deployment for zero-downtime updates.",\n                    content="""\nBlue-green deployment maintains two identical production environments.\nOnly one serves live traffic while the other is updated.\n\nKey configuration options:\n- Load balancer setup\n- Health check endpoints\n- Automated traffic switching\n- Rollback triggers\n\nThis strategy provides the safest zero-downtime deployments but\nrequires double the infrastructure resources.\n""",\n                    action="claude-deploy deploy --strategy blue-green --dry-run"\n                ),\n                TutorialStep(\n                    title="Implementing Canary Releases",\n                    description="Learn how to safely test deployments with canary releases.",\n                    content="""\nCanary releases deploy new versions to a small subset of users first.\nThis allows you to:\n\n- Test in production with real traffic\n- Monitor for issues before full rollout\n- Gradually increase traffic to new version\n- Quickly rollback if problems occur\n\nConfigure canary percentage, success metrics, and promotion rules\nto automate the canary promotion process.\n""",\n                    action="claude-deploy deploy --strategy canary --canary-percent 10"\n                )\n            ]\n        )\n\n        # Troubleshooting Tutorial\n        tutorials["troubleshooting"] = Tutorial(\n            name="Troubleshooting Deployment Issues",\n            description="Learn how to diagnose and fix common deployment problems",\n            steps=[\n                TutorialStep(\n                    title="Using the Diagnostic Tools",\n                    description="Master the built-in diagnostic and debugging tools.",\n                    content="""\nClaude Deploy provides comprehensive diagnostic tools:\n\n• System health checks\n• Resource utilization monitoring\n• Network connectivity tests\n• Configuration validation\n• Log analysis and aggregation\n\nThe diagnose command can perform deep analysis and suggest\nspecific fixes for detected issues.\n""",\n                    action="claude-deploy diagnose --deep"\n                ),\n                TutorialStep(\n                    title="Reading Deployment Logs",\n                    description="Learn how to effectively read and analyze deployment logs.",\n                    content="""\nLogs are your primary tool for understanding deployment issues:\n\n• Deployment phase logs show progress and errors\n• Application logs reveal runtime issues\n• Infrastructure logs show resource problems\n• Audit logs track configuration changes\n\nUse filtering, search, and correlation features to quickly\nidentify the root cause of issues.\n""",\n                    action="claude-deploy logs --follow --level error"\n                ),\n                TutorialStep(\n                    title="AI-Powered Error Recovery",\n                    description="Use AI experts to get intelligent troubleshooting guidance.",\n                    content="""\nWhen you encounter errors, Claude Deploy can:\n\n• Automatically suggest recovery actions\n• Consult AI experts for guidance\n• Provide context-aware solutions\n• Learn from successful fixes\n\nThe error recovery system builds knowledge over time,\nbecoming more effective at solving problems.\n""",\n                    action="claude-deploy expert ask 'How do I fix connection timeout errors?'"\n                )\n            ]\n        )\n\n        return tutorials\n\n\ndef show_tutorial_menu():\n    """Show the tutorial selection menu."""\n    manager = TutorialManager()\n\n    console.print(Panel(\n        "[bold]🎓 Claude Deploy Tutorials[/bold]\n\n" +\n        "Interactive tutorials to help you master Claude Deploy.\n" +\n        "Each tutorial provides hands-on experience with key features.",\n        title="Learning Center",\n        border_style="blue"\n    ))\n\n    while True:\n        console.print("\n[bold]Available Actions:[/bold]")\n        console.print("1. List all tutorials")\n        console.print("2. Start a tutorial")\n        console.print("3. Tutorial progress")\n        console.print("4. Exit")\n\n        choice = Prompt.ask("Select an option", choices=["1", "2", "3", "4"])\n\n        if choice == "1":\n            manager.list_tutorials()\n        elif choice == "2":\n            tutorial_name = Prompt.ask(\n                "Enter tutorial name",\n                choices=list(manager.tutorials.keys()) + ["cancel"]\n            )\n            if tutorial_name != "cancel":\n                manager.start_tutorial(tutorial_name)\n        elif choice == "3":\n            show_tutorial_progress(manager)\n        else:\n            break\n\n    console.print(format_success("👋 Thanks for learning with Claude Deploy!"))\n\n\ndef show_tutorial_progress(manager: TutorialManager):\n    """Show tutorial completion progress."""\n    total_tutorials = len(manager.tutorials)\n    completed_tutorials = len(manager.completed_tutorials)\n\n    console.print(f"\n[bold]📊 Your Progress[/bold]")\n    console.print(f"Completed: {completed_tutorials}/{total_tutorials} tutorials")\n\n    if completed_tutorials > 0:\n        console.print("\n[bold green]✅ Completed Tutorials:[/bold green]")\n        for name in manager.completed_tutorials:\n            tutorial = manager.tutorials[name]\n            console.print(f"  • {tutorial.name}")\n\n    remaining = set(manager.tutorials.keys()) - manager.completed_tutorials\n    if remaining:\n        console.print("\n[bold yellow]📚 Available Tutorials:[/bold yellow]")\n        for name in remaining:\n            tutorial = manager.tutorials[name]\n            console.print(f"  • {tutorial.name}")\n\n    # Show achievement badges\n    show_achievement_badges(completed_tutorials, total_tutorials)\n\n\ndef show_achievement_badges(completed: int, total: int):\n    """Show achievement badges based on progress."""\n    console.print("\n[bold]🏆 Achievements:[/bold]")\n\n    badges = []\n\n    if completed >= 1:\n        badges.append("🎯 First Steps - Completed your first tutorial")\n    if completed >= total // 2:\n        badges.append("📚 Scholar - Completed half of all tutorials")\n    if completed >= total:\n        badges.append("🎓 Expert - Completed all tutorials")\n        badges.append("🌟 Claude Deploy Master - You know it all!")\n\n    if not badges:\n        badges.append("🌱 Beginner - Start your first tutorial to earn badges!")\n\n    for badge in badges:\n        console.print(f"  {badge}")\n\n\ndef run_quick_start():\n    """Run a quick start tutorial for new users."""\n    console.print(Panel(\n        "[bold]🚀 Quick Start Guide[/bold]\n\n" +\n        "Let's get you up and running with Claude Deploy in just a few minutes!",\n        title="Quick Start",\n        border_style="green"\n    ))\n\n    steps = [\n        "Checking system requirements...",\n        "Configuring default settings...",\n        "Testing AI expert connectivity...",\n        "Setting up project templates...",\n        "Validating installation..."\n    ]\n\n    with Progress(\n        SpinnerColumn(),\n        TextColumn("[progress.description]{task.description}"),\n        BarColumn(),\n        console=console\n    ) as progress:\n        task = progress.add_task("Setting up...", total=len(steps))\n\n        for step in steps:\n            progress.update(task, description=step)\n            time.sleep(1)  # Simulate setup work\n            progress.advance(task)\n\n    console.print(format_success("✅ Quick start setup complete!"))\n\n    console.print("\n[bold]🎯 Next Steps:[/bold]")\n    console.print("1. Try: claude-deploy init")\n    console.print("2. Ask experts: claude-deploy expert ask 'Getting started tips'")\n    console.print("3. Run tutorials: claude-deploy tutorial")\n    console.print("4. Get help anytime: claude-deploy help")\n\n    if Confirm.ask("\nWould you like to start the full getting-started tutorial?"):\n        manager = TutorialManager()\n        manager.start_tutorial("getting-started")\n\n\nif __name__ == "__main__":\n    show_tutorial_menu()